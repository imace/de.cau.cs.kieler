/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package edu.unikiel.informatik.aiw.generated.epc.provider;

import edu.unikiel.informatik.aiw.generated.epc.util.EpcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EpcItemProviderAdapterFactory extends EpcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EpcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.EPC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPCItemProvider epcItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.EPC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEPCAdapter() {
		if (epcItemProvider == null) {
			epcItemProvider = new EPCItemProvider(this);
		}

		return epcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.TriggersEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggersEventItemProvider triggersEventItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.TriggersEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTriggersEventAdapter() {
		if (triggersEventItemProvider == null) {
			triggersEventItemProvider = new TriggersEventItemProvider(this);
		}

		return triggersEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.XOR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XORItemProvider xorItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.XOR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createXORAdapter() {
		if (xorItemProvider == null) {
			xorItemProvider = new XORItemProvider(this);
		}

		return xorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.OR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.OR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createORAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new ORItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.AND} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDItemProvider andItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.AND}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createANDAdapter() {
		if (andItemProvider == null) {
			andItemProvider = new ANDItemProvider(this);
		}

		return andItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.Information} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationItemProvider informationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.Information}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInformationAdapter() {
		if (informationItemProvider == null) {
			informationItemProvider = new InformationItemProvider(this);
		}

		return informationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.ActivatesFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivatesFunctionItemProvider activatesFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.ActivatesFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createActivatesFunctionAdapter() {
		if (activatesFunctionItemProvider == null) {
			activatesFunctionItemProvider = new ActivatesFunctionItemProvider(this);
		}

		return activatesFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.ProvidesDataTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidesDataToItemProvider providesDataToItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.ProvidesDataTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProvidesDataToAdapter() {
		if (providesDataToItemProvider == null) {
			providesDataToItemProvider = new ProvidesDataToItemProvider(this);
		}

		return providesDataToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.WritesDataTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WritesDataToItemProvider writesDataToItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.WritesDataTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createWritesDataToAdapter() {
		if (writesDataToItemProvider == null) {
			writesDataToItemProvider = new WritesDataToItemProvider(this);
		}

		return writesDataToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.FunctionToOperatorConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionToOperatorConnectionItemProvider functionToOperatorConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.FunctionToOperatorConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFunctionToOperatorConnectionAdapter() {
		if (functionToOperatorConnectionItemProvider == null) {
			functionToOperatorConnectionItemProvider = new FunctionToOperatorConnectionItemProvider(this);
		}

		return functionToOperatorConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.EventToOperatorConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventToOperatorConnectionItemProvider eventToOperatorConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.EventToOperatorConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEventToOperatorConnectionAdapter() {
		if (eventToOperatorConnectionItemProvider == null) {
			eventToOperatorConnectionItemProvider = new EventToOperatorConnectionItemProvider(this);
		}

		return eventToOperatorConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.OperatorToFunctionConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorToFunctionConnectionItemProvider operatorToFunctionConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.OperatorToFunctionConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOperatorToFunctionConnectionAdapter() {
		if (operatorToFunctionConnectionItemProvider == null) {
			operatorToFunctionConnectionItemProvider = new OperatorToFunctionConnectionItemProvider(this);
		}

		return operatorToFunctionConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.OperatorToEventConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorToEventConnectionItemProvider operatorToEventConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.OperatorToEventConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOperatorToEventConnectionAdapter() {
		if (operatorToEventConnectionItemProvider == null) {
			operatorToEventConnectionItemProvider = new OperatorToEventConnectionItemProvider(this);
		}

		return operatorToEventConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.GCTLconnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GCTLconnectorItemProvider gctLconnectorItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.GCTLconnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createGCTLconnectorAdapter() {
		if (gctLconnectorItemProvider == null) {
			gctLconnectorItemProvider = new GCTLconnectorItemProvider(this);
		}

		return gctLconnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.Implication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationItemProvider implicationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.Implication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImplicationAdapter() {
		if (implicationItemProvider == null) {
			implicationItemProvider = new ImplicationItemProvider(this);
		}

		return implicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.unikiel.informatik.aiw.generated.epc.Equivalence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquivalenceItemProvider equivalenceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.unikiel.informatik.aiw.generated.epc.Equivalence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEquivalenceAdapter() {
		if (equivalenceItemProvider == null) {
			equivalenceItemProvider = new EquivalenceItemProvider(this);
		}

		return equivalenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (epcItemProvider != null) epcItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (triggersEventItemProvider != null) triggersEventItemProvider.dispose();
		if (xorItemProvider != null) xorItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (andItemProvider != null) andItemProvider.dispose();
		if (informationItemProvider != null) informationItemProvider.dispose();
		if (activatesFunctionItemProvider != null) activatesFunctionItemProvider.dispose();
		if (providesDataToItemProvider != null) providesDataToItemProvider.dispose();
		if (writesDataToItemProvider != null) writesDataToItemProvider.dispose();
		if (functionToOperatorConnectionItemProvider != null) functionToOperatorConnectionItemProvider.dispose();
		if (eventToOperatorConnectionItemProvider != null) eventToOperatorConnectionItemProvider.dispose();
		if (operatorToFunctionConnectionItemProvider != null) operatorToFunctionConnectionItemProvider.dispose();
		if (operatorToEventConnectionItemProvider != null) operatorToEventConnectionItemProvider.dispose();
		if (gctLconnectorItemProvider != null) gctLconnectorItemProvider.dispose();
		if (implicationItemProvider != null) implicationItemProvider.dispose();
		if (equivalenceItemProvider != null) equivalenceItemProvider.dispose();
	}

}
