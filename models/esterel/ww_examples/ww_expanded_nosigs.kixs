<?xml version="1.0" encoding="UTF-8"?>
<synccharts:Region xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:kexpressions="http://kieler.cs.cau.de/kexpressions/0.1.2" xmlns:synccharts="http://kieler.cs.cau.de/synccharts/0.2.4">
  <states id="WRISTWATCH" label="WRISTWATCH">
    <signals xsi:type="kexpressions:ISignal" name="UL" isInput="true"/>
    <signals xsi:type="kexpressions:ISignal" name="UR" isInput="true"/>
    <signals xsi:type="kexpressions:ISignal" name="LL" isInput="true"/>
    <signals xsi:type="kexpressions:ISignal" name="LR" isInput="true"/>
    <signals xsi:type="kexpressions:ISignal" name="HS" isInput="true"/>
    <signals xsi:type="kexpressions:ISignal" name="S" isInput="true"/>
    <regions id="">
      <states id="_" type="TEXTUAL" isInitial="true" isFinal="true">
        <bodyReference href="ww_expanded_nosigs.strl#//@modules.0/@body/@statements.0/@statement"/>
        <bodyText code="loop&#xA;        emit WATCH_MODE_COMMAND;&#xA;        trap WATCH_AND_SET_WATCH_MODE in&#xA;          loop&#xA;            do&#xA;              [&#xA;                await LL do&#xA;                  exit WATCH_AND_SET_WATCH_MODE&#xA;                end await&#xA;              ||&#xA;                every LR do&#xA;                  emit TOGGLE_24H_MODE_COMMAND&#xA;                end every&#xA;              ]&#xA;            upto UL;&#xA;            emit ENTER_SET_WATCH_MODE_COMMAND;&#xA;            do&#xA;              [&#xA;                every LL do&#xA;                  emit NEXT_WATCH_TIME_POSITION_COMMAND&#xA;                end every&#xA;              ||&#xA;                every LR do&#xA;                  emit SET_WATCH_COMMAND&#xA;                end every&#xA;              ]&#xA;            upto UL;&#xA;            emit EXIT_SET_WATCH_MODE_COMMAND&#xA;          end loop&#xA;        end trap;&#xA;        emit STOPWATCH_MODE_COMMAND;&#xA;        do&#xA;          [&#xA;            every LR do&#xA;              emit START_STOP_COMMAND&#xA;            end every&#xA;          ||&#xA;            every UR do&#xA;              emit LAP_COMMAND&#xA;            end every&#xA;          ]&#xA;        upto LL;&#xA;        trap ALARM_AND_SET_ALARM_MODE in&#xA;          emit ALARM_MODE_COMMAND;&#xA;          loop&#xA;            do&#xA;              [&#xA;                await LL do&#xA;                  exit ALARM_AND_SET_ALARM_MODE&#xA;                end await&#xA;              ||&#xA;                every LR do&#xA;                  emit TOGGLE_CHIME_COMMAND&#xA;                end every&#xA;              ||&#xA;                every UR do&#xA;                  emit TOGGLE_ALARM_COMMAND&#xA;                end every&#xA;              ]&#xA;            upto UL;&#xA;            emit ENTER_SET_ALARM_MODE_COMMAND;&#xA;            do&#xA;              [&#xA;                every LL do&#xA;                  emit NEXT_ALARM_TIME_POSITION_COMMAND&#xA;                end every&#xA;              ||&#xA;                every LR do&#xA;                  emit SET_ALARM_COMMAND&#xA;                end every&#xA;              ]&#xA;            upto UL;&#xA;            emit EXIT_SET_ALARM_MODE_COMMAND&#xA;          end loop&#xA;        end trap&#xA;      end loop&#xA;    ||&#xA;      every UR do&#xA;        emit STOP_ALARM_BEEP_COMMAND&#xA;      end every&#xA;  ||&#xA;    var WATCH_TIME := INITIAL_WATCH_TIME : WATCH_TIME_TYPE,&#xA;        CHIME_STATUS := false : boolean in&#xA;      emit WATCH_TIME(WATCH_TIME);  &#xA;      emit CHIME_STATUS(CHIME_STATUS);&#xA;      loop&#xA;        do&#xA;          loop&#xA;            await &#xA;              case S do&#xA;                emit WATCH_TIME(WATCH_TIME);&#xA;                emit BEEP&#xA;              case TOGGLE_24H_MODE_COMMAND do&#xA;                emit WATCH_TIME(WATCH_TIME)&#xA;              case TOGGLE_CHIME_COMMAND do&#xA;                CHIME_STATUS := not CHIME_STATUS;&#xA;                emit CHIME_STATUS(CHIME_STATUS)&#xA;            end await&#xA;          end loop &#xA;        upto ENTER_SET_WATCH_MODE_COMMAND;&#xA;        var WATCH_TIME_POSITION : WATCH_TIME_POSITION in&#xA;          do&#xA;            WATCH_TIME_POSITION := INITIAL_WATCH_TIME_POSITION;&#xA;            emit WATCH_START_ENHANCING(WATCH_TIME_POSITION);&#xA;            loop&#xA;              await &#xA;                case S do &#xA;                  emit WATCH_TIME(WATCH_TIME);&#xA;                  emit WATCH_BEING_SET&#xA;                case SET_WATCH_COMMAND do&#xA;                  emit WATCH_TIME(WATCH_TIME);&#xA;                  emit WATCH_BEING_SET &#xA;                case NEXT_WATCH_TIME_POSITION_COMMAND do&#xA;                  emit WATCH_STOP_ENHANCING(WATCH_TIME_POSITION);&#xA;                  WATCH_TIME_POSITION := NEXT_WATCH_TIME_POSITION(WATCH_TIME_POSITION);&#xA;                  emit WATCH_START_ENHANCING(WATCH_TIME_POSITION)&#xA;              end await&#xA;            end loop&#xA;          upto EXIT_SET_WATCH_MODE_COMMAND;&#xA;          emit WATCH_STOP_ENHANCING(WATCH_TIME_POSITION)&#xA;        end var&#xA;      end loop&#xA;    end var&#xA;  ||&#xA;    signal RESET_STOPWATCH_COMMAND,&#xA;           BASIC_STOPWATCH_TIME : STOPWATCH_TIME_TYPE in&#xA;        loop&#xA;            var STOPWATCH_TIME := ZERO_STOPWATCH_TIME : STOPWATCH_TIME_TYPE in&#xA;              loop&#xA;                emit STOPWATCH_RUN_STATUS(false);&#xA;                emit BASIC_STOPWATCH_TIME(STOPWATCH_TIME);&#xA;                await START_STOP_COMMAND;&#xA;                emit STOPWATCH_RUN_STATUS(true);&#xA;                emit BEEP;&#xA;                do&#xA;                  every HS do&#xA;                    emit BASIC_STOPWATCH_TIME(STOPWATCH_TIME);&#xA;                    emit BEEP&#xA;                  end every&#xA;                upto START_STOP_COMMAND;&#xA;                emit BEEP&#xA;              end loop&#xA;            end var&#xA;          ||&#xA;            loop&#xA;              emit STOPWATCH_LAP_STATUS(false);&#xA;              do&#xA;                loop&#xA;                  emit STOPWATCH_TIME(?BASIC_STOPWATCH_TIME)&#xA;                each BASIC_STOPWATCH_TIME&#xA;              upto LAP_COMMAND;&#xA;              emit STOPWATCH_LAP_STATUS(true);&#xA;              await LAP_COMMAND&#xA;            end loop&#xA;        each RESET_STOPWATCH_COMMAND&#xA;      ||&#xA;        loop&#xA;          trap RESET in&#xA;            signal STOPWATCH_STOPPED in&#xA;              [&#xA;                loop&#xA;                  do&#xA;                    sustain STOPWATCH_STOPPED&#xA;                  upto START_STOP_COMMAND;&#xA;                  await START_STOP_COMMAND&#xA;                end loop&#xA;              ||&#xA;                loop&#xA;                  await LAP_COMMAND do&#xA;                    present STOPWATCH_STOPPED then&#xA;                      exit RESET&#xA;                    end present&#xA;                  end await;&#xA;                  await LAP_COMMAND&#xA;                end loop&#xA;              ]&#xA;            end signal&#xA;          end trap;&#xA;          emit RESET_STOPWATCH_COMMAND&#xA;        end loop&#xA;    end signal&#xA;  ||&#xA;    signal START_BEEPING in&#xA;        var ALARM_TIME := INITIAL_ALARM_TIME : ALARM_TIME_TYPE,&#xA;            ALARM_STATUS := false : boolean in&#xA;          emit ALARM_TIME(ALARM_TIME);&#xA;          emit ALARM_STATUS(ALARM_STATUS);&#xA;          loop&#xA;            do&#xA;              loop&#xA;                await &#xA;                  case TOGGLE_24H_MODE_COMMAND do&#xA;                    emit ALARM_TIME(ALARM_TIME)&#xA;                  case TOGGLE_ALARM_COMMAND do&#xA;                    ALARM_STATUS := not ALARM_STATUS;&#xA;                    emit ALARM_STATUS(ALARM_STATUS)&#xA;                  case WATCH_TIME do&#xA;                    present WATCH_BEING_SET else&#xA;                    nothing&#xA;                     &#xA;                    end present&#xA;                end await&#xA;              end loop&#xA;            upto ENTER_SET_ALARM_MODE_COMMAND;&#xA;            var ALARM_TIME_POSITION : ALARM_TIME_POSITION in&#xA;              do&#xA;                ALARM_TIME_POSITION := INITIAL_ALARM_TIME_POSITION;&#xA;                emit ALARM_START_ENHANCING(ALARM_TIME_POSITION);&#xA;                loop&#xA;                  await   &#xA;                    case SET_ALARM_COMMAND do   &#xA;                      emit ALARM_TIME(ALARM_TIME)&#xA;                    case NEXT_ALARM_TIME_POSITION_COMMAND do&#xA;                      emit ALARM_STOP_ENHANCING(ALARM_TIME_POSITION);&#xA;                      ALARM_TIME_POSITION := NEXT_ALARM_TIME_POSITION(ALARM_TIME_POSITION);&#xA;                      emit ALARM_START_ENHANCING(ALARM_TIME_POSITION)&#xA;                  end await&#xA;                end loop&#xA;              upto EXIT_SET_ALARM_MODE_COMMAND;&#xA;              emit ALARM_STOP_ENHANCING(ALARM_TIME_POSITION);&#xA;              ALARM_STATUS := true;&#xA;              emit ALARM_STATUS(ALARM_STATUS)&#xA;            end var&#xA;          end loop&#xA;        end var&#xA;      ||&#xA;        every START_BEEPING do&#xA;          do&#xA;            do&#xA;              loop&#xA;                emit BEEP&#xA;              each S&#xA;            upto STOP_ALARM_BEEP_COMMAND&#xA;          watching ALARM_DURATION S&#xA;        end every&#xA;    end signal&#xA;  ||&#xA;    loop&#xA;      do&#xA;        [&#xA;          loop&#xA;            emit MAIN_DISPLAY(WATCH_TIME_TO_MAIN_DISPLAY(?WATCH_TIME));&#xA;            emit MINI_DISPLAY(WATCH_DATE_TO_MINI_DISPLAY(?WATCH_TIME));&#xA;            emit ALPHABETIC_DISPLAY(2)&#xA;          each WATCH_TIME&#xA;        ||&#xA;          every WATCH_START_ENHANCING do&#xA;            emit START_ENHANCING(WATCH_DISPLAY_POSITION(?WATCH_START_ENHANCING))&#xA;          end every&#xA;        ||&#xA;          every WATCH_STOP_ENHANCING do&#xA;            emit STOP_ENHANCING(WATCH_DISPLAY_POSITION(?WATCH_STOP_ENHANCING))&#xA;          end every&#xA;        ]&#xA;      upto STOPWATCH_MODE_COMMAND;&#xA;      do&#xA;        [&#xA;          loop&#xA;            emit MINI_DISPLAY(WATCH_TIME_TO_MINI_DISPLAY(?WATCH_TIME))&#xA;          each WATCH_TIME&#xA;        ||&#xA;          do&#xA;            emit ALPHABETIC_DISPLAY(0);&#xA;            loop&#xA;              emit MAIN_DISPLAY(STOPWATCH_TIME_TO_MAIN_DISPLAY(?STOPWATCH_TIME))&#xA;            each STOPWATCH_TIME&#xA;          upto ALARM_MODE_COMMAND;&#xA;          do&#xA;            [&#xA;              emit ALPHABETIC_DISPLAY(1);&#xA;              loop&#xA;                emit MAIN_DISPLAY(ALARM_TIME_TO_MAIN_DISPLAY(?ALARM_TIME))&#xA;              each ALARM_TIME&#xA;            ||&#xA;              every ALARM_START_ENHANCING do&#xA;                emit START_ENHANCING(ALARM_DISPLAY_POSITION(?ALARM_START_ENHANCING))&#xA;              end every&#xA;            ||&#xA;              every ALARM_STOP_ENHANCING do&#xA;                emit STOP_ENHANCING(ALARM_DISPLAY_POSITION(?ALARM_STOP_ENHANCING))&#xA;              end every&#xA;            ]&#xA;          upto WATCH_MODE_COMMAND&#xA;        ]&#xA;      upto WATCH_MODE_COMMAND&#xA;    end loop"/>
      </states>
    </regions>
  </states>
</synccharts:Region>
