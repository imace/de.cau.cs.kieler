«REM»
	Template file for the main SC file. 
«ENDREM»

«IMPORT synccharts»
«IMPORT kexpressions»


«EXTENSION de::cau::cs::kieler::synccharts::codegen::sc::Helper»

«REM»
	The main template creates the file and starts the process of generating code.
«ENDREM»
«DEFINE main FOR Region-»
	«IF this.states.isEmpty-»
		«error("There is no SyncChart to generate code for!")»
	«ELSE-»
		«computeThreadPriorities(this.states.first())»
		«FILE ((String)(GLOBALVAR name)) + ".c"-»
		/*****************************************************************************/
		/* generated SC-code                                                         */
		/*****************************************************************************/
		/* KIELER - Kiel Integrated Environment for Layout Eclipse RichClient        */
		/*                                                                           */
		/* http://www.informatik.uni-kiel.de/rtsys/kieler/                           */
		/*                                                                           */
		/* Copyright 2011 by                                                         */
		/* + Christian-Albrechts-University of Kiel                                  */
		/*   + Department of Computer Science                                        */
		/*     + Real-Time and Embedded Systems Group                                */
		/*                                                                           */
		/* This code is provided under the terms of the Eclipse Public License (EPL).*/
		/*****************************************************************************/
		«EXPAND init-»
		«EXPAND start-»
		«EXPAND finish-»
		«EXPAND step-»
		«ENDFILE-»
		«EXPAND CodegenData::main»
		«EXPAND CodegenHeader::staticHeader»
	«ENDIF-»
«ENDDEFINE»

«REM»
	The init template defines the initializatin in the SC file 
	analogous to the SC Dokumentation.
«ENDREM»
«DEFINE init FOR Region-»
	«IF !this.eAllContents.select(e|e.metaType == OperatorExpression && ((OperatorExpression)e).operator==OperatorType::PRE).isEmpty-»
	#define _SC_USE_PRE //;
	«ENDIF-»
	«IF getHighestPriority(this.states.first()) > 31-»
		#define _SC_ID_MAX  «getHighestPriority(this.states.first())» // Highest thread id in use;
	«ENDIF-»
	«IF allSignals(this.states.first()).size > 31-»
		#define _SC_SIG_MAX «allSignals(this.states.first()).size» // Highest signal id in use;
	«ENDIF-»
	#include "sc.h"
	#include "«states.first().label».h"
	«EXPAND CodegenMisc::generateSigType FOR allSignals(this.states.first())-»
	«EXPAND CodegenMisc::generateSigArray FOR allSignals(this.states.first())-»
	#define _SC_valSigInt_SIZE «allSignals(this.states.first()).size»
	
	int valSigInt[_SC_valSigInt_SIZE];
	int valSigIntPre[_SC_valSigInt_SIZE];
	«EXPAND CodegenMisc::generateInitialize FOR this-»

	«FOREACH allSignals(this.states.first()) AS signal-»
		«IF ((Signal)signal).isInput || !(((Signal)signal).isInput || ((Signal)signal).isOutput)-»
			«EXPAND CodegenMisc::generateInputSignal FOR ((Signal)signal)»
		«ENDIF-»
	«ENDFOREACH-»
	«EXPAND CodegenMisc::generateCallOutputs FOR allSignals(this.states.first())»
	«EXPAND CodegenMisc::generateReset-»
#ifndef EXTERNTICK
	
	int tick(){
	TICKSTART(«EXPAND CodegenPriority::mainThreadPrio FOR this.states.first()-»);
«ENDDEFINE»

«REM»
	Starting point for recursive parsing process of the SyncChart.
«ENDREM»
«DEFINE start FOR Region-»
	«EXPAND CodegenRegion::region FOR this-»
«ENDDEFINE»

«DEFINE finish FOR Region-»
	TICKEND;}
#endif
«ENDDEFINE»

«REM»
	Step function of SC file (see SC docu).
«ENDREM»
«DEFINE step FOR Region»
int «states.first().id»(){
  int notdone = tick();
  «IF !this.eAllContents.select(e|e.metaType==ComplexExpression && ((OperatorExpression)e).operator==OperatorType::PRE).isEmpty-»
	int i;
	«ENDIF-»
  callOutputs();
    «IF !this.eAllContents.select(e|e.metaType==ComplexExpression && ((OperatorExpression)e).operator==OperatorType::PRE).isEmpty-»
	for(i=0;i<_SC_valSigInt_SIZE;i++){
	  valSigIntPre[i] = valSigInt[i];
	}
	«ENDIF-»
  return notdone;
}
«ENDDEFINE»