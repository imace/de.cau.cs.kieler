«REM»
	Template file for the _data file. This is an excample mainly used for 
	performance tests in my deploma thesis. The structure is straight forward.
«ENDREM»

«IMPORT synccharts»
«IMPORT kexpressions»

«EXTENSION templates::Helper»
«EXTENSION Helper»

«DEFINE main FOR Region-»
«FILE states.first().id + "_data.c"-»
/*****************************************************************************/
/* generated SC-code                                                         */
/*****************************************************************************/
/* KIELER - Kiel Integrated Environment for Layout Eclipse RichClient        */
/*                                                                           */
/* http://www.informatik.uni-kiel.de/rtsys/kieler/                           */
/*                                                                           */
/* Copyright 2011 by                                                         */
/* + Christian-Albrechts-University of Kiel                                  */
/*   + Department of Computer Science                                        */
/*     + Real-Time and Embedded Systems Group                                */
/*                                                                           */
/* This code is provided under the terms of the Eclipse Public License (EPL).*/
/*****************************************************************************/
«EXPAND init-»
«EXPAND generateSetInputs-»
«EXPAND generateMain(states.first().id)-»
«ENDFILE-»
«ENDDEFINE»

«DEFINE init FOR Region»
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "«states.first().label».h"
«ENDDEFINE»

«DEFINE generateSetInputs FOR Region»
void setInputs(){
  int rand = random();
  int i =0;
  «FOREACH allSignals(this.states.first()) AS signal-»
  	«IF ((Signal)signal).isInput-»
    if ((1<<i) & rand) {
      «((Scope)((Signal)signal).eContainer).id»_I_«((Signal)signal).name»(«IF ((Signal)signal).type!=ValueType::PURE»random()«ENDIF»);
    }
    i++;
  	«ENDIF-»
  «ENDFOREACH-»
}
«ENDDEFINE»


«DEFINE generateMain(String name) FOR Region»

«FOREACH allSignals(this.states.first()) AS signal-»
  	«IF ((Signal)signal).isOutput»
  int «((Signal)signal).name»=0;
  void «name»_O_«((Signal)signal).name»(«IF ((Signal)signal).type!=ValueType::PURE»int val«ENDIF»){
    «((Signal)signal).name»++;
    «IF ((Signal)signal).type!=ValueType::PURE»«((Signal)signal).name»+=val;«ENDIF»
  }
  	«ENDIF-»
  «ENDFOREACH-»

__inline__ unsigned long long int rdtsc()
{
    unsigned long long int x;
    __asm__ volatile ("rdtsc" : "=A" (x));
    return x;
}

int main(int argc, const char* argv[]){
  unsigned long long int tick, toc, duration=0;
  int i =1000*1000;  
  srand(10);  
  «name»_reset();
  for(;i>0;i--){
    setInputs();
    tick = rdtsc(); //printf("tick: %llu\n", tick);
    «name»();
    toc = rdtsc(); //printf("toc: %llu\n", toc);
    unsigned long long t=  toc-tick;
   //printf("%llu\n", t);
    duration += (t);
  }   
  
  «FOREACH allSignals(this.states.first()) AS signal-»
  	«IF ((Signal)signal).isOutput»
  fprintf(stderr,"«((Signal)signal).name»: %d\n", «((Signal)signal).name»);
  	«ENDIF-»
  «ENDFOREACH-»
  printf("%llu", duration/(1000*1000));
  return 0;
}
«ENDDEFINE»