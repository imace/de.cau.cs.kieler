import synccharts;


String builtString(List stateList): 
	// is the list empty?
	stateList.isEmpty ? "":
	"id2b("
	+ ((synccharts::State)stateList.first()).label
	+ ") | "
	+ builtString(stateList.withoutFirst())
	+ builtString(((synccharts::State)stateList.first()).regions.innerStates.select(e|!(e.isFinal) && !(e.isInitial)))
;

String getChildrenSet(List stateList):
	builtString(stateList).subString(0, builtString(stateList).length - 3)
;
	
List sortTransitionPrios(State state):
	state.outgoingTransitions.sortBy(e|e.priority)
;

List sortStateControlFlow(State state):
	JAVA template.Helper.sortStateControlFlow(de.cau.cs.kieler.synccharts.State)
;

cached String getURI(State state):
	JAVA de.cau.cs.kieler.synccharts.codegen.sc.Activator.getUri(de.cau.cs.kieler.synccharts.State)
;

cached String getURI(Transition transition):
	JAVA de.cau.cs.kieler.synccharts.codegen.sc.Activator.getUri(de.cau.cs.kieler.synccharts.Transition)
;
	
cached State getRootState(State s):
	s.parentRegion.parentState == null ? s :
	getRootState(s.parentRegion.parentState)
;

State getInitialState(Region region):
	region.innerStates.select(s|s.isInitial).first()
;

cached List computeThreadPriorities(State rootState):
	JAVA template.Helper.computeThreadPriorities(de.cau.cs.kieler.synccharts.State)
;

cached int getMainTreadPriority(State rootState):
	getRealThreadPriority(rootState)
;

int getRealThreadPriority(State state):
	JAVA template.Helper.getRealThreadPriority(de.cau.cs.kieler.synccharts.State)
;

int getRealOptimizedThreadPriority(State state):
	JAVA template.Helper.getRealOptimizedThreadPriority(de.cau.cs.kieler.synccharts.State)
;

int getWeakThreadPriority(State rootState):
	JAVA template.Helper.getWeakThreadPriority(de.cau.cs.kieler.synccharts.State)
;

int getOptimizedWeakThreadPriority(State rootState):
	JAVA template.Helper.getOptimizedWeakThreadPriority(de.cau.cs.kieler.synccharts.State)
;

int getSmallestThreadPriority(State state):
	JAVA template.Helper.getSmallestThreadPriority(de.cau.cs.kieler.synccharts.State)
;


cached List allSignals(State state):
	JAVA template.Helper.allSignals(de.cau.cs.kieler.synccharts.State)
;


State getInitialState(State state):
	state.regions.first().innerStates.select(s|s.isInitial).first()
;

cached List getStateSignals(State state):
	JAVA template.Helper.getStateSignals(de.cau.cs.kieler.synccharts.State)
;

boolean hasDependentState(Transition transition):
	JAVA template.Helper.hasDependentState(de.cau.cs.kieler.synccharts.Transition)
;

boolean isSignalDependent(Transition transition):
	JAVA template.Helper.isSignalDependent(de.cau.cs.kieler.synccharts.Transition)
;

String getStateNameByFlag(State state, int flag):
	JAVA template.Helper.getStateNameByFlag(de.cau.cs.kieler.synccharts.State, java.lang.Integer)
;

Void debug(String s):
	JAVA template.Helper.debug(java.lang.String)
;

Void error(String s):
	JAVA template.Helper.error(java.lang.String)
;

boolean isSimpleHierarchical(State state):
	(state.regions.size == 1) &&
	state.outgoingTransitions.isEmpty &&
	state.innerActions.isEmpty &&
	state.entryActions.isEmpty &&
	!state.parentRegion.innerStates.exists(s|s.outgoingTransitions.exists(t|t.targetState == state))
;

boolean test0(State state):
(state.regions.size == 1)
;

boolean test1(State state):
state.outgoingTransitions.isEmpty
;
boolean test2(State state):
state.innerActions.isEmpty
;
boolean test3(State state):
state.entryActions.isEmpty
;
boolean test4(State state):
!state.parentRegion.innerStates.exists(s|s.outgoingTransitions.exists(t|t.targetState == state))
;