«REM»
	Template file for SyncChart states. 
«ENDREM»

«IMPORT synccharts»

«EXTENSION template::Helper»

«REM»
	Defines the entry point of a state calls Xpand templated according to their structure. 
«ENDREM»
«DEFINE state FOR State-»
		«IF !isSimpleHierarchical(this)-»
			L_«getStateNameByFlag(this, 3)-»:
		«ENDIF-»
		«IF !this.regions.isEmpty-»
			«EXPAND stateWithRegions FOR this-»
		«ENDIF»
		«EXPAND CodegenMisc::localSignals FOR this-»
		«IF this.outgoingTransitions.isEmpty-»
			«EXPAND stateWithoutTransition FOR this-»
		«ELSEIF this.outgoingTransitions.size == 1-»
			«EXPAND stateWithMoreTransitions FOR this»
			«REM» AWAIT:
				«EXPAND stateWithOneTransition FOR this-»
			«ENDREM»
		«ELSE-»
			«EXPAND stateWithMoreTransitions FOR this»
		«ENDIF-»
«ENDDEFINE»

«REM»
	For states with regions we need to generate FORK- and FORKE statements. 
«ENDREM»
«DEFINE stateWithRegions FOR State-»
	«IF this.regions.size == 1-»
		«IF !isSimpleHierarchical(this)-»
			«EXPAND generateForkOneRegion FOR this-»
		«ENDIF-»
	«ELSE-»
		«EXPAND generateForkMoreRegions FOR this-»
	«ENDIF-»
	«EXPAND CodegenRegion::region FOREACH this.regions-»
	«IF !isSimpleHierarchical(this)-»
		L_«getStateNameByFlag(this, 3)»_main:
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateForkOneRegion FOR State-»
	FORK(L_«getStateNameByFlag(getInitialState(this.regions.first()), 3)-», «EXPAND CodegenPriority::getRealThreadPriority FOR getInitialState(this.regions.first())»);
	FORKE(L_«getStateNameByFlag(this, 3)»_main);
«ENDDEFINE»

«DEFINE generateForkMoreRegions FOR State-»
	«FOREACH this.regions AS region-»
		FORK(L_«getStateNameByFlag(getInitialState(region), 3)-», «EXPAND CodegenPriority::getRealThreadPriority FOR getInitialState(region)»);
	«ENDFOREACH»
	FORKE(L_«getStateNameByFlag(this, 3)»_main);
«ENDDEFINE»

«REM»
	Defines if to return to the surface or depth of a state. 
«ENDREM»
«DEFINE returnTo FOR State-»
	«IF !hasTransitionWithoutTrigger(this)-»
		«IF hasImmediates(this)-»
			«EXPAND returnToIntern FOR this-»
		«ELSE-»
			«EXPAND returnToState FOR this-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	return to surface 
«ENDREM»
«DEFINE returnToIntern FOR State-»
	«IF (this.regions.isEmpty)-»
		GOTO(L_«getStateNameByFlag(this, 3)»_intern);
	«ELSE-»
		GOTO(L_«getStateNameByFlag(this, 3)»_main_intern);
	«ENDIF-»
«ENDDEFINE»

«REM»
	return to depth 
«ENDREM»
«DEFINE returnToState FOR State-»
	«IF (this.regions.isEmpty)-»
		GOTO(L_«getStateNameByFlag(this, 3)»);
	«ELSE-»
		GOTO(L_«getStateNameByFlag(this, 3)»_main);
	«ENDIF-»
«ENDDEFINE»

«REM»
	Template for states without any transitions. For this 
	states we need to generate a HALT or a TERM Statement.
«ENDREM»
«DEFINE stateWithoutTransition FOR State-»
	«IF !isSimpleHierarchical(this)-»
		«IF hasImmediates(this)-»
			«EXPAND CodegenMisc::callJSONState-»
		«ENDIF»
		«IF this.isFinal-»
			«EXPAND CodegenMisc::callJSONState-»
			TERM;
		«ELSE-»
			«EXPAND onEntry FOR this-»
			«EXPAND simpleOrHierarchical FOR this-»
			«EXPAND CodegenMisc::callJSONState-»
			«EXPAND haltAssignment FOR this-»
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM»
	Distinguish if we need a label for a simple or hierarchical state. 
«ENDREM»
«DEFINE simpleOrHierarchical FOR State-»
	«IF hasImmediates(this)-»
		«IF !(this.regions.isEmpty)-»
			L_«getStateNameByFlag(this, 3)»_main_intern:
		«ELSE-»
			L_«getStateNameByFlag(this, 3)»_intern:
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«REM»
	Tests if a state with one transition has just signal references as trigger. 
«ENDREM»
«DEFINE stateWithOneTransition FOR State-»
	«EXPAND CodegenMisc::callJSONState-»
	«IF this.outgoingTransitions.first().trigger.metaType == SignalReference-»
		«EXPAND CodegenTransition::oneTransition FOR this.outgoingTransitions.first()-»
	«ELSE-»
		«EXPAND stateWithMoreTransitions FOR this»
	«ENDIF»
«ENDDEFINE»

«REM»
	Defines the structure of a state and the order of statements. 
«ENDREM»
«DEFINE stateWithMoreTransitions FOR State-»
	«EXPAND immediateStrong FOR this-»
	«IF hasImmediates(this)-»
		«EXPAND CodegenMisc::callJSONState-»
	«ENDIF-»
	«EXPAND onEntry FOR this-»
	«EXPAND CodegenPriority::weakPrio FOR this-»
	«EXPAND immediateWeak FOR this-»
	«EXPAND simpleOrHierarchical FOR this-»
	«EXPAND CodegenPriority::realPrio FOR this»
	«EXPAND CodegenMisc::callJSONState-»
	«EXPAND normal FOR this-»
	«IF this.type != StateType::CONDITIONAL && !this.outgoingTransitions.exists(t|t.type == TransitionType::NORMALTERMINATION)-»
		PAUSE;
	«ENDIF-»
	«EXPAND allStrong FOR this-»
	«EXPAND onInside FOR this-»
	«EXPAND hostCode FOR this-»
	«EXPAND CodegenPriority::weakPrio FOR this-»
	«EXPAND allWeak FOR this-»
	«EXPAND returnTo FOR this-»
«ENDDEFINE»

«DEFINE hostCode FOR State-»
	«IF this.type == StateType::TEXTUAL-»
		«this.bodyText»
	«ENDIF-»
«ENDDEFINE»

«REM»
	A non initial state without outgoing transitions has to be translated into
	a HALT. For simulation this is replaes bei PAUSE -> GOTO. 
«ENDREM»
«DEFINE haltAssignment FOR State-»
	«IF ((boolean)(GLOBALVAR sim)) || !this.innerActions.isEmpty-»
		/* this should be HALT; but for simulation PAUSE and GOTO */
		PAUSE;
		«EXPAND onInside FOR this-»
		«EXPAND returnTo FOR this-»
	«ELSE-»
		HALT;
	«ENDIF-»
«ENDDEFINE»

«REM»
	Template to cover all immediate strong transitions. 
«ENDREM»
«DEFINE immediateStrong FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).isImmediate && ((Transition)outTrans).type == TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»
	Template to cover all immediate weak transitions. 
«ENDREM»
«DEFINE immediateWeak FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).isImmediate && ((Transition)outTrans).type != TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»
	Template to cover all strong transitions. 
«ENDREM»
«DEFINE allStrong FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»
	Template to cover all weak transitions. 
«ENDREM»
«DEFINE allWeak FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::WEAKABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»
	Template to cover the normal termination. 
«ENDREM»
«DEFINE normal FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::NORMALTERMINATION)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
	«IF this.outgoingTransitions.exists(t|t.type == TransitionType::NORMALTERMINATION)-»
		L_«getStateNameByFlag(this, 3)»_afterJoin:
	«ENDIF-»
«ENDDEFINE»

«REM»
	Template to cover all on entry actions. 
«ENDREM»
«DEFINE onEntry FOR State-»
	«IF !this.entryActions.isEmpty-»
		«FOREACH this.entryActions AS onEntryAction-»
			«EXPAND CodegenTriggerAndEffect::trigger FOR onEntryAction-»
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»

«REM»
	Template to cover all on inside actions. 
«ENDREM»
«DEFINE onInside FOR State-»
	«IF !this.innerActions.isEmpty-»
		«FOREACH this.innerActions AS onInsideAction-»
			«EXPAND CodegenTriggerAndEffect::trigger FOR onInsideAction-»
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»