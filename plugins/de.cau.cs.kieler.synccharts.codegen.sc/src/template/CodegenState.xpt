«IMPORT synccharts»

«EXTENSION template::Helper»

«DEFINE state FOR State-»
		«IF !isSimpleHierarchical(this)-»
			L_«getStateNameByFlag(this, 3)-»:
		«ENDIF-»
		«IF !this.regions.isEmpty-»
			«EXPAND stateWithRegions FOR this-»
		«ENDIF»
		«EXPAND CodegenMisc::localSignals FOR this-»
		«IF this.outgoingTransitions.isEmpty-»
			«EXPAND stateWithoutTransition FOR this-»
		«ELSEIF this.outgoingTransitions.size == 1-»
			«EXPAND stateWithMoreTransitions FOR this»
			«REM» AWAIT:
				«EXPAND stateWithOneTransition FOR this-»
			«ENDREM»
		«ELSE-»
			«EXPAND stateWithMoreTransitions FOR this»
		«ENDIF-»
«ENDDEFINE»

«DEFINE stateWithRegions FOR State-»
	«IF this.regions.size == 1-»
		«IF !isSimpleHierarchical(this)-»
			«EXPAND generateForkOneRegion FOR this-»
		«ENDIF-»
	«ELSE-»
		«EXPAND generateForkMoreRegions FOR this-»
	«ENDIF-»
	«EXPAND CodegenRegion::region FOREACH this.regions-»
	«IF !isSimpleHierarchical(this)-»
		L_«getStateNameByFlag(this, 3)»_main:
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateForkOneRegion FOR State-»
	FORK(L_«getStateNameByFlag(getInitialState(this.regions.first()), 3)-», «EXPAND CodegenPriority::getRealThreadPriority FOR getInitialState(this.regions.first())»);
	FORKE(L_«getStateNameByFlag(this, 3)»_main);
«ENDDEFINE»

«DEFINE generateForkMoreRegions FOR State-»
	«FOREACH this.regions AS region-»
		FORK(L_«getStateNameByFlag(getInitialState(region), 3)-», «EXPAND CodegenPriority::getRealThreadPriority FOR getInitialState(region)»);
	«ENDFOREACH»
	FORKE(L_«getStateNameByFlag(this, 3)»_main);
«ENDDEFINE»

«DEFINE returnTo FOR State-»
	«IF !hasTransitionWithoutTrigger(this)-»
		«IF hasImmediates(this)-»
			«EXPAND returnToIntern FOR this-»
		«ELSE-»
			«EXPAND returnToState FOR this-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE returnToIntern FOR State-»
	«IF (this.regions.isEmpty)-»
		GOTO(L_«getStateNameByFlag(this, 3)»_intern);
	«ELSE-»
		GOTO(L_«getStateNameByFlag(this, 3)»_main_intern);
	«ENDIF-»
«ENDDEFINE»

«DEFINE returnToState FOR State-»
	«IF (this.regions.isEmpty)-»
		GOTO(L_«getStateNameByFlag(this, 3)»);
	«ELSE-»
		GOTO(L_«getStateNameByFlag(this, 3)»_main);
	«ENDIF-»
«ENDDEFINE»

«DEFINE stateWithoutTransition FOR State-»
	«IF !isSimpleHierarchical(this)-»
		«IF hasImmediates(this)-»
			«EXPAND CodegenMisc::callJSONState-»
		«ENDIF»
		«IF this.isFinal-»
			«EXPAND CodegenMisc::callJSONState-»
			TERM;
		«ELSE-»
			«EXPAND onEntry FOR this-»
			«EXPAND simpleOrHierarchical FOR this-»
			«EXPAND CodegenMisc::callJSONState-»
			«EXPAND haltAssignment FOR this-»
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«DEFINE simpleOrHierarchical FOR State-»
	«IF hasImmediates(this)-»
		«IF !(this.regions.isEmpty)-»
			L_«getStateNameByFlag(this, 3)»_main_intern:
		«ELSE-»
			L_«getStateNameByFlag(this, 3)»_intern:
		«ENDIF-»
	«ENDIF»
«ENDDEFINE»

«DEFINE stateWithOneTransition FOR State-»
	«EXPAND CodegenMisc::callJSONState-»
	«IF this.outgoingTransitions.first().trigger.metaType == SignalReference-»
		«EXPAND CodegenTransition::oneTransition FOR this.outgoingTransitions.first()-»
	«ELSE-»
		«EXPAND stateWithMoreTransitions FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE stateWithMoreTransitions FOR State-»
	«EXPAND immediateStrong FOR this-»
	«IF hasImmediates(this)-»
		«EXPAND CodegenMisc::callJSONState-»
	«ENDIF-»
	«EXPAND onEntry FOR this-»
	«EXPAND CodegenPriority::weakPrio FOR this-»
	«EXPAND immediateWeak FOR this-»
	«EXPAND simpleOrHierarchical FOR this-»
	«EXPAND CodegenPriority::realPrio FOR this»
	«EXPAND CodegenMisc::callJSONState-»
	«EXPAND normal FOR this-»
	«IF this.type != StateType::CONDITIONAL && !this.outgoingTransitions.exists(t|t.type == TransitionType::NORMALTERMINATION)-»
		PAUSE;
	«ENDIF-»
	«EXPAND allStrong FOR this-»
	«EXPAND onInside FOR this-»
	«EXPAND hostCode FOR this-»
	«EXPAND CodegenPriority::weakPrio FOR this-»
	«EXPAND allWeak FOR this-»
	«EXPAND returnTo FOR this-»
«ENDDEFINE»

«DEFINE hostCode FOR State-»
	«IF this.type == StateType::TEXTUAL-»
		«this.bodyText»
	«ENDIF-»
«ENDDEFINE»

«DEFINE haltAssignment FOR State-»
	«IF ((boolean)(GLOBALVAR sim)) || !this.innerActions.isEmpty-»
		/* this should be HALT; but for simulation PAUSE and GOTO */
		PAUSE;
		«EXPAND onInside FOR this-»
		«EXPAND returnTo FOR this-»
	«ELSE-»
		HALT;
	«ENDIF-»
«ENDDEFINE»

«DEFINE immediateStrong FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).isImmediate && ((Transition)outTrans).type == TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE immediateWeak FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).isImmediate && ((Transition)outTrans).type != TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE allStrong FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::STRONGABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE allWeak FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::WEAKABORT)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE normal FOR State-»
	«FOREACH sortTransitionPrios(this) AS outTrans-»
		«IF (((Transition)outTrans).type == TransitionType::NORMALTERMINATION)-»
			«EXPAND CodegenTransition::transition FOR (Transition)outTrans-»
		«ENDIF-»
	«ENDFOREACH-»
	«IF this.outgoingTransitions.exists(t|t.type == TransitionType::NORMALTERMINATION)-»
		L_«getStateNameByFlag(this, 3)»_afterJoin:
	«ENDIF-»
«ENDDEFINE»

«DEFINE onEntry FOR State-»
	«IF !this.entryActions.isEmpty-»
		«FOREACH this.entryActions AS onEntryAction-»
			«EXPAND CodegenTriggerAndEffect::trigger FOR onEntryAction-»
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE onInside FOR State-»
	«IF !this.innerActions.isEmpty-»
		«FOREACH this.innerActions AS onInsideAction-»
			«EXPAND CodegenTriggerAndEffect::trigger FOR onInsideAction-»
		«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»