«IMPORT synccharts»

«EXTENSION template::Helper»

«DEFINE trigger FOR Action-»
	«IF !(this.triggersAndEffects == null)-»
		«IF !(this.trigger == null)-»
			«IF (this.trigger.metaType == SignalReference)-»
					«EXPAND simpleTrigger FOR this-»
			«ELSE-»
					«EXPAND complexTrigger FOR this-»
			«ENDIF-»
		«ELSE-»
			«EXPAND effects FOR this-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE simpleTrigger FOR Action-»
	«EXPAND CodegenMisc::detectLocalSignal FOR ((SignalReference)this.trigger).signal-»
		if (PRESENT(«((SignalReference)this.trigger).signal.name-»)){
	«EXPAND effects FOR this-»
	«EXPAND CodegenPriority::priorityReduction FOR (Transition)this.eRootContainer-»
		}
«ENDDEFINE»

«DEFINE complexTrigger FOR Action-»
//>>>> TODO complex Trigger
«ENDDEFINE»

«DEFINE effects FOR Action-»
	«FOREACH this.effects AS effect-»
		«IF ((Emission)effect).signal.type == ValueType::INTEGER-»
			«EXPAND valuedSignal FOR ((Emission)effect)-»
		«ELSE-»
			EMIT(«((Emission)effect).signal.name-»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE valuedSignal FOR Emission-»
	«IF this.signal.combineOperator == CombineOperator::NONE-»
		  EMITINT(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MULT-»
		  if (PRESENT(«this.signal.name-»)){
		    EMITINTMUL(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::ADD-»
		  if (PRESENT(«this.signal.name-»)){
		    EMITINTADD(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MAX-»
		  if (PRESENT(«this.signal.name-»)){
		    EMITINTMAX(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MIN-»
		  if (PRESENT(«this.signal.name-»)){
		    EMITINTMIN(«EXPAND signalAndValue FOR this-»);
	«ENDIF-»
	«IF this.signal.combineOperator == CombineOperator::MULT || this.signal.combineOperator == CombineOperator::ADD || this.signal.combineOperator == CombineOperator::MAX || this.signal.combineOperator == CombineOperator::MIN-»
		  } else {
		    EMITINT(«EXPAND signalAndValue FOR this-»);
		  }
	«ENDIF»
«ENDDEFINE»

«DEFINE signalAndValue FOR Emission-»
«this.signal.name», «((IntValue)this.newValue).value-»
«ENDDEFINE»