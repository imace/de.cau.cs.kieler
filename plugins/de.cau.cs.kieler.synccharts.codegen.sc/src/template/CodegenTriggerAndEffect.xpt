«IMPORT synccharts»

«EXTENSION template::Helper»

«DEFINE trigger FOR Action-»
	«IF !(this.label == null)-»
		«IF !(this.trigger == null)-»
			«IF (this.trigger.metaType == SignalReference)-»
				«EXPAND simpleTrigger FOR this-»
			«ELSEIF (this.trigger.metaType == ComplexExpression)-»
				«EXPAND complexTrigger FOR this-»
			«ELSE-»
				/* error while generating code */
			«ENDIF-»
		«ELSE-»
			«EXPAND effects FOR this-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE simpleTrigger FOR Action-»
	if («EXPAND ifRequest FOR this-») {
		«EXPAND effects FOR this-»
		«EXPAND CodegenPriority::priorityReduction FOR this-»
	}
«ENDDEFINE»

«DEFINE complexTrigger FOR Action-»
	if («EXPAND ifRequest FOR this-») {
		«EXPAND effects FOR this-»
		«EXPAND stateAbortion FOR (Transition)this-»
	}
«ENDDEFINE»

«DEFINE ifRequest FOR Action-»
	«IF (this.trigger.metaType == BooleanValue)-»
		«EXPAND getValue FOR this.trigger-»
	«ELSEIF this.trigger.metaType == ComplexExpression-»
		«EXPAND complexExpression FOR ((ComplexExpression)this.trigger)-»
	«ELSEIF this.trigger.metaType == SignalReference-»
		PRESENT(sig_«((SignalReference)this.trigger).signal.name-»)
	«ELSE-»
		/* unknown if request */
	«ENDIF-»
«ENDDEFINE»

«DEFINE effects FOR Action-»
	«FOREACH this.effects AS effect-»
		«IF ((Emission)effect).signal.type == ValueType::INT-»
			«EXPAND valuedIntegerSignal FOR ((Emission)effect)-»
		«ELSEIF ((Emission)effect).signal.type == ValueType::BOOL-»
			«EXPAND valuedBooleanSignal FOR ((Emission)effect)-»
		«ELSE-»
			EMIT(sig_«((Emission)effect).signal.name-»);
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE valuedIntegerSignal FOR Emission-»
	«IF this.signal.combineOperator == CombineOperator::NONE-»
		EMITINT(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MULT-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITINTMUL(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::ADD-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITINTADD(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MAX-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITINTMAX(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::MIN-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITINTMIN(«EXPAND signalAndValue FOR this-»);
	«ENDIF-»
	«IF this.signal.combineOperator == CombineOperator::MULT || this.signal.combineOperator == CombineOperator::ADD || this.signal.combineOperator == CombineOperator::MAX || this.signal.combineOperator == CombineOperator::MIN-»
		} else {
			EMITINT(«EXPAND signalAndValue FOR this-»);
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE valuedBooleanSignal FOR Emission-»
	«IF this.signal.combineOperator == CombineOperator::NONE-»
		EMITBOOL(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::AND-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITBOOLAND(«EXPAND signalAndValue FOR this-»);
	«ELSEIF this.signal.combineOperator == CombineOperator::OR-»
		if (PRESENT(sig_«this.signal.name-»)){
			EMITBOOLOR(«EXPAND signalAndValue FOR this-»);
	«ENDIF-»
	«IF this.signal.combineOperator == CombineOperator::AND || this.signal.combineOperator == CombineOperator::OR-»
		} else {
			EMITBOOL(«EXPAND signalAndValue FOR this-»);
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE signalAndValue FOR Emission-»
	«IF this.newValue.metaType == synccharts::ComplexExpression-»
		sig_«this.signal.name», «EXPAND checkExpression FOR this.newValue-»
	«ELSEIF this.newValue.metaType == synccharts::BooleanValue-»
		sig_«this.signal.name», «EXPAND getValue FOR this.newValue-»
	«ELSE-»
		sig_«this.signal.name», «((IntValue)this.newValue).value-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE complexExpression FOR ComplexExpression-»
	«IF this.operator == OperatorType::PRE-»
		«EXPAND preOperator FOR this.subExpressions.get(0)-»
	«ELSEIF this.operator == OperatorType::NOT-»
		«EXPAND syncChartsOpToCOp FOR this.operator-»
		«EXPAND checkExpression FOR this.subExpressions.get(0)-»
	«ELSEIF this.operator == OperatorType::VAL-»
		«IF ((ComplexExpression)(this.eContainer)).operator == OperatorType::PRE-»
			VALPRE(sig_«((SignalReference)this.subExpressions.get(0)).signal.name-»)
		«ELSE-»
			VAL(sig_«((SignalReference)this.subExpressions.get(0)).signal.name-»)
		«ENDIF-»
	«ELSE-»
		«EXPAND checkExpression FOR this.subExpressions.get(0)-»
		«EXPAND syncChartsOpToCOp FOR this.operator-»
		«EXPAND checkExpression FOR this.subExpressions.get(1)-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE signalReference FOR SignalReference-»
	PRESENT(sig_«this.signal.name»)
«ENDDEFINE»

«DEFINE preOperator FOR Expression-»
	«IF this.metaType == ComplexExpression-»
		«EXPAND complexExpression FOR (ComplexExpression) this-»
	«ELSEIF this.metaType == SignalReference-»
		PRESENTPRE(sig_«((SignalReference)this).signal.name-»)
	«ELSE»
		«EXPAND getValue FOR this-»
	«ENDIF»
«ENDDEFINE»

«DEFINE checkExpression FOR Expression-»
	«IF this.metaType == ComplexExpression-»
		(«EXPAND complexExpression FOR (ComplexExpression)this-»)
	«ELSEIF this.metaType == SignalReference-»
		«EXPAND signalReference FOR (SignalReference)this-»
	«ELSE»
		«EXPAND getValue FOR this-»
	«ENDIF»
«ENDDEFINE»

«DEFINE getValue FOR Expression-»
	«IF ((Value)this).metaType == synccharts::IntValue-»
		«((IntValue)this).value-»
	«ELSEIF ((Value)this).metaType == synccharts::FloatValue-»
		«((FloatValue)this).value-»
	«ELSE-»
		«IF ((BooleanValue)this).value-»
			1
		«ELSE-»
			0
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE syncChartsOpToCOp FOR OperatorType-»
	«IF this == OperatorType::AND-»
		&&
	«ELSEIF this == OperatorType::OR»
		||
	«ELSEIF this == OperatorType::NOT»
		!
	«ELSEIF this == OperatorType::EQ»
		==
	«ELSEIF this == OperatorType::LT»
		<
	«ELSEIF this == OperatorType::GT»
		>
	«ELSEIF this == OperatorType::LEQ»
		<=
	«ELSEIF this == OperatorType::GEQ»
		>=
	«ELSEIF this == OperatorType::ADD»
		+
	«ELSEIF this == OperatorType::SUB»
		-
	«ELSEIF this == OperatorType::MULT»
		*
	«ELSEIF this == OperatorType::DIV»
		/
	«ELSEIF this == OperatorType::MOD»
		%
	«ENDIF-»
«ENDDEFINE»

«DEFINE stateAbortion FOR Transition-»
	«IF this.type != TransitionType::NORMALTERMINATION-»
		«IF !(this.sourceState.regions.isEmpty)-»
			«IF this.type != TransitionType::STRONGABORT-»
				PRIO(«getRealThreadPriority(this.targetState)»);
			«ENDIF-»
			ABORT;
			«IF this.type == TransitionType::STRONGABORT-»
				PRIO(«getRealThreadPriority(this.targetState)»);
			«ENDIF-»
		«ENDIF-»
		«EXPAND CodegenPriority::priorityReduction FOR this-»
	«ENDIF-»
	«EXPAND transitionWithoutTriggersAndEffects FOR this-»
«ENDDEFINE»

«DEFINE transitionWithoutTriggersAndEffects FOR Transition-»
	GOTO(L_«getStateNameByFlag(this.targetState, 3)»);
«ENDDEFINE»