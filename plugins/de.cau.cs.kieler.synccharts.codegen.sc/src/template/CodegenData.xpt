«IMPORT synccharts»

«EXTENSION template::Helper»

«DEFINE main FOR Region-»
	«FILE "sim_data.c"-»
/* generated SC-code */
	«EXPAND init-»
	«EXPAND generateSetInputs-»
	«EXPAND generatePrintOutputs-»
	«EXPAND generateMain-»
	«ENDFILE-»
«ENDDEFINE»

«DEFINE init FOR Region»
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "sc.h"
#include "cJSON.h"
#include "misc.h"

cJSON* output = 0;
cJSON* value = 0;
cJSON* stateArray = 0;

void JSONstate(char *state){
	cJSON_AddItemToArray(stateArray, cJSON_CreateString(state));
	if (cJSON_GetObjectItem(output, "state") == NULL){
		cJSON_AddItemToObject(output, "state", stateArray);
	}
}

void selectCid() {
	int act;

	_cid = 0;
	for (act = active; act > 1; act >>= 1){
		_cid++;
	}
}
	«FOREACH allSignals(this.innerStates.first()) AS signal-»
		«IF !((Signal)signal).isInput-»
			«EXPAND CodegenMisc::generateOutputSignals FOR ((Signal)signal)»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generateSetInputs FOR Region»
void setInputs(){
  char buffer[2048];
  int i=0;
  char c;
  // read next line
  for (i=0; (c=getchar())!='\n'; i++){
    buffer[i]=c;
  }
  buffer[i]=0;
  
  //char* str = rcvMessage();
	cJSON* object = 0;
	cJSON* child = 0;
	cJSON* present = 0;
	cJSON* value = 0;

	object = cJSON_Parse(buffer);
	
  «FOREACH allSignals(this.innerStates.first()) AS signal-»
  	«IF !((Signal)signal).isOutput-»
  child = cJSON_GetObjectItem(object, "«((Signal)signal).name»");
	if (child != NULL){
		present = cJSON_GetObjectItem(child, "present");
		value = cJSON_GetObjectItem(child, "value");
		if (present != NULL && present->type){
			«((Signal)signal).parentState.id»_I_«((Signal)signal).name»();
		}
	}
  	«ENDIF-»
  «ENDFOREACH-»
}
«ENDDEFINE»

«DEFINE generatePrintOutputs FOR Region»
void printOutputs(){
	printf("%s \n", cJSON_Print(output));
}
«ENDDEFINE»

«DEFINE generateMain FOR Region»
int main(int argc, const char* argv[]){
	initialize();
	stateArray = cJSON_CreateArray();
	output = cJSON_CreateObject();
	setInputs();
	tick(1);
	while(1){
		printDebugInfo("Ein Tick ist vergangen!");
		callOutputs(); 
		char* outString = cJSON_Print(output);
		strip_white_spaces(outString);
		printf("DEBUGEND%s\n", outString);
		fflush(stdout);
		reset();
		output = cJSON_CreateObject();
		stateArray = cJSON_CreateArray();
		setInputs();
		tick(0);
	}
}
«ENDDEFINE»