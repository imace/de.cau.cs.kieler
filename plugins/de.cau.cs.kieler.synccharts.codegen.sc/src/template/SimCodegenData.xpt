«REM»
	Template file for the _data file.
«ENDREM»
«IMPORT synccharts»
«IMPORT expressions»

«EXTENSION template::Helper»

«DEFINE main FOR Region-»
	«FILE "sim_data.c"-»
/*****************************************************************************/
/* generated SC-code                                                         */
/*****************************************************************************/
/* KIELER - Kiel Integrated Environment for Layout Eclipse RichClient        */
/*                                                                           */
/* http://www.informatik.uni-kiel.de/rtsys/kieler/                           */
/*                                                                           */
/* Copyright 2009 by                                                         */
/* + Christian-Albrechts-University of Kiel                                  */
/*   + Department of Computer Science                                        */
/*     + Real-Time and Embedded Systems Group                                */
/*                                                                           */
/* This code is provided under the terms of the Eclipse Public License (EPL).*/
/*****************************************************************************/
	«EXPAND init-»
	«EXPAND generateSetInputs-»
	«EXPAND generatePrintOutputs-»
	«EXPAND generateMain-»
	«ENDFILE-»
«ENDDEFINE»

«DEFINE init FOR Region»
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	
	#include "sc.c"
	#include "cJSON.h"
	#include "misc.h"
	
	cJSON* output = 0;
	cJSON* value = 0;
	cJSON* stateArray = 0;
	
	void JSONstate(char *state){
		cJSON_AddItemToArray(stateArray, cJSON_CreateString(state));
		if (cJSON_GetObjectItem(output, "state") == NULL){
			cJSON_AddItemToObject(output, "state", stateArray);
		}
	}

	«FOREACH allSignals(this.states.first()) AS signal-»
		«IF !((Signal)signal).isInput-»
			«EXPAND CodegenMisc::generateOutputSignals FOR ((Signal)signal)»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generateSetInputs FOR Region»
void setInputs(){
  char buffer[2048];
  int i = 0;
  char c;
  /* read next line */
  for (i = 0; (c = getchar()) != '\n'; i++){
    buffer[i] = c;
  }
  buffer[i] = 0;
  
	cJSON* object = 0;
	cJSON* child = 0;
	cJSON* present = 0;
	cJSON* value = 0;

	object = cJSON_Parse(buffer);
	
  «FOREACH allSignals(this.states.first()) AS signal-»
  	«IF !((Signal)signal).isOutput-»
  child = cJSON_GetObjectItem(object, "«((Signal)signal).name»");
	if (child != NULL){
		present = cJSON_GetObjectItem(child, "present");
		value = cJSON_GetObjectItem(child, "value");
		«EXPAND setSignalValue FOR (Signal)signal-»
		if (present != NULL && present->type) {
			«((Scope)((Signal)signal).eContainer).id»_I_«((Signal)signal).name»(«IF ((Signal)signal).type!=ValueType::PURE»valSigInt[sig_«((Signal)signal).name»]«ENDIF»);
		}
	}
  	«ENDIF-»
  «ENDFOREACH-»
}
«ENDDEFINE»

«DEFINE generatePrintOutputs FOR Region»
void printOutputs(){
	printf("%s \n", cJSON_Print(output));
}
«ENDDEFINE»

«DEFINE setSignalValue FOR Signal-»
	«IF this.type == ValueType::INT || this.type == ValueType::BOOL-»
		if (value != NULL && value->type == 3) { 
			valSigInt[sig_«this.name»] = value->valueint;
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateMain FOR Region»
int main(int argc, const char* argv[]){
	«((String)(GLOBALVAR name))»_reset();
	stateArray = cJSON_CreateArray();
	output = cJSON_CreateObject();
	RESET();
	setInputs();
	tick();
	while(1){
		callOutputs(); 
		char* outString = cJSON_Print(output);
		strip_white_spaces(outString);
		printf("DEBUGEND%s\n", outString);
		fflush(stdout);
		//reset();
		output = cJSON_CreateObject();
		stateArray = cJSON_CreateArray();
		setInputs();
		tick();
	}
}
«ENDDEFINE»