«IMPORT synccharts»

«EXTENSION template::Helper»

«DEFINE generateSigType FOR List-»
	«IF !this.isEmpty-»
		typedef enum {
			«FOREACH this AS signal SEPARATOR ", "-»
				sig_«((Signal)signal).name-»
			«ENDFOREACH-»
		} signaltype;
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateSigArray FOR List-»
	const char *s2signame[] = {
		«FOREACH this AS signal SEPARATOR ", "-»
		"sig_«((Signal)signal).name-»"
		«ENDFOREACH-»
	};
«ENDDEFINE»

«DEFINE callJSONState FOR State-»
	«IF (boolean)(GLOBALVAR sim)-»
		JSONstate("«getURI()»");
	«ENDIF-»
«ENDDEFINE»

«DEFINE callJSONTransition FOR Transition-»
	«IF (boolean)(GLOBALVAR sim)-»
		JSONstate("«getURI()»");
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateInputSignal FOR Signal-»
	void «this.parentState.id»_I_«this.name»(«IF type!=ValueType::PURE»int val«ENDIF») {
		signals = signals | (1 << sig_«this.name»);
		«IF type!=ValueType::PURE»valSigInt[sig_«this.name»]=val;«ENDIF»
	}
«ENDDEFINE»

«DEFINE generateOutputSignals FOR Signal»
	void «this.parentState.id»_O_«this.name»(int status){
		value = cJSON_CreateObject();
		cJSON_AddItemToObject(value, "present", status?cJSON_CreateTrue():cJSON_CreateFalse());
		«IF this.type == ValueType::INTEGER-»
			cJSON_AddItemToObject(value, "value", cJSON_CreateNumber(VAL(sig_«this.name»)));
		«ENDIF-»
		cJSON_AddItemToObject(output, "«this.name»", value);
	}
«ENDDEFINE»

«DEFINE generateCallOutputs FOR List-»
	void callOutputs() {
		«FOREACH this AS signal-»
			«IF !((Signal)signal).isInput-»
				«IF (boolean)(GLOBALVAR sim)-»
					«((Signal)signal).parentState.id»_O_«((Signal)signal).name-»(signals & (1 << sig_«((Signal)signal).name-»));
				«ELSE-»
				  «IF ((Signal)signal).isOutput-»				  
					if(signals & (1 << sig_«((Signal)signal).name-»)) {
						«((Signal)signal).parentState.id»_O_«((Signal)signal).name-»(«IF ((Signal)signal).type!=ValueType::PURE»valSigInt[sig_«((Signal)signal).name»]«ENDIF»);
					}	
					«ENDIF-»				
				«ENDIF-»
			«ENDIF-»
		«ENDFOREACH-»
		signals=0;
	}
«ENDDEFINE»

«DEFINE generateReset FOR Region-»
	void reset() {
		signals = 0;
	}
«ENDDEFINE»

«DEFINE localSignals FOR State-»
	«IF this.isInitial-»
		«IF this.parentRegion.parentState.parentRegion.parentState != null-»
			«FOREACH this.parentRegion.parentState.signals AS signal-»
				SIGNAL(sig_«signal.name»);
			«ENDFOREACH-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE generateInitialize FOR Region-»
	int «((String)(GLOBALVAR name))»_reset() {
		RESET();
		/* initialize all valued integer signals */
		«FOREACH allSignals(this.innerStates.first()) AS signal-»
			«IF ((Signal)signal).type == ValueType::INTEGER-»
				valSigInt[sig_«((Signal)signal).name»] = «EXPAND getIntegerSignalValue FOR (Signal)signal-»;
			«ENDIF-»
		«ENDFOREACH-»
		return 0;
	}
«ENDDEFINE»

«DEFINE getIntegerSignalValue FOR Signal-»
	«IF this.initialValue != null-»
		«this.initialValue.replaceAll("\"","")-»
	«ELSE-»
		0
	«ENDIF-»
«ENDDEFINE»

«DEFINE getBooleanSignalValue FOR Signal-»
	«IF this.initialValue != null-»
		«IF this.initialValue == "true" || this.initialValue == "t" || this.initialValue == "1"-»
			1
		«ELSE»
			0
		«ENDIF-»
	«ELSE-»
		0
	«ENDIF-»
«ENDDEFINE»