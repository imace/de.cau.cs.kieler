«REM»
	Template file for the main SC file. 
«ENDREM»
«IMPORT synccharts»
«IMPORT expressions»

«EXTENSION template::Helper»

«REM»
	The main template creates the file and starts the process of generating code.
«ENDREM»
«DEFINE main FOR Region-»
	«IF this.innerStates.isEmpty-»
		«error("There is no SyncChart to generate code for!")»
	«ELSE-»
		«computeThreadPriorities(this.innerStates.first())»
		«FILE "sim.c"-»
		/*****************************************************************************/
		/* generated SC-code                                                         */
		/*****************************************************************************/
		/* KIELER - Kiel Integrated Environment for Layout Eclipse RichClient        */
		/*                                                                           */
		/* http://www.informatik.uni-kiel.de/rtsys/kieler/                           */
		/*                                                                           */
		/* Copyright 2009 by                                                         */
		/* + Christian-Albrechts-University of Kiel                                  */
		/*   + Department of Computer Science                                        */
		/*     + Real-Time and Embedded Systems Group                                */
		/*                                                                           */
		/* This code is provided under the terms of the Eclipse Public License (EPL).*/
		/*****************************************************************************/
		«EXPAND init-»
		«EXPAND start-»
		«EXPAND finish-»
		«ENDFILE-»
		«EXPAND SimCodegenData::main»
		«EXPAND CodegenHeader::main»
	«ENDIF-»
«ENDDEFINE»

«REM»
	The init template defines the initializatin in the SC file 
	analogous to the SC Dokumentation.
«ENDREM»
«DEFINE init FOR Region-»
	«IF getHighestPriority(this.innerStates.first()) > 31-»
		#define _SC_ID_MAX  «getHighestPriority(this.innerStates.first())» // Highest thread id in use;
	«ENDIF-»
	«IF allSignals(this.innerStates.first()).size > 31-»
		#define _SC_SIG_MAX «allSignals(this.innerStates.first()).size» // Highest signal id in use;
	«ENDIF-»
	#include "misc.h"
	#include "sc.h"
	extern void JSONstate(char*);
	«EXPAND CodegenMisc::generateSigArray FOR allSignals(this.innerStates.first())-»
	int valSigInt[_SC_valSigInt_SIZE];
	int valSigIntPre[_SC_valSigInt_SIZE];
	«EXPAND CodegenMisc::generateInitialize FOR this-»

	«FOREACH allSignals(this.innerStates.first()) AS signal-»
		«IF ((Signal)signal).isInput || !(((Signal)signal).isInput || ((Signal)signal).isOutput)-»
			«EXPAND CodegenMisc::generateInputSignal FOR ((Signal)signal)»
		«ENDIF-»
	«ENDFOREACH-»
	«EXPAND CodegenMisc::generateCallOutputs FOR allSignals(this.innerStates.first())»
	int tick(){
	TICKSTART(«EXPAND CodegenPriority::mainThreadPrio FOR this.innerStates.first()-»);
«ENDDEFINE»

«REM»
	Starting point for recursive parsing process of the SyncChart.
«ENDREM»
«DEFINE start FOR Region-»
	«EXPAND CodegenRegion::region FOR this-»
«ENDDEFINE»

«DEFINE finish FOR Region-»
	TICKEND;}
«ENDDEFINE»