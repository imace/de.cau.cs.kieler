«IMPORT esterel»

«DEFINE module FOR Module»
	«FILE ""-»
/* generated wrapper */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "cJSON.h"

cJSON* output = 0;
cJSON* value = 0;

«FOREACH this.modInt.intSignalDecl AS signals»
  «EXPAND OutputFunctions(name) FOR signals»
«ENDFOREACH»

void setInputs(){
  char buffer[2048];
  int i=0;
  char c;
  // read next line
  for (i=0; (c=getchar())!='\n'; i++){
    buffer[i]=c;
  }
  buffer[i]=0;
  
	cJSON* object = 0;
	cJSON* child = 0;
	cJSON* present = 0;
	cJSON* value = 0;

	object = cJSON_Parse(buffer);
	
  «FOREACH this.modInt.intSignalDecl AS signal-»
    «EXPAND CallInputs(name) FOR signal»
  «ENDFOREACH»
}

int main(){
  «this.name»_reset();
  output = cJSON_CreateObject();
  while(1){
    setInputs();
	«name»();
	char* outString = cJSON_Print(output);
	strip_white_spaces(outString);
	printf("%s\n", outString);
	fflush(stdout);
	output = cJSON_CreateObject();
  }  	
}

	«ENDFILE-»
«ENDDEFINE»


«DEFINE main FOR esterel::Program-»
	«EXPAND module FOR module.first()»
«ENDDEFINE»

«DEFINE OutputFunctions(String modName) FOR Output»
  «FOREACH signal AS sig»«modName»_O_«sig.name»(){
   	value = cJSON_CreateObject();
	cJSON_AddItemToObject(value, "present", cJSON_CreateTrue());
	cJSON_AddItemToObject(output, "«sig.name»", value);
  } 
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE OutputFunctions(String modName) FOR SignalDecl»
«ENDDEFINE»

«DEFINE CallInputs(String modName) FOR Input»
  «FOREACH signal AS sig»
  child = cJSON_GetObjectItem(object, "«sig.name»");
	if (child != NULL){
		present = cJSON_GetObjectItem(child, "present");
		value = cJSON_GetObjectItem(child, "value");
		if (present != NULL && present->type) {
			«modName»_I_«sig.name»();
		}
	}
  «ENDFOREACH-»
 «ENDDEFINE»
 
 «DEFINE CallInputs(String modName) FOR SignalDecl»
 «ENDDEFINE»
