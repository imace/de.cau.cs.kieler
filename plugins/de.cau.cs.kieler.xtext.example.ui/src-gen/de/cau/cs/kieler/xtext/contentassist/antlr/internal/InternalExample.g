/*
* generated by Xtext
*/
grammar InternalExample;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.xtext.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.xtext.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import de.cau.cs.kieler.xtext.services.ExampleGrammarAccess;

}

@parser::members {
 
 	private ExampleGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExampleGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction :
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getActionAccess().getTriggersAssignment()); }
(rule__Action__TriggersAssignment)
{ after(grammarAccess.getActionAccess().getTriggersAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignal
entryRuleSignal :
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSignalAccess().getNameAssignment()); }
(rule__Signal__NameAssignment)
{ after(grammarAccess.getSignalAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalReference
entryRuleSignalReference :
{ before(grammarAccess.getSignalReferenceRule()); }
	 ruleSignalReference
{ after(grammarAccess.getSignalReferenceRule()); } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalAssignment()); }
(rule__SignalReference__SignalAssignment)
{ after(grammarAccess.getSignalReferenceAccess().getSignalAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOperation
entryRuleNotOperation :
{ before(grammarAccess.getNotOperationRule()); }
	 ruleNotOperation
{ after(grammarAccess.getNotOperationRule()); } 
	 EOF 
;

// Rule NotOperation
ruleNotOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNotOperationAccess().getGroup()); }
(rule__NotOperation__Group__0)
{ after(grammarAccess.getNotOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOrNormalExpression
entryRuleNotOrNormalExpression :
{ before(grammarAccess.getNotOrNormalExpressionRule()); }
	 ruleNotOrNormalExpression
{ after(grammarAccess.getNotOrNormalExpressionRule()); } 
	 EOF 
;

// Rule NotOrNormalExpression
ruleNotOrNormalExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives()); }
(rule__NotOrNormalExpression__Alternatives)
{ after(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperation
entryRuleAndOperation :
{ before(grammarAccess.getAndOperationRule()); }
	 ruleAndOperation
{ after(grammarAccess.getAndOperationRule()); } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAndOperationAccess().getGroup()); }
(rule__AndOperation__Group__0)
{ after(grammarAccess.getAndOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperation
entryRuleOrOperation :
{ before(grammarAccess.getOrOperationRule()); }
	 ruleOrOperation
{ after(grammarAccess.getOrOperationRule()); } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getOrOperationAccess().getGroup()); }
(rule__OrOperation__Group__0)
{ after(grammarAccess.getOrOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesedBooleanExpression
entryRuleParanthesedBooleanExpression :
{ before(grammarAccess.getParanthesedBooleanExpressionRule()); }
	 ruleParanthesedBooleanExpression
{ after(grammarAccess.getParanthesedBooleanExpressionRule()); } 
	 EOF 
;

// Rule ParanthesedBooleanExpression
ruleParanthesedBooleanExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
(rule__ParanthesedBooleanExpression__Alternatives)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression :
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
	ruleOrOperation
{ after(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NotOrNormalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getNotOperationParserRuleCall_0()); }
	ruleNotOperation
{ after(grammarAccess.getNotOrNormalExpressionAccess().getNotOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_1()); }
	ruleParanthesedBooleanExpression
{ after(grammarAccess.getNotOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_0()); }
	ruleSignalReference
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_1()); }
(rule__ParanthesedBooleanExpression__Group_1__0)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
(rule__Model__SignalsAssignment_0)
{ after(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
)
(
{ before(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
(rule__Model__SignalsAssignment_0)*
{ after(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
)
)

	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }
)

	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionAssignment_2()); }
(rule__Model__ActionAssignment_2)
{ after(grammarAccess.getModelAccess().getActionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getOperatorAssignment_0()); }
(rule__NotOperation__OperatorAssignment_0)
{ after(grammarAccess.getNotOperationAccess().getOperatorAssignment_0()); }
)

	rule__NotOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1()); }
(rule__NotOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getNotOrNormalExpressionParserRuleCall_0()); }
	ruleNotOrNormalExpression
{ after(grammarAccess.getAndOperationAccess().getNotOrNormalExpressionParserRuleCall_0()); }
)

	rule__AndOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getGroup_1()); }
(rule__AndOperation__Group_1__0)*
{ after(grammarAccess.getAndOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperationSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndOperationAccess().getOperationSubExpressionsAction_1_0()); }
)

	rule__AndOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
(rule__AndOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__AndOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
	ruleAndOperation
{ after(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
)

	rule__OrOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getGroup_1()); }
(rule__OrOperation__Group_1__0)*
{ after(grammarAccess.getOrOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0()); }
)

	rule__OrOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
(rule__OrOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__OrOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParanthesedBooleanExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__ParanthesedBooleanExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_1_1()); }
	ruleOrOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_1_1()); }
)

	rule__ParanthesedBooleanExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Model__SignalsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0()); }
	ruleSignal{ after(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ActionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionActionParserRuleCall_2_0()); }
	ruleAction{ after(grammarAccess.getModelAccess().getActionActionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TriggersAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getTriggersBooleanExpressionParserRuleCall_0()); }
	ruleBooleanExpression{ after(grammarAccess.getActionAccess().getTriggersBooleanExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SignalAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0()); }
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getOperatorNotKeyword_0_0()); }
(
{ before(grammarAccess.getNotOperationAccess().getOperatorNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getNotOperationAccess().getOperatorNotKeyword_0_0()); }
)

{ after(grammarAccess.getNotOperationAccess().getOperatorNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0()); }
	ruleParanthesedBooleanExpression{ after(grammarAccess.getNotOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAndKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndOperationAccess().getOperatorAndKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndOperationAccess().getOperatorAndKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsNotOrNormalExpressionParserRuleCall_1_2_0()); }
	ruleNotOrNormalExpression{ after(grammarAccess.getAndOperationAccess().getSubExpressionsNotOrNormalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorOrKeyword_1_1_0()); }
(
{ before(grammarAccess.getOrOperationAccess().getOperatorOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getOrOperationAccess().getOperatorOrKeyword_1_1_0()); }
)

{ after(grammarAccess.getOrOperationAccess().getOperatorOrKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
	ruleAndOperation{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


