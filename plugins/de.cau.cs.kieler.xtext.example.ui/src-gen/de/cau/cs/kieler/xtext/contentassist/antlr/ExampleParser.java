/*
* generated by Xtext
*/
package de.cau.cs.kieler.xtext.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.xtext.services.ExampleGrammarAccess;

public class ExampleParser extends AbstractContentAssistParser {
	
	@Inject
	private ExampleGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleLexer createLexer(CharStream stream) {
		return new de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleLexer(stream);
	}
	
	@Override
	protected de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleParser createParser() {
		de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleParser result = new de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives(), "rule__NotOrNormalExpression__Alternatives");
					put(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives(), "rule__ParanthesedBooleanExpression__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getNotOperationAccess().getGroup(), "rule__NotOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup(), "rule__AndOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup_1(), "rule__AndOperation__Group_1__0");
					put(grammarAccess.getOrOperationAccess().getGroup(), "rule__OrOperation__Group__0");
					put(grammarAccess.getOrOperationAccess().getGroup_1(), "rule__OrOperation__Group_1__0");
					put(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_1(), "rule__ParanthesedBooleanExpression__Group_1__0");
					put(grammarAccess.getModelAccess().getSignalsAssignment_0(), "rule__Model__SignalsAssignment_0");
					put(grammarAccess.getModelAccess().getActionAssignment_2(), "rule__Model__ActionAssignment_2");
					put(grammarAccess.getActionAccess().getTriggersAssignment(), "rule__Action__TriggersAssignment");
					put(grammarAccess.getSignalAccess().getNameAssignment(), "rule__Signal__NameAssignment");
					put(grammarAccess.getSignalReferenceAccess().getSignalAssignment(), "rule__SignalReference__SignalAssignment");
					put(grammarAccess.getNotOperationAccess().getOperatorAssignment_0(), "rule__NotOperation__OperatorAssignment_0");
					put(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1(), "rule__NotOperation__SubExpressionsAssignment_1");
					put(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1(), "rule__AndOperation__OperatorAssignment_1_1");
					put(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2(), "rule__AndOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1(), "rule__OrOperation__OperatorAssignment_1_1");
					put(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2(), "rule__OrOperation__SubExpressionsAssignment_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleParser typedParser = (de.cau.cs.kieler.xtext.contentassist.antlr.internal.InternalExampleParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExampleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExampleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
