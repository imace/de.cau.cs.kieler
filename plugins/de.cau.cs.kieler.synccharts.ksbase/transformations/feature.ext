import synccharts;
import utilities;

//Adds a successor to the given state 
Void addSuccessorState(State source):
 let target = new State:
 connectStates(source, target) ->
 source.parentRegion.innerStates.add(target) ->
 setSelection(target)
;

Void addSuccessorStates(List[State] states):
 states.addSuccessorState()
;


//Adds a predecessor to the given state
Void addPredecessorState(State target):
let source = new State:
connectStates(source,target) ->
target.parentRegion.innerStates.add(source) ->
(target.isInitial == true) ?
    (target.setIsInitial(false) ->
    source.setIsInitial(true)) : 
setSelection(source)
;

//Adds a choice to the given state
//by adding a conditional with two
//targets.
Void addChoice(State source):
let choice = new State:
let opt1 = new State:
let opt2 = new State:
let t1 = new Transition:
let t2 = new Transition:
choice.setLabel("C1") ->
choice.setType(StateType::CONDITIONAL) ->
opt1.setLabel("S0") ->
opt2.setLabel("S1") ->
connectStates(source,choice) ->
t1.setSourceState(choice) ->
t1.setTargetState(opt1) ->
t1.setPriority(1) ->
t2.setSourceState(choice) ->
t2.setTargetState(opt2) ->
t2.setPriority(2) ->
source.parentRegion.innerStates.add(choice) ->
source.parentRegion.innerStates.add(opt1) ->
source.parentRegion.innerStates.add(opt2)
;

//Flips source and target of the 
//given transition.
Void flipTransition(Transition t):
 let source = t.sourceState:
 let target = t.targetState: 
 t.setSourceState(target) ->
 t.setTargetState(source) ->
 setSelection(t) 
;
//Inserts a state in a transition
Void insertState(Transition t):
 let source = t.sourceState:
 let target = t.targetState:
 let newState = new State:
 t.setTargetState(newState) ->
 connectStates(newState, target) ->
 source.parentRegion.innerStates.add(newState) ->
 setSelection(newState)
;
//Connects two states
Void connectStates(State source, State target):
let transition = new Transition:
transition.setSourceState(source) ->
transition.setTargetState(target) ->
setSelection(transition)
;

// create a self loop of one state
Void addSelfLoop(State state):
  connectStates(state, state)
;

//Reroutes the target of the given transition
//to the given state
Void rerouteTransitionTarget(Transition t, State target):
 t.setTargetState(target)
;

Void rerouteTransitionTarget(State target, Transition t):
 rerouteTransitionTarget(t, target)
;

//Reroutes the source of the given transition
//to the given state
Void rerouteTransitionSource(Transition t, State source):
 //t.sourceState.outgoingTransitions.remove(t) ->
 t.setSourceState(source) //->
 //source.outgoingTransitions.add(t)
;

Void rerouteTransitionSource(State source, Transition t):
 rerouteTransitionSource(t, source)
;

//Adds a parallel region to the given state
Void upgradeState(State parentState):
let region = new Region:
let state = new State:
state.setIsInitial(true) ->
state.setLabel("Initial") ->
region.innerStates.add(state) ->
parentState.regions.add(region) ->
setSelection(state)
;

Void downgradeState(State parentState):
if parentState.regions.size > 0 then
 parentState.regions.removeAll(parentState.regions) ->
 parentState.signals.removeAll(parentState.signals)
;

//Returns true if the state is a complex state, 
//i.e. it has at least one inner region
Boolean isRegionState(State state):
    state.regions.size > 0
;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

//Checks if the state is the root state.
Boolean isNoRootState(State state): 
    state.parentRegion.parentState != null
;

Boolean isNoRootState(State s1, State s2):
	s1.isNoRootState() && s2.isNoRootState()
;

Boolean statesOnSameHierarchy(State s1, State s2):
	s1.parentRegion == s2.parentRegion
;

Boolean isNoRootState(List[State] states):
    states.notExists(e|e.parentRegion.parentState == null)
;
// Add a state to the parent state and add all Regions
// to that new State
Void encapsulateRegions(State parentState):
  let regions = parentState.regions:
  let newRegion = new Region:
  let newState = new State:
  (parentState.regions.size > 0) ? 
    (newState.regions.addAll(regions) ->
    parentState.regions.add(newRegion) ->
    newRegion.innerStates.add(newState)) : 
   null
;

// Delete the state and move all its regions to the
// parent state 
Void flattenState(State state):
let parentRegion = state.parentRegion:
let parentState = parentRegion.parentState:
let stateSize = parentRegion.innerStates.size:
parentState.regions.addAll(state.regions) ->
state.setParentRegion(null) ->
(stateSize <= 1) ?
   parentState.regions.remove(parentRegion) : 
null
;

/////////////////////////
//     Templates      ///
/////////////////////////

//Creates a default StateChart
Void createDefault(Region rootRegion):
let state = new State:
let innerState = new State:
let region = new Region:
state.setLabel(getFileNameOfActiveEditor()) ->
state.regions.add(region) ->
innerState.setLabel("Initial") ->
innerState.setIsInitial(true) -> 
region.innerStates.add(innerState) ->
rootRegion.innerStates.add(state) ->
setSelection(innerState)
;

String getFileNameOfActiveEditor():
JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

//Adds an initial state to a region
Void addInitialState(Region target):
 let parent = target.parentState :
 let state = new State:
 (parent != null) ?
 (state.setLabel("Initial") ->
 state.setIsInitial(true) ->
 target.innerStates.add(state) ->
 setSelection(state)) :
 createDefault(target)
;

//Good ol' ABRO
Void addABRO(Region rootRegion):
let waitABToFinal = new Transition:
let reset = new Transition:
let ABOFinal = new State:
let wATrans = new Transition:
let wBTrans = new Transition:
let wAInitial = new State:
let wAFinal = new State:
let wBInitial = new State:
let wBFinal = new State:
let wA = new Region:
let wB = new Region:
let waitAB = new State:
let ABORegion = new Region:
let ABO = new State:
let innerRootRegion = new Region:
let sigA = new Signal:
let sigB = new Signal:
let sigR = new Signal:
let sigO = new Signal:
let root = new State:
//ABRO Root State
root.setLabel("ABRO") ->
//ABRO Signal definition:
sigA.setName("A") ->
sigA.setIsInput(true) ->
sigB.setName("B") ->
sigB.setIsInput(true) ->
sigR.setName("R") ->
sigR.setIsInput(true) ->
sigO.setName("O") ->
sigO.setIsOutput(true) ->
root.signals.add(sigA) ->
root.signals.add(sigB) ->
root.signals.add(sigR) ->
root.signals.add(sigO) ->
//Inner State ABO
ABO.setLabel("ABO") ->
ABO.setIsInitial(true) ->
//Inner state Wait A and B
waitAB.setLabel("WaitAB") ->
waitAB.setIsInitial(true) ->
//Region for 'wait for a' 
wAInitial.setLabel("wA") ->
wAInitial.setIsInitial(true) ->
wA.innerStates.add(wAInitial) ->
wAFinal.setLabel("dA") ->
wAFinal.setIsFinal(true) ->
wA.innerStates.add(wAFinal) ->
wATrans.setSourceState(wAInitial) ->
wATrans.setTargetState(wAFinal) ->
wATrans.setTriggersAndEffects("A") ->
waitAB.regions.add(wA) ->
//Region for 'wait for b'
wBInitial.setLabel("wB") ->
wBInitial.setIsInitial(true) ->
wB.innerStates.add(wBInitial) ->
wBFinal.setLabel("dB") ->
wBFinal.setIsFinal(true) ->
wB.innerStates.add(wBFinal) ->
wBTrans.setSourceState(wBInitial) ->
wBTrans.setTargetState(wBFinal) ->
wBTrans.setTriggersAndEffects("B") ->
waitAB.regions.add(wB) ->
//ABO final state
ABOFinal.setLabel("done") ->
waitABToFinal.setSourceState(waitAB) ->
waitABToFinal.setTargetState(ABOFinal) ->
waitABToFinal.setType(TransitionType::NORMALTERMINATION) ->
waitABToFinal.setTriggersAndEffects("/O") ->
ABORegion.innerStates.add(waitAB) ->
ABORegion.innerStates.add(ABOFinal) ->
ABO.regions.add(ABORegion)->
reset.setSourceState(ABO) ->
reset.setTargetState(ABO) ->
reset.setType(TransitionType::STRONGABORT) ->
reset.setTriggersAndEffects("R") ->
innerRootRegion.innerStates.add(ABO) ->
root.regions.add(innerRootRegion) ->
rootRegion.innerStates.add(root)
;


///////////////////////////////////////
// Optimization and fixing of issues //
///////////////////////////////////////

// Java escapes.
Void generateStateId(State state):
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.generateStateId(de.cau.cs.kieler.synccharts.State)
;

Void generateRegionId(Region region):
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.generateRegionId(de.cau.cs.kieler.synccharts.Region)
;

Void clearIDCache():
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.clearCache()
;

List[State] getStateList():
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.getStateList()
;

List[Region] getRegionList():
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.getRegionList()
;
 
Void debug(Object object):
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.debug(java.lang.Object)
;

Boolean isEnabled(String key):
 JAVA de.cau.cs.kieler.synccharts.ksbase.util.OptimizeUtils.isEnabled(java.lang.String)
;

Boolean isSimpleState(State state):
  state.regions.isEmpty &&
  state.suspensionTrigger == null &&
  state.entryActions.isEmpty &&
  state.exitActions.isEmpty &&
  state.innerActions.isEmpty
;

Void optimizeSelected(State state):
 optimizeSelected(state.parentRegion)
;

Void optimizeSelected(Region rootRegion):
 let fixTransitionPrios = isEnabled("fixTransitionPriorities"):
 let fixCondOutgoing = isEnabled("fixConditionalOutgoingImmediate"):
 let fixIDs = isEnabled("fixIDs"):
 let fixTransitionTypes = isEnabled("fixTransitionTypes"):
 let removeDummyStates = isEnabled("removeDummyStates"):
 let removeDummyRegions = isEnabled("removeDummyRegions"):
 let removeWhiteSpaces = isEnabled("removeWhiteSpaces"):
 let statesToRemove = getStateList():
 let regionsToRemove = getRegionList():
 clearIDCache() ->
 optimizeRec(rootRegion, 
             fixTransitionPrios, 
             fixCondOutgoing,
             fixIDs,
             fixTransitionTypes,
             removeDummyStates,
             removeDummyRegions,
             removeWhiteSpaces,
             statesToRemove,
             regionsToRemove) ->
 (if (removeDummyStates) then
   statesToRemove.removeStateFromRegion()) ->
 (if (removeDummyRegions) then 
   regionsToRemove.removeRegionFromState())
;

Void removeStateFromRegion(State state):
 state.parentRegion.innerStates.remove(state)
;

Void removeRegionFromState(Region region):
 if (region.parentState != null) then
   region.parentState.regions.remove(region)
;

Void optimizeRec(Region region, 
                 Boolean fixTransitionPrios, 
                 Boolean fixCondOutgoing,
                 Boolean fixIDs,
                 Boolean fixTransitionTypes,
                 Boolean removeDummyStates,
                 Boolean removeDummyRegions,
                 Boolean removeWhiteSpaces,
                 List[State] statesToRemove,
                 List[Region] regionsToRemove):
 (if (fixIDs) then
    generateRegionId(region)) ->
 (if (region.innerStates.isEmpty) then
   (if (removeDummyRegions &&
       region.signals.isEmpty &&
       region.variables.isEmpty) then
       regionsToRemove.add(region))
 else
 region.innerStates.optimizeRec(fixTransitionPrios, 
                                fixCondOutgoing,
                                fixIDs,
                                fixTransitionTypes,
                                removeDummyStates,
                                removeDummyRegions,
                                removeWhiteSpaces,
                                statesToRemove,
                                regionsToRemove)
 )
;

Void optimizeRec(State state, 
                 Boolean fixTransitionPrios, 
                 Boolean fixCondOutgoing,
                 Boolean fixIDs,
                 Boolean fixTransitionTypes,
                 Boolean removeDummyStates,
                 Boolean removeDummyRegions,
                 Boolean removeWhiteSpaces,
                 List[State] statesToRemove,
                 List[Region] regionsToRemove):
 (if (fixTransitionPrios || fixTransitionTypes) then 
   state.outgoingTransitions.fixTransition(fixTransitionPrios, 
                                           fixTransitionTypes)) ->
 (if (fixCondOutgoing
       && state.type == StateType::CONDITIONAL) then
       // transitions leaving a conditional state must be immediate
       state.outgoingTransitions.setIsImmediate(true)) ->
 (if (fixIDs) then
    state.setId(state.label) ->
    generateStateId(state)) ->
 (if (removeWhiteSpaces) then
  (state.outgoingTransitions.fixWhiteSpacesInAction() ->
   state.entryActions.fixWhiteSpacesInAction() ->
   state.exitActions.fixWhiteSpacesInAction() ->
   state.suspensionTrigger.fixWhiteSpacesInAction() ->
   state.innerActions.fixWhiteSpacesInAction())
  ) ->
 (if (removeDummyStates) then
   state.fixDummyState(statesToRemove)) ->
 state.regions.optimizeRec(fixTransitionPrios, 
                           fixCondOutgoing,
                           fixIDs,
                           fixTransitionTypes,
                           removeDummyStates,
                           removeDummyRegions,
                           removeWhiteSpaces,
                           statesToRemove,
                           regionsToRemove)
;

// === begin WhiteSpaces ===
// Transition Triggers and effects should not contain whitespaces

Void fixWhiteSpacesInAction(Action action):
 action.triggersAndEffects.replaceAll(" " , "")
;

// === end WhiteSpaces ===

// === begin fix transitions ===
// transitions leaving simple states have to be weak aborts
// normal terminations may not have a trigger
// fix the transition priorities:
// current convention is priorities starting with 1
// older synccharts may have 0 as lowest priority

Void fixTransition(Transition trans, 
                   Boolean fixTransitionPrios, 
                   Boolean fixTransitionTypes):
 (if (fixTransitionPrios && trans.priority == 0) then
  trans.sourceState.outgoingTransitions.incrementPriority()) ->
 (if (fixTransitionTypes) then
  trans.fixTransitionType())
;

Void incrementPriority(Transition trans):
 let prio = trans.priority:
 trans.setPriority(prio + 1)
;

Void fixTransitionType(Transition trans):
 (if (trans.sourceState.isSimpleState()) then
  trans.setType(TransitionType::WEAKABORT)
  else (if (trans.type == TransitionType::NORMALTERMINATION) then
    (removeTriggerFromString(trans) ->
     trans.setTrigger(null))
  )
 )
;

Void removeTriggerFromString(Transition trans):
 (trans.triggersAndEffects != null ?
  ((trans.effects.isEmpty ?
   trans.setTriggersAndEffects(null)
  :
   trans.setTriggersAndEffects("/" + trans.triggersAndEffects.split("/").get(1)) 
  ))
 :
  null
 )
;

// === end fix transitions ===

// === begin dummy states ===
// removes redundant states

Void fixDummyState(State state, List[State] list):
 let trans = state.outgoingTransitions:
 
 (if (trans.size == 1 &&
  (trans.get(0).triggersAndEffects == null || 
  trans.get(0).triggersAndEffects.matches("") ||
  trans.get(0).triggersAndEffects.matches("# /")) &&
  trans.get(0).isImmediate &&
  state.isSimpleState()) then
  (replaceState(state, trans.get(0).targetState) ->
  list.add(state)))
;

Void replaceState(State old, State replacement):
 let incoming = getIncomingTransitions(old):
 replacement.setIsInitial(old.isInitial) ->
 (if (replacement.isInitial && replacement.type == StateType::CONDITIONAL) then
   replacement.setType(StateType::NORMAL) ->
   replacement.setLabel(old.label)) ->
 incoming.setTargetState(replacement)
;

List[Transition] getIncomingTransitions(State state):
 let parent = state.parentRegion:
 parent.innerStates.outgoingTransitions.select(e|e.targetState == state)
;

// === end dummy states ===
