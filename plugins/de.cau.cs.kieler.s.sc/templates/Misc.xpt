«REM»
	A misc template file.
«ENDREM»

«IMPORT s»
«IMPORT expressions»


«REM»
	Consider complex expression 
«ENDREM»
«DEFINE expandedExpression FOR OperatorExpression-»
	«IF this.operator == OperatorType::EQ-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " == "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::LT-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " < "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::LEQ-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " <= "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::GT-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " > "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::GEQ-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " >= "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::NOT-»
		(!(«EXPAND expandedExpression FOR this.subExpressions.first()-»))
	«ENDIF»
	«IF this.operator == OperatorType::VAL-»
		(VAL(«EXPAND expandedExpression FOR this.subExpressions.first()-»))
	«ENDIF»
	«IF this.operator == OperatorType::PRE-»
		(PRE(«EXPAND expandedExpression FOR this.subExpressions.first()-»))
	«ENDIF»
	«IF this.operator == OperatorType::NE-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " != "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::AND-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " && "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::OR-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " || "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::ADD-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " + "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::SUB-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " - "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::MULT-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " * "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::DIV-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " / "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
	«IF this.operator == OperatorType::MOD-»
		(«FOREACH  this.subExpressions AS subExpression SEPARATOR " % "-»
			«EXPAND expandedExpression FOR subExpression-»
		«ENDFOREACH-»)
	«ENDIF»
«ENDDEFINE»
«DEFINE expandedExpression FOR SignalReference-»
	PRESENT(«this.signal.name-»)
«ENDDEFINE»
«DEFINE expandedExpression FOR Expression-»
«ENDDEFINE»

«REM»
	Definition of the signaltype including all signals of the SyncChart.
	The list is a list of signals. 
«ENDREM»
«DEFINE generateSigType FOR List-»
	«IF !this.isEmpty-»
		typedef enum {
			«FOREACH this AS signal SEPARATOR ", "-»
				sig_«((Signal)signal).name-»
			«ENDFOREACH-»
		} signaltype;
	«ENDIF-»
«ENDDEFINE»

«REM»
	Definition of the signal array including all signals of the SyncChart.
	The list is a list of signals. 
«ENDREM»
«DEFINE generateSigArray FOR List-»
	const char *s2signame[] = {
		«FOREACH this AS signal SEPARATOR ", "-»
		"sig_«((Signal)signal).name-»"
		«ENDFOREACH-»
	};
«ENDDEFINE»

«REM»
	Template for a function to set inputs. 
«ENDREM»
«DEFINE generateInputSignal FOR Signal-»
	void «((Program)this.eContainer).name-»_I_«this.name-»(«IF type!="ValueType::PURE"-»int val«ENDIF») {
		signals = signals | (1 << sig_«this.name»);
		«IF type!="ValueType::PURE"-»valSigInt[sig_«this.name-»]=val;«ENDIF»
	}
«ENDDEFINE»