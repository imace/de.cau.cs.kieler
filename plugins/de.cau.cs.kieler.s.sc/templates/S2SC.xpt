«IMPORT s»
«IMPORT expressions»

«EXTENSION templates::Extensions»
«REM»
 EXTENSION templates::Extensions
«ENDREM»

«DEFINE main FOR Program-»
	«FILE name + ".c"-»

    /*****************************************************************************/
    /* Generated SC-code                                                         */
    /*****************************************************************************/
    /* KIELER - Kiel Integrated Environment for Layout Eclipse RichClient        */
    /*                                                                           */
    /* http://www.informatik.uni-kiel.de/rtsys/kieler/                           */
    /*                                                                           */
    /* Copyright 2009 by                                                         */
    /* + Christian-Albrechts-University of Kiel                                  */
    /*   + Department of Computer Science                                        */
    /*     + Real-Time and Embedded Systems Group                                */
    /*                                                                           */
    /* This code is provided under the terms of the Eclipse Public License (EPL).*/
    /*****************************************************************************/
    
		«EXPAND init-»
	
	«ENDFILE»
«ENDDEFINE»



«DEFINE init FOR Program-»
    #include "misc.h"
    #include "sc.h"

	«EXPAND Misc::generateSigType FOR allSignals(this)-»
	«EXPAND Misc::generateSigArray FOR allSignals(this)-»

    #define _SC_valSigInt_SIZE «allSignals(this).size-» // Highest signal id in use;

    int valSigInt[_SC_valSigInt_SIZE];
    int valSigIntPre[_SC_valSigInt_SIZE];

    «FOREACH allSignals(this) AS signal -»
		«EXPAND Misc::generateInputSignal FOR signal-»
    «ENDFOREACH-»
	
    #ifndef EXTERNTICK
    int tick(){
       TICKSTART(«this.priority-»);
       
       «EXPAND expandedStateList FOR this.states-»
       
    }
    #endif
«ENDDEFINE»


«DEFINE expandedStateList FOR List[State]-»
   «FOREACH this AS state -»
       «EXPAND expandedState FOR state-»
   «ENDFOREACH-»
«ENDDEFINE»


«DEFINE expandedState FOR State-»
       «this.name-»:
       «EXPAND expandedInstructionList FOR this.instructions-»
       
«ENDDEFINE»


«DEFINE expandedInstructionList FOR List[Instruction]-»
   «FOREACH this AS instruction -»
       «EXPAND expandedInstruction FOR instruction-»
   «ENDFOREACH-»
«ENDDEFINE»


«DEFINE expandedInstruction FOR Pause-»
         PAUSE;
«ENDDEFINE»
«DEFINE expandedInstruction FOR Term-»
         TERM;
«ENDDEFINE»
«DEFINE expandedInstruction FOR Halt-»
         HALT;
«ENDDEFINE»
«DEFINE expandedInstruction FOR Join-»
         JOIN;
«ENDDEFINE»
«DEFINE expandedInstruction FOR Abort-»
         ABORT;
«ENDDEFINE»
«DEFINE expandedInstruction FOR If-»
         if («EXPAND Misc::expandedExpression FOR this.expression-») { 
         		«EXPAND expandedInstructionList FOR this.instructions-» 
         }
«ENDDEFINE»
«DEFINE expandedInstruction FOR Goto-»
         GOTO(«this.state.name-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Fork-»
         FORK(«this.state.name-»,«this.priority-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Forke-»
         FORKE(«this.state.name-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Emit-»
         EMIT(«this.signal.name-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Await-»
         AWAIT(«this.signal.name-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Prio-»
         PRIO(«this.priority-»);
«ENDDEFINE»
«DEFINE expandedInstruction FOR Instruction-»
«ENDDEFINE»

