/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.dsl.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.synccharts.dsl.services.RetypingSyncchartsGrammarAccess;

public class RetypingSyncchartsParser extends AbstractContentAssistParser {
	
	@Inject
	private RetypingSyncchartsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsLexer createLexer(CharStream stream) {
		return new de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsLexer(stream);
	}
	
	@Override
	protected de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsParser createParser() {
		de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsParser result = new de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getStateContentAccess().getAlternatives_1(), "rule__StateContent__Alternatives_1");
					put(grammarAccess.getTransitionAccess().getAlternatives_2(), "rule__Transition__Alternatives_2");
					put(grammarAccess.getEffectAccess().getAlternatives(), "rule__Effect__Alternatives");
					put(grammarAccess.getValuedObjectAccess().getAlternatives(), "rule__ValuedObject__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getValueExpressionAccess().getAlternatives(), "rule__ValueExpression__Alternatives");
					put(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives(), "rule__NotOrNormalExpression__Alternatives");
					put(grammarAccess.getBooleanExpressionAccess().getAlternatives(), "rule__BooleanExpression__Alternatives");
					put(grammarAccess.getStateTypeAccess().getAlternatives(), "rule__StateType__Alternatives");
					put(grammarAccess.getTransitionTypeAccess().getAlternatives(), "rule__TransitionType__Alternatives");
					put(grammarAccess.getOperatorKindAccess().getAlternatives(), "rule__OperatorKind__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateContentAccess().getGroup(), "rule__StateContent__Group__0");
					put(grammarAccess.getStateContentAccess().getGroup_1_4(), "rule__StateContent__Group_1_4__0");
					put(grammarAccess.getStateContentAccess().getGroup_1_4_1(), "rule__StateContent__Group_1_4_1__0");
					put(grammarAccess.getEntryActionAccess().getGroup(), "rule__EntryAction__Group__0");
					put(grammarAccess.getEntryActionAccess().getGroup_2(), "rule__EntryAction__Group_2__0");
					put(grammarAccess.getExitActionAccess().getGroup(), "rule__ExitAction__Group__0");
					put(grammarAccess.getExitActionAccess().getGroup_2(), "rule__ExitAction__Group_2__0");
					put(grammarAccess.getInnerActionAccess().getGroup(), "rule__InnerAction__Group__0");
					put(grammarAccess.getInnerActionAccess().getGroup_2(), "rule__InnerAction__Group_2__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
					put(grammarAccess.getDeclaredTargetStateAccess().getGroup(), "rule__DeclaredTargetState__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getEmissionAccess().getGroup(), "rule__Emission__Group__0");
					put(grammarAccess.getEmissionAccess().getGroup_1(), "rule__Emission__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
					put(grammarAccess.getSignalAccess().getGroup_2(), "rule__Signal__Group_2__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
					put(grammarAccess.getValOperationAccess().getGroup(), "rule__ValOperation__Group__0");
					put(grammarAccess.getCompareOperationAccess().getGroup(), "rule__CompareOperation__Group__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_1(), "rule__CompareOperation__Group_1__0");
					put(grammarAccess.getNotOperationAccess().getGroup(), "rule__NotOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup(), "rule__AndOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup_1(), "rule__AndOperation__Group_1__0");
					put(grammarAccess.getOrOperationAccess().getGroup(), "rule__OrOperation__Group__0");
					put(grammarAccess.getOrOperationAccess().getGroup_1(), "rule__OrOperation__Group_1__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_3(), "rule__BooleanExpression__Group_3__0");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_0(), "rule__State__IsInitialAssignment_0");
					put(grammarAccess.getStateAccess().getIsFinalAssignment_1(), "rule__State__IsFinalAssignment_1");
					put(grammarAccess.getStateAccess().getStateKindAssignment_2(), "rule__State__StateKindAssignment_2");
					put(grammarAccess.getStateAccess().getStateNameAssignment_4(), "rule__State__StateNameAssignment_4");
					put(grammarAccess.getStateAccess().getLabelAssignment_5(), "rule__State__LabelAssignment_5");
					put(grammarAccess.getStateAccess().getStateContentAssignment_6(), "rule__State__StateContentAssignment_6");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_7(), "rule__State__OutgoingTransitionsAssignment_7");
					put(grammarAccess.getStateContentAccess().getExitActionsAssignment_1_0(), "rule__StateContent__ExitActionsAssignment_1_0");
					put(grammarAccess.getStateContentAccess().getEntryActionsAssignment_1_1(), "rule__StateContent__EntryActionsAssignment_1_1");
					put(grammarAccess.getStateContentAccess().getInnerActionAssignment_1_2(), "rule__StateContent__InnerActionAssignment_1_2");
					put(grammarAccess.getStateContentAccess().getSignalsAndVariablesAssignment_1_3(), "rule__StateContent__SignalsAndVariablesAssignment_1_3");
					put(grammarAccess.getStateContentAccess().getInnerStatesAssignment_1_4_0(), "rule__StateContent__InnerStatesAssignment_1_4_0");
					put(grammarAccess.getStateContentAccess().getParallelStatesAssignment_1_4_1_1(), "rule__StateContent__ParallelStatesAssignment_1_4_1_1");
					put(grammarAccess.getEntryActionAccess().getTriggerAssignment_1(), "rule__EntryAction__TriggerAssignment_1");
					put(grammarAccess.getEntryActionAccess().getEffectsAssignment_2_1(), "rule__EntryAction__EffectsAssignment_2_1");
					put(grammarAccess.getExitActionAccess().getTriggerAssignment_1(), "rule__ExitAction__TriggerAssignment_1");
					put(grammarAccess.getExitActionAccess().getEffectsAssignment_2_1(), "rule__ExitAction__EffectsAssignment_2_1");
					put(grammarAccess.getInnerActionAccess().getTriggerAssignment_1(), "rule__InnerAction__TriggerAssignment_1");
					put(grammarAccess.getInnerActionAccess().getEffectsAssignment_2_1(), "rule__InnerAction__EffectsAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getSourceStateNameAssignment_0(), "rule__Transition__SourceStateNameAssignment_0");
					put(grammarAccess.getTransitionAccess().getTransitionTypeAssignment_1(), "rule__Transition__TransitionTypeAssignment_1");
					put(grammarAccess.getTransitionAccess().getTargetStateNameAssignment_2_0(), "rule__Transition__TargetStateNameAssignment_2_0");
					put(grammarAccess.getTransitionAccess().getDeclaredTargetStateAssignment_2_1(), "rule__Transition__DeclaredTargetStateAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getTransitionLabelAssignment_3_1(), "rule__Transition__TransitionLabelAssignment_3_1");
					put(grammarAccess.getDeclaredTargetStateAccess().getIsInitialAssignment_0(), "rule__DeclaredTargetState__IsInitialAssignment_0");
					put(grammarAccess.getDeclaredTargetStateAccess().getIsFinalAssignment_1(), "rule__DeclaredTargetState__IsFinalAssignment_1");
					put(grammarAccess.getDeclaredTargetStateAccess().getDeclaredStateTypeAssignment_3(), "rule__DeclaredTargetState__DeclaredStateTypeAssignment_3");
					put(grammarAccess.getDeclaredTargetStateAccess().getDeclaredStateNameAssignment_4(), "rule__DeclaredTargetState__DeclaredStateNameAssignment_4");
					put(grammarAccess.getActionAccess().getTriggerAssignment_0(), "rule__Action__TriggerAssignment_0");
					put(grammarAccess.getActionAccess().getEffectsAssignment_1_1(), "rule__Action__EffectsAssignment_1_1");
					put(grammarAccess.getEmissionAccess().getSignalAssignment_0(), "rule__Emission__SignalAssignment_0");
					put(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1(), "rule__Emission__NewValueAssignment_1_1");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getSignalReferenceAccess().getReferenceAssignment(), "rule__SignalReference__ReferenceAssignment");
					put(grammarAccess.getVariableReferenceAccess().getReferenceAssignment(), "rule__VariableReference__ReferenceAssignment");
					put(grammarAccess.getSignalAccess().getNameAssignment_1(), "rule__Signal__NameAssignment_1");
					put(grammarAccess.getSignalAccess().getInitialValueAssignment_2_1(), "rule__Signal__InitialValueAssignment_2_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getInitialValueAssignment_2_1(), "rule__Variable__InitialValueAssignment_2_1");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
					put(grammarAccess.getHostCodeAccess().getCodeAssignment(), "rule__HostCode__CodeAssignment");
					put(grammarAccess.getOperatorAccess().getOperatorKindAssignment(), "rule__Operator__OperatorKindAssignment");
					put(grammarAccess.getValOperationAccess().getOperatorAssignment_0(), "rule__ValOperation__OperatorAssignment_0");
					put(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1(), "rule__ValOperation__SubExpressionsAssignment_1");
					put(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1(), "rule__CompareOperation__OperatorAssignment_1_1");
					put(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2(), "rule__CompareOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getNotOperationAccess().getOperatorsAssignment_0(), "rule__NotOperation__OperatorsAssignment_0");
					put(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1(), "rule__NotOperation__SubExpressionsAssignment_1");
					put(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1(), "rule__AndOperation__OperatorAssignment_1_1");
					put(grammarAccess.getAndOperationAccess().getSubExpressionAssignment_1_2(), "rule__AndOperation__SubExpressionAssignment_1_2");
					put(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1(), "rule__OrOperation__OperatorAssignment_1_1");
					put(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2(), "rule__OrOperation__SubExpressionsAssignment_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsParser typedParser = (de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal.InternalRetypingSyncchartsParser) parser;
			typedParser.entryRuleState();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RetypingSyncchartsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RetypingSyncchartsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
