/*
* generated by Xtext
*/
grammar InternalRetypingSynccharts;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.dsl.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import de.cau.cs.kieler.synccharts.dsl.services.RetypingSyncchartsGrammarAccess;

}

@parser::members {
 
 	private RetypingSyncchartsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RetypingSyncchartsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleState
entryRuleState :
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule StateType
ruleStateType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateTypeAccess().getAlternatives()); }
(rule__StateType__Alternatives)
{ after(grammarAccess.getStateTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__State__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_0_0()); }
(rule__State__Group_0_0__0)
{ after(grammarAccess.getStateAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getStateAccess().getStateKindAssignment_0_1()); }
(rule__State__StateKindAssignment_0_1)?
{ after(grammarAccess.getStateAccess().getStateKindAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateTypeAccess().getPSEUDOEnumLiteralDeclaration_0()); }
(	'PSEUDO' 
)
{ after(grammarAccess.getStateTypeAccess().getPSEUDOEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_1()); }
(	'reference' 
)
{ after(grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_2()); }
(	'textual' 
)
{ after(grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getAlternatives_0()); }
(rule__State__Alternatives_0)
{ after(grammarAccess.getStateAccess().getAlternatives_0()); }
)

	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_1()); }
(
	'state' 
)?
{ after(grammarAccess.getStateAccess().getStateKeyword_1()); }
)

	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateNameAssignment_2()); }
(rule__State__StateNameAssignment_2)?
{ after(grammarAccess.getStateAccess().getStateNameAssignment_2()); }
)

	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLabelAssignment_3()); }
(rule__State__LabelAssignment_3)?
{ after(grammarAccess.getStateAccess().getLabelAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0()); }
(rule__State__IsInitialAssignment_0_0_0)?
{ after(grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0()); }
)

	rule__State__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getIsFinalAssignment_0_0_1()); }
(rule__State__IsFinalAssignment_0_0_1)?
{ after(grammarAccess.getStateAccess().getIsFinalAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__State__IsInitialAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_0()); }
(
{ before(grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_0()); }

	'init' 

{ after(grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_0()); }
)

{ after(grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__IsFinalAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_1_0()); }
(
{ before(grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_1_0()); }

	'final' 

{ after(grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_1_0()); }
)

{ after(grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__StateKindAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKindStateTypeEnumRuleCall_0_1_0()); }
	ruleStateType{ after(grammarAccess.getStateAccess().getStateKindStateTypeEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__StateNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getStateNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__LabelAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


