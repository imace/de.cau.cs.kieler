/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.dsl.outline;

//import java.util.List;

import java.util.List;

import org.eclipse.xtext.ui.common.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.common.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.eclipse.emf.ecore.EObject;
import de.cau.cs.kieler.synccharts.dsl.retypingSynccharts.State;
import de.cau.cs.kieler.synccharts.dsl.retypingSynccharts.StateType;

/**
 * customization of the default outline structure
 * 
 */
public class RetypingSyncchartsTransformer extends
		AbstractDeclarativeSemanticModelTransformer {
	/**
	 *  @modified oba
	 */
	
	/**
	 * This method will be called by naming convention: - method name must be
	 * createNode - first param: subclass of EObject - second param:
	 * ContentOutlineNode
	 */

	public ContentOutlineNode createNode(State semanticState,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(semanticState,
				parentNode);
		String myStateType = "";
		String myStateName = "";
		String myStateLabel = "";

		/**
		 * init myState "myStateLabel" --> init myState:"myStateLabel"
		 */
		if (semanticState.getStateKind() != null) {
			myStateType = semanticState.getStateKind().getLiteral();
		}
		if (semanticState.getStateName() != null) {
			myStateName = semanticState.getStateName();
		}
		if (semanticState.getLabel() != null) {
			myStateLabel = semanticState.getLabel();
		}

		node
				.setLabel(myStateType + " " + myStateName + ": \" " + myStateLabel
						+ "\"");
		
		if (semanticState.eContents() != null){
			ContentOutlineNode childNode = super.newOutlineNode(semanticState, parentNode);
			if (semanticState.isIsFinal()) {
				childNode.setLabel("isInitial");
			}
			if (semanticState.isIsFinal()) {
				childNode.setLabel("isFinal");
			}
			
		}
		
		return node;
	}

	/**
	 * This method will be called by naming convention: - method name must be
	 * getChildren - first param: subclass of EObject
	 */
	public List<EObject> getChildren(State s) {
		return s.eContents();
	}
}
