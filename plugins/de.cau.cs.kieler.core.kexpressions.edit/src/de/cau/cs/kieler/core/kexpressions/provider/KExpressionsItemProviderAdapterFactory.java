/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.cau.cs.kieler.core.kexpressions.provider;

import de.cau.cs.kieler.core.kexpressions.util.KExpressionsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class KExpressionsItemProviderAdapterFactory extends KExpressionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public KExpressionsItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.ComplexExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComplexExpressionItemProvider complexExpressionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.ComplexExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createComplexExpressionAdapter() {
        if (complexExpressionItemProvider == null) {
            complexExpressionItemProvider = new ComplexExpressionItemProvider(this);
        }

        return complexExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Expression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionItemProvider expressionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Expression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionAdapter() {
        if (expressionItemProvider == null) {
            expressionItemProvider = new ExpressionItemProvider(this);
        }

        return expressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.TextualCode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TextualCodeItemProvider textualCodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.TextualCode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTextualCodeAdapter() {
        if (textualCodeItemProvider == null) {
            textualCodeItemProvider = new TextualCodeItemProvider(this);
        }

        return textualCodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Signal} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SignalItemProvider signalItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Signal}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSignalAdapter() {
        if (signalItemProvider == null) {
            signalItemProvider = new SignalItemProvider(this);
        }

        return signalItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.ValuedObject} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ValuedObjectItemProvider valuedObjectItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.ValuedObject}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createValuedObjectAdapter() {
        if (valuedObjectItemProvider == null) {
            valuedObjectItemProvider = new ValuedObjectItemProvider(this);
        }

        return valuedObjectItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Variable} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected VariableItemProvider variableItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Variable}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createVariableAdapter() {
        if (variableItemProvider == null) {
            variableItemProvider = new VariableItemProvider(this);
        }

        return variableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.ValuedObjectReference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ValuedObjectReferenceItemProvider valuedObjectReferenceItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.ValuedObjectReference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createValuedObjectReferenceAdapter() {
        if (valuedObjectReferenceItemProvider == null) {
            valuedObjectReferenceItemProvider = new ValuedObjectReferenceItemProvider(this);
        }

        return valuedObjectReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Value} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ValueItemProvider valueItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Value}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createValueAdapter() {
        if (valueItemProvider == null) {
            valueItemProvider = new ValueItemProvider(this);
        }

        return valueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.IntValue} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IntValueItemProvider intValueItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.IntValue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIntValueAdapter() {
        if (intValueItemProvider == null) {
            intValueItemProvider = new IntValueItemProvider(this);
        }

        return intValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.FloatValue} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FloatValueItemProvider floatValueItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.FloatValue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFloatValueAdapter() {
        if (floatValueItemProvider == null) {
            floatValueItemProvider = new FloatValueItemProvider(this);
        }

        return floatValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.BooleanValue} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BooleanValueItemProvider booleanValueItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.BooleanValue}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBooleanValueAdapter() {
        if (booleanValueItemProvider == null) {
            booleanValueItemProvider = new BooleanValueItemProvider(this);
        }

        return booleanValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.OperatorExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperatorExpressionItemProvider operatorExpressionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.OperatorExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperatorExpressionAdapter() {
        if (operatorExpressionItemProvider == null) {
            operatorExpressionItemProvider = new OperatorExpressionItemProvider(this);
        }

        return operatorExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.TextExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TextExpressionItemProvider textExpressionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.TextExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTextExpressionAdapter() {
        if (textExpressionItemProvider == null) {
            textExpressionItemProvider = new TextExpressionItemProvider(this);
        }

        return textExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.InterfaceDeclaration} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterfaceDeclarationItemProvider interfaceDeclarationItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.InterfaceDeclaration}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterfaceDeclarationAdapter() {
        if (interfaceDeclarationItemProvider == null) {
            interfaceDeclarationItemProvider = new InterfaceDeclarationItemProvider(this);
        }

        return interfaceDeclarationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.InterfaceSignalDecl} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterfaceSignalDeclItemProvider interfaceSignalDeclItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.InterfaceSignalDecl}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterfaceSignalDeclAdapter() {
        if (interfaceSignalDeclItemProvider == null) {
            interfaceSignalDeclItemProvider = new InterfaceSignalDeclItemProvider(this);
        }

        return interfaceSignalDeclItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.ISignal} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ISignalItemProvider iSignalItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.ISignal}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createISignalAdapter() {
        if (iSignalItemProvider == null) {
            iSignalItemProvider = new ISignalItemProvider(this);
        }

        return iSignalItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.ChannelDescription} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChannelDescriptionItemProvider channelDescriptionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.ChannelDescription}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createChannelDescriptionAdapter() {
        if (channelDescriptionItemProvider == null) {
            channelDescriptionItemProvider = new ChannelDescriptionItemProvider(this);
        }

        return channelDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.TypeIdentifier} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TypeIdentifierItemProvider typeIdentifierItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.TypeIdentifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTypeIdentifierAdapter() {
        if (typeIdentifierItemProvider == null) {
            typeIdentifierItemProvider = new TypeIdentifierItemProvider(this);
        }

        return typeIdentifierItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.InterfaceVariableDecl} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterfaceVariableDeclItemProvider interfaceVariableDeclItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.InterfaceVariableDecl}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterfaceVariableDeclAdapter() {
        if (interfaceVariableDeclItemProvider == null) {
            interfaceVariableDeclItemProvider = new InterfaceVariableDeclItemProvider(this);
        }

        return interfaceVariableDeclItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.VariableDecl} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected VariableDeclItemProvider variableDeclItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.VariableDecl}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createVariableDeclAdapter() {
        if (variableDeclItemProvider == null) {
            variableDeclItemProvider = new VariableDeclItemProvider(this);
        }

        return variableDeclItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.IVariable} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IVariableItemProvider iVariableItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.IVariable}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIVariableAdapter() {
        if (iVariableItemProvider == null) {
            iVariableItemProvider = new IVariableItemProvider(this);
        }

        return iVariableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Input} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InputItemProvider inputItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Input}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInputAdapter() {
        if (inputItemProvider == null) {
            inputItemProvider = new InputItemProvider(this);
        }

        return inputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Output} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OutputItemProvider outputItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Output}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOutputAdapter() {
        if (outputItemProvider == null) {
            outputItemProvider = new OutputItemProvider(this);
        }

        return outputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.InputOutput} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InputOutputItemProvider inputOutputItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.InputOutput}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInputOutputAdapter() {
        if (inputOutputItemProvider == null) {
            inputOutputItemProvider = new InputOutputItemProvider(this);
        }

        return inputOutputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.core.kexpressions.Return} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReturnItemProvider returnItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.core.kexpressions.Return}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReturnAdapter() {
        if (returnItemProvider == null) {
            returnItemProvider = new ReturnItemProvider(this);
        }

        return returnItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (complexExpressionItemProvider != null) complexExpressionItemProvider.dispose();
        if (expressionItemProvider != null) expressionItemProvider.dispose();
        if (textualCodeItemProvider != null) textualCodeItemProvider.dispose();
        if (signalItemProvider != null) signalItemProvider.dispose();
        if (valuedObjectItemProvider != null) valuedObjectItemProvider.dispose();
        if (variableItemProvider != null) variableItemProvider.dispose();
        if (valuedObjectReferenceItemProvider != null) valuedObjectReferenceItemProvider.dispose();
        if (valueItemProvider != null) valueItemProvider.dispose();
        if (intValueItemProvider != null) intValueItemProvider.dispose();
        if (floatValueItemProvider != null) floatValueItemProvider.dispose();
        if (booleanValueItemProvider != null) booleanValueItemProvider.dispose();
        if (operatorExpressionItemProvider != null) operatorExpressionItemProvider.dispose();
        if (textExpressionItemProvider != null) textExpressionItemProvider.dispose();
        if (interfaceDeclarationItemProvider != null) interfaceDeclarationItemProvider.dispose();
        if (interfaceSignalDeclItemProvider != null) interfaceSignalDeclItemProvider.dispose();
        if (iSignalItemProvider != null) iSignalItemProvider.dispose();
        if (channelDescriptionItemProvider != null) channelDescriptionItemProvider.dispose();
        if (typeIdentifierItemProvider != null) typeIdentifierItemProvider.dispose();
        if (interfaceVariableDeclItemProvider != null) interfaceVariableDeclItemProvider.dispose();
        if (variableDeclItemProvider != null) variableDeclItemProvider.dispose();
        if (iVariableItemProvider != null) iVariableItemProvider.dispose();
        if (inputItemProvider != null) inputItemProvider.dispose();
        if (outputItemProvider != null) outputItemProvider.dispose();
        if (inputOutputItemProvider != null) inputOutputItemProvider.dispose();
        if (returnItemProvider != null) returnItemProvider.dispose();
    }

}
