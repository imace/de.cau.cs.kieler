//grammar de.cau.cs.kieler.s.S with org.eclipse.xtext.common.Terminals
//		 de.cau.cs.kieler.core.expressions.Expressions, 
//		 de.cau.cs.kieler.core.annotations.Annotations
grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.core.kexpressions.KExpressions
//grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.synccharts.text.actions.Actions
//grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.synccharts.text.interfaces.Interfaces

//import 'http://kieler.cs.cau.de/expressions' as expressions --> wrong
//import 'http://kieler.cs.cau.de/annotations' as annotations

import "platform:/resource/de.cau.cs.kieler.core.kexpressions/model/kexpressions.ecore" as expressions
//import "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.ecore" as annotations

generate s "http://www.cau.de/cs/kieler/s"


Program :
	'Synchronous Program' name = ID '(' priority=INT ')'
//	('Inputs' (signals += Signal) (',' signals += Signal)*';')?
//	('Outputs' (signals += Signal) (',' signals += Signal)*';')?
//	('Signals' (signals += Signal) (',' signals += Signal)*';')?
	(signals += Signal)*
	(states += State)+
;



//Annotation:
//	'@' key = ID ':'
//	value = STRING
//;

//TODO: Consolidate with Annotatable xtext grammar somehow... (s.a.)
//Annotatable returns annotations::Annotatable:
// 	State | Instruction;


State:
	name = ID ':'
	('SIGNALS' (signals+=Signal)* ';')? 
	(instructions+=Instruction';')*
;


Thread:
	name = ID '{'
	('SIGNALS' (signals+=Signal)* ';')? 
	(states+=State';')*
	'}'
;


Signal returns expressions::Signal:
(isInput?='input')?
	(isOutput?='output')?
	'signal'
	(name=EString)
	(':=' initialValue=EString)?
    ((':' type=ValueType)
      |
     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=EString) )
    )? ";";
    
//Signal returns expressions::Signal :
//	name=ID ':' 
//	type = SignalType
//	('combine' combineFunction = [CombineFunction])?
//;

//CombineFunction:
//	name=ID
//	type=[expressions::ValueType]
//	type=ValueType
//;


//SignalType:
//	PrimitiveSignalType | CustomSignalType;
  
//CustomSignalType:
//  'CUSTOM' customType = STRING;

//enum PrimitiveType:
//	Pure='PURE' | Int='INT' | Bool='BOOL' | Float='FLOAT';
	
//PrimitiveSignalType:
//	primitiveType = PrimitiveType
//	;
  
//IntValue: 
//	value=IntValue;
//FloatValue:
//    value=Float; 
//BooleanValue:
//    value=Boolean;
    
//terminal Float: 
//	((INT"."INT | INT("."INT)?("e"|"E")("+")?INT))"f"? | INT"f";
//terminal Boolean: 
//	"true" | "false";
	

//---------------------------------------------------------------------
//----------------------- List of S-Instructions ----------------------
//---------------------------------------------------------------------
Continuation:
	 State | Thread
;

Instruction:
   Halt | Abort | Join | Pause | Term | If | Trans | Fork | Emit | Await | Prio
;

// Change priority
Prio:
	'PRIO''('priority=INT (',' continuation=[Continuation])?')'
;

// Transition to anothe Thread or State   
Trans :
	'TRANS''(' continuation=[Continuation] ')'
;
  
// Forking new Threads
Fork :
	'FORK''('state=[Thread] ',' priority=INT (',' continuation=[Continuation])?')'
;


// Joining Threads
Join : 
	{Join}
	'JOIN''('continuation=[Continuation]?')'
;
   

// Simple instructions
Pause :
	{Pause} 
	'PAUSE''('continuation=[Continuation]?')'
;
  
Term : 
	{Term}
	'TERM''('continuation=[Continuation]?')'
;
  
Halt : 
	{Halt}
	'HALT''('continuation=[Continuation]?')'
;
  

Emit:
	'EMIT''('signal= [expressions::Signal] (',' continuation=[Continuation])?')'
;
  
Abort : 
	{Abort}
	'ABORT''('continuation=[Continuation]?')'
;

// Conditioned execution of instructions  
If : 
	'IF''('expression = Expression (',' continuation=[Continuation])?')' '{'
		(instructions += Instruction';')*
	'}'
;
  
// Complex instruction
Await:
	'AWAIT''('signal= [expressions::Signal] (',' continuation=[Continuation])?')'
;

