/*
* generated by Xtext
*/

package de.cau.cs.kieler.s.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynchronousProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPriorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPriorityIntValueParserRuleCall_3_0 = (RuleCall)cPriorityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSignalsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_5_1_0 = (RuleCall)cSignalsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSignalsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_5_2_1_0 = (RuleCall)cSignalsAssignment_5_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOutputsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSignalsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_6_1_0 = (RuleCall)cSignalsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSignalsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_6_2_1_0 = (RuleCall)cSignalsAssignment_6_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSignalsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSignalsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_7_1_0 = (RuleCall)cSignalsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSignalsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_7_2_1_0 = (RuleCall)cSignalsAssignment_7_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		
		//Program:
		//	"Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs" signals+=Signal ("," signals+=Signal)* ";")?
		//	("Outputs" signals+=Signal ("," signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";")?
		//	states+=State+;
		public ParserRule getRule() { return rule; }

		//"Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs" signals+=Signal ("," signals+=Signal)* ";")?
		//("Outputs" signals+=Signal ("," signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";")?
		//states+=State+
		public Group getGroup() { return cGroup; }

		//"Synchronous Program"
		public Keyword getSynchronousProgramKeyword_0() { return cSynchronousProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//priority=IntValue
		public Assignment getPriorityAssignment_3() { return cPriorityAssignment_3; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_3_0() { return cPriorityIntValueParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("Inputs" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"Inputs"
		public Keyword getInputsKeyword_5_0() { return cInputsKeyword_5_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_5_1() { return cSignalsAssignment_5_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_5_1_0() { return cSignalsSignalParserRuleCall_5_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_5_2_1() { return cSignalsAssignment_5_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_5_2_1_0() { return cSignalsSignalParserRuleCall_5_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }

		//("Outputs" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"Outputs"
		public Keyword getOutputsKeyword_6_0() { return cOutputsKeyword_6_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_6_1() { return cSignalsAssignment_6_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_6_1_0() { return cSignalsSignalParserRuleCall_6_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_6_2_1() { return cSignalsAssignment_6_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_6_2_1_0() { return cSignalsSignalParserRuleCall_6_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//("Signals" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"Signals"
		public Keyword getSignalsKeyword_7_0() { return cSignalsKeyword_7_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_7_1() { return cSignalsAssignment_7_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_7_1_0() { return cSignalsSignalParserRuleCall_7_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_7_2_1() { return cSignalsAssignment_7_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_7_2_1_0() { return cSignalsSignalParserRuleCall_7_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Annotation:
		//	"@" key=ID ":" value=STRING;
		public ParserRule getRule() { return rule; }

		//"@" key=ID ":" value=STRING
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//key=ID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0() { return cKeyIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class AnnotatableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotatable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Annotatable:
		//	State | Signal | Instruction;
		public ParserRule getRule() { return rule; }

		//State | Signal | Instruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Signal
		public RuleCall getSignalParserRuleCall_1() { return cSignalParserRuleCall_1; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_2() { return cInstructionParserRuleCall_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAnnotationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_0_0 = (RuleCall)cAnnotationsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_1_0 = (RuleCall)cAnnotationsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSIGNALSKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInstructionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0_0 = (RuleCall)cInstructionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//State:
		//	name=ID ":" (annotations+=Annotation ("," annotations+=Annotation)*)? ("SIGNALS" signals+=Signal* ";")?
		//	(instructions+=Instruction ";")*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" (annotations+=Annotation ("," annotations+=Annotation)*)? ("SIGNALS" signals+=Signal* ";")?
		//(instructions+=Instruction ";")*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(annotations+=Annotation ("," annotations+=Annotation)*)?
		public Group getGroup_2() { return cGroup_2; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_0() { return cAnnotationsAssignment_2_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_0_0() { return cAnnotationsAnnotationParserRuleCall_2_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_1_1() { return cAnnotationsAssignment_2_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_1_0; }

		//("SIGNALS" signals+=Signal* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"SIGNALS"
		public Keyword getSIGNALSKeyword_3_0() { return cSIGNALSKeyword_3_0; }

		//signals+=Signal*
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_0() { return cSignalsSignalParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//(instructions+=Instruction ";")*
		public Group getGroup_4() { return cGroup_4; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_0() { return cInstructionsAssignment_4_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0_0() { return cInstructionsInstructionParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSignalTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCombineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCombineFunctionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cCombineFunctionCombineFunctionCrossReference_3_1_0 = (CrossReference)cCombineFunctionAssignment_3_1.eContents().get(0);
		private final RuleCall cCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cCombineFunctionCombineFunctionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAnnotationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_4_0_0 = (RuleCall)cAnnotationsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_4_1_1_0 = (RuleCall)cAnnotationsAssignment_4_1_1.eContents().get(0);
		
		//Signal:
		//	name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])? (annotations+=Annotation (","
		//	annotations+=Annotation)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])? (annotations+=Annotation (","
		//annotations+=Annotation)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=SignalType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//SignalType
		public RuleCall getTypeSignalTypeParserRuleCall_2_0() { return cTypeSignalTypeParserRuleCall_2_0; }

		//("combine" combineFunction=[CombineFunction])?
		public Group getGroup_3() { return cGroup_3; }

		//"combine"
		public Keyword getCombineKeyword_3_0() { return cCombineKeyword_3_0; }

		//combineFunction=[CombineFunction]
		public Assignment getCombineFunctionAssignment_3_1() { return cCombineFunctionAssignment_3_1; }

		//[CombineFunction]
		public CrossReference getCombineFunctionCombineFunctionCrossReference_3_1_0() { return cCombineFunctionCombineFunctionCrossReference_3_1_0; }

		//ID
		public RuleCall getCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1() { return cCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1; }

		//(annotations+=Annotation ("," annotations+=Annotation)*)?
		public Group getGroup_4() { return cGroup_4; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_4_0() { return cAnnotationsAssignment_4_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_4_0_0() { return cAnnotationsAnnotationParserRuleCall_4_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_4_1_1() { return cAnnotationsAssignment_4_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_4_1_1_0() { return cAnnotationsAnnotationParserRuleCall_4_1_1_0; }
	}

	public class CombineFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CombineFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSignalTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//CombineFunction:
		//	name=ID type=SignalType;
		public ParserRule getRule() { return rule; }

		//name=ID type=SignalType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=SignalType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//SignalType
		public RuleCall getTypeSignalTypeParserRuleCall_1_0() { return cTypeSignalTypeParserRuleCall_1_0; }
	}

	public class SignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveSignalTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomSignalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalType:
		//	PrimitiveSignalType | CustomSignalType;
		public ParserRule getRule() { return rule; }

		//PrimitiveSignalType | CustomSignalType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveSignalType
		public RuleCall getPrimitiveSignalTypeParserRuleCall_0() { return cPrimitiveSignalTypeParserRuleCall_0; }

		//CustomSignalType
		public RuleCall getCustomSignalTypeParserRuleCall_1() { return cCustomSignalTypeParserRuleCall_1; }
	}

	public class CustomSignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomSignalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCUSTOMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCustomTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCustomTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCustomTypeAssignment_1.eContents().get(0);
		
		//CustomSignalType:
		//	"CUSTOM" customType=STRING;
		public ParserRule getRule() { return rule; }

		//"CUSTOM" customType=STRING
		public Group getGroup() { return cGroup; }

		//"CUSTOM"
		public Keyword getCUSTOMKeyword_0() { return cCUSTOMKeyword_0; }

		//customType=STRING
		public Assignment getCustomTypeAssignment_1() { return cCustomTypeAssignment_1; }

		//STRING
		public RuleCall getCustomTypeSTRINGTerminalRuleCall_1_0() { return cCustomTypeSTRINGTerminalRuleCall_1_0; }
	}

	public class PrimitiveSignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSignalType");
		private final Assignment cPrimitiveTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypePrimitiveTypeEnumRuleCall_0 = (RuleCall)cPrimitiveTypeAssignment.eContents().get(0);
		
		//PrimitiveSignalType:
		//	primitiveType=PrimitiveType;
		public ParserRule getRule() { return rule; }

		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment() { return cPrimitiveTypeAssignment; }

		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeEnumRuleCall_0() { return cPrimitiveTypePrimitiveTypeEnumRuleCall_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFloatTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value=Float;
		public ParserRule getRule() { return rule; }

		//value=Float
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Float
		public RuleCall getValueFloatTerminalRuleCall_0() { return cValueFloatTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=Boolean;
		public ParserRule getRule() { return rule; }

		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Boolean
		public RuleCall getValueBooleanTerminalRuleCall_0() { return cValueBooleanTerminalRuleCall_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHaltParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPauseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTermParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPresentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGotoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForkParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cForkeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEmitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAwaitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cPrioParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Assignment cAnnotationsAssignment_11_1_0 = (Assignment)cGroup_11_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_11_1_0_0 = (RuleCall)cAnnotationsAssignment_11_1_0.eContents().get(0);
		private final Group cGroup_11_1_1 = (Group)cGroup_11_1.eContents().get(1);
		private final Keyword cCommaKeyword_11_1_1_0 = (Keyword)cGroup_11_1_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_11_1_1_1 = (Assignment)cGroup_11_1_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_11_1_1_1_0 = (RuleCall)cAnnotationsAssignment_11_1_1_1.eContents().get(0);
		
		////---------------------------------------------------------------------
		////----------------------- List of S-Instructions ----------------------
		////---------------------------------------------------------------------
		//Instruction:
		//	Halt | Abort | Join | Pause | Term | Present | Goto | Fork | Forke | Emit | Await | Prio (annotations+=Annotation (","
		//	annotations+=Annotation)*)?;
		public ParserRule getRule() { return rule; }

		//Halt | Abort | Join | Pause | Term | Present | Goto | Fork | Forke | Emit | Await | Prio (annotations+=Annotation (","
		//annotations+=Annotation)*)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//Halt
		public RuleCall getHaltParserRuleCall_0() { return cHaltParserRuleCall_0; }

		//Abort
		public RuleCall getAbortParserRuleCall_1() { return cAbortParserRuleCall_1; }

		//Join
		public RuleCall getJoinParserRuleCall_2() { return cJoinParserRuleCall_2; }

		//Pause
		public RuleCall getPauseParserRuleCall_3() { return cPauseParserRuleCall_3; }

		//Term
		public RuleCall getTermParserRuleCall_4() { return cTermParserRuleCall_4; }

		//Present
		public RuleCall getPresentParserRuleCall_5() { return cPresentParserRuleCall_5; }

		//Goto
		public RuleCall getGotoParserRuleCall_6() { return cGotoParserRuleCall_6; }

		//Fork
		public RuleCall getForkParserRuleCall_7() { return cForkParserRuleCall_7; }

		//Forke
		public RuleCall getForkeParserRuleCall_8() { return cForkeParserRuleCall_8; }

		//Emit
		public RuleCall getEmitParserRuleCall_9() { return cEmitParserRuleCall_9; }

		//Await
		public RuleCall getAwaitParserRuleCall_10() { return cAwaitParserRuleCall_10; }

		//Prio (annotations+=Annotation ("," annotations+=Annotation)*)?
		public Group getGroup_11() { return cGroup_11; }

		//Prio
		public RuleCall getPrioParserRuleCall_11_0() { return cPrioParserRuleCall_11_0; }

		//(annotations+=Annotation ("," annotations+=Annotation)*)?
		public Group getGroup_11_1() { return cGroup_11_1; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_11_1_0() { return cAnnotationsAssignment_11_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_11_1_0_0() { return cAnnotationsAnnotationParserRuleCall_11_1_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_11_1_1() { return cGroup_11_1_1; }

		//","
		public Keyword getCommaKeyword_11_1_1_0() { return cCommaKeyword_11_1_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_11_1_1_1() { return cAnnotationsAssignment_11_1_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_11_1_1_1_0() { return cAnnotationsAnnotationParserRuleCall_11_1_1_1_0; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPAUSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContinuationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContinuationStateCrossReference_3_0 = (CrossReference)cContinuationAssignment_3.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_0_1 = (RuleCall)cContinuationStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pause:
		//	{Pause} "PAUSE" "(" continuation=[State]? ")";
		public ParserRule getRule() { return rule; }

		//{Pause} "PAUSE" "(" continuation=[State]? ")"
		public Group getGroup() { return cGroup; }

		//{Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }

		//"PAUSE"
		public Keyword getPAUSEKeyword_1() { return cPAUSEKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//continuation=[State]?
		public Assignment getContinuationAssignment_3() { return cContinuationAssignment_3; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_0() { return cContinuationStateCrossReference_3_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_0_1() { return cContinuationStateIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTERMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContinuationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContinuationStateCrossReference_3_0 = (CrossReference)cContinuationAssignment_3.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_0_1 = (RuleCall)cContinuationStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Term:
		//	{Term} "TERM" "(" continuation=[State]? ")";
		public ParserRule getRule() { return rule; }

		//{Term} "TERM" "(" continuation=[State]? ")"
		public Group getGroup() { return cGroup; }

		//{Term}
		public Action getTermAction_0() { return cTermAction_0; }

		//"TERM"
		public Keyword getTERMKeyword_1() { return cTERMKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//continuation=[State]?
		public Assignment getContinuationAssignment_3() { return cContinuationAssignment_3; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_0() { return cContinuationStateCrossReference_3_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_0_1() { return cContinuationStateIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class HaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Halt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaltAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHaltKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContinuationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContinuationStateCrossReference_3_0 = (CrossReference)cContinuationAssignment_3.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_0_1 = (RuleCall)cContinuationStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Halt:
		//	{Halt} "Halt" "(" continuation=[State]? ")";
		public ParserRule getRule() { return rule; }

		//{Halt} "Halt" "(" continuation=[State]? ")"
		public Group getGroup() { return cGroup; }

		//{Halt}
		public Action getHaltAction_0() { return cHaltAction_0; }

		//"Halt"
		public Keyword getHaltKeyword_1() { return cHaltKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//continuation=[State]?
		public Assignment getContinuationAssignment_3() { return cContinuationAssignment_3; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_0() { return cContinuationStateCrossReference_3_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_0_1() { return cContinuationStateIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJOINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContinuationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContinuationStateCrossReference_3_0 = (CrossReference)cContinuationAssignment_3.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_0_1 = (RuleCall)cContinuationStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Join:
		//	{Join} "JOIN" "(" continuation=[State]? ")";
		public ParserRule getRule() { return rule; }

		//{Join} "JOIN" "(" continuation=[State]? ")"
		public Group getGroup() { return cGroup; }

		//{Join}
		public Action getJoinAction_0() { return cJoinAction_0; }

		//"JOIN"
		public Keyword getJOINKeyword_1() { return cJOINKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//continuation=[State]?
		public Assignment getContinuationAssignment_3() { return cContinuationAssignment_3; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_0() { return cContinuationStateCrossReference_3_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_0_1() { return cContinuationStateIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cABORTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContinuationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContinuationStateCrossReference_3_0 = (CrossReference)cContinuationAssignment_3.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_0_1 = (RuleCall)cContinuationStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Abort:
		//	{Abort} "ABORT" "(" continuation=[State]? ")";
		public ParserRule getRule() { return rule; }

		//{Abort} "ABORT" "(" continuation=[State]? ")"
		public Group getGroup() { return cGroup; }

		//{Abort}
		public Action getAbortAction_0() { return cAbortAction_0; }

		//"ABORT"
		public Keyword getABORTKeyword_1() { return cABORTKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//continuation=[State]?
		public Assignment getContinuationAssignment_3() { return cContinuationAssignment_3; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_0() { return cContinuationStateCrossReference_3_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_0_1() { return cContinuationStateIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PresentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRESENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInstructionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_0_0 = (RuleCall)cInstructionsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Present:
		//	"PRESENT" "(" signal=[Signal] ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//"PRESENT" "(" signal=[Signal] ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//"PRESENT"
		public Keyword getPRESENTKeyword_0() { return cPRESENTKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[Signal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(instructions+=Instruction ";")*
		public Group getGroup_6() { return cGroup_6; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_6_0() { return cInstructionsAssignment_6_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_0_0() { return cInstructionsInstructionParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGOTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Goto:
		//	"GOTO" "(" state=[State] ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"GOTO" "(" state=[State] ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"GOTO"
		public Keyword getGOTOKeyword_0() { return cGOTOKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPriorityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPriorityIntValueParserRuleCall_4_0 = (RuleCall)cPriorityAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContinuationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_5_1_0 = (CrossReference)cContinuationAssignment_5_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_5_1_0_1 = (RuleCall)cContinuationStateCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Fork:
		//	"FORK" "(" state=[State] "," priority=IntValue ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"FORK" "(" state=[State] "," priority=IntValue ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"FORK"
		public Keyword getFORKKeyword_0() { return cFORKKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//priority=IntValue
		public Assignment getPriorityAssignment_4() { return cPriorityAssignment_4; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_4_0() { return cPriorityIntValueParserRuleCall_4_0; }

		//("," continuation=[State])?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_5_1() { return cContinuationAssignment_5_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_5_1_0() { return cContinuationStateCrossReference_5_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_5_1_0_1() { return cContinuationStateIDTerminalRuleCall_5_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ForkeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Forke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORKEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Forke:
		//	"FORKE" "(" state=[State] ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"FORKE" "(" state=[State] ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"FORKE"
		public Keyword getFORKEKeyword_0() { return cFORKEKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEMITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Emit:
		//	"EMIT" "(" signal=[Signal] ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"EMIT" "(" signal=[Signal] ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"EMIT"
		public Keyword getEMITKeyword_0() { return cEMITKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[Signal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAWAITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Await:
		//	"AWAIT" "(" signal=[Signal] ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"AWAIT" "(" signal=[Signal] ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"AWAIT"
		public Keyword getAWAITKeyword_0() { return cAWAITKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[Signal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PrioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityIntValueParserRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Prio:
		//	"PRIO" "(" priority=IntValue ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"PRIO" "(" priority=IntValue ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"PRIO"
		public Keyword getPRIOKeyword_0() { return cPRIOKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//priority=IntValue
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_2_0() { return cPriorityIntValueParserRuleCall_2_0; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPureEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPurePUREKeyword_0_0 = (Keyword)cPureEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntINTKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoolBOOLKeyword_2_0 = (Keyword)cBoolEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFLOATKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PrimitiveType:
		//	Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT";
		public EnumRule getRule() { return rule; }

		//Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pure="PURE"
		public EnumLiteralDeclaration getPureEnumLiteralDeclaration_0() { return cPureEnumLiteralDeclaration_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_0_0() { return cPurePUREKeyword_0_0; }

		//Int="INT"
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }

		//"INT"
		public Keyword getIntINTKeyword_1_0() { return cIntINTKeyword_1_0; }

		//Bool="BOOL"
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_2() { return cBoolEnumLiteralDeclaration_2; }

		//"BOOL"
		public Keyword getBoolBOOLKeyword_2_0() { return cBoolBOOLKeyword_2_0; }

		//Float="FLOAT"
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }

		//"FLOAT"
		public Keyword getFloatFLOATKeyword_3_0() { return cFloatFLOATKeyword_3_0; }
	}
	
	private ProgramElements pProgram;
	private AnnotationElements pAnnotation;
	private AnnotatableElements pAnnotatable;
	private StateElements pState;
	private SignalElements pSignal;
	private CombineFunctionElements pCombineFunction;
	private SignalTypeElements pSignalType;
	private CustomSignalTypeElements pCustomSignalType;
	private PrimitiveTypeElements unknownRulePrimitiveType;
	private PrimitiveSignalTypeElements pPrimitiveSignalType;
	private IntValueElements pIntValue;
	private FloatValueElements pFloatValue;
	private BooleanValueElements pBooleanValue;
	private TerminalRule tFloat;
	private TerminalRule tBoolean;
	private InstructionElements pInstruction;
	private PauseElements pPause;
	private TermElements pTerm;
	private HaltElements pHalt;
	private JoinElements pJoin;
	private AbortElements pAbort;
	private PresentElements pPresent;
	private GotoElements pGoto;
	private ForkElements pFork;
	private ForkeElements pForke;
	private EmitElements pEmit;
	private AwaitElements pAwait;
	private PrioElements pPrio;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs" signals+=Signal ("," signals+=Signal)* ";")?
	//	("Outputs" signals+=Signal ("," signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";")?
	//	states+=State+;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Annotation:
	//	"@" key=ID ":" value=STRING;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Annotatable:
	//	State | Signal | Instruction;
	public AnnotatableElements getAnnotatableAccess() {
		return (pAnnotatable != null) ? pAnnotatable : (pAnnotatable = new AnnotatableElements());
	}
	
	public ParserRule getAnnotatableRule() {
		return getAnnotatableAccess().getRule();
	}

	//State:
	//	name=ID ":" (annotations+=Annotation ("," annotations+=Annotation)*)? ("SIGNALS" signals+=Signal* ";")?
	//	(instructions+=Instruction ";")*;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Signal:
	//	name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])? (annotations+=Annotation (","
	//	annotations+=Annotation)*)?;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//CombineFunction:
	//	name=ID type=SignalType;
	public CombineFunctionElements getCombineFunctionAccess() {
		return (pCombineFunction != null) ? pCombineFunction : (pCombineFunction = new CombineFunctionElements());
	}
	
	public ParserRule getCombineFunctionRule() {
		return getCombineFunctionAccess().getRule();
	}

	//SignalType:
	//	PrimitiveSignalType | CustomSignalType;
	public SignalTypeElements getSignalTypeAccess() {
		return (pSignalType != null) ? pSignalType : (pSignalType = new SignalTypeElements());
	}
	
	public ParserRule getSignalTypeRule() {
		return getSignalTypeAccess().getRule();
	}

	//CustomSignalType:
	//	"CUSTOM" customType=STRING;
	public CustomSignalTypeElements getCustomSignalTypeAccess() {
		return (pCustomSignalType != null) ? pCustomSignalType : (pCustomSignalType = new CustomSignalTypeElements());
	}
	
	public ParserRule getCustomSignalTypeRule() {
		return getCustomSignalTypeAccess().getRule();
	}

	//enum PrimitiveType:
	//	Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT";
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (unknownRulePrimitiveType != null) ? unknownRulePrimitiveType : (unknownRulePrimitiveType = new PrimitiveTypeElements());
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//PrimitiveSignalType:
	//	primitiveType=PrimitiveType;
	public PrimitiveSignalTypeElements getPrimitiveSignalTypeAccess() {
		return (pPrimitiveSignalType != null) ? pPrimitiveSignalType : (pPrimitiveSignalType = new PrimitiveSignalTypeElements());
	}
	
	public ParserRule getPrimitiveSignalTypeRule() {
		return getPrimitiveSignalTypeAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=Float;
	public FloatValueElements getFloatValueAccess() {
		return (pFloatValue != null) ? pFloatValue : (pFloatValue = new FloatValueElements());
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//	value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//terminal Float:
	//	(INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return (tFloat != null) ? tFloat : (tFloat = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Float"));
	} 

	//terminal Boolean:
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return (tBoolean != null) ? tBoolean : (tBoolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean"));
	} 

	////---------------------------------------------------------------------
	////----------------------- List of S-Instructions ----------------------
	////---------------------------------------------------------------------
	//Instruction:
	//	Halt | Abort | Join | Pause | Term | Present | Goto | Fork | Forke | Emit | Await | Prio (annotations+=Annotation (","
	//	annotations+=Annotation)*)?;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Pause:
	//	{Pause} "PAUSE" "(" continuation=[State]? ")";
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Term:
	//	{Term} "TERM" "(" continuation=[State]? ")";
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Halt:
	//	{Halt} "Halt" "(" continuation=[State]? ")";
	public HaltElements getHaltAccess() {
		return (pHalt != null) ? pHalt : (pHalt = new HaltElements());
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//Join:
	//	{Join} "JOIN" "(" continuation=[State]? ")";
	public JoinElements getJoinAccess() {
		return (pJoin != null) ? pJoin : (pJoin = new JoinElements());
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//Abort:
	//	{Abort} "ABORT" "(" continuation=[State]? ")";
	public AbortElements getAbortAccess() {
		return (pAbort != null) ? pAbort : (pAbort = new AbortElements());
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//Present:
	//	"PRESENT" "(" signal=[Signal] ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}";
	public PresentElements getPresentAccess() {
		return (pPresent != null) ? pPresent : (pPresent = new PresentElements());
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//Goto:
	//	"GOTO" "(" state=[State] ("," continuation=[State])? ")";
	public GotoElements getGotoAccess() {
		return (pGoto != null) ? pGoto : (pGoto = new GotoElements());
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Fork:
	//	"FORK" "(" state=[State] "," priority=IntValue ("," continuation=[State])? ")";
	public ForkElements getForkAccess() {
		return (pFork != null) ? pFork : (pFork = new ForkElements());
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//Forke:
	//	"FORKE" "(" state=[State] ("," continuation=[State])? ")";
	public ForkeElements getForkeAccess() {
		return (pForke != null) ? pForke : (pForke = new ForkeElements());
	}
	
	public ParserRule getForkeRule() {
		return getForkeAccess().getRule();
	}

	//Emit:
	//	"EMIT" "(" signal=[Signal] ("," continuation=[State])? ")";
	public EmitElements getEmitAccess() {
		return (pEmit != null) ? pEmit : (pEmit = new EmitElements());
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//Await:
	//	"AWAIT" "(" signal=[Signal] ("," continuation=[State])? ")";
	public AwaitElements getAwaitAccess() {
		return (pAwait != null) ? pAwait : (pAwait = new AwaitElements());
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//Prio:
	//	"PRIO" "(" priority=IntValue ("," continuation=[State])? ")";
	public PrioElements getPrioAccess() {
		return (pPrio != null) ? pPrio : (pPrio = new PrioElements());
	}
	
	public ParserRule getPrioRule() {
		return getPrioAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
