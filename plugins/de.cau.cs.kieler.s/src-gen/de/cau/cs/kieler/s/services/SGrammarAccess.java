/*
* generated by Xtext
*/

package de.cau.cs.kieler.s.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynchronousProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPriorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPriorityIntValueParserRuleCall_3_0 = (RuleCall)cPriorityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSignalsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_5_1_0 = (RuleCall)cSignalsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSignalsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_5_2_1_0 = (RuleCall)cSignalsAssignment_5_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOutputsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSignalsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_6_1_0 = (RuleCall)cSignalsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSignalsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_6_2_1_0 = (RuleCall)cSignalsAssignment_6_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSignalsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSignalsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_7_1_0 = (RuleCall)cSignalsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSignalsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_7_2_1_0 = (RuleCall)cSignalsAssignment_7_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		
		//Program:
		//  "Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs"
		//  signals+=Signal ("," signals+=Signal)* ";")? ("Outputs" signals+=Signal (","
		//  signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";"
		//  )? states+=State+;
		public ParserRule getRule() { return rule; }

		//"Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs"
		//signals+=Signal ("," signals+=Signal)* ";")? ("Outputs" signals+=Signal (","
		//signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";")?
		//states+=State+
		public Group getGroup() { return cGroup; }

		//"Synchronous Program"
		public Keyword getSynchronousProgramKeyword_0() { return cSynchronousProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//priority=IntValue
		public Assignment getPriorityAssignment_3() { return cPriorityAssignment_3; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_3_0() { return cPriorityIntValueParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("Inputs" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"Inputs"
		public Keyword getInputsKeyword_5_0() { return cInputsKeyword_5_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_5_1() { return cSignalsAssignment_5_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_5_1_0() { return cSignalsSignalParserRuleCall_5_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_5_2_1() { return cSignalsAssignment_5_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_5_2_1_0() { return cSignalsSignalParserRuleCall_5_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }

		//("Outputs" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"Outputs"
		public Keyword getOutputsKeyword_6_0() { return cOutputsKeyword_6_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_6_1() { return cSignalsAssignment_6_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_6_1_0() { return cSignalsSignalParserRuleCall_6_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_6_2_1() { return cSignalsAssignment_6_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_6_2_1_0() { return cSignalsSignalParserRuleCall_6_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//("Signals" signals+=Signal ("," signals+=Signal)* ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"Signals"
		public Keyword getSignalsKeyword_7_0() { return cSignalsKeyword_7_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_7_1() { return cSignalsAssignment_7_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_7_1_0() { return cSignalsSignalParserRuleCall_7_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_7_2_1() { return cSignalsAssignment_7_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_7_2_1_0() { return cSignalsSignalParserRuleCall_7_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Annotation:
		//  key=ID value=STRING;
		public ParserRule getRule() { return rule; }

		//key=ID value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class AnnotatableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotatable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Annotatable:
		//  State|Signal|Instruction;
		public ParserRule getRule() { return rule; }

		//State|Signal|Instruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Signal
		public RuleCall getSignalParserRuleCall_1() { return cSignalParserRuleCall_1; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_2() { return cInstructionParserRuleCall_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_3_1_0 = (RuleCall)cAnnotationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSIGNALSKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSignalsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_4_1_0 = (RuleCall)cSignalsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInstructionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_5_0_0 = (RuleCall)cInstructionsAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//State:
		//  name=ID ":" annotations+=Annotation? ("," annotations+=Annotation)* (
		//  "SIGNALS" signals+=Signal* ";")? (instructions+=Instruction ";")*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" annotations+=Annotation? ("," annotations+=Annotation)* ("SIGNALS"
		//signals+=Signal* ";")? (instructions+=Instruction ";")*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_0() { return cAnnotationsAnnotationParserRuleCall_2_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_3_1() { return cAnnotationsAssignment_3_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_3_1_0() { return cAnnotationsAnnotationParserRuleCall_3_1_0; }

		//("SIGNALS" signals+=Signal* ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"SIGNALS"
		public Keyword getSIGNALSKeyword_4_0() { return cSIGNALSKeyword_4_0; }

		//signals+=Signal*
		public Assignment getSignalsAssignment_4_1() { return cSignalsAssignment_4_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_4_1_0() { return cSignalsSignalParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//(instructions+=Instruction ";")*
		public Group getGroup_5() { return cGroup_5; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_5_0() { return cInstructionsAssignment_5_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_5_0_0() { return cInstructionsInstructionParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class StateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateReference");
		private final Assignment cStateAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cStateStateCrossReference_0 = (CrossReference)cStateAssignment.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_0_1 = (RuleCall)cStateStateCrossReference_0.eContents().get(1);
		
		//StateReference:
		//  state=[State];
		public ParserRule getRule() { return rule; }

		//state=[State]
		public Assignment getStateAssignment() { return cStateAssignment; }

		//[State]
		public CrossReference getStateStateCrossReference_0() { return cStateStateCrossReference_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_0_1() { return cStateStateIDTerminalRuleCall_0_1; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSignalTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCombineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCombineFunctionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cCombineFunctionCombineFunctionCrossReference_3_1_0 = (CrossReference)cCombineFunctionAssignment_3_1.eContents().get(0);
		private final RuleCall cCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cCombineFunctionCombineFunctionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_5_1_0 = (RuleCall)cAnnotationsAssignment_5_1.eContents().get(0);
		
		//Signal:
		//  name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])?
		//  annotations+=Annotation? ("," annotations+=Annotation)*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])?
		//annotations+=Annotation? ("," annotations+=Annotation)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=SignalType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//SignalType
		public RuleCall getTypeSignalTypeParserRuleCall_2_0() { return cTypeSignalTypeParserRuleCall_2_0; }

		//("combine" combineFunction=[CombineFunction])?
		public Group getGroup_3() { return cGroup_3; }

		//"combine"
		public Keyword getCombineKeyword_3_0() { return cCombineKeyword_3_0; }

		//combineFunction=[CombineFunction]
		public Assignment getCombineFunctionAssignment_3_1() { return cCombineFunctionAssignment_3_1; }

		//[CombineFunction]
		public CrossReference getCombineFunctionCombineFunctionCrossReference_3_1_0() { return cCombineFunctionCombineFunctionCrossReference_3_1_0; }

		//ID
		public RuleCall getCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1() { return cCombineFunctionCombineFunctionIDTerminalRuleCall_3_1_0_1; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_4_0() { return cAnnotationsAnnotationParserRuleCall_4_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_5_1() { return cAnnotationsAssignment_5_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_5_1_0() { return cAnnotationsAnnotationParserRuleCall_5_1_0; }
	}

	public class SignalReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalReference");
		private final Assignment cSignalAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_0 = (CrossReference)cSignalAssignment.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_1 = (RuleCall)cSignalSignalCrossReference_0.eContents().get(1);
		
		//SignalReference:
		//  signal=[Signal];
		public ParserRule getRule() { return rule; }

		//signal=[Signal]
		public Assignment getSignalAssignment() { return cSignalAssignment; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_0() { return cSignalSignalCrossReference_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_1() { return cSignalSignalIDTerminalRuleCall_0_1; }
	}

	public class CombineFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CombineFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSignalTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//CombineFunction:
		//  name=ID type=SignalType;
		public ParserRule getRule() { return rule; }

		//name=ID type=SignalType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=SignalType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//SignalType
		public RuleCall getTypeSignalTypeParserRuleCall_1_0() { return cTypeSignalTypeParserRuleCall_1_0; }
	}

	public class SignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveSignalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalType:
		//  PrimitiveSignal|CustomSignal;
		public ParserRule getRule() { return rule; }

		//PrimitiveSignal|CustomSignal
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveSignal
		public RuleCall getPrimitiveSignalParserRuleCall_0() { return cPrimitiveSignalParserRuleCall_0; }

		//CustomSignal
		public RuleCall getCustomSignalParserRuleCall_1() { return cCustomSignalParserRuleCall_1; }
	}

	public class CustomSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCUSTOMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//CustomSignal:
		//  "CUSTOM" type=STRING;
		public ParserRule getRule() { return rule; }

		//"CUSTOM" type=STRING
		public Group getGroup() { return cGroup; }

		//"CUSTOM"
		public Keyword getCUSTOMKeyword_0() { return cCUSTOMKeyword_0; }

		//type=STRING
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_1_0() { return cTypeSTRINGTerminalRuleCall_1_0; }
	}

	public class PrimitiveSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSignal");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypePrimitiveSignalTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//PrimitiveSignal:
		//  type=PrimitiveSignalType;
		public ParserRule getRule() { return rule; }

		//type=PrimitiveSignalType
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//PrimitiveSignalType
		public RuleCall getTypePrimitiveSignalTypeEnumRuleCall_0() { return cTypePrimitiveSignalTypeEnumRuleCall_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//  value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFloatTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//  value=Float;
		public ParserRule getRule() { return rule; }

		//value=Float
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Float
		public RuleCall getValueFloatTerminalRuleCall_0() { return cValueFloatTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//  value=Boolean;
		public ParserRule getRule() { return rule; }

		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Boolean
		public RuleCall getValueBooleanTerminalRuleCall_0() { return cValueBooleanTerminalRuleCall_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJoinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTermParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPresentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGotoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForkParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForkeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEmitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAwaitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPrioParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		////---------------------------------------------------------------------
		////----------------------- List of S-Instructions ----------------------
		////---------------------------------------------------------------------
		//
		//
		//Instruction:
		//  Abort|Join|Pause|Term|Present|Goto|Fork|Forke|Emit|Await|Prio;
		public ParserRule getRule() { return rule; }

		//Abort|Join|Pause|Term|Present|Goto|Fork|Forke|Emit|Await|Prio
		public Alternatives getAlternatives() { return cAlternatives; }

		//Abort
		public RuleCall getAbortParserRuleCall_0() { return cAbortParserRuleCall_0; }

		//Join
		public RuleCall getJoinParserRuleCall_1() { return cJoinParserRuleCall_1; }

		//Pause
		public RuleCall getPauseParserRuleCall_2() { return cPauseParserRuleCall_2; }

		//Term
		public RuleCall getTermParserRuleCall_3() { return cTermParserRuleCall_3; }

		//Present
		public RuleCall getPresentParserRuleCall_4() { return cPresentParserRuleCall_4; }

		//Goto
		public RuleCall getGotoParserRuleCall_5() { return cGotoParserRuleCall_5; }

		//Fork
		public RuleCall getForkParserRuleCall_6() { return cForkParserRuleCall_6; }

		//Forke
		public RuleCall getForkeParserRuleCall_7() { return cForkeParserRuleCall_7; }

		//Emit
		public RuleCall getEmitParserRuleCall_8() { return cEmitParserRuleCall_8; }

		//Await
		public RuleCall getAwaitParserRuleCall_9() { return cAwaitParserRuleCall_9; }

		//Prio
		public RuleCall getPrioParserRuleCall_10() { return cPrioParserRuleCall_10; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPAUSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_5_1_0 = (RuleCall)cAnnotationsAssignment_5_1.eContents().get(0);
		
		//Pause:
		//  {Pause} "PAUSE" "(" ")" annotations+=Annotation? ("," annotations+=Annotation
		//  )*;
		public ParserRule getRule() { return rule; }

		//{Pause} "PAUSE" "(" ")" annotations+=Annotation? ("," annotations+=Annotation)*
		public Group getGroup() { return cGroup; }

		//{Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }

		//"PAUSE"
		public Keyword getPAUSEKeyword_1() { return cPAUSEKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_4_0() { return cAnnotationsAnnotationParserRuleCall_4_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_5_1() { return cAnnotationsAssignment_5_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_5_1_0() { return cAnnotationsAnnotationParserRuleCall_5_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cTERMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Term:
		//  {Term} annotations+=Annotation? ("," annotations+=Annotation)* "TERM" "(" ")"
		//;
		public ParserRule getRule() { return rule; }

		//{Term} annotations+=Annotation? ("," annotations+=Annotation)* "TERM" "(" ")"
		public Group getGroup() { return cGroup; }

		//{Term}
		public Action getTermAction_0() { return cTermAction_0; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_0; }

		//"TERM"
		public Keyword getTERMKeyword_3() { return cTERMKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cJOINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Join:
		//  {Join} annotations+=Annotation? ("," annotations+=Annotation)* "JOIN" "(" ")"
		//;
		public ParserRule getRule() { return rule; }

		//{Join} annotations+=Annotation? ("," annotations+=Annotation)* "JOIN" "(" ")"
		public Group getGroup() { return cGroup; }

		//{Join}
		public Action getJoinAction_0() { return cJoinAction_0; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_0; }

		//"JOIN"
		public Keyword getJOINKeyword_3() { return cJOINKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cABORTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Abort:
		//  {Abort} annotations+=Annotation? ("," annotations+=Annotation)* "ABORT" "("
		//  ")";
		public ParserRule getRule() { return rule; }

		//{Abort} annotations+=Annotation? ("," annotations+=Annotation)* "ABORT" "(" ")"
		public Group getGroup() { return cGroup; }

		//{Abort}
		public Action getAbortAction_0() { return cAbortAction_0; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_0; }

		//"ABORT"
		public Keyword getABORTKeyword_3() { return cABORTKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class PresentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cPRESENTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSignalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0 = (RuleCall)cSignalAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cInstructionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_7_0_0 = (RuleCall)cInstructionsAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Present:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "PRESENT" "("
		//  signal=SignalReference ")" "{" (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "PRESENT" "("
		//signal=SignalReference ")" "{" (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"PRESENT"
		public Keyword getPRESENTKeyword_2() { return cPRESENTKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//signal=SignalReference
		public Assignment getSignalAssignment_4() { return cSignalAssignment_4; }

		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0() { return cSignalSignalReferenceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(instructions+=Instruction ";")*
		public Group getGroup_7() { return cGroup_7; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_7_0() { return cInstructionsAssignment_7_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_7_0_0() { return cInstructionsInstructionParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cGOTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateReferenceParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Goto:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "GOTO" "("
		//  state=StateReference ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "GOTO" "("
		//state=StateReference ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"GOTO"
		public Keyword getGOTOKeyword_2() { return cGOTOKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//state=StateReference
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }

		//StateReference
		public RuleCall getStateStateReferenceParserRuleCall_4_0() { return cStateStateReferenceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cFORKKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateReferenceParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPriorityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPriorityIntValueParserRuleCall_6_0 = (RuleCall)cPriorityAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Fork:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "FORK" "("
		//  state=StateReference "," priority=IntValue ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "FORK" "("
		//state=StateReference "," priority=IntValue ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"FORK"
		public Keyword getFORKKeyword_2() { return cFORKKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//state=StateReference
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }

		//StateReference
		public RuleCall getStateStateReferenceParserRuleCall_4_0() { return cStateStateReferenceParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//priority=IntValue
		public Assignment getPriorityAssignment_6() { return cPriorityAssignment_6; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_6_0() { return cPriorityIntValueParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ForkeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Forke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cFORKEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateReferenceParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Forke:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "FORKE" "("
		//  state=StateReference ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "FORKE" "("
		//state=StateReference ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"FORKE"
		public Keyword getFORKEKeyword_2() { return cFORKEKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//state=StateReference
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }

		//StateReference
		public RuleCall getStateStateReferenceParserRuleCall_4_0() { return cStateStateReferenceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cEMITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSignalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0 = (RuleCall)cSignalAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Emit:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "EMIT" "("
		//  signal=SignalReference ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "EMIT" "("
		//signal=SignalReference ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"EMIT"
		public Keyword getEMITKeyword_2() { return cEMITKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//signal=SignalReference
		public Assignment getSignalAssignment_4() { return cSignalAssignment_4; }

		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0() { return cSignalSignalReferenceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cAWAITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSignalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0 = (RuleCall)cSignalAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Await:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "AWAIT" "("
		//  signal=SignalReference ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "AWAIT" "("
		//signal=SignalReference ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"AWAIT"
		public Keyword getAWAITKeyword_2() { return cAWAITKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//signal=SignalReference
		public Assignment getSignalAssignment_4() { return cSignalAssignment_4; }

		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0() { return cSignalSignalReferenceParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class PrioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cPRIOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPriorityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPriorityIntValueParserRuleCall_4_0 = (RuleCall)cPriorityAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Prio:
		//  annotations+=Annotation? ("," annotations+=Annotation)* "PRIO" "("
		//  priority=IntValue ")";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation? ("," annotations+=Annotation)* "PRIO" "("
		//priority=IntValue ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("," annotations+=Annotation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"PRIO"
		public Keyword getPRIOKeyword_2() { return cPRIOKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//priority=IntValue
		public Assignment getPriorityAssignment_4() { return cPriorityAssignment_4; }

		//IntValue
		public RuleCall getPriorityIntValueParserRuleCall_4_0() { return cPriorityIntValueParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	public class PrimitiveSignalTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSignalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPureEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPurePUREKeyword_0_0 = (Keyword)cPureEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntINTKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoolBOOLKeyword_2_0 = (Keyword)cBoolEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFLOATKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PrimitiveSignalType:
		//  Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT";
		public EnumRule getRule() { return rule; }

		//Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pure="PURE"
		public EnumLiteralDeclaration getPureEnumLiteralDeclaration_0() { return cPureEnumLiteralDeclaration_0; }

		//"PURE"
		public Keyword getPurePUREKeyword_0_0() { return cPurePUREKeyword_0_0; }

		//Int="INT"
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }

		//"INT"
		public Keyword getIntINTKeyword_1_0() { return cIntINTKeyword_1_0; }

		//Bool="BOOL"
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_2() { return cBoolEnumLiteralDeclaration_2; }

		//"BOOL"
		public Keyword getBoolBOOLKeyword_2_0() { return cBoolBOOLKeyword_2_0; }

		//Float="FLOAT"
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }

		//"FLOAT"
		public Keyword getFloatFLOATKeyword_3_0() { return cFloatFLOATKeyword_3_0; }
	}
	
	private ProgramElements pProgram;
	private AnnotationElements pAnnotation;
	private AnnotatableElements pAnnotatable;
	private StateElements pState;
	private StateReferenceElements pStateReference;
	private SignalElements pSignal;
	private SignalReferenceElements pSignalReference;
	private CombineFunctionElements pCombineFunction;
	private SignalTypeElements pSignalType;
	private CustomSignalElements pCustomSignal;
	private PrimitiveSignalTypeElements unknownRulePrimitiveSignalType;
	private PrimitiveSignalElements pPrimitiveSignal;
	private IntValueElements pIntValue;
	private FloatValueElements pFloatValue;
	private BooleanValueElements pBooleanValue;
	private TerminalRule tFloat;
	private TerminalRule tBoolean;
	private InstructionElements pInstruction;
	private PauseElements pPause;
	private TermElements pTerm;
	private JoinElements pJoin;
	private AbortElements pAbort;
	private PresentElements pPresent;
	private GotoElements pGoto;
	private ForkElements pFork;
	private ForkeElements pForke;
	private EmitElements pEmit;
	private AwaitElements pAwait;
	private PrioElements pPrio;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//  "Synchronous Program" name=ID "(" priority=IntValue ")" ("Inputs"
	//  signals+=Signal ("," signals+=Signal)* ";")? ("Outputs" signals+=Signal (","
	//  signals+=Signal)* ";")? ("Signals" signals+=Signal ("," signals+=Signal)* ";"
	//  )? states+=State+;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Annotation:
	//  key=ID value=STRING;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Annotatable:
	//  State|Signal|Instruction;
	public AnnotatableElements getAnnotatableAccess() {
		return (pAnnotatable != null) ? pAnnotatable : (pAnnotatable = new AnnotatableElements());
	}
	
	public ParserRule getAnnotatableRule() {
		return getAnnotatableAccess().getRule();
	}

	//State:
	//  name=ID ":" annotations+=Annotation? ("," annotations+=Annotation)* (
	//  "SIGNALS" signals+=Signal* ";")? (instructions+=Instruction ";")*;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateReference:
	//  state=[State];
	public StateReferenceElements getStateReferenceAccess() {
		return (pStateReference != null) ? pStateReference : (pStateReference = new StateReferenceElements());
	}
	
	public ParserRule getStateReferenceRule() {
		return getStateReferenceAccess().getRule();
	}

	//Signal:
	//  name=ID ":" type=SignalType ("combine" combineFunction=[CombineFunction])?
	//  annotations+=Annotation? ("," annotations+=Annotation)*;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//SignalReference:
	//  signal=[Signal];
	public SignalReferenceElements getSignalReferenceAccess() {
		return (pSignalReference != null) ? pSignalReference : (pSignalReference = new SignalReferenceElements());
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}

	//CombineFunction:
	//  name=ID type=SignalType;
	public CombineFunctionElements getCombineFunctionAccess() {
		return (pCombineFunction != null) ? pCombineFunction : (pCombineFunction = new CombineFunctionElements());
	}
	
	public ParserRule getCombineFunctionRule() {
		return getCombineFunctionAccess().getRule();
	}

	//SignalType:
	//  PrimitiveSignal|CustomSignal;
	public SignalTypeElements getSignalTypeAccess() {
		return (pSignalType != null) ? pSignalType : (pSignalType = new SignalTypeElements());
	}
	
	public ParserRule getSignalTypeRule() {
		return getSignalTypeAccess().getRule();
	}

	//CustomSignal:
	//  "CUSTOM" type=STRING;
	public CustomSignalElements getCustomSignalAccess() {
		return (pCustomSignal != null) ? pCustomSignal : (pCustomSignal = new CustomSignalElements());
	}
	
	public ParserRule getCustomSignalRule() {
		return getCustomSignalAccess().getRule();
	}

	//enum PrimitiveSignalType:
	//  Pure="PURE" | Int="INT" | Bool="BOOL" | Float="FLOAT";
	public PrimitiveSignalTypeElements getPrimitiveSignalTypeAccess() {
		return (unknownRulePrimitiveSignalType != null) ? unknownRulePrimitiveSignalType : (unknownRulePrimitiveSignalType = new PrimitiveSignalTypeElements());
	}
	
	public EnumRule getPrimitiveSignalTypeRule() {
		return getPrimitiveSignalTypeAccess().getRule();
	}

	//PrimitiveSignal:
	//  type=PrimitiveSignalType;
	public PrimitiveSignalElements getPrimitiveSignalAccess() {
		return (pPrimitiveSignal != null) ? pPrimitiveSignal : (pPrimitiveSignal = new PrimitiveSignalElements());
	}
	
	public ParserRule getPrimitiveSignalRule() {
		return getPrimitiveSignalAccess().getRule();
	}

	//IntValue:
	//  value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//  value=Float;
	public FloatValueElements getFloatValueAccess() {
		return (pFloatValue != null) ? pFloatValue : (pFloatValue = new FloatValueElements());
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//  value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//terminal Float:
	//  (INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return (tFloat != null) ? tFloat : (tFloat = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Float"));
	} 

	//terminal Boolean:
	//  "true" | "false";
	public TerminalRule getBooleanRule() {
		return (tBoolean != null) ? tBoolean : (tBoolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean"));
	} 

	////---------------------------------------------------------------------
	////----------------------- List of S-Instructions ----------------------
	////---------------------------------------------------------------------
	//
	//
	//Instruction:
	//  Abort|Join|Pause|Term|Present|Goto|Fork|Forke|Emit|Await|Prio;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Pause:
	//  {Pause} "PAUSE" "(" ")" annotations+=Annotation? ("," annotations+=Annotation
	//  )*;
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Term:
	//  {Term} annotations+=Annotation? ("," annotations+=Annotation)* "TERM" "(" ")"
	//;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Join:
	//  {Join} annotations+=Annotation? ("," annotations+=Annotation)* "JOIN" "(" ")"
	//;
	public JoinElements getJoinAccess() {
		return (pJoin != null) ? pJoin : (pJoin = new JoinElements());
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//Abort:
	//  {Abort} annotations+=Annotation? ("," annotations+=Annotation)* "ABORT" "("
	//  ")";
	public AbortElements getAbortAccess() {
		return (pAbort != null) ? pAbort : (pAbort = new AbortElements());
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//Present:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "PRESENT" "("
	//  signal=SignalReference ")" "{" (instructions+=Instruction ";")* "}";
	public PresentElements getPresentAccess() {
		return (pPresent != null) ? pPresent : (pPresent = new PresentElements());
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//Goto:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "GOTO" "("
	//  state=StateReference ")";
	public GotoElements getGotoAccess() {
		return (pGoto != null) ? pGoto : (pGoto = new GotoElements());
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Fork:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "FORK" "("
	//  state=StateReference "," priority=IntValue ")";
	public ForkElements getForkAccess() {
		return (pFork != null) ? pFork : (pFork = new ForkElements());
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//Forke:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "FORKE" "("
	//  state=StateReference ")";
	public ForkeElements getForkeAccess() {
		return (pForke != null) ? pForke : (pForke = new ForkeElements());
	}
	
	public ParserRule getForkeRule() {
		return getForkeAccess().getRule();
	}

	//Emit:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "EMIT" "("
	//  signal=SignalReference ")";
	public EmitElements getEmitAccess() {
		return (pEmit != null) ? pEmit : (pEmit = new EmitElements());
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//Await:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "AWAIT" "("
	//  signal=SignalReference ")";
	public AwaitElements getAwaitAccess() {
		return (pAwait != null) ? pAwait : (pAwait = new AwaitElements());
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//Prio:
	//  annotations+=Annotation? ("," annotations+=Annotation)* "PRIO" "("
	//  priority=IntValue ")";
	public PrioElements getPrioAccess() {
		return (pPrio != null) ? pPrio : (pPrio = new PrioElements());
	}
	
	public ParserRule getPrioRule() {
		return getPrioAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""
	//  ))* "\"" | "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !(
	//  "\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
