/*
* generated by Xtext
*/
grammar InternalS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.s.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.s.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.s.services.SGrammarAccess;

}

@parser::members {

 	private SGrammarAccess grammarAccess;
 	
    public InternalSParser(TokenStream input, IAstFactory factory, SGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/s/parser/antlr/internal/InternalS.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected SGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Synchronous Program' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getPriorityIntValueParserRuleCall_3_0(), currentNode); 
	    }
		lv_priority_3_0=ruleIntValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_3_0, 
	        		"IntValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4(), null); 
    }
(	'Inputs' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getInputsKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_signals_6_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_6_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_2_1_0(), currentNode); 
	    }
		lv_signals_8_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_8_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_5_3(), null); 
    }
)?(	'Outputs' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getOutputsKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_signals_11_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_11_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getCommaKeyword_6_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_6_2_1_0(), currentNode); 
	    }
		lv_signals_13_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_13_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_6_3(), null); 
    }
)?(	'Signals' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSignalsKeyword_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_signals_16_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_16_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getCommaKeyword_7_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_7_2_1_0(), currentNode); 
	    }
		lv_signals_18_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_18_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSemicolonKeyword_7_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_8_0(), currentNode); 
	    }
		lv_states_20_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_20_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_key_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAnnotationAccess().getKeyIDTerminalRuleCall_0_0(), "key"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_value_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAnnotationAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;







// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getStateAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getAnnotationsAnnotationParserRuleCall_2_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getStateAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getAnnotationsAnnotationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_4_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'SIGNALS' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSIGNALSKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_signals_6_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_6_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_4_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_instructions_8_0=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"instructions",
	        		lv_instructions_8_0, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_5_1(), null); 
    }
)*)
;





// Entry rule entryRuleStateReference
entryRuleStateReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateReferenceRule(), currentNode); }
	 iv_ruleStateReference=ruleStateReference 
	 { $current=$iv_ruleStateReference.current; } 
	 EOF 
;

// Rule StateReference
ruleStateReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getStateReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getStateReferenceAccess().getStateStateCrossReference_0(), "state"); 
	}

)
)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeSignalTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleSignalType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"SignalType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalAccess().getCombineFunctionCombineFunctionCrossReference_3_1_0(), "combineFunction"); 
	}

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getAnnotationsAnnotationParserRuleCall_4_0(), currentNode); 
	    }
		lv_annotations_5_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_5_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getAnnotationsAnnotationParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_annotations_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_7_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSignalReference
entryRuleSignalReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalReferenceRule(), currentNode); }
	 iv_ruleSignalReference=ruleSignalReference 
	 { $current=$iv_ruleSignalReference.current; } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0(), "signal"); 
	}

)
)
;







// Entry rule entryRuleSignalType
entryRuleSignalType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalTypeRule(), currentNode); }
	 iv_ruleSignalType=ruleSignalType 
	 { $current=$iv_ruleSignalType.current; } 
	 EOF 
;

// Rule SignalType
ruleSignalType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSignalTypeAccess().getPrimitiveSignalParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveSignal_0=rulePrimitiveSignal
    { 
        $current = $this_PrimitiveSignal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSignalTypeAccess().getCustomSignalParserRuleCall_1(), currentNode); 
    }
    this_CustomSignal_1=ruleCustomSignal
    { 
        $current = $this_CustomSignal_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCustomSignal
entryRuleCustomSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCustomSignalRule(), currentNode); }
	 iv_ruleCustomSignal=ruleCustomSignal 
	 { $current=$iv_ruleCustomSignal.current; } 
	 EOF 
;

// Rule CustomSignal
ruleCustomSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'CUSTOM' 
    {
        createLeafNode(grammarAccess.getCustomSignalAccess().getCUSTOMKeyword_0(), null); 
    }
(
(
		lv_type_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getCustomSignalAccess().getTypeSTRINGTerminalRuleCall_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulePrimitiveSignal
entryRulePrimitiveSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveSignalRule(), currentNode); }
	 iv_rulePrimitiveSignal=rulePrimitiveSignal 
	 { $current=$iv_rulePrimitiveSignal.current; } 
	 EOF 
;

// Rule PrimitiveSignal
rulePrimitiveSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveSignalAccess().getTypePrimitiveSignalTypeEnumRuleCall_0(), currentNode); 
	    }
		lv_type_0_0=rulePrimitiveSignalType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"PrimitiveSignalType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;









// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstructionRule(), currentNode); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getAbortParserRuleCall_0(), currentNode); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getJoinParserRuleCall_1(), currentNode); 
    }
    this_Join_1=ruleJoin
    { 
        $current = $this_Join_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPauseParserRuleCall_2(), currentNode); 
    }
    this_Pause_2=rulePause
    { 
        $current = $this_Pause_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getTermParserRuleCall_3(), currentNode); 
    }
    this_Term_3=ruleTerm
    { 
        $current = $this_Term_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPresentParserRuleCall_4(), currentNode); 
    }
    this_Present_4=rulePresent
    { 
        $current = $this_Present_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getGotoParserRuleCall_5(), currentNode); 
    }
    this_Goto_5=ruleGoto
    { 
        $current = $this_Goto_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getForkParserRuleCall_6(), currentNode); 
    }
    this_Fork_6=ruleFork
    { 
        $current = $this_Fork_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getForkeParserRuleCall_7(), currentNode); 
    }
    this_Forke_7=ruleForke
    { 
        $current = $this_Forke_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getEmitParserRuleCall_8(), currentNode); 
    }
    this_Emit_8=ruleEmit
    { 
        $current = $this_Emit_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_9(), currentNode); 
    }
    this_Await_9=ruleAwait
    { 
        $current = $this_Await_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPrioParserRuleCall_10(), currentNode); 
    }
    this_Prio_10=rulePrio
    { 
        $current = $this_Prio_10.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPauseRule(), currentNode); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPauseAccess().getPauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPauseAccess().getPauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'PAUSE' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getPAUSEKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getRightParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPauseAccess().getAnnotationsAnnotationParserRuleCall_4_0(), currentNode); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_4_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPauseAccess().getAnnotationsAnnotationParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_annotations_6_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_6_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTermAccess().getTermAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermAccess().getTermAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getTermAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getAnnotationsAnnotationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_3_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'TERM' 
    {
        createLeafNode(grammarAccess.getTermAccess().getTERMKeyword_3(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getTermAccess().getLeftParenthesisKeyword_4(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getTermAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJoinRule(), currentNode); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getJoinAccess().getJoinAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getJoinAccess().getJoinAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJoinAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJoinAccess().getAnnotationsAnnotationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_3_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'JOIN' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getJOINKeyword_3(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_4(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortRule(), currentNode); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAbortAccess().getAbortAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAbortAccess().getAbortAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getAnnotationsAnnotationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_3_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'ABORT' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getABORTKeyword_3(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_4(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRulePresent
entryRulePresent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentRule(), currentNode); }
	 iv_rulePresent=rulePresent 
	 { $current=$iv_rulePresent.current; } 
	 EOF 
;

// Rule Present
rulePresent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'PRESENT' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getPRESENTKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getSignalSignalReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_signal_5_0=ruleSignalReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signal",
	        		lv_signal_5_0, 
	        		"SignalReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getRightParenthesisKeyword_5(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getLeftCurlyBracketKeyword_6(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getInstructionsInstructionParserRuleCall_7_0_0(), currentNode); 
	    }
		lv_instructions_8_0=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"instructions",
	        		lv_instructions_8_0, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getSemicolonKeyword_7_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleGoto
entryRuleGoto returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGotoRule(), currentNode); }
	 iv_ruleGoto=ruleGoto 
	 { $current=$iv_ruleGoto.current; } 
	 EOF 
;

// Rule Goto
ruleGoto returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGotoAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGotoAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'GOTO' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getGOTOKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGotoAccess().getStateStateReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_state_5_0=ruleStateReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_5_0, 
	        		"StateReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleFork
entryRuleFork returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForkRule(), currentNode); }
	 iv_ruleFork=ruleFork 
	 { $current=$iv_ruleFork.current; } 
	 EOF 
;

// Rule Fork
ruleFork returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getForkAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'FORK' 
    {
        createLeafNode(grammarAccess.getForkAccess().getFORKKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getForkAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkAccess().getStateStateReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_state_5_0=ruleStateReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_5_0, 
	        		"StateReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getForkAccess().getCommaKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkAccess().getPriorityIntValueParserRuleCall_6_0(), currentNode); 
	    }
		lv_priority_7_0=ruleIntValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_7_0, 
	        		"IntValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getForkAccess().getRightParenthesisKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleForke
entryRuleForke returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForkeRule(), currentNode); }
	 iv_ruleForke=ruleForke 
	 { $current=$iv_ruleForke.current; } 
	 EOF 
;

// Rule Forke
ruleForke returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkeAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkeAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'FORKE' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getFORKEKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForkeAccess().getStateStateReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_state_5_0=ruleStateReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"state",
	        		lv_state_5_0, 
	        		"StateReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmitRule(), currentNode); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'EMIT' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getEMITKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getSignalSignalReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_signal_5_0=ruleSignalReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signal",
	        		lv_signal_5_0, 
	        		"SignalReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitRule(), currentNode); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'AWAIT' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getAWAITKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitAccess().getSignalSignalReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_signal_5_0=ruleSignalReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signal",
	        		lv_signal_5_0, 
	        		"SignalReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRulePrio
entryRulePrio returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrioRule(), currentNode); }
	 iv_rulePrio=rulePrio 
	 { $current=$iv_rulePrio.current; } 
	 EOF 
;

// Rule Prio
rulePrio returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrioAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrioAccess().getAnnotationsAnnotationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_annotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_2_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'PRIO' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getPRIOKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrioAccess().getPriorityIntValueParserRuleCall_4_0(), currentNode); 
	    }
		lv_priority_5_0=ruleIntValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_5_0, 
	        		"IntValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Rule PrimitiveSignalType
rulePrimitiveSignalType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'PURE' 
	{
        $current = grammarAccess.getPrimitiveSignalTypeAccess().getPureEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveSignalTypeAccess().getPureEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'INT' 
	{
        $current = grammarAccess.getPrimitiveSignalTypeAccess().getIntEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveSignalTypeAccess().getIntEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'BOOL' 
	{
        $current = grammarAccess.getPrimitiveSignalTypeAccess().getBoolEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveSignalTypeAccess().getBoolEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'FLOAT' 
	{
        $current = grammarAccess.getPrimitiveSignalTypeAccess().getFloatEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPrimitiveSignalTypeAccess().getFloatEnumLiteralDeclaration_3(), null); 
    }
));



RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


