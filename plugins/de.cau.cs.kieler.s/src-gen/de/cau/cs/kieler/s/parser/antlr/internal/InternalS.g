/*
* generated by Xtext
*/
grammar InternalS;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.s.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.s.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.s.services.SGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SGrammarAccess grammarAccess;
 	
    public InternalSParser(TokenStream input, IAstFactory factory, SGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/s/parser/antlr/internal/InternalS.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected SGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Synchronous Program' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_priority_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getProgramAccess().getPriorityINTTerminalRuleCall_3_0(), "priority"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_0(), currentNode); 
	    }
		lv_signals_5_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_5_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_6_0(), currentNode); 
	    }
		lv_states_6_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_6_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getStateAccess().getColonKeyword_1(), null); 
    }
(	'SIGNALS' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSIGNALSKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_signals_3_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_3_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_2_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_instructions_5_0=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"instructions",
	        		lv_instructions_5_0, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_3_1(), null); 
    }
)*)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isInput_0_0=	'input' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0(), "isInput"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInput", true, "input", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_isOutput_1_0=	'output' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0(), "isOutput"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOutput", true, "output", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'signal' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getSignalKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getNameEStringParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getInitialValueEStringParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_initialValue_5_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_5_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((	':' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonKeyword_5_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_0_1_0(), currentNode); 
	    }
		lv_type_7_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	':' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonKeyword_5_1_0(), null); 
    }
	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_5_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_1_2_0(), currentNode); 
	    }
		lv_type_10_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_10_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_5_1_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0(), currentNode); 
	    }
		lv_combineOperator_12_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"combineOperator",
	        		lv_combineOperator_12_0, 
	        		"CombineOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getHostCombineOperatorEStringParserRuleCall_5_1_4_1_0(), currentNode); 
	    }
		lv_hostCombineOperator_13_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostCombineOperator",
	        		lv_hostCombineOperator_13_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))?	';' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstructionRule(), currentNode); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getHaltParserRuleCall_0(), currentNode); 
    }
    this_Halt_0=ruleHalt
    { 
        $current = $this_Halt_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getAbortParserRuleCall_1(), currentNode); 
    }
    this_Abort_1=ruleAbort
    { 
        $current = $this_Abort_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getJoinParserRuleCall_2(), currentNode); 
    }
    this_Join_2=ruleJoin
    { 
        $current = $this_Join_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPauseParserRuleCall_3(), currentNode); 
    }
    this_Pause_3=rulePause
    { 
        $current = $this_Pause_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getTermParserRuleCall_4(), currentNode); 
    }
    this_Term_4=ruleTerm
    { 
        $current = $this_Term_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getIfParserRuleCall_5(), currentNode); 
    }
    this_If_5=ruleIf
    { 
        $current = $this_If_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getGotoParserRuleCall_6(), currentNode); 
    }
    this_Goto_6=ruleGoto
    { 
        $current = $this_Goto_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getForkParserRuleCall_7(), currentNode); 
    }
    this_Fork_7=ruleFork
    { 
        $current = $this_Fork_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getForkeParserRuleCall_8(), currentNode); 
    }
    this_Forke_8=ruleForke
    { 
        $current = $this_Forke_8.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getEmitParserRuleCall_9(), currentNode); 
    }
    this_Emit_9=ruleEmit
    { 
        $current = $this_Emit_9.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_10(), currentNode); 
    }
    this_Await_10=ruleAwait
    { 
        $current = $this_Await_10.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPrioParserRuleCall_11(), currentNode); 
    }
    this_Prio_11=rulePrio
    { 
        $current = $this_Prio_11.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPauseRule(), currentNode); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPauseAccess().getPauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPauseAccess().getPauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'PAUSE' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getPAUSEKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPauseAccess().getContinuationStateCrossReference_3_0(), "continuation"); 
	}

)
)?	')' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTermAccess().getTermAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermAccess().getTermAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'TERM' 
    {
        createLeafNode(grammarAccess.getTermAccess().getTERMKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTermAccess().getContinuationStateCrossReference_3_0(), "continuation"); 
	}

)
)?	')' 
    {
        createLeafNode(grammarAccess.getTermAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleHalt
entryRuleHalt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHaltRule(), currentNode); }
	 iv_ruleHalt=ruleHalt 
	 { $current=$iv_ruleHalt.current; } 
	 EOF 
;

// Rule Halt
ruleHalt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getHaltAccess().getHaltAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getHaltAccess().getHaltAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Halt' 
    {
        createLeafNode(grammarAccess.getHaltAccess().getHaltKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getHaltAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHaltRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHaltAccess().getContinuationStateCrossReference_3_0(), "continuation"); 
	}

)
)?	')' 
    {
        createLeafNode(grammarAccess.getHaltAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJoinRule(), currentNode); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getJoinAccess().getJoinAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getJoinAccess().getJoinAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'JOIN' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getJOINKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getJoinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getJoinAccess().getContinuationStateCrossReference_3_0(), "continuation"); 
	}

)
)?	')' 
    {
        createLeafNode(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortRule(), currentNode); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAbortAccess().getAbortAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAbortAccess().getAbortAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'ABORT' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getABORTKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAbortAccess().getContinuationStateCrossReference_3_0(), "continuation"); 
	}

)
)?	')' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfRule(), currentNode); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'IF' 
    {
        createLeafNode(grammarAccess.getIfAccess().getIFKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIfAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getIfAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getIfAccess().getRightParenthesisKeyword_4(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfAccess().getInstructionsInstructionParserRuleCall_6_0_0(), currentNode); 
	    }
		lv_instructions_7_0=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"instructions",
	        		lv_instructions_7_0, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getIfAccess().getSemicolonKeyword_6_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleGoto
entryRuleGoto returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGotoRule(), currentNode); }
	 iv_ruleGoto=ruleGoto 
	 { $current=$iv_ruleGoto.current; } 
	 EOF 
;

// Rule Goto
ruleGoto returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'GOTO' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getGOTOKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGotoAccess().getStateStateCrossReference_2_0(), "state"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGotoAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getGotoAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleFork
entryRuleFork returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForkRule(), currentNode); }
	 iv_ruleFork=ruleFork 
	 { $current=$iv_ruleFork.current; } 
	 EOF 
;

// Rule Fork
ruleFork returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'FORK' 
    {
        createLeafNode(grammarAccess.getForkAccess().getFORKKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getForkAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getForkAccess().getStateStateCrossReference_2_0(), "state"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getForkAccess().getCommaKeyword_3(), null); 
    }
(
(
		lv_priority_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getForkAccess().getPriorityINTTerminalRuleCall_4_0(), "priority"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getForkAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getForkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getForkAccess().getContinuationStateCrossReference_5_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getForkAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleForke
entryRuleForke returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForkeRule(), currentNode); }
	 iv_ruleForke=ruleForke 
	 { $current=$iv_ruleForke.current; } 
	 EOF 
;

// Rule Forke
ruleForke returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'FORKE' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getFORKEKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getForkeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getForkeAccess().getStateStateCrossReference_2_0(), "state"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getForkeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getForkeAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getForkeAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmitRule(), currentNode); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'EMIT' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getEMITKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEmitAccess().getSignalSignalCrossReference_2_0(), "signal"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEmitAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitRule(), currentNode); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'AWAIT' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getAWAITKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAwaitAccess().getSignalSignalCrossReference_2_0(), "signal"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAwaitAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePrio
entryRulePrio returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrioRule(), currentNode); }
	 iv_rulePrio=rulePrio 
	 { $current=$iv_rulePrio.current; } 
	 EOF 
;

// Rule Prio
rulePrio returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'PRIO' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getPRIOKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_priority_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPrioAccess().getPriorityINTTerminalRuleCall_2_0(), "priority"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPrioAccess().getContinuationStateCrossReference_3_1_0(), "continuation"); 
	}

)
))?	')' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSignalReference
entryRuleSignalReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalReferenceRule(), currentNode); }
	 iv_ruleSignalReference=ruleSignalReference 
	 { $current=$iv_ruleSignalReference.current; } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0_0(), "signal"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getSignalReferenceAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_subExpressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalReferenceAccess().getCommaKeyword_1_1_1(), null); 
    }
)?)*	')' 
    {
        createLeafNode(grammarAccess.getSignalReferenceAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableReferenceRule(), currentNode); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0_0(), "variable"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_subExpressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getCommaKeyword_1_1_1(), null); 
    }
)?)*	')' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;







// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFloatValueRule(), currentNode); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			createLeafNode(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFloatValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Float", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanValueRule(), currentNode); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Boolean", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;







// Entry rule entryRuleValOperation
entryRuleValOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValOperationRule(), currentNode); }
	 iv_ruleValOperation=ruleValOperation 
	 { $current=$iv_ruleValOperation.current; } 
	 EOF 
;

// Rule ValOperation
ruleValOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_operator_0_0=ruleValOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_0_0, 
	        		"ValOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0(), currentNode); 
	    }
		lv_subExpressions_1_0=ruleSignalReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_1_0, 
	        		"SignalReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValuedExpressionRule(), currentNode); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValuedExpressionAccess().getPlusOperationParserRuleCall(), currentNode); 
    }
    this_PlusOperation_0=rulePlusOperation
    { 
        $current = $this_PlusOperation_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleParanthesedValuedExpression
entryRuleParanthesedValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParanthesedValuedExpressionRule(), currentNode); }
	 iv_ruleParanthesedValuedExpression=ruleParanthesedValuedExpression 
	 { $current=$iv_ruleParanthesedValuedExpression.current; } 
	 EOF 
;

// Rule ParanthesedValuedExpression
ruleParanthesedValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getIntValueParserRuleCall_0(), currentNode); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getFloatValueParserRuleCall_1(), currentNode); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getValOperationParserRuleCall_2(), currentNode); 
    }
    this_ValOperation_2=ruleValOperation
    { 
        $current = $this_ValOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getVariableReferenceParserRuleCall_3(), currentNode); 
    }
    this_VariableReference_3=ruleVariableReference
    { 
        $current = $this_VariableReference_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getTextExpressionParserRuleCall_4(), currentNode); 
    }
    this_TextExpression_4=ruleTextExpression
    { 
        $current = $this_TextExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_5_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getPlusOperationParserRuleCall_5_1(), currentNode); 
    }
    this_PlusOperation_6=rulePlusOperation
    { 
        $current = $this_PlusOperation_6.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_5_2(), null); 
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_6_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedValuedExpressionAccess().getDivOperationParserRuleCall_6_1(), currentNode); 
    }
    this_DivOperation_9=ruleDivOperation
    { 
        $current = $this_DivOperation_9.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_6_2(), null); 
    }
))
;





// Entry rule entryRulePlusOperation
entryRulePlusOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPlusOperationRule(), currentNode); }
	 iv_rulePlusOperation=rulePlusOperation 
	 { $current=$iv_rulePlusOperation.current; } 
	 EOF 
;

// Rule PlusOperation
rulePlusOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPlusOperationAccess().getMultOrDivOperationParserRuleCall_0(), currentNode); 
    }
    this_MultOrDivOperation_0=ruleMultOrDivOperation
    { 
        $current = $this_MultOrDivOperation_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlusOperationAccess().getOperatorPlusOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=rulePlusOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlusOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"PlusOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlusOperationAccess().getSubExpressionsMultOrDivOperationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleMultOrDivOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlusOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"MultOrDivOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultOrDivOperation
entryRuleMultOrDivOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultOrDivOperationRule(), currentNode); }
	 iv_ruleMultOrDivOperation=ruleMultOrDivOperation 
	 { $current=$iv_ruleMultOrDivOperation.current; } 
	 EOF 
;

// Rule MultOrDivOperation
ruleMultOrDivOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultOrDivOperationAccess().getMultOperationParserRuleCall_0(), currentNode); 
    }
    this_MultOperation_0=ruleMultOperation
    { 
        $current = $this_MultOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getMultOrDivOperationAccess().getLeftParenthesisKeyword_1_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultOrDivOperationAccess().getDivOperationParserRuleCall_1_1(), currentNode); 
    }
    this_DivOperation_2=ruleDivOperation
    { 
        $current = $this_DivOperation_2.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getMultOrDivOperationAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleMultOperation
entryRuleMultOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultOperationRule(), currentNode); }
	 iv_ruleMultOperation=ruleMultOperation 
	 { $current=$iv_ruleMultOperation.current; } 
	 EOF 
;

// Rule MultOperation
ruleMultOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_PreOrNormalValuedExpression_0=rulePreOrNormalValuedExpression
    { 
        $current = $this_PreOrNormalValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultOperationAccess().getOperatorMultOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleMultOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"MultOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=rulePreOrNormalValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"PreOrNormalValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDivOperation
entryRuleDivOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDivOperationRule(), currentNode); }
	 iv_ruleDivOperation=ruleDivOperation 
	 { $current=$iv_ruleDivOperation.current; } 
	 EOF 
;

// Rule DivOperation
ruleDivOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDivOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_PreOrNormalValuedExpression_0=rulePreOrNormalValuedExpression
    { 
        $current = $this_PreOrNormalValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDivOperationAccess().getOperatorDivOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleDivOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"DivOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDivOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=rulePreOrNormalValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"PreOrNormalValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePreArithmOperation
entryRulePreArithmOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreArithmOperationRule(), currentNode); }
	 iv_rulePreArithmOperation=rulePreArithmOperation 
	 { $current=$iv_rulePreArithmOperation.current; } 
	 EOF 
;

// Rule PreArithmOperation
rulePreArithmOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreArithmOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_operator_0_0=ruleUnaryParanthesedOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreArithmOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_0_0, 
	        		"UnaryParanthesedOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getPreArithmOperationAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreArithmOperationAccess().getSubExpressionsValOperationParserRuleCall_2_0(), currentNode); 
	    }
		lv_subExpressions_2_0=ruleValOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreArithmOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_2_0, 
	        		"ValOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPreArithmOperationAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePreOrNormalValuedExpression
entryRulePreOrNormalValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreOrNormalValuedExpressionRule(), currentNode); }
	 iv_rulePreOrNormalValuedExpression=rulePreOrNormalValuedExpression 
	 { $current=$iv_rulePreOrNormalValuedExpression.current; } 
	 EOF 
;

// Rule PreOrNormalValuedExpression
rulePreOrNormalValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPreOrNormalValuedExpressionAccess().getPreArithmOperationParserRuleCall_0(), currentNode); 
    }
    this_PreArithmOperation_0=rulePreArithmOperation
    { 
        $current = $this_PreArithmOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPreOrNormalValuedExpressionAccess().getParanthesedValuedExpressionParserRuleCall_1(), currentNode); 
    }
    this_ParanthesedValuedExpression_1=ruleParanthesedValuedExpression
    { 
        $current = $this_ParanthesedValuedExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompareOperationRule(), currentNode); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"CompareOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsValuedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"ValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOperationRule(), currentNode); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_operator_0_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_0_0, 
	        		"UnaryOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_subExpressions_1_1=ruleParanthesedBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_1_1, 
	        		"ParanthesedBooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryOperationAccess().getSubExpressionsUnaryParanthesedOperationParserRuleCall_1_0_1(), currentNode); 
	    }
		lv_subExpressions_1_2=ruleUnaryParanthesedOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_1_2, 
	        		"UnaryParanthesedOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleUnaryParanthesedOperation
entryRuleUnaryParanthesedOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryParanthesedOperationRule(), currentNode); }
	 iv_ruleUnaryParanthesedOperation=ruleUnaryParanthesedOperation 
	 { $current=$iv_ruleUnaryParanthesedOperation.current; } 
	 EOF 
;

// Rule UnaryParanthesedOperation
ruleUnaryParanthesedOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_operator_0_0=ruleUnaryParanthesedOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryParanthesedOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_0_0, 
	        		"UnaryParanthesedOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getUnaryParanthesedOperationAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_subExpressions_2_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryParanthesedOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_2_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getUnaryParanthesedOperationAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleUnaryOrNormalExpression
entryRuleUnaryOrNormalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOrNormalExpressionRule(), currentNode); }
	 iv_ruleUnaryOrNormalExpression=ruleUnaryOrNormalExpression 
	 { $current=$iv_ruleUnaryOrNormalExpression.current; } 
	 EOF 
;

// Rule UnaryOrNormalExpression
ruleUnaryOrNormalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryOperationParserRuleCall_0(), currentNode); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryParanthesedOperationParserRuleCall_1(), currentNode); 
    }
    this_UnaryParanthesedOperation_1=ruleUnaryParanthesedOperation
    { 
        $current = $this_UnaryParanthesedOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_2(), currentNode); 
    }
    this_ParanthesedBooleanExpression_2=ruleParanthesedBooleanExpression
    { 
        $current = $this_ParanthesedBooleanExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAndOperation
entryRuleAndOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndOperationRule(), currentNode); }
	 iv_ruleAndOperation=ruleAndOperation 
	 { $current=$iv_ruleAndOperation.current; } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getUnaryOrNormalExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryOrNormalExpression_0=ruleUnaryOrNormalExpression
    { 
        $current = $this_UnaryOrNormalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleOperatorAnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"OperatorAnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getSubExpressionsUnaryOrNormalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleUnaryOrNormalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"UnaryOrNormalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleOrOperation
entryRuleOrOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrOperationRule(), currentNode); }
	 iv_ruleOrOperation=ruleOrOperation 
	 { $current=$iv_ruleOrOperation.current; } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0(), currentNode); 
    }
    this_AndOperation_0=ruleAndOperation
    { 
        $current = $this_AndOperation_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleOperatorOr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"OperatorOr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleAndOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"AndOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleParanthesedBooleanExpression
entryRuleParanthesedBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParanthesedBooleanExpressionRule(), currentNode); }
	 iv_ruleParanthesedBooleanExpression=ruleParanthesedBooleanExpression 
	 { $current=$iv_ruleParanthesedBooleanExpression.current; } 
	 EOF 
;

// Rule ParanthesedBooleanExpression
ruleParanthesedBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getBooleanValueParserRuleCall_0(), currentNode); 
    }
    this_BooleanValue_0=ruleBooleanValue
    { 
        $current = $this_BooleanValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getCompareOperationParserRuleCall_1(), currentNode); 
    }
    this_CompareOperation_1=ruleCompareOperation
    { 
        $current = $this_CompareOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_2(), currentNode); 
    }
    this_SignalReference_2=ruleSignalReference
    { 
        $current = $this_SignalReference_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getValOperationParserRuleCall_3(), currentNode); 
    }
    this_ValOperation_3=ruleValOperation
    { 
        $current = $this_ValOperation_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getTextExpressionParserRuleCall_4(), currentNode); 
    }
    this_TextExpression_4=ruleTextExpression
    { 
        $current = $this_TextExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_5_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_5_1(), currentNode); 
    }
    this_OrOperation_6=ruleOrOperation
    { 
        $current = $this_OrOperation_6.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_5_2(), null); 
    }
))
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall(), currentNode); 
    }
    this_OrOperation_0=ruleOrOperation
    { 
        $current = $this_OrOperation_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextExpressionRule(), currentNode); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_code_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0(), "code"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		lv_type_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_1(), currentNode); 
    }
    this_BooleanExpression_1=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Rule ValOperator
ruleValOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'?' 
	{
        $current = grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration(), null); 
    }
);



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'<>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5(), null); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'not' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration(), null); 
    }
);



// Rule UnaryParanthesedOperator
ruleUnaryParanthesedOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'pre' 
	{
        $current = grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration(), null); 
    }
);



// Rule OperatorOr
ruleOperatorOr returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'or' 
	{
        $current = grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration(), null); 
    }
);



// Rule OperatorAnd
ruleOperatorAnd returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'and' 
	{
        $current = grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration(), null); 
    }
);





// Rule PlusOperator
rulePlusOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1(), null); 
    }
));



// Rule MultOperator
ruleMultOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'*' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'mod' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1(), null); 
    }
));



// Rule DivOperator
ruleDivOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/' 
	{
        $current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration(), null); 
    }
);



// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'PURE' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'BOOL' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'UNSIGNED' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'INT' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'FLOAT' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'HOST' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5(), null); 
    }
));



// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'NONE' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7(), null); 
    }
));



RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


