/*
* generated by Xtext
*/
grammar InternalEsi;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.services.EsiGrammarAccess;

}

@parser::members {
 
 	private EsiGrammarAccess grammarAccess;
 	
    public InternalEsiParser(TokenStream input, IAstFactory factory, EsiGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/parser/antlr/internal/InternalEsi.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "tracelist";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuletracelist
entryRuletracelist returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTracelistRule(), currentNode); }
	 iv_ruletracelist=ruletracelist 
	 { $current=$iv_ruletracelist.current; } 
	 EOF 
;

// Rule tracelist
ruletracelist returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTracelistAccess().getTracesTraceParserRuleCall_0_0(), currentNode); 
	    }
		lv_traces_0_0=ruletrace		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTracelistRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traces",
	        		lv_traces_0_0, 
	        		"trace", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?('!' 
    {
        createLeafNode(grammarAccess.getTracelistAccess().getExclamationMarkKeyword_1_0(), null); 
    }
'reset' 
    {
        createLeafNode(grammarAccess.getTracelistAccess().getResetKeyword_1_1(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getTracelistAccess().getSemicolonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTracelistAccess().getTracesTraceParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_traces_4_0=ruletrace		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTracelistRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traces",
	        		lv_traces_4_0, 
	        		"trace", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+);





// Entry rule entryRuletrace
entryRuletrace returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTraceRule(), currentNode); }
	 iv_ruletrace=ruletrace 
	 { $current=$iv_ruletrace.current; } 
	 EOF 
;

// Rule trace
ruletrace returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceAccess().getTicksTickParserRuleCall_0(), currentNode); 
	    }
		lv_ticks_0_0=ruletick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ticks",
	        		lv_ticks_0_0, 
	        		"tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+;





// Entry rule entryRuletick
entryRuletick returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTickRule(), currentNode); }
	 iv_ruletick=ruletick 
	 { $current=$iv_ruletick.current; } 
	 EOF 
;

// Rule tick
ruletick returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTickAccess().getInputSignalParserRuleCall_0_0(), currentNode); 
	    }
		lv_input_0_0=rulesignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"input",
	        		lv_input_0_0, 
	        		"signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*('%' 
    {
        createLeafNode(grammarAccess.getTickAccess().getPercentSignKeyword_1_0(), null); 
    }
'Output' 
    {
        createLeafNode(grammarAccess.getTickAccess().getOutputKeyword_1_1(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getTickAccess().getColonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTickAccess().getOutputSignalParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_output_4_0=rulesignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"output",
	        		lv_output_4_0, 
	        		"signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?';' 
    {
        createLeafNode(grammarAccess.getTickAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRulesignal
entryRulesignal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_rulesignal=rulesignal 
	 { $current=$iv_rulesignal.current; } 
	 EOF 
;

// Rule signal
rulesignal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_valued_1_0='(' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getValuedLeftParenthesisKeyword_1_0_0(), "valued"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valued", true, "(", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_val_2_0=RULE_NUM
		{
			createLeafNode(grammarAccess.getSignalAccess().getValNUMTerminalRuleCall_1_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_2_0, 
	        		"NUM", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)')' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?);





RULE_ID : (RULE_LETTER|'_') (RULE_LETTER|RULE_DIGIT|'_')*;

RULE_NUM : ('+'|'-')? RULE_DIGIT+;

RULE_WS : ('\t'|' '|'\r'|'\n');

RULE_COMMENT : '%' ('A'..'N'|'P'..'Z') ( options {greedy=false;} : . )*'\n';

RULE_DIGIT : '0'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');


