/*
* generated by Xtext
*/
grammar InternalEsi;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.sim.esi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.sim.esi.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.sim.esi.services.EsiGrammarAccess;

}

@parser::members {

 	private EsiGrammarAccess grammarAccess;
 	
    public InternalEsiParser(TokenStream input, EsiGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "tracelist";	
   	}
   	
   	@Override
   	protected EsiGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuletracelist
entryRuletracelist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTracelistRule()); }
	 iv_ruletracelist=ruletracelist 
	 { $current=$iv_ruletracelist.current; } 
	 EOF 
;

// Rule tracelist
ruletracelist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTracelistAccess().getTracesTraceParserRuleCall_0_0()); 
	    }
		lv_traces_0_0=ruletrace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTracelistRule());
	        }
       		add(
       			$current, 
       			"traces",
        		lv_traces_0_0, 
        		"trace");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTracelistAccess().getExclamationMarkKeyword_1_0());
    }
	otherlv_2='reset' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTracelistAccess().getResetKeyword_1_1());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTracelistAccess().getSemicolonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTracelistAccess().getTracesTraceParserRuleCall_1_3_0()); 
	    }
		lv_traces_4_0=ruletrace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTracelistRule());
	        }
       		add(
       			$current, 
       			"traces",
        		lv_traces_4_0, 
        		"trace");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuletrace
entryRuletrace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceRule()); }
	 iv_ruletrace=ruletrace 
	 { $current=$iv_ruletrace.current; } 
	 EOF 
;

// Rule trace
ruletrace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTraceAccess().getTraceAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceAccess().getTicksTickParserRuleCall_1_0()); 
	    }
		lv_ticks_1_0=ruletick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRule());
	        }
       		add(
       			$current, 
       			"ticks",
        		lv_ticks_1_0, 
        		"tick");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuletick
entryRuletick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTickRule()); }
	 iv_ruletick=ruletick 
	 { $current=$iv_ruletick.current; } 
	 EOF 
;

// Rule tick
ruletick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTickAccess().getInputSignalParserRuleCall_0_0()); 
	    }
		lv_input_0_0=rulesignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTickRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_0_0, 
        		"signal");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_1='%' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTickAccess().getPercentSignKeyword_1_0());
    }
	otherlv_2='Output' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTickAccess().getOutputKeyword_1_1());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTickAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTickAccess().getOutputSignalParserRuleCall_1_3_0()); 
	    }
		lv_output_4_0=rulesignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTickRule());
	        }
       		add(
       			$current, 
       			"output",
        		lv_output_4_0, 
        		"signal");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		lv_n_5_0=	';' 
    {
        newLeafNode(lv_n_5_0, grammarAccess.getTickAccess().getNSemicolonKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTickRule());
	        }
       		setWithLastConsumed($current, "n", lv_n_5_0, ";");
	    }

)
))
;





// Entry rule entryRulesignal
entryRulesignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	 iv_rulesignal=rulesignal 
	 { $current=$iv_rulesignal.current; } 
	 EOF 
;

// Rule signal
rulesignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
(
		lv_valued_1_0=	'(' 
    {
        newLeafNode(lv_valued_1_0, grammarAccess.getSignalAccess().getValuedLeftParenthesisKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRule());
	        }
       		setWithLastConsumed($current, "valued", true, "(");
	    }

)
)(
(
		lv_val_2_0=RULE_NUM
		{
			newLeafNode(lv_val_2_0, grammarAccess.getSignalAccess().getValNUMTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"NUM");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignalAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





RULE_DIGIT : '0'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_ID : (RULE_LETTER|'_') (RULE_LETTER|RULE_DIGIT|'_')*;

RULE_NUM : ('+'|'-')? RULE_DIGIT+;

RULE_WS : ('\t'|' '|'\r'|'\n');

RULE_COMMENT : '%' ('A'..'N'|'P'..'Z') ( options {greedy=false;} : . )*'\n';


