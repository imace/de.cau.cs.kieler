/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2009 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.kiml.graphviz.dot.GraphvizDot with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT, PREC_LINE)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * TMF Xtext grammar for the DOT Language, which is defined at
 *      http://www.graphviz.org/content/dot-language
 *
 * This grammar does not exactly reflect the original DOT grammar, but is
 * optimized for internal use.
 */
generate dot "http://kieler.cs.cau.de/GraphvizDot"


GraphvizModel: (graphs+=Graph)*;

Graph: (strict?="strict")? type=GraphType (name=ID)?
    "{" (statements+=Statement)* "}";

Statement: (EdgeStatement | NodeStatement | Attribute
    | AttributeStatement | Subgraph) ";"?;

EdgeStatement: sourceNode=Node (edgeTargets+=EdgeTarget)+
    ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;

EdgeTarget: operator=EdgeOperator (targetSubgraph=Subgraph | targetnode=Node);

NodeStatement: node=Node
    ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;

AttributeStatement: type=AttributeType
    "[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]";

Subgraph: {Subgraph} "subgraph" (name=ID)? "{" (statements+=Statement)* "}";

Attribute: name=DotID "=" value=DotID;

ListAttribute returns Attribute: name=DotID ("=" value=DotID)?;

Node: name=DotID (":" port=Port)?;

Port: name=DotID (":" compass_pt=CompassPoint)? | compass_pt=CompassPoint;

DotID: ID | INT | FLOAT | STRING;

enum EdgeOperator: directed="->" | undirected="--";
enum GraphType: graph | digraph;
enum AttributeType: graph | node | edge;
enum CompassPoint: north="n" | northEast="ne" | east="e" | southEast="se"
    | south="s" | southWest="sw" | west="w" | northWest="nw" | center="c"
    | blank="_";

terminal INT returns ecore::EInt: ('-')?('0'..'9')+;
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal FLOAT: ('-')?(('0'..'9')* '.'('0'..'9')+);
terminal STRING: '"' ('\\' '"' | !'"')* '"';
terminal PREC_LINE: '#' !('\n'|'\r')* ('\r'? '\n')? ;
