/*
* generated by Xtext
*/

package de.cau.cs.kieler.kiml.graphviz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphvizModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphvizModel");
		private final Assignment cGraphsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGraphsGraphParserRuleCall_0 = (RuleCall)cGraphsAssignment.eContents().get(0);
		
		//GraphvizModel:
		//  graphs+=Graph*;
		public ParserRule getRule() { return rule; }

		//graphs+=Graph*
		public Assignment getGraphsAssignment() { return cGraphsAssignment; }

		//Graph
		public RuleCall getGraphsGraphParserRuleCall_0() { return cGraphsGraphParserRuleCall_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrictAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStrictStrictKeyword_0_0 = (Keyword)cStrictAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGraphTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Graph:
		//  strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//strict?="strict"?
		public Assignment getStrictAssignment_0() { return cStrictAssignment_0; }

		//"strict"
		public Keyword getStrictStrictKeyword_0_0() { return cStrictStrictKeyword_0_0; }

		//type=GraphType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//GraphType
		public RuleCall getTypeGraphTypeEnumRuleCall_1_0() { return cTypeGraphTypeEnumRuleCall_1_0; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEdgeStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNodeStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAttributeStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSubgraphParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Assignment cNameAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_4_0_0 = (RuleCall)cNameAssignment_0_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cValueAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cValueDotIDParserRuleCall_0_4_2_0 = (RuleCall)cValueAssignment_0_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//  (EdgeStatement|NodeStatement|AttributeStatement|Subgraph|name=DotID "=" value=
		//  DotID) ";"?;
		public ParserRule getRule() { return rule; }

		//(EdgeStatement|NodeStatement|AttributeStatement|Subgraph|name=DotID "=" value=
		//DotID) ";"?
		public Group getGroup() { return cGroup; }

		//EdgeStatement|NodeStatement|AttributeStatement|Subgraph|name=DotID "=" value=DotID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//EdgeStatement
		public RuleCall getEdgeStatementParserRuleCall_0_0() { return cEdgeStatementParserRuleCall_0_0; }

		//NodeStatement
		public RuleCall getNodeStatementParserRuleCall_0_1() { return cNodeStatementParserRuleCall_0_1; }

		//AttributeStatement
		public RuleCall getAttributeStatementParserRuleCall_0_2() { return cAttributeStatementParserRuleCall_0_2; }

		//Subgraph
		public RuleCall getSubgraphParserRuleCall_0_3() { return cSubgraphParserRuleCall_0_3; }

		//name=DotID "=" value=DotID
		public Group getGroup_0_4() { return cGroup_0_4; }

		//name=DotID
		public Assignment getNameAssignment_0_4_0() { return cNameAssignment_0_4_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_4_0_0() { return cNameDotIDParserRuleCall_0_4_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_1() { return cEqualsSignKeyword_0_4_1; }

		//value=DotID
		public Assignment getValueAssignment_0_4_2() { return cValueAssignment_0_4_2; }

		//DotID
		public RuleCall getValueDotIDParserRuleCall_0_4_2_0() { return cValueDotIDParserRuleCall_0_4_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class EdgeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSourceSubgraphAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSourceSubgraphSubgraphParserRuleCall_0_0_0 = (RuleCall)cSourceSubgraphAssignment_0_0.eContents().get(0);
		private final Assignment cSourceNodeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSourceNodeNodeParserRuleCall_0_1_0 = (RuleCall)cSourceNodeAssignment_0_1.eContents().get(0);
		private final Assignment cEdgeTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeTargetsEdgeTargetParserRuleCall_1_0 = (RuleCall)cEdgeTargetsAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeListParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//EdgeStatement:
		//  (sourceSubgraph=Subgraph|sourceNode=Node) edgeTargets+=EdgeTarget+ attributes=
		//  AttributeList?;
		public ParserRule getRule() { return rule; }

		//(sourceSubgraph=Subgraph|sourceNode=Node) edgeTargets+=EdgeTarget+ attributes=
		//AttributeList?
		public Group getGroup() { return cGroup; }

		//sourceSubgraph=Subgraph|sourceNode=Node
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//sourceSubgraph=Subgraph
		public Assignment getSourceSubgraphAssignment_0_0() { return cSourceSubgraphAssignment_0_0; }

		//Subgraph
		public RuleCall getSourceSubgraphSubgraphParserRuleCall_0_0_0() { return cSourceSubgraphSubgraphParserRuleCall_0_0_0; }

		//sourceNode=Node
		public Assignment getSourceNodeAssignment_0_1() { return cSourceNodeAssignment_0_1; }

		//Node
		public RuleCall getSourceNodeNodeParserRuleCall_0_1_0() { return cSourceNodeNodeParserRuleCall_0_1_0; }

		//edgeTargets+=EdgeTarget+
		public Assignment getEdgeTargetsAssignment_1() { return cEdgeTargetsAssignment_1; }

		//EdgeTarget
		public RuleCall getEdgeTargetsEdgeTargetParserRuleCall_1_0() { return cEdgeTargetsEdgeTargetParserRuleCall_1_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_2_0() { return cAttributesAttributeListParserRuleCall_2_0; }
	}

	public class EdgeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorEdgeOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTargetSubgraphAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTargetSubgraphSubgraphParserRuleCall_1_0_0 = (RuleCall)cTargetSubgraphAssignment_1_0.eContents().get(0);
		private final Assignment cTargetnodeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTargetnodeNodeParserRuleCall_1_1_0 = (RuleCall)cTargetnodeAssignment_1_1.eContents().get(0);
		
		//EdgeTarget:
		//  operator=EdgeOperator (targetSubgraph=Subgraph|targetnode=Node);
		public ParserRule getRule() { return rule; }

		//operator=EdgeOperator (targetSubgraph=Subgraph|targetnode=Node)
		public Group getGroup() { return cGroup; }

		//operator=EdgeOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//EdgeOperator
		public RuleCall getOperatorEdgeOperatorEnumRuleCall_0_0() { return cOperatorEdgeOperatorEnumRuleCall_0_0; }

		//targetSubgraph=Subgraph|targetnode=Node
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//targetSubgraph=Subgraph
		public Assignment getTargetSubgraphAssignment_1_0() { return cTargetSubgraphAssignment_1_0; }

		//Subgraph
		public RuleCall getTargetSubgraphSubgraphParserRuleCall_1_0_0() { return cTargetSubgraphSubgraphParserRuleCall_1_0_0; }

		//targetnode=Node
		public Assignment getTargetnodeAssignment_1_1() { return cTargetnodeAssignment_1_1; }

		//Node
		public RuleCall getTargetnodeNodeParserRuleCall_1_1_0() { return cTargetnodeNodeParserRuleCall_1_1_0; }
	}

	public class NodeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//NodeStatement:
		//  node=Node attributes=AttributeList?;
		public ParserRule getRule() { return rule; }

		//node=Node attributes=AttributeList?
		public Group getGroup() { return cGroup; }

		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }

		//attributes=AttributeList?
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }
	}

	public class AttributeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//AttributeStatement:
		//  type=AttributeType attributes=AttributeList;
		public ParserRule getRule() { return rule; }

		//type=AttributeType attributes=AttributeList
		public Group getGroup() { return cGroup; }

		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_0_0() { return cTypeAttributeTypeEnumRuleCall_0_0; }

		//attributes=AttributeList
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_1_0() { return cAttributesAttributeListParserRuleCall_1_0; }
	}

	public class SubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSubgraphKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Subgraph:
		//  ("subgraph" name=ID?)? "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//("subgraph" name=ID?)? "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//("subgraph" name=ID?)?
		public Group getGroup_0() { return cGroup_0; }

		//"subgraph"
		public Keyword getSubgraphKeyword_0_0() { return cSubgraphKeyword_0_0; }

		//name=ID?
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntriesAttributeParserRuleCall_1_0 = (RuleCall)cEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntriesAttributeParserRuleCall_2_1_0 = (RuleCall)cEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeList:
		//  "[" entries+=Attribute ("," entries+=Attribute)* "]";
		public ParserRule getRule() { return rule; }

		//"[" entries+=Attribute ("," entries+=Attribute)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//entries+=Attribute
		public Assignment getEntriesAssignment_1() { return cEntriesAssignment_1; }

		//Attribute
		public RuleCall getEntriesAttributeParserRuleCall_1_0() { return cEntriesAttributeParserRuleCall_1_0; }

		//("," entries+=Attribute)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//entries+=Attribute
		public Assignment getEntriesAssignment_2_1() { return cEntriesAssignment_2_1; }

		//Attribute
		public RuleCall getEntriesAttributeParserRuleCall_2_1_0() { return cEntriesAttributeParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDotIDParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Attribute:
		//  name=DotID ("=" value=DotID)?;
		public ParserRule getRule() { return rule; }

		//name=DotID ("=" value=DotID)?
		public Group getGroup() { return cGroup; }

		//name=DotID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0() { return cNameDotIDParserRuleCall_0_0; }

		//("=" value=DotID)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=DotID
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DotID
		public RuleCall getValueDotIDParserRuleCall_1_1_0() { return cValueDotIDParserRuleCall_1_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPortAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPortPortParserRuleCall_1_1_0 = (RuleCall)cPortAssignment_1_1.eContents().get(0);
		
		//Node:
		//  name=DotID (":" port=Port)?;
		public ParserRule getRule() { return rule; }

		//name=DotID (":" port=Port)?
		public Group getGroup() { return cGroup; }

		//name=DotID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0() { return cNameDotIDParserRuleCall_0_0; }

		//(":" port=Port)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//port=Port
		public Assignment getPortAssignment_1_1() { return cPortAssignment_1_1; }

		//Port
		public RuleCall getPortPortParserRuleCall_1_1_0() { return cPortPortParserRuleCall_1_1_0; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cCompass_ptAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCompass_ptCompassPointEnumRuleCall_0_1_1_0 = (RuleCall)cCompass_ptAssignment_0_1_1.eContents().get(0);
		private final Assignment cCompass_ptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompass_ptCompassPointEnumRuleCall_1_0 = (RuleCall)cCompass_ptAssignment_1.eContents().get(0);
		
		//Port:
		//  name=DotID (":" compass_pt=CompassPoint)?|compass_pt=CompassPoint;
		public ParserRule getRule() { return rule; }

		//name=DotID (":" compass_pt=CompassPoint)?|compass_pt=CompassPoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=DotID (":" compass_pt=CompassPoint)?
		public Group getGroup_0() { return cGroup_0; }

		//name=DotID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0_0() { return cNameDotIDParserRuleCall_0_0_0; }

		//(":" compass_pt=CompassPoint)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//":"
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }

		//compass_pt=CompassPoint
		public Assignment getCompass_ptAssignment_0_1_1() { return cCompass_ptAssignment_0_1_1; }

		//CompassPoint
		public RuleCall getCompass_ptCompassPointEnumRuleCall_0_1_1_0() { return cCompass_ptCompassPointEnumRuleCall_0_1_1_0; }

		//compass_pt=CompassPoint
		public Assignment getCompass_ptAssignment_1() { return cCompass_ptAssignment_1; }

		//CompassPoint
		public RuleCall getCompass_ptCompassPointEnumRuleCall_1_0() { return cCompass_ptCompassPointEnumRuleCall_1_0; }
	}

	public class DotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DotID returns ecore::EString:
		//  ID|FLOAT|STRING;
		public ParserRule getRule() { return rule; }

		//ID|FLOAT|STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	
	public class EdgeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDirectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDirectedHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cDirectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndirectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndirectedHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cUndirectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EdgeOperator:
		//  directed="->" | undirected="--";
		public EnumRule getRule() { return rule; }

		//directed="->" | undirected="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//directed="->"
		public EnumLiteralDeclaration getDirectedEnumLiteralDeclaration_0() { return cDirectedEnumLiteralDeclaration_0; }

		//"->"
		public Keyword getDirectedHyphenMinusGreaterThanSignKeyword_0_0() { return cDirectedHyphenMinusGreaterThanSignKeyword_0_0; }

		//undirected="--"
		public EnumLiteralDeclaration getUndirectedEnumLiteralDeclaration_1() { return cUndirectedEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getUndirectedHyphenMinusHyphenMinusKeyword_1_0() { return cUndirectedHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class GraphTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GraphType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigraphEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigraphDigraphKeyword_1_0 = (Keyword)cDigraphEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GraphType:
		//  graph | digraph;
		public EnumRule getRule() { return rule; }

		//graph | digraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//digraph
		public EnumLiteralDeclaration getDigraphEnumLiteralDeclaration_1() { return cDigraphEnumLiteralDeclaration_1; }

		//"digraph"
		public Keyword getDigraphDigraphKeyword_1_0() { return cDigraphDigraphKeyword_1_0; }
	}

	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNodeNodeKeyword_1_0 = (Keyword)cNodeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEdgeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEdgeEdgeKeyword_2_0 = (Keyword)cEdgeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType:
		//  graph | node | edge;
		public EnumRule getRule() { return rule; }

		//graph | node | edge
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_1() { return cNodeEnumLiteralDeclaration_1; }

		//"node"
		public Keyword getNodeNodeKeyword_1_0() { return cNodeNodeKeyword_1_0; }

		//edge
		public EnumLiteralDeclaration getEdgeEnumLiteralDeclaration_2() { return cEdgeEnumLiteralDeclaration_2; }

		//"edge"
		public Keyword getEdgeEdgeKeyword_2_0() { return cEdgeEdgeKeyword_2_0; }
	}

	public class CompassPointElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompassPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorthNKeyword_0_0 = (Keyword)cNorthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNortheastEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNortheastNeKeyword_1_0 = (Keyword)cNortheastEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSoutheastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSoutheastSeKeyword_3_0 = (Keyword)cSoutheastEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSouthSKeyword_4_0 = (Keyword)cSouthEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSouthwestEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSouthwestSwKeyword_5_0 = (Keyword)cSouthwestEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWestWKeyword_6_0 = (Keyword)cWestEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNorthwestEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNorthwestNwKeyword_7_0 = (Keyword)cNorthwestEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum CompassPoint:
		//  north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west=
		//  "w" | northwest="nw";
		public EnumRule getRule() { return rule; }

		//north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west=
		//"w" | northwest="nw"
		public Alternatives getAlternatives() { return cAlternatives; }

		//north="n"
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_0() { return cNorthEnumLiteralDeclaration_0; }

		//"n"
		public Keyword getNorthNKeyword_0_0() { return cNorthNKeyword_0_0; }

		//northeast="ne"
		public EnumLiteralDeclaration getNortheastEnumLiteralDeclaration_1() { return cNortheastEnumLiteralDeclaration_1; }

		//"ne"
		public Keyword getNortheastNeKeyword_1_0() { return cNortheastNeKeyword_1_0; }

		//east="e"
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }

		//"e"
		public Keyword getEastEKeyword_2_0() { return cEastEKeyword_2_0; }

		//southeast="se"
		public EnumLiteralDeclaration getSoutheastEnumLiteralDeclaration_3() { return cSoutheastEnumLiteralDeclaration_3; }

		//"se"
		public Keyword getSoutheastSeKeyword_3_0() { return cSoutheastSeKeyword_3_0; }

		//south="s"
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_4() { return cSouthEnumLiteralDeclaration_4; }

		//"s"
		public Keyword getSouthSKeyword_4_0() { return cSouthSKeyword_4_0; }

		//southwest="sw"
		public EnumLiteralDeclaration getSouthwestEnumLiteralDeclaration_5() { return cSouthwestEnumLiteralDeclaration_5; }

		//"sw"
		public Keyword getSouthwestSwKeyword_5_0() { return cSouthwestSwKeyword_5_0; }

		//west="w"
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_6() { return cWestEnumLiteralDeclaration_6; }

		//"w"
		public Keyword getWestWKeyword_6_0() { return cWestWKeyword_6_0; }

		//northwest="nw"
		public EnumLiteralDeclaration getNorthwestEnumLiteralDeclaration_7() { return cNorthwestEnumLiteralDeclaration_7; }

		//"nw"
		public Keyword getNorthwestNwKeyword_7_0() { return cNorthwestNwKeyword_7_0; }
	}
	
	private GraphvizModelElements pGraphvizModel;
	private GraphElements pGraph;
	private StatementElements pStatement;
	private EdgeStatementElements pEdgeStatement;
	private EdgeTargetElements pEdgeTarget;
	private NodeStatementElements pNodeStatement;
	private AttributeStatementElements pAttributeStatement;
	private SubgraphElements pSubgraph;
	private AttributeListElements pAttributeList;
	private AttributeElements pAttribute;
	private NodeElements pNode;
	private PortElements pPort;
	private DotIDElements pDotID;
	private EdgeOperatorElements unknownRuleEdgeOperator;
	private GraphTypeElements unknownRuleGraphType;
	private AttributeTypeElements unknownRuleAttributeType;
	private CompassPointElements unknownRuleCompassPoint;
	private TerminalRule tID;
	private TerminalRule tFLOAT;
	private TerminalRule tSTRING;
	private TerminalRule tPREC_LINE;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphvizModel:
	//  graphs+=Graph*;
	public GraphvizModelElements getGraphvizModelAccess() {
		return (pGraphvizModel != null) ? pGraphvizModel : (pGraphvizModel = new GraphvizModelElements());
	}
	
	public ParserRule getGraphvizModelRule() {
		return getGraphvizModelAccess().getRule();
	}

	//Graph:
	//  strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}";
	public GraphElements getGraphAccess() {
		return (pGraph != null) ? pGraph : (pGraph = new GraphElements());
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Statement:
	//  (EdgeStatement|NodeStatement|AttributeStatement|Subgraph|name=DotID "=" value=
	//  DotID) ";"?;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//EdgeStatement:
	//  (sourceSubgraph=Subgraph|sourceNode=Node) edgeTargets+=EdgeTarget+ attributes=
	//  AttributeList?;
	public EdgeStatementElements getEdgeStatementAccess() {
		return (pEdgeStatement != null) ? pEdgeStatement : (pEdgeStatement = new EdgeStatementElements());
	}
	
	public ParserRule getEdgeStatementRule() {
		return getEdgeStatementAccess().getRule();
	}

	//EdgeTarget:
	//  operator=EdgeOperator (targetSubgraph=Subgraph|targetnode=Node);
	public EdgeTargetElements getEdgeTargetAccess() {
		return (pEdgeTarget != null) ? pEdgeTarget : (pEdgeTarget = new EdgeTargetElements());
	}
	
	public ParserRule getEdgeTargetRule() {
		return getEdgeTargetAccess().getRule();
	}

	//NodeStatement:
	//  node=Node attributes=AttributeList?;
	public NodeStatementElements getNodeStatementAccess() {
		return (pNodeStatement != null) ? pNodeStatement : (pNodeStatement = new NodeStatementElements());
	}
	
	public ParserRule getNodeStatementRule() {
		return getNodeStatementAccess().getRule();
	}

	//AttributeStatement:
	//  type=AttributeType attributes=AttributeList;
	public AttributeStatementElements getAttributeStatementAccess() {
		return (pAttributeStatement != null) ? pAttributeStatement : (pAttributeStatement = new AttributeStatementElements());
	}
	
	public ParserRule getAttributeStatementRule() {
		return getAttributeStatementAccess().getRule();
	}

	//Subgraph:
	//  ("subgraph" name=ID?)? "{" statements+=Statement* "}";
	public SubgraphElements getSubgraphAccess() {
		return (pSubgraph != null) ? pSubgraph : (pSubgraph = new SubgraphElements());
	}
	
	public ParserRule getSubgraphRule() {
		return getSubgraphAccess().getRule();
	}

	//AttributeList:
	//  "[" entries+=Attribute ("," entries+=Attribute)* "]";
	public AttributeListElements getAttributeListAccess() {
		return (pAttributeList != null) ? pAttributeList : (pAttributeList = new AttributeListElements());
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}

	//Attribute:
	//  name=DotID ("=" value=DotID)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Node:
	//  name=DotID (":" port=Port)?;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Port:
	//  name=DotID (":" compass_pt=CompassPoint)?|compass_pt=CompassPoint;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//DotID returns ecore::EString:
	//  ID|FLOAT|STRING;
	public DotIDElements getDotIDAccess() {
		return (pDotID != null) ? pDotID : (pDotID = new DotIDElements());
	}
	
	public ParserRule getDotIDRule() {
		return getDotIDAccess().getRule();
	}

	//enum EdgeOperator:
	//  directed="->" | undirected="--";
	public EdgeOperatorElements getEdgeOperatorAccess() {
		return (unknownRuleEdgeOperator != null) ? unknownRuleEdgeOperator : (unknownRuleEdgeOperator = new EdgeOperatorElements());
	}
	
	public EnumRule getEdgeOperatorRule() {
		return getEdgeOperatorAccess().getRule();
	}

	//enum GraphType:
	//  graph | digraph;
	public GraphTypeElements getGraphTypeAccess() {
		return (unknownRuleGraphType != null) ? unknownRuleGraphType : (unknownRuleGraphType = new GraphTypeElements());
	}
	
	public EnumRule getGraphTypeRule() {
		return getGraphTypeAccess().getRule();
	}

	//enum AttributeType:
	//  graph | node | edge;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//enum CompassPoint:
	//  north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west=
	//  "w" | northwest="nw";
	public CompassPointElements getCompassPointAccess() {
		return (unknownRuleCompassPoint != null) ? unknownRuleCompassPoint : (unknownRuleCompassPoint = new CompassPointElements());
	}
	
	public EnumRule getCompassPointRule() {
		return getCompassPointAccess().getRule();
	}

	//terminal ID:
	//  ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal FLOAT:
	//  "-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal STRING:
	//  "\"" "\"" | "\"" ("\\" "\"" | !"\"")* ("\\" "\"" | !("\\" | "\"")) "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal PREC_LINE:
	//  "#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getPREC_LINERule() {
		return (tPREC_LINE != null) ? tPREC_LINE : (tPREC_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PREC_LINE"));
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
