/*
* generated by Xtext
*/

package de.cau.cs.kieler.kiml.graphviz.dot.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GraphvizDotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphvizModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphvizModel");
		private final Assignment cGraphsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGraphsGraphParserRuleCall_0 = (RuleCall)cGraphsAssignment.eContents().get(0);
		
		//GraphvizModel:
		//	graphs+=Graph*;
		public ParserRule getRule() { return rule; }

		//graphs+=Graph*
		public Assignment getGraphsAssignment() { return cGraphsAssignment; }

		//Graph
		public RuleCall getGraphsGraphParserRuleCall_0() { return cGraphsGraphParserRuleCall_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrictAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStrictStrictKeyword_0_0 = (Keyword)cStrictAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGraphTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Graph:
		//	strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//strict?="strict"?
		public Assignment getStrictAssignment_0() { return cStrictAssignment_0; }

		//"strict"
		public Keyword getStrictStrictKeyword_0_0() { return cStrictStrictKeyword_0_0; }

		//type=GraphType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//GraphType
		public RuleCall getTypeGraphTypeEnumRuleCall_1_0() { return cTypeGraphTypeEnumRuleCall_1_0; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEdgeStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNodeStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAttributeStatementParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cSubgraphParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(EdgeStatement | NodeStatement | Attribute | AttributeStatement | Subgraph) ";"?;
		public ParserRule getRule() { return rule; }

		//(EdgeStatement | NodeStatement | Attribute | AttributeStatement | Subgraph) ";"?
		public Group getGroup() { return cGroup; }

		//EdgeStatement | NodeStatement | Attribute | AttributeStatement | Subgraph
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//EdgeStatement
		public RuleCall getEdgeStatementParserRuleCall_0_0() { return cEdgeStatementParserRuleCall_0_0; }

		//NodeStatement
		public RuleCall getNodeStatementParserRuleCall_0_1() { return cNodeStatementParserRuleCall_0_1; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0_2() { return cAttributeParserRuleCall_0_2; }

		//AttributeStatement
		public RuleCall getAttributeStatementParserRuleCall_0_3() { return cAttributeStatementParserRuleCall_0_3; }

		//Subgraph
		public RuleCall getSubgraphParserRuleCall_0_4() { return cSubgraphParserRuleCall_0_4; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class EdgeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceNodeNodeParserRuleCall_0_0 = (RuleCall)cSourceNodeAssignment_0.eContents().get(0);
		private final Assignment cEdgeTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeTargetsEdgeTargetParserRuleCall_1_0 = (RuleCall)cEdgeTargetsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cAttributesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cAttributesListAttributeParserRuleCall_2_1_0_0 = (RuleCall)cAttributesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cAttributesListAttributeParserRuleCall_2_1_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EdgeStatement:
		//	sourceNode=Node edgeTargets+=EdgeTarget+ ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;
		public ParserRule getRule() { return rule; }

		//sourceNode=Node edgeTargets+=EdgeTarget+ ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?
		public Group getGroup() { return cGroup; }

		//sourceNode=Node
		public Assignment getSourceNodeAssignment_0() { return cSourceNodeAssignment_0; }

		//Node
		public RuleCall getSourceNodeNodeParserRuleCall_0_0() { return cSourceNodeNodeParserRuleCall_0_0; }

		//edgeTargets+=EdgeTarget+
		public Assignment getEdgeTargetsAssignment_1() { return cEdgeTargetsAssignment_1; }

		//EdgeTarget
		public RuleCall getEdgeTargetsEdgeTargetParserRuleCall_1_0() { return cEdgeTargetsEdgeTargetParserRuleCall_1_0; }

		//("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//(attributes+=ListAttribute (","? attributes+=ListAttribute)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_2_1_0() { return cAttributesAssignment_2_1_0; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_2_1_0_0() { return cAttributesListAttributeParserRuleCall_2_1_0_0; }

		//(","? attributes+=ListAttribute)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","?
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_2_1_1_1() { return cAttributesAssignment_2_1_1_1; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_2_1_1_1_0() { return cAttributesListAttributeParserRuleCall_2_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class EdgeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorEdgeOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTargetSubgraphAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTargetSubgraphSubgraphParserRuleCall_1_0_0 = (RuleCall)cTargetSubgraphAssignment_1_0.eContents().get(0);
		private final Assignment cTargetnodeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTargetnodeNodeParserRuleCall_1_1_0 = (RuleCall)cTargetnodeAssignment_1_1.eContents().get(0);
		
		//EdgeTarget:
		//	operator=EdgeOperator (targetSubgraph=Subgraph | targetnode=Node);
		public ParserRule getRule() { return rule; }

		//operator=EdgeOperator (targetSubgraph=Subgraph | targetnode=Node)
		public Group getGroup() { return cGroup; }

		//operator=EdgeOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//EdgeOperator
		public RuleCall getOperatorEdgeOperatorEnumRuleCall_0_0() { return cOperatorEdgeOperatorEnumRuleCall_0_0; }

		//targetSubgraph=Subgraph | targetnode=Node
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//targetSubgraph=Subgraph
		public Assignment getTargetSubgraphAssignment_1_0() { return cTargetSubgraphAssignment_1_0; }

		//Subgraph
		public RuleCall getTargetSubgraphSubgraphParserRuleCall_1_0_0() { return cTargetSubgraphSubgraphParserRuleCall_1_0_0; }

		//targetnode=Node
		public Assignment getTargetnodeAssignment_1_1() { return cTargetnodeAssignment_1_1; }

		//Node
		public RuleCall getTargetnodeNodeParserRuleCall_1_1_0() { return cTargetnodeNodeParserRuleCall_1_1_0; }
	}

	public class NodeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cAttributesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAttributesListAttributeParserRuleCall_1_1_0_0 = (RuleCall)cAttributesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cAttributesListAttributeParserRuleCall_1_1_1_1_0 = (RuleCall)cAttributesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NodeStatement:
		//	node=Node ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;
		public ParserRule getRule() { return rule; }

		//node=Node ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?
		public Group getGroup() { return cGroup; }

		//node=Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }

		//Node
		public RuleCall getNodeNodeParserRuleCall_0_0() { return cNodeNodeParserRuleCall_0_0; }

		//("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//(attributes+=ListAttribute (","? attributes+=ListAttribute)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_1_1_0() { return cAttributesAssignment_1_1_0; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_1_1_0_0() { return cAttributesListAttributeParserRuleCall_1_1_0_0; }

		//(","? attributes+=ListAttribute)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_1_1_1_1() { return cAttributesAssignment_1_1_1_1; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_1_1_1_1_0() { return cAttributesListAttributeParserRuleCall_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class AttributeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesListAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttributesListAttributeParserRuleCall_2_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeStatement:
		//	type=AttributeType "[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]";
		public ParserRule getRule() { return rule; }

		//type=AttributeType "[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]"
		public Group getGroup() { return cGroup; }

		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_0_0() { return cTypeAttributeTypeEnumRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(attributes+=ListAttribute (","? attributes+=ListAttribute)*)?
		public Group getGroup_2() { return cGroup_2; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_2_0_0() { return cAttributesListAttributeParserRuleCall_2_0_0; }

		//(","? attributes+=ListAttribute)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","?
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//attributes+=ListAttribute
		public Assignment getAttributesAssignment_2_1_1() { return cAttributesAssignment_2_1_1; }

		//ListAttribute
		public RuleCall getAttributesListAttributeParserRuleCall_2_1_1_0() { return cAttributesListAttributeParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class SubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubgraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubgraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Subgraph:
		//	{Subgraph} "subgraph" name=ID? "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{Subgraph} "subgraph" name=ID? "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{Subgraph}
		public Action getSubgraphAction_0() { return cSubgraphAction_0; }

		//"subgraph"
		public Keyword getSubgraphKeyword_1() { return cSubgraphKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDotIDParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=DotID "=" value=DotID;
		public ParserRule getRule() { return rule; }

		//name=DotID "=" value=DotID
		public Group getGroup() { return cGroup; }

		//name=DotID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0() { return cNameDotIDParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DotID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DotID
		public RuleCall getValueDotIDParserRuleCall_2_0() { return cValueDotIDParserRuleCall_2_0; }
	}

	public class ListAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDotIDParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ListAttribute returns Attribute:
		//	name=DotID ("=" value=DotID)?;
		public ParserRule getRule() { return rule; }

		//name=DotID ("=" value=DotID)?
		public Group getGroup() { return cGroup; }

		//name=DotID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0() { return cNameDotIDParserRuleCall_0_0; }

		//("=" value=DotID)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=DotID
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DotID
		public RuleCall getValueDotIDParserRuleCall_1_1_0() { return cValueDotIDParserRuleCall_1_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPortAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPortPortParserRuleCall_1_1_0 = (RuleCall)cPortAssignment_1_1.eContents().get(0);
		
		//Node:
		//	name=DotID (":" port=Port)?;
		public ParserRule getRule() { return rule; }

		//name=DotID (":" port=Port)?
		public Group getGroup() { return cGroup; }

		//name=DotID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0() { return cNameDotIDParserRuleCall_0_0; }

		//(":" port=Port)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//port=Port
		public Assignment getPortAssignment_1_1() { return cPortAssignment_1_1; }

		//Port
		public RuleCall getPortPortParserRuleCall_1_1_0() { return cPortPortParserRuleCall_1_1_0; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameDotIDParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cCompass_ptAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCompass_ptCompassPointEnumRuleCall_0_1_1_0 = (RuleCall)cCompass_ptAssignment_0_1_1.eContents().get(0);
		private final Assignment cCompass_ptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompass_ptCompassPointEnumRuleCall_1_0 = (RuleCall)cCompass_ptAssignment_1.eContents().get(0);
		
		//Port:
		//	name=DotID (":" compass_pt=CompassPoint)? | compass_pt=CompassPoint;
		public ParserRule getRule() { return rule; }

		//name=DotID (":" compass_pt=CompassPoint)? | compass_pt=CompassPoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=DotID (":" compass_pt=CompassPoint)?
		public Group getGroup_0() { return cGroup_0; }

		//name=DotID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//DotID
		public RuleCall getNameDotIDParserRuleCall_0_0_0() { return cNameDotIDParserRuleCall_0_0_0; }

		//(":" compass_pt=CompassPoint)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//":"
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }

		//compass_pt=CompassPoint
		public Assignment getCompass_ptAssignment_0_1_1() { return cCompass_ptAssignment_0_1_1; }

		//CompassPoint
		public RuleCall getCompass_ptCompassPointEnumRuleCall_0_1_1_0() { return cCompass_ptCompassPointEnumRuleCall_0_1_1_0; }

		//compass_pt=CompassPoint
		public Assignment getCompass_ptAssignment_1() { return cCompass_ptAssignment_1; }

		//CompassPoint
		public RuleCall getCompass_ptCompassPointEnumRuleCall_1_0() { return cCompass_ptCompassPointEnumRuleCall_1_0; }
	}

	public class DotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DotID:
		//	ID | INT | FLOAT | STRING;
		public ParserRule getRule() { return rule; }

		//ID | INT | FLOAT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2() { return cFLOATTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
	}
	
	
	public class EdgeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDirectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDirectedHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cDirectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndirectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndirectedHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cUndirectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EdgeOperator:
		//	directed="->" | undirected="--";
		public EnumRule getRule() { return rule; }

		//directed="->" | undirected="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//directed="->"
		public EnumLiteralDeclaration getDirectedEnumLiteralDeclaration_0() { return cDirectedEnumLiteralDeclaration_0; }

		//"->"
		public Keyword getDirectedHyphenMinusGreaterThanSignKeyword_0_0() { return cDirectedHyphenMinusGreaterThanSignKeyword_0_0; }

		//undirected="--"
		public EnumLiteralDeclaration getUndirectedEnumLiteralDeclaration_1() { return cUndirectedEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getUndirectedHyphenMinusHyphenMinusKeyword_1_0() { return cUndirectedHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class GraphTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GraphType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigraphEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigraphDigraphKeyword_1_0 = (Keyword)cDigraphEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GraphType:
		//	graph | digraph;
		public EnumRule getRule() { return rule; }

		//graph | digraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//digraph
		public EnumLiteralDeclaration getDigraphEnumLiteralDeclaration_1() { return cDigraphEnumLiteralDeclaration_1; }

		//"digraph"
		public Keyword getDigraphDigraphKeyword_1_0() { return cDigraphDigraphKeyword_1_0; }
	}

	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNodeNodeKeyword_1_0 = (Keyword)cNodeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEdgeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEdgeEdgeKeyword_2_0 = (Keyword)cEdgeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType:
		//	graph | node | edge;
		public EnumRule getRule() { return rule; }

		//graph | node | edge
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_1() { return cNodeEnumLiteralDeclaration_1; }

		//"node"
		public Keyword getNodeNodeKeyword_1_0() { return cNodeNodeKeyword_1_0; }

		//edge
		public EnumLiteralDeclaration getEdgeEnumLiteralDeclaration_2() { return cEdgeEnumLiteralDeclaration_2; }

		//"edge"
		public Keyword getEdgeEdgeKeyword_2_0() { return cEdgeEdgeKeyword_2_0; }
	}

	public class CompassPointElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompassPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorthNKeyword_0_0 = (Keyword)cNorthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNorthEastEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNorthEastNeKeyword_1_0 = (Keyword)cNorthEastEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSouthEastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSouthEastSeKeyword_3_0 = (Keyword)cSouthEastEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSouthSKeyword_4_0 = (Keyword)cSouthEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSouthWestEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSouthWestSwKeyword_5_0 = (Keyword)cSouthWestEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWestWKeyword_6_0 = (Keyword)cWestEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNorthWestEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNorthWestNwKeyword_7_0 = (Keyword)cNorthWestEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCenterCKeyword_8_0 = (Keyword)cCenterEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBlankEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBlank_Keyword_9_0 = (Keyword)cBlankEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum CompassPoint:
		//	north="n" | northEast="ne" | east="e" | southEast="se" | south="s" | southWest="sw" | west="w" | northWest="nw" |
		//	center="c" | blank="_";
		public EnumRule getRule() { return rule; }

		//north="n" | northEast="ne" | east="e" | southEast="se" | south="s" | southWest="sw" | west="w" | northWest="nw" |
		//center="c" | blank="_"
		public Alternatives getAlternatives() { return cAlternatives; }

		//north="n"
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_0() { return cNorthEnumLiteralDeclaration_0; }

		//"n"
		public Keyword getNorthNKeyword_0_0() { return cNorthNKeyword_0_0; }

		//northEast="ne"
		public EnumLiteralDeclaration getNorthEastEnumLiteralDeclaration_1() { return cNorthEastEnumLiteralDeclaration_1; }

		//"ne"
		public Keyword getNorthEastNeKeyword_1_0() { return cNorthEastNeKeyword_1_0; }

		//east="e"
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }

		//"e"
		public Keyword getEastEKeyword_2_0() { return cEastEKeyword_2_0; }

		//southEast="se"
		public EnumLiteralDeclaration getSouthEastEnumLiteralDeclaration_3() { return cSouthEastEnumLiteralDeclaration_3; }

		//"se"
		public Keyword getSouthEastSeKeyword_3_0() { return cSouthEastSeKeyword_3_0; }

		//south="s"
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_4() { return cSouthEnumLiteralDeclaration_4; }

		//"s"
		public Keyword getSouthSKeyword_4_0() { return cSouthSKeyword_4_0; }

		//southWest="sw"
		public EnumLiteralDeclaration getSouthWestEnumLiteralDeclaration_5() { return cSouthWestEnumLiteralDeclaration_5; }

		//"sw"
		public Keyword getSouthWestSwKeyword_5_0() { return cSouthWestSwKeyword_5_0; }

		//west="w"
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_6() { return cWestEnumLiteralDeclaration_6; }

		//"w"
		public Keyword getWestWKeyword_6_0() { return cWestWKeyword_6_0; }

		//northWest="nw"
		public EnumLiteralDeclaration getNorthWestEnumLiteralDeclaration_7() { return cNorthWestEnumLiteralDeclaration_7; }

		//"nw"
		public Keyword getNorthWestNwKeyword_7_0() { return cNorthWestNwKeyword_7_0; }

		//center="c"
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_8() { return cCenterEnumLiteralDeclaration_8; }

		//"c"
		public Keyword getCenterCKeyword_8_0() { return cCenterCKeyword_8_0; }

		//blank="_"
		public EnumLiteralDeclaration getBlankEnumLiteralDeclaration_9() { return cBlankEnumLiteralDeclaration_9; }

		//"_"
		public Keyword getBlank_Keyword_9_0() { return cBlank_Keyword_9_0; }
	}
	
	private GraphvizModelElements pGraphvizModel;
	private GraphElements pGraph;
	private StatementElements pStatement;
	private EdgeStatementElements pEdgeStatement;
	private EdgeTargetElements pEdgeTarget;
	private NodeStatementElements pNodeStatement;
	private AttributeStatementElements pAttributeStatement;
	private SubgraphElements pSubgraph;
	private AttributeElements pAttribute;
	private ListAttributeElements pListAttribute;
	private NodeElements pNode;
	private PortElements pPort;
	private DotIDElements pDotID;
	private EdgeOperatorElements unknownRuleEdgeOperator;
	private GraphTypeElements unknownRuleGraphType;
	private AttributeTypeElements unknownRuleAttributeType;
	private CompassPointElements unknownRuleCompassPoint;
	private TerminalRule tINT;
	private TerminalRule tID;
	private TerminalRule tFLOAT;
	private TerminalRule tSTRING;
	private TerminalRule tPREC_LINE;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphvizDotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphvizModel:
	//	graphs+=Graph*;
	public GraphvizModelElements getGraphvizModelAccess() {
		return (pGraphvizModel != null) ? pGraphvizModel : (pGraphvizModel = new GraphvizModelElements());
	}
	
	public ParserRule getGraphvizModelRule() {
		return getGraphvizModelAccess().getRule();
	}

	//Graph:
	//	strict?="strict"? type=GraphType name=ID? "{" statements+=Statement* "}";
	public GraphElements getGraphAccess() {
		return (pGraph != null) ? pGraph : (pGraph = new GraphElements());
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Statement:
	//	(EdgeStatement | NodeStatement | Attribute | AttributeStatement | Subgraph) ";"?;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//EdgeStatement:
	//	sourceNode=Node edgeTargets+=EdgeTarget+ ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;
	public EdgeStatementElements getEdgeStatementAccess() {
		return (pEdgeStatement != null) ? pEdgeStatement : (pEdgeStatement = new EdgeStatementElements());
	}
	
	public ParserRule getEdgeStatementRule() {
		return getEdgeStatementAccess().getRule();
	}

	//EdgeTarget:
	//	operator=EdgeOperator (targetSubgraph=Subgraph | targetnode=Node);
	public EdgeTargetElements getEdgeTargetAccess() {
		return (pEdgeTarget != null) ? pEdgeTarget : (pEdgeTarget = new EdgeTargetElements());
	}
	
	public ParserRule getEdgeTargetRule() {
		return getEdgeTargetAccess().getRule();
	}

	//NodeStatement:
	//	node=Node ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;
	public NodeStatementElements getNodeStatementAccess() {
		return (pNodeStatement != null) ? pNodeStatement : (pNodeStatement = new NodeStatementElements());
	}
	
	public ParserRule getNodeStatementRule() {
		return getNodeStatementAccess().getRule();
	}

	//AttributeStatement:
	//	type=AttributeType "[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]";
	public AttributeStatementElements getAttributeStatementAccess() {
		return (pAttributeStatement != null) ? pAttributeStatement : (pAttributeStatement = new AttributeStatementElements());
	}
	
	public ParserRule getAttributeStatementRule() {
		return getAttributeStatementAccess().getRule();
	}

	//Subgraph:
	//	{Subgraph} "subgraph" name=ID? "{" statements+=Statement* "}";
	public SubgraphElements getSubgraphAccess() {
		return (pSubgraph != null) ? pSubgraph : (pSubgraph = new SubgraphElements());
	}
	
	public ParserRule getSubgraphRule() {
		return getSubgraphAccess().getRule();
	}

	//Attribute:
	//	name=DotID "=" value=DotID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//ListAttribute returns Attribute:
	//	name=DotID ("=" value=DotID)?;
	public ListAttributeElements getListAttributeAccess() {
		return (pListAttribute != null) ? pListAttribute : (pListAttribute = new ListAttributeElements());
	}
	
	public ParserRule getListAttributeRule() {
		return getListAttributeAccess().getRule();
	}

	//Node:
	//	name=DotID (":" port=Port)?;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Port:
	//	name=DotID (":" compass_pt=CompassPoint)? | compass_pt=CompassPoint;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//DotID:
	//	ID | INT | FLOAT | STRING;
	public DotIDElements getDotIDAccess() {
		return (pDotID != null) ? pDotID : (pDotID = new DotIDElements());
	}
	
	public ParserRule getDotIDRule() {
		return getDotIDAccess().getRule();
	}

	//enum EdgeOperator:
	//	directed="->" | undirected="--";
	public EdgeOperatorElements getEdgeOperatorAccess() {
		return (unknownRuleEdgeOperator != null) ? unknownRuleEdgeOperator : (unknownRuleEdgeOperator = new EdgeOperatorElements());
	}
	
	public EnumRule getEdgeOperatorRule() {
		return getEdgeOperatorAccess().getRule();
	}

	//enum GraphType:
	//	graph | digraph;
	public GraphTypeElements getGraphTypeAccess() {
		return (unknownRuleGraphType != null) ? unknownRuleGraphType : (unknownRuleGraphType = new GraphTypeElements());
	}
	
	public EnumRule getGraphTypeRule() {
		return getGraphTypeAccess().getRule();
	}

	//enum AttributeType:
	//	graph | node | edge;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//enum CompassPoint:
	//	north="n" | northEast="ne" | east="e" | southEast="se" | south="s" | southWest="sw" | west="w" | northWest="nw" |
	//	center="c" | blank="_";
	public CompassPointElements getCompassPointAccess() {
		return (unknownRuleCompassPoint != null) ? unknownRuleCompassPoint : (unknownRuleCompassPoint = new CompassPointElements());
	}
	
	public EnumRule getCompassPointRule() {
		return getCompassPointAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal FLOAT:
	//	"-"? ("0".."9"* "." "0".."9"+);
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" "\"" | !"\"")* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal PREC_LINE:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getPREC_LINERule() {
		return (tPREC_LINE != null) ? tPREC_LINE : (tPREC_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PREC_LINE"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
