/*
 * generated by Xtext
 */
package de.cau.cs.kieler.core.annotations.text.ui.contentassist;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import de.cau.cs.kieler.kiml.LayoutDataService;
import de.cau.cs.kieler.kiml.LayoutOptionData;
import de.cau.cs.kieler.kiml.LayoutOptionData.Type;

import de.cau.cs.kieler.core.annotations.Annotation;
import de.cau.cs.kieler.core.annotations.impl.AnnotationImpl;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class AnnotationsProposalProvider extends AbstractAnnotationsProposalProvider {

	public void nameProposal(ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		try {
			if (Class.forName("de.cau.cs.kieler.kiml.LayoutDataService") != null) {

				/* declare the plain proposal and get the option list */
				String proposal;
				StyledString.Styler theStyle;
				StyledString displayString;
				ICompletionProposal completeProposal;

				LayoutDataService layoutServices = LayoutDataService.getInstance();
				Collection<LayoutOptionData<?>> optionDataList = layoutServices.getOptionData();
				LayoutOptionData<?> optionData;

				/*
				 * create and register the completion proposal for every element
				 * in the list
				 */
				for (Iterator<LayoutOptionData<?>> i = optionDataList.iterator(); i.hasNext();) {
					optionData = i.next();
					theStyle = (optionData.isAdvanced()) ? StyledString.COUNTER_STYLER : null;
					displayString = new StyledString(optionData.toString(), theStyle);
					displayString.append(" - " + optionData.getType().toString(), StyledString.QUALIFIER_STYLER);
					proposal = optionData.getId();
					completeProposal = createCompletionProposal(proposal, displayString, null, getPriorityHelper().getDefaultPriority(), "de.cau.cs.kieler."
							+ context.getPrefix(), context);
					acceptor.accept((completeProposal != null) ? completeProposal : createCompletionProposal(proposal, displayString, null, context));
				}
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
		}
	}

	public void valueProposal(ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		try {
			if (Class.forName("de.cau.cs.kieler.kiml.LayoutDataService") != null) {

				/* check if the prefix is an kieler annotation */
				if (context.getCurrentModel() instanceof Annotation && context.getCurrentModel().getClass() == AnnotationImpl.class) {

					String annotationName = ((Annotation) context.getCurrentModel()).getName();

					if (annotationName != null) {

						/* get the option list */
						LayoutDataService layoutServices = LayoutDataService.getInstance();

						/*
						 * find the specific option an display all possible
						 * values
						 */
						LayoutOptionData<?> optionData;
						optionData = layoutServices.getOptionData(annotationName);

						String proposal = null;

						Type theType = (optionData != null) ? optionData.getType() : Type.UNDEFINED;

						switch (theType) {

						/* show the available choices for boolean and enum */
						case BOOLEAN:
						case REMOTE_ENUM:
						case ENUM:
							for (int j = 0; j < optionData.getChoices().length; j++) {
								proposal = optionData.getChoices()[j];
								acceptor.accept(createCompletionProposal(proposal, context));
							}
							break;

						/*
						 * for string, float, integer and object show the type
						 * of the value and give a corresponding default value
						 */
						case STRING:
						case FLOAT:
						case INT:
						case OBJECT:

							/* chose the corresponding default value */
							switch (theType) {

							case STRING:
								proposal = "\"\"";
								break;

							case FLOAT:
								proposal = "0.0";
								break;

							case INT:
								proposal = "0";
								break;

							case OBJECT:
								try {
									proposal = "\"" + optionData.getOptionClass().newInstance().toString() + "\"";
								} catch (InstantiationException e) {
									/* TODO Auto-generated catch block */
									e.printStackTrace();
								} catch (IllegalAccessException e) {
									/* TODO Auto-generated catch block */
									e.printStackTrace();
								}
								break;

							default:
								break;

							}
							acceptor.accept(createCompletionProposal(proposal, optionData.getType().toString(), null, context));
							break;

						default:
							break;

						}
					}
				}
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
		}
	}

	@Override
	public void completeTagAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeTagAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeKeyStringValueAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyStringValueAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeTypedKeyStringValueAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeTypedKeyStringValueAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeKeyBooleanValueAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeTagAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeKeyIntValueAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyIntValueAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeKeyFloatValueAnnotation_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyFloatValueAnnotation_Name(model, assignment, context, acceptor);

		/* call modified completion */
		nameProposal(context, acceptor);
	}

	@Override
	public void completeCommentAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeCommentAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}

	@Override
	public void completeKeyStringValueAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyStringValueAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}

	@Override
	public void completeTypedKeyStringValueAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeTypedKeyStringValueAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}

	@Override
	public void completeKeyBooleanValueAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyBooleanValueAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}

	@Override
	public void completeKeyIntValueAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyIntValueAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}

	@Override
	public void completeKeyFloatValueAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		/* call implementation of superclass */
		super.completeKeyFloatValueAnnotation_Value(model, assignment, context, acceptor);

		/* call modified completion */
		valueProposal(context, acceptor);
	}
}
