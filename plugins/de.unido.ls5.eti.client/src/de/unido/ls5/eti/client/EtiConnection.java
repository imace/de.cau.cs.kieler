/**
 * Java Electronic Tool Integration - jETI
 * Copyright (C) 2004-2011 Chair for Programming Systems, TU Dortmund
 *
 * This file is part of jETI.
 *
 * jETI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * jETI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with jETI. If not, see <http://www.gnu.org/licenses/>.
 */
package de.unido.ls5.eti.client;

import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * <code>EtiConnection</code>.
 * 
 * @author Stefan Naujokat
 * 
 */
public interface EtiConnection {
	
	/**
	 * Retrieve the server's URI of this connection
	 * @return the server's URI
	 */
	public URI getServerURI();
	
	/**
	 * Retrieve the sessionId of this connection. This should usually
	 * onyl be needed for debugging purposes.
     * 
     * @return the session ID at the tool server
     */
    public String getSession();
    
    
    /**
     * Sets the session ID of this connection.
     * Method is needed to create a new Connection Object for an already
     * existing Server Session, currently used by EtiServer's forward
     * function
     * 
     * @param sessionId the session Id to set.
     *
     */
    public void setSession(String sessionId);

    /**
     * End session at jETI server and delete all
     * stored files
     * 
     * @throws EtiRemoteException 
     * 		if the Error was generated by the jETI Server
     * @throws EtiLocalException 
     * 		if the error occured on client-side
     *
     */
    public void endSession() throws EtiLocalException, EtiRemoteException;
    
    
    /**
     * Stores the given List of files to the server
     * 
     * @param files the list of files to store
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     * @deprecated use {@link #store(Set)} instead
     * 
     */
    @Deprecated
    public void store(List<VirtualFile> files) throws EtiLocalException, EtiRemoteException;
    
    /**
     * Stores the given set of files to the server
     * 
     * @param files the list of files to store
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     */
    public void store(Set<VirtualFile> files) throws EtiLocalException, EtiRemoteException;
    
    /**
     * Stores a file to the server. This is a convenience method for 
     * {@link #store(Set)}, if only one single file has to be sent to the server.
     * 
     * @param file the file to store
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     */
    public void store(VirtualFile file) throws EtiLocalException, EtiRemoteException;
    
    /**
     * Retrieve the requested files from the server.
     * 
     * @param filenames List of virtual filenames to retrieve.
     * @return the retrieved files
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     * @deprecated use {@link #retrieve(Set)} intead.
     */
    @Deprecated
    public List<VirtualFile> retrieve(List<String> filenames)
    	throws EtiLocalException, EtiRemoteException;
    
    /**
     * Retrieve the requested files from the server.
     * 
     * @param filenames List of virtual filenames to retrieve.
     * @return the retrieved files
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     */
    public Set<VirtualFile> retrieve(Set<String> filenames)
    	throws EtiLocalException, EtiRemoteException;
    
    /**
     * Retrieve the requested file from the server. This is a conveniance
     * method for {@link #retrieve(Set)}, if only one single file has to
     * be retrieved.
     * 
     * @param filename virtual filename to retrieve.
     * @return the retrieved file
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     */
    public VirtualFile retrieve(String filename)
    	throws EtiLocalException, EtiRemoteException;
    
    /**
     * Executes tool at the server with the given parameters. Note that
     * non-String parameters must be appropriately serialized into Strings.
     * 
     * @param tool the name of the tool to execute
     * @param parameters mapping from parameter name to value
     * @throws EtiLocalException if something goes wrong on client side.
     * @throws EtiRemoteException if something goes wrong on server side.
     * 		
     */
    public void exec(String tool, Map<String, String> parameters)
    	throws EtiLocalException, EtiRemoteException;
    
    /**
     * Executes tool at the server with the given parameter. Note that
     * non-String parameters must be appropriately serialized into Strings.
     * This is a convenience method using varargs that can be used in case
     * of a few hardcoded parameters. Internally, it might 
     * simly use {@link #exec(String, Map)} (depending on implementation).
     * 
     * @param tool
     * @param parameters alternating key,value,key,value,... sequence of parameters
     * @throws EtiLocalException
     * 	if size of parameters is not even
     * @throws EtiRemoteException
     */
    public void exec(String tool, String... parameters) 
    	throws EtiLocalException, EtiRemoteException;
    	
    
    
    /**
     * Forwards a List of virtual files from the server represented by this
     * connection to the server represented by the toServer connection.
     * 
     * @param filenames list of virtual filenames that shall be forwarded.
     * @param toServer An existing connection to the server where the files shall
     * be forwarded to.
     * @throws EtiLocalException
     * @throws EtiRemoteException
     * @deprecated use {@link #forward(Set, EtiConnection)} instead.
     */
    @Deprecated
    public void forward(List<String> filenames, EtiConnection toServer) throws EtiLocalException, EtiRemoteException;
    
    
    /**
     * Forwards a Set of virtual files from the server represented by this
     * connection to the server represented by the toServer connection.
     * 
     * @param filenames set of virtual filenames that shall be forwarded.
     * @param toServer An existing connection to the server where the files shall
     * be forwarded to.
     * @throws EtiLocalException
     * @throws EtiRemoteException
     */
    public void forward(Set<String> filenames, EtiConnection toServer) throws EtiLocalException, EtiRemoteException;
    
    
    /**
     * Log in to the jETI toolserver with given username and password. Note that
     * currently (version 1.3) no authentication is required and thus any username/password
     * combination will result in a successful login.
     * 
     * @param username
     * @param password
     * @throws EtiLocalException
     * @throws EtiRemoteException
     */
    public void login(String username, String password) throws EtiLocalException, EtiRemoteException;
    
    
    
}
