import graphs;
//import utilities;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

// Java escapes

// copy an object or a list of objects to clipboard
Object copyObjectToClipboard(Object object):
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.objectToClipboard(java.lang.Object)
;

// clone an eObject
Object ecoreCopy(Object object):
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.ecoreCopy(java.lang.Object)
;

/////////
// CUT //
/////////

// Cut
Void cut(Object obj):
 copyInternal(obj) ->
 cutInternal(obj)
;

// dummy method for matching
Void cutInternal(Object obj):
 null
;

// remove the node from its parent node
Void cutInternal(Node node):
 node.parent.children.remove(node)
;

// remove the edge from its source and target
Void cutInternal(Edge edge):
 edge.setSource(null) ->
 edge.setTarget(null)
;

// entry point for lists, decide which method to call
Void cutInternal(List[Object] list):
 let nodes = list.select(e|e.metaType == Node):
 let edges = list.select(e|e.metaType == Edge):
 (if (!nodes.isEmpty) then (
    cutInternalNodeList(nodes)
 ) else (
    cutInternalEdgeList(edges)
    )
 )
;

// remove each node
Void cutInternalNodeList(List[Node] nodes):
 nodes.cutInternal()
;

// remove each edge
Void cutInternalEdgeList(List[Edge] edges):
 edges.cutInternal()
;

//////////
// COPY //
//////////

// Copy
Void copy(Object obj):
 copyInternal(obj)
;

// dummy for matching
Void copyInternal(Object obj):
 null
;

// special case for nodes, clone only self loop edges
Void copyInternal(Node node):
 let copy = (Node) copyObjectToClipboard(node):
 cloneEdges(node, copy)
;

// copy a edge to clipboard
Void copyInternal(Edge edge):
 copyObjectToClipboard(edge)
;

// clone all selfloop edges on a node
Void cloneEdges(Node original, Node copy):
 let origOutgoing = original.outgoingEdges:
 let copyOutgoing = copy.outgoingEdges:
 let selfLoops = ((List[Edge])(origOutgoing.select(e|e.target == original))):
 copy.outgoingEdges.removeAll(copyOutgoing) ->
 selfLoops.addCopyTo(copy)
;

// copy an edge and add it to a node
Void addCopyTo(Edge edge, Node node):
 let copy = (Edge) ecoreCopy(edge):
 copy.setTarget(node) ->
 node.outgoingEdges.add(copy)
;

// select which nodes to copy to clipboard to avoid having
// nodes more than once in the clipboard due to containment in macro
// node
Void copyInternalNodeList(List[Node] list):
 let toClone = list.select(e|e.parent == null 
                || !list.contains(e.parent)):
 copyObjectToClipboard(toClone)
;

// copy all edges to clipboard
Void copyInternalEdgeList(List[Edge] list):
 copyObjectToClipboard(list)
;

// entry point for list, decide which option to take
// on mixed the selections Nodes have the highest priority then edges
Void copyInternal(List[Object] list):
 let nodes = list.select(e|e.metaType == Node):
 let edges = list.select(e|e.metaType == Edge):
 (if (!nodes.isEmpty) then (copyInternalNodeList(nodes)) else (
 (if (!edges.isEmpty) then (copyInternalEdgeList(edges)) else (
 null
 ))
 ))
;

///////////
// PASTE //
///////////

// get an object or a list of objects from clipboard
Object getObjectFromClipboard():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.getObjectFromClipboard()
;

// determine whether or not the clipboard is empty
Boolean isClipboardEmpty():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.isClipboardEmpty()
;

// check for the type of a list
Boolean isNodeList(List[Object] list):
 let head = list.get(0):
 head.metaType == Node
;
Boolean isEdgeList(List[Object] list):
 let head = list.get(0):
 head.metaType == Edge
;

// delegator to the different list pastes
Void paste(List[Object] objects):
 (if (!isClipboardEmpty()) then 
  (if (isNodeList(objects)) then
   (pasteNodeList(objects))
   else
    (if (isEdgeList(objects)) then pasteEdgeList(objects)
   )
 )
 )
;

///////////////////////////
// Single Node is target //
///////////////////////////

// paste into state
Void paste(Node target):
 if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
;

Void pasteInternal(Node dummy, Object noop):
	null
;

Void pasteInternal(Node target, Node node):
  if (!target.isHypernode) then target.children.add(node)
;

Void pasteInternal(Node target, Edge edge):
  pasteEdgeIntoNode(target, edge)
;

// create two dummy nodes and connect them with the edge
Void pasteEdgeIntoNode(Node target, Edge edge):
 let srcDummy = new Node :
 let destDummy = new Node :
 target.children.add(srcDummy) ->
 target.children.add(destDummy) ->
 edge.setSource(srcDummy) ->
 edge.setTarget(destDummy)
;

// paste multiple nodes into one target node
Void pasteInternalNodes(Node target, List[Node] nodes):
 if (!target.isHypernode) then target.children.addAll(nodes)
;

// create two dummy nodes and connect them with all edges
Void pasteInternalEdges(Node target, List[Edge] edges):
 let srcDummy = new Node :
 let destDummy = new Node :
 target.children.add(srcDummy) ->
 target.children.add(destDummy) ->
 edges.setSource(srcDummy) ->
 edges.setTarget(destDummy)
;

////////////////////////////////
// Multiple Nodes are targets //
////////////////////////////////

// paste into a list of nodes
Void pasteNodeList(List[Node] nodes):
 let clipBoard = getObjectFromClipboard():
 pasteNodeList(nodes, clipBoard)
;

Void pasteNodeList(List[Node] dummy, Object noop):
 null
;

// add node to each target node
Void pasteNodeList(List[Node] targets, Node node):
	targets.pasteInternal(node)
;

// add edge to each target node
Void pasteNodeList(List[Node] targets, Edge edge):
	targets.pasteInternal(edge)
;

Void pasteNodeList(List[Node] targets, List[Object] list):
	if (isNodeList(list)) then pasteNodeListNodes(targets, list)
	else (if (isEdgeList(list)) then pasteNodeListEdges(targets, list))
;

// add list of nodes to each target node
Void pasteNodeListNodes(List[Node] targets, List[Node] nodes):
	targets.pasteInternalNodes(nodes)
;

// add list of edges to each target node
Void pasteNodeListEdges(List[Node] targets, List[Edge] edges):
	targets.pasteInternalEdges(edges)
;

///////////////////////////
// Single Edge is target //
///////////////////////////

// replace the selected edge with the clipboard
Void paste(Edge target):
 if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
;

Void pasteInternal(Edge dummy, Object noop):
	null
;

// insert a node into an edge
Void pasteInternal(Edge target, Node node):
  pasteNodeOnEdge(target, node, (Node)target.source)
;

// insert a node into an edge
Void pasteNodeOnEdge(Edge target, Node newNode, Node edgeSource):
 let source = target.source:
 let dest = target.target:
 let dummyEdge = new Edge:
 (edgeSource == source ?
  (source.parent.children.add(newNode) ->
   dummyEdge.setSource(newNode) ->
   dummyEdge.setSource(dest) ->
   target.setTarget(newNode)
  )
  :
  (edgeSource == dest ?
   (source.parent.children.add(newNode) ->
    dummyEdge.setSource(source) ->
    dummyEdge.setTarget(newNode) ->
    target.setSource(newNode)
   )
   :
    null
   )
  )
;

// replace an edge with another one
Void pasteInternal(Edge target, Edge edge):
 let source = target.source:
 let dest = target.target:
  edge.setSource(source) ->
  edge.setTarget(dest) ->
  source.outgoingEdges.remove(target)
;

Void pasteInternalNodes(Edge target, List[Node] nodes):
 pasteNodesOnEdge(target, nodes, (Node)target.source)
;

// encapsulate nodes in a node and paste on edge
Void pasteNodesOnEdge(Edge target, List[Node] nodes, Node edgeSource):
 let node = new Node:
 node.children.addAll(nodes) ->
 pasteNodeOnEdge(target, node, edgeSource)
;

Void pasteInternalEdges(Edge target, List[Edge] edges):
	pasteEdgesOnEdge(target, edges)
;

// replace an edge with multiple other edges
Void pasteEdgesOnEdge(Edge target, List[Edge] edges):
	edges.pasteEdgesOnEdgeHelper(target) ->
	target.source.outgoingEdges.remove(target)
;

Void pasteEdgesOnEdgeHelper(Edge edge, Edge original):
	edge.setSource(original.source) ->
	edge.setTarget(original.target)
;

////////////////////////////////
// Multiple Edges are targets //
////////////////////////////////

// paste into a list of edges
Void pasteEdgeList(List[Edge] targets):
 let clipboard = getObjectFromClipboard():
 pasteEdgeList(targets, clipboard)
;

Void pasteEdgeList(List[Edge] targets, Object noop):
 null
;

// insert node into each edge
Void pasteEdgeList(List[Edge] targets, Node node):
 targets.pasteInternal(node)
;

Void pasteEdgeList(List[Edge] targets, Edge edge):
 targets.replaceWithEdge(edge)
;

// replace an edge with a given one
Void replaceWithEdge(Edge target, Edge edge):
 let source = target.source:
 let dest = target.target:
 source.outgoingEdges.remove(target) ->
 edge.setTarget(dest) ->
 edge.setSource(source)
;

Void pasteEdgeList(List[Edge] targets, List[Object] list):
 if (isNodeList(list)) then pasteEdgeListNodes(targets, list)
 else (if (isEdgeList(list)) then pasteEdgeListEdges(targets, list)
 )
;

Void pasteEdgeListNodes(List[Edge] targets, List[Node] nodes):
 targets.pasteInternalNodes(nodes)
;

// replace all target edges with given edges
Void pasteEdgeListEdges(List[Edge] targets, List[Edge] edges):
 targets.pasteInternalEdges(edges)
;


