import graphs;
import kgraph;

extension org::eclipse::xtend::util::stdlib::io;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

/////////////////////////
// Copy, cut and Paste //
/////////////////////////

// Java escapes

// copy methods
Void copyObjectToClipboard(Object object):
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.objectToClipboard(java.lang.Object)
;

Void cutObject(Object object):
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.cutObject(java.lang.Object)
;

// Cut
Void cut(Object obj):
 cutObject(obj)
;

// Copy
Void copy(Object obj):
 copyObjectToClipboard(obj)
;

// Paste

// paste methods
Node getNodeFromClipboard():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.getNodeFromClipboard()
;

Edge getEdgeFromClipboard():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.getEdgeFromClipboard()
;

List[Edge] getEdgesFromClipboard():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.getEdgesFromClipboard()
;

List[Node] getNodesFromClipboard():
 JAVA de.cau.cs.kieler.graphs.ksbase.copypaste.Utils.getNodesFromClipboard()
;

// delegator to the different list pastes
Void paste(List[Object] objects):
 let head = objects.get(0):
 (head.metaType == Node ?
  pasteNodeList(objects)
  :
   (head.metaType == Edge ?
    pasteEdgeList(objects)
    :
    null
   )
 )
;

///////////////////////////
// Single Node is target //
///////////////////////////

// Paste into node
Void paste(Node target):
 tryPastingNodeIntoNode(target)
;

// try node in node
Void tryPastingNodeIntoNode(Node target):
 let node = getNodeFromClipboard():
 (node != null ? 
  target.children.add(node)
 : 
  tryPastingNodesIntoNode(target))
;

// try nodes into node
Void tryPastingNodesIntoNode(Node target):
 let nodes = getNodesFromClipboard():
 (nodes != null ?
  pasteNodesIntoNode(nodes, target)
 : 
  tryPastingEdgeIntoNode(target))
;

Void pasteNodesIntoNode(List[Node] nodes, Node target):
 target.children.addAll(nodes)
;

// try pasting a edge into a node by creating two dummy nodes
Void tryPastingEdgeIntoNode(Node target):
 let trans = getEdgeFromClipboard():
 (trans != null ?
  pasteEdgeIntoNode(target, trans)
  :
  tryPastingEdgesIntoNode(target)
  )
;

// create two dummy nodes in node and connect with edge
Void pasteEdgeIntoNode(Node target, Edge edge):
 let srcDummy = new Node :
 let destDummy = new Node :
 target.children.add(srcDummy) ->
 target.children.add(destDummy) ->
 edge.setSource(srcDummy) ->
 edge.setTarget(destDummy)
;

// create two dummy nodes and paste all edges between them
Void tryPastingEdgesIntoNode(Node target):
 let transList = getEdgesFromClipboard():
 (transList != null ?
  pasteEdgesIntoNode(target, transList)
  :
  null)
;

// create two dummy nodes and paste all edges between them
Void pasteEdgesIntoNode(Node target, List[Edge] edgeList):
 let srcDummy = new Node :
 let destDummy = new Node :
 target.children.add(srcDummy) ->
 target.children.add(destDummy) ->
 edgeList.setSource(srcDummy) ->
 edgeList.setTarget(destDummy)
;

////////////////////////////////
// Multiple Nodes are targets //
////////////////////////////////

// paste into a list of nodes
Void pasteNodeList(List[Node] targets):
 tryPastingNodeIntoNodes(targets)
;

// add node in clipboard to each node
Void tryPastingNodeIntoNodes(List[Node] targets):
 let node = getNodeFromClipboard():
 (node != null ?
  targets.addNodeInClipboardToNode()
  :
  tryPastingNodesIntoNodes(targets)
  )
;

// add the node from clipboard to each node
Void addNodeInClipboardToNode(Node target):
 let node = getNodeFromClipboard():
 target.children.add(node)
;

Void tryPastingNodesIntoNodes(List[Node] targets):
 let nodes = getNodesFromClipboard():
 (nodes != null ?
  targets.addNodesFromClipboardToNode()
  :
  tryPastingEdgeIntoNodes(targets)
 )
;

// add all nodes in clipboard to target node
Void addNodesFromClipboardToNode(Node target):
 let nodes = getNodesFromClipboard():
 target.children.addAll(nodes)
;

// create dummy nodes with edge and paste into each target
Void tryPastingEdgeIntoNodes(List[Node] targets):
 let trans = getEdgeFromClipboard():
 (trans != null ?
  targets.pasteEdgeFromClipboardIntoNode()
 :
  tryPastingEdgesIntoNodes(targets)
 )
;

// create dummy nodes with edge and add to node
Void pasteEdgeFromClipboardIntoNode(Node target):
 let edge = getEdgeFromClipboard():
 let srcDummy = new Node:
 let destDummy = new Node:
 edge.setSource(srcDummy) ->
 edge.setTarget(destDummy) ->
 target.children.add(srcDummy) ->
 target.children.add(destDummy)
;

// create two nodes in each node with all edges
Void tryPastingEdgesIntoNodes(List[Node] targets):
 let transList = getEdgesFromClipboard():
 (transList != null ?
  targets.pasteEdgesFromClipboardIntoNode()
 :
  null
 )
;

// create two nodes in node and connect with all edges
Void pasteEdgesFromClipboardIntoNode(Node target):
 let edgeList = getEdgesFromClipboard():
 let srcDummy = new Node:
 let destDummy = new Node:
 target.children.add(srcDummy) ->
 target.children.add(destDummy) ->
 srcDummy.outgoingEdges.addAll(edgeList) ->
 edgeList.setTarget(destDummy)
;

///////////////////////////
// Single Edge is target //
///////////////////////////

// replace the selected edge with the one in clipboard
Void paste(Edge target):
 tryPastingEdgeOnEdge(target)
;

// replace an edge with another one
Void tryPastingEdgeOnEdge(Edge target):
 let edge = getEdgeFromClipboard():
 let source = target.source:
 let dest = target.target:
 (edge != null ?
  (edge.setSource(source) ->
  edge.setTarget(dest) ->
  source.outgoingEdges.remove(target) ->
  setSelection(edge))
  :
  tryPastingEdgesOnEdge(target)
 )
;

// replace an edge with many others
Void tryPastingEdgesOnEdge(Edge target):
 let edgeList = getEdgesFromClipboard():
 let source = target.source:
 let dest = target.target:
 (edgeList != null ?
  (source.outgoingEdges.remove(target) ->
   edgeList.connectNodes(source, dest))
  :
  tryPastingNodeOnEdge(target)
 )
;

// connect two nodes with an edge
Void connectNodes(Edge edge, KNode source, KNode target):
 source.outgoingEdges.add(edge) ->
 edge.setTarget(target)
;

// insert a node into an edge
Void tryPastingNodeOnEdge(Edge target):
 let node = getNodeFromClipboard():
 (node != null ?
  pasteNodeOnEdge(target, node, target.source)
 :
  tryPastingNodesOnEdge(target)
 )
;

// insert a node into a edge
Void pasteNodeOnEdge(Edge target, Node newNode, KNode edgeKeeper):
 let source = target.source:
 let dest = target.target:
 let dummyEdge = new Edge:
 (target.isDirected ? dummyEdge.setIsDirected(true) : dummyEdge.setIsDirected(false)) ->
 (edgeKeeper == source ?
  (source.parent.children.add(newNode) ->
   dummyEdge.setSource(newNode) ->
   dummyEdge.setTarget(dest) ->
   target.setTarget(newNode)
  )
  :
  (edgeKeeper == dest ?
   (source.parent.children.add(newNode) ->
    dummyEdge.setSource(source) ->
    dummyEdge.setTarget(newNode) ->
    target.setSource(newNode)
   )
   :
    null
   )
  )
;

// try pasting nodes on edge by encapsulating
Void tryPastingNodesOnEdge(Edge target):
 let nodes = getNodesFromClipboard():
 (nodes != null ?
  pasteNodesOnEdge(target, nodes, target.source)
 :
  null
 )
;

// encapsulate nodes in node and paste on edge
Void pasteNodesOnEdge(Edge target, List[Node] nodes, KNode transKeeper):
 let node = new Node:
 node.children.addAll(nodes) ->
 pasteNodeOnEdge(target, node, transKeeper)
;

////////////////////////////////
// Multiple Edges are targets //
////////////////////////////////

// paste into a list of edges
Void pasteEdgeList(List[Edge] targets):
 tryPastingEdgeOnEdges(targets)
;

// try replacing each edge with a copy of the one in clipboard
Void tryPastingEdgeOnEdges(List[Edge] targets):
 let edge = getEdgeFromClipboard():
 (edge != null ?
  targets.replaceWithEdge()
  :
  tryPastingEdgesOnEdges(targets)
 )
;

// replace a edge with the one in clipboard
Void replaceWithEdge(Edge target):
 let edge = getEdgeFromClipboard():
 let source = target.source:
 let dest = target.target:
 source.outgoingEdges.remove(target) ->
 edge.setTarget(dest) ->
 edge.setSource(source)
;

// try replacing each edge with a copy of all the ones in clipboard
Void tryPastingEdgesOnEdges(List[Edge] targets):
 let edgeList = getEdgesFromClipboard():
 (edgeList != null ?
  targets.replaceWithEdges()
  :
  tryPastingNodeOnEdges(targets)
 )
;

// replace a edge with the one in clipboard
Void replaceWithEdges(Edge target):
 let edgeList = getEdgesFromClipboard():
 let source = target.source:
 let dest = target.target:
 source.outgoingEdges.remove(target) ->
 edgeList.setTarget(dest) ->
 edgeList.setSource(source)
;

// try insert the node in each edge
Void tryPastingNodeOnEdges(List[Edge] targets):
 let node = getNodeFromClipboard():
 (node != null ?
  targets.pasteNodeInClipboardIntoEdge()
 :
  tryPastingNodesOnEdges(targets)
 )
;

// insert the node into the edge
Void pasteNodeInClipboardIntoEdge(Edge target):
 let node = getNodeFromClipboard():
 pasteNodeOnEdge(target, node, target.source)
;

// try inserting all nodes in clipboard into each edge
Void tryPastingNodesOnEdges(List[Edge] targets):
 let nodes = getNodesFromClipboard():
 (nodes != null ?
  targets.pasteNodesInClipboardIntoEdge()
 :
  null
 )
;

// encapsulate states and insert into transition
Void pasteNodesInClipboardIntoEdge(Edge target):
 let nodes = getNodesFromClipboard():
 let dummyNode = new Node:
 dummyNode.children.addAll(nodes) ->
 pasteNodeOnEdge(target, dummyNode, target.source)
;

///////////////////
// Mixed targets //
///////////////////

// *** Node and Edge selected ***

// a node and an edge selected in any order
Void paste(Edge edge, Node node):
 paste(node, edge)
;

// a node and an edge selected in any order
Void paste(Node node, Edge edge):
 tryPastingNodeOntoNodeEdge(node, edge)
;

// insert a node into the edge with the selected node as keeper
Void tryPastingNodeOntoNodeEdge(Node node, Edge edge):
 let clipboardNode = getNodeFromClipboard():
 (clipboardNode != null ?
  pasteNodeOnEdge(edge, clipboardNode, node)
 :
  tryPastingNodesOntoNodeEdge(node, edge)
 )
;

// insert states into a transition by encapsulating
Void tryPastingNodesOntoNodeEdge(Node node, Edge edge):
 let nodes = getNodesFromClipboard():
 (nodes != null ?
  pasteNodesOnEdge(edge, nodes, node)
 :
  null
 )
;