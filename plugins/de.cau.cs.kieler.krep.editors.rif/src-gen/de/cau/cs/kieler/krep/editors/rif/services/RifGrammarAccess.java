/*
* generated by Xtext
*/

package de.cau.cs.kieler.krep.editors.rif.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RifGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINPUTSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsDeclParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cOUTPUTSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOutputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputsDeclParserRuleCall_4_0 = (RuleCall)cOutputsAssignment_4.eContents().get(0);
		private final Keyword cCommercialAtNumberSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLOCALSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cLocalAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocalDeclParserRuleCall_7_0 = (RuleCall)cLocalAssignment_7.eContents().get(0);
		private final Keyword cCommercialAtNumberSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTickAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTickTickParserRuleCall_9_0 = (RuleCall)cTickAssignment_9.eContents().get(0);
		private final RuleCall cStatusParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Trace:
		//  INPUTS inputs+=decl* "@#" OUTPUTS outputs+=decl* "@#" LOCALS local+=decl* "@#" tick+=Tick
		//  + Status?;
		public ParserRule getRule() { return rule; }

		//INPUTS inputs+=decl* "@#" OUTPUTS outputs+=decl* "@#" LOCALS local+=decl* "@#" tick+=Tick
		//+ Status?
		public Group getGroup() { return cGroup; }

		//INPUTS
		public RuleCall getINPUTSTerminalRuleCall_0() { return cINPUTSTerminalRuleCall_0; }

		//inputs+=decl*
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }

		//decl
		public RuleCall getInputsDeclParserRuleCall_1_0() { return cInputsDeclParserRuleCall_1_0; }

		//"@#"
		public Keyword getCommercialAtNumberSignKeyword_2() { return cCommercialAtNumberSignKeyword_2; }

		//OUTPUTS
		public RuleCall getOUTPUTSTerminalRuleCall_3() { return cOUTPUTSTerminalRuleCall_3; }

		//outputs+=decl*
		public Assignment getOutputsAssignment_4() { return cOutputsAssignment_4; }

		//decl
		public RuleCall getOutputsDeclParserRuleCall_4_0() { return cOutputsDeclParserRuleCall_4_0; }

		//"@#"
		public Keyword getCommercialAtNumberSignKeyword_5() { return cCommercialAtNumberSignKeyword_5; }

		//LOCALS
		public RuleCall getLOCALSTerminalRuleCall_6() { return cLOCALSTerminalRuleCall_6; }

		//local+=decl*
		public Assignment getLocalAssignment_7() { return cLocalAssignment_7; }

		//decl
		public RuleCall getLocalDeclParserRuleCall_7_0() { return cLocalDeclParserRuleCall_7_0; }

		//"@#"
		public Keyword getCommercialAtNumberSignKeyword_8() { return cCommercialAtNumberSignKeyword_8; }

		//tick+=Tick+
		public Assignment getTickAssignment_9() { return cTickAssignment_9; }

		//Tick
		public RuleCall getTickTickParserRuleCall_9_0() { return cTickTickParserRuleCall_9_0; }

		//Status?
		public RuleCall getStatusParserRuleCall_10() { return cStatusParserRuleCall_10; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//decl:
		//  name=STRING ":" type=Type;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" type=Type
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Type returns ecore::EString:
		//  "bool"|"int";
		public ParserRule getRule() { return rule; }

		//"bool"|"int"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class TickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTickAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNrINTTerminalRuleCall_2_0 = (RuleCall)cNrAssignment_2.eContents().get(0);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputDataParserRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		private final Keyword cOutsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputDataParserRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		private final Keyword cLocsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLocalAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocalDataParserRuleCall_7_0 = (RuleCall)cLocalAssignment_7.eContents().get(0);
		
		//Tick:
		//  {Tick} "#step" nr=INT input+=Data* "#outs" output+=Data* "#locs" local+=Data*;
		public ParserRule getRule() { return rule; }

		//{Tick} "#step" nr=INT input+=Data* "#outs" output+=Data* "#locs" local+=Data*
		public Group getGroup() { return cGroup; }

		//{Tick}
		public Action getTickAction_0() { return cTickAction_0; }

		//"#step"
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }

		//nr=INT
		public Assignment getNrAssignment_2() { return cNrAssignment_2; }

		//INT
		public RuleCall getNrINTTerminalRuleCall_2_0() { return cNrINTTerminalRuleCall_2_0; }

		//input+=Data*
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//Data
		public RuleCall getInputDataParserRuleCall_3_0() { return cInputDataParserRuleCall_3_0; }

		//"#outs"
		public Keyword getOutsKeyword_4() { return cOutsKeyword_4; }

		//output+=Data*
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }

		//Data
		public RuleCall getOutputDataParserRuleCall_5_0() { return cOutputDataParserRuleCall_5_0; }

		//"#locs"
		public Keyword getLocsKeyword_6() { return cLocsKeyword_6; }

		//local+=Data*
		public Assignment getLocalAssignment_7() { return cLocalAssignment_7; }

		//Data
		public RuleCall getLocalDataParserRuleCall_7_0() { return cLocalDataParserRuleCall_7_0; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTrueTKeyword_1_0 = (Keyword)cTrueAssignment_1.eContents().get(0);
		private final Assignment cFalseAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cFalseFKeyword_2_0 = (Keyword)cFalseAssignment_2.eContents().get(0);
		
		//Data:
		//  val=INT|true="T"|false="F"; 
		//
		//      
		//          
		//           
		//        
		//        
		//   / *     Bool returns ecore::EInt: 'T' {$=1} 
		//        | false?='F' 
		//        ;* /
		public ParserRule getRule() { return rule; }

		//val=INT|true="T"|false="F" 
		//
		//      
		//          
		//           
		//        
		//        
		//   / *     Bool returns ecore::EInt: 'T' {$=1} 
		//        | false?='F' 
		//        ;* /
		public Alternatives getAlternatives() { return cAlternatives; }

		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }

		//true="T"
		public Assignment getTrueAssignment_1() { return cTrueAssignment_1; }

		//"T"
		public Keyword getTrueTKeyword_1_0() { return cTrueTKeyword_1_0; }

		//false="F"
		public Assignment getFalseAssignment_2() { return cFalseAssignment_2; }

		//"F"
		public Keyword getFalseFKeyword_2_0() { return cFalseFKeyword_2_0; }
	}

	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Status");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExecutionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLastedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSecondKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Status returns ecore::EString:
		//  "The" "execution" "lasted" INT "." INT "second."; 
		//        
		//   / *     Bool returns ecore::EInt: 'T' {$=1} 
		//        | false?='F' 
		//        ;* /
		public ParserRule getRule() { return rule; }

		//"The" "execution" "lasted" INT "." INT "second."
		public Group getGroup() { return cGroup; }

		//"The"
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }

		//"execution"
		public Keyword getExecutionKeyword_1() { return cExecutionKeyword_1; }

		//"lasted"
		public Keyword getLastedKeyword_2() { return cLastedKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }

		//"second."
		public Keyword getSecondKeyword_6() { return cSecondKeyword_6; }
	}
	
	
	private TraceElements pTrace;
	private DeclElements pDecl;
	private TypeElements pType;
	private TickElements pTick;
	private DataElements pData;
	private StatusElements pStatus;
	private TerminalRule tINPUTS;
	private TerminalRule tOUTPUTS;
	private TerminalRule tLOCALS;
	private TerminalRule tWS;
	private TerminalRule tCOMMENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RifGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Trace:
	//  INPUTS inputs+=decl* "@#" OUTPUTS outputs+=decl* "@#" LOCALS local+=decl* "@#" tick+=Tick
	//  + Status?;
	public TraceElements getTraceAccess() {
		return (pTrace != null) ? pTrace : (pTrace = new TraceElements());
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}

	//decl:
	//  name=STRING ":" type=Type;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//Type returns ecore::EString:
	//  "bool"|"int";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Tick:
	//  {Tick} "#step" nr=INT input+=Data* "#outs" output+=Data* "#locs" local+=Data*;
	public TickElements getTickAccess() {
		return (pTick != null) ? pTick : (pTick = new TickElements());
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	//Data:
	//  val=INT|true="T"|false="F"; 
	//
	//      
	//          
	//           
	//        
	//        
	//   / *     Bool returns ecore::EInt: 'T' {$=1} 
	//        | false?='F' 
	//        ;* /
	public DataElements getDataAccess() {
		return (pData != null) ? pData : (pData = new DataElements());
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//Status returns ecore::EString:
	//  "The" "execution" "lasted" INT "." INT "second."; 
	//        
	//   / *     Bool returns ecore::EInt: 'T' {$=1} 
	//        | false?='F' 
	//        ;* /
	public StatusElements getStatusAccess() {
		return (pStatus != null) ? pStatus : (pStatus = new StatusElements());
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}

	//terminal INPUTS:
	//  "#@inputs";
	public TerminalRule getINPUTSRule() {
		return (tINPUTS != null) ? tINPUTS : (tINPUTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INPUTS"));
	} 

	//terminal OUTPUTS:
	//  "#@outputs";
	public TerminalRule getOUTPUTSRule() {
		return (tOUTPUTS != null) ? tOUTPUTS : (tOUTPUTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OUTPUTS"));
	} 

	//terminal LOCALS:
	//  "#@locals";
	public TerminalRule getLOCALSRule() {
		return (tLOCALS != null) ? tLOCALS : (tLOCALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOCALS"));
	} 

	//terminal WS:
	//  "\t" | " " | "\r" | "\n";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal COMMENT:
	//  "# "->"\n";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
