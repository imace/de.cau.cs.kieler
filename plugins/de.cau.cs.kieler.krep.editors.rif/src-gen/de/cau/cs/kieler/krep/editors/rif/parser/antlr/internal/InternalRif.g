/*
* generated by Xtext
*/
grammar InternalRif;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.krep.editors.rif.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.krep.editors.rif.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.krep.editors.rif.services.RifGrammarAccess;

}

@parser::members {

 	private RifGrammarAccess grammarAccess;
 	
    public InternalRifParser(TokenStream input, IAstFactory factory, RifGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/krep/editors/rif/parser/antlr/internal/InternalRif.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Trace";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTrace
entryRuleTrace returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraceRule(), currentNode); }
	 iv_ruleTrace=ruleTrace 
	 { $current=$iv_ruleTrace.current; } 
	 EOF 
;

// Rule Trace
ruleTrace returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#@inputs' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getInputsKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceAccess().getInputsDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_inputs_1_0=ruledecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"inputs",
	        		lv_inputs_1_0, 
	        		"decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'@#' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getCommercialAtNumberSignKeyword_2(), null); 
    }
	'#@outputs' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getOutputsKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceAccess().getOutputsDeclParserRuleCall_4_0(), currentNode); 
	    }
		lv_outputs_4_0=ruledecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outputs",
	        		lv_outputs_4_0, 
	        		"decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'@#' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getCommercialAtNumberSignKeyword_5(), null); 
    }
	'#@locals' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getLocalsKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceAccess().getLocalDeclParserRuleCall_7_0(), currentNode); 
	    }
		lv_local_7_0=ruledecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"local",
	        		lv_local_7_0, 
	        		"decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'@#' 
    {
        createLeafNode(grammarAccess.getTraceAccess().getCommercialAtNumberSignKeyword_8(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraceAccess().getTickTickParserRuleCall_9_0(), currentNode); 
	    }
		lv_tick_9_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tick",
	        		lv_tick_9_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuledecl
entryRuledecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclRule(), currentNode); }
	 iv_ruledecl=ruledecl 
	 { $current=$iv_ruledecl.current; } 
	 EOF 
;

// Rule decl
ruledecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'"' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getQuotationMarkKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'":' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getQuotationMarkColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getTypeTypeParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='bool' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTypeAccess().getBoolKeyword_0(), null); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTypeAccess().getIntKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleTick
entryRuleTick returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTickRule(), currentNode); }
	 iv_ruleTick=ruleTick 
	 { $current=$iv_ruleTick.current; } 
	 EOF 
;

// Rule Tick
ruleTick returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTickAccess().getTickAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTickAccess().getTickAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'#step' 
    {
        createLeafNode(grammarAccess.getTickAccess().getStepKeyword_1(), null); 
    }
(
(
		lv_nr_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTickAccess().getNrINTTerminalRuleCall_2_0(), "nr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nr",
	        		lv_nr_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTickAccess().getInputDataParserRuleCall_3_0(), currentNode); 
	    }
		lv_input_3_0=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"input",
	        		lv_input_3_0, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'#outs' 
    {
        createLeafNode(grammarAccess.getTickAccess().getOutsKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTickAccess().getOutputDataParserRuleCall_5_0(), currentNode); 
	    }
		lv_output_5_0=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"output",
	        		lv_output_5_0, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'#locs' 
    {
        createLeafNode(grammarAccess.getTickAccess().getLocsKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTickAccess().getLocalDataParserRuleCall_7_0(), currentNode); 
	    }
		lv_local_7_0=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTickRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"local",
	        		lv_local_7_0, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataRule(), currentNode); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_intVal_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDataAccess().getIntValINTTerminalRuleCall_0_0(), "intVal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intVal",
	        		lv_intVal_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_true_1_0=	'T' 
    {
        createLeafNode(grammarAccess.getDataAccess().getTrueTKeyword_1_0(), "true"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "true", true, "T", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_false_2_0=	'F' 
    {
        createLeafNode(grammarAccess.getDataAccess().getFalseFKeyword_2_0(), "false"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "false", true, "F", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


