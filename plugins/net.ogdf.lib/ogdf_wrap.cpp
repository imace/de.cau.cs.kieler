/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



#include <ogdf/basic/geometry.h>
#include <ogdf/basic/Graph_d.h>
#include <ogdf/basic/GraphAttributes.h>
#include <ogdf/basic/UMLGraph.h>
#include <ogdf/labeling/ELabelInterface.h>
#include <ogdf/labeling/ELabelPosSimple.h>
#include <ogdf/module/HierarchyLayoutModule.h>
#include <ogdf/layered/FastHierarchyLayout.h>
#include <ogdf/module/PlanarSubgraphModule.h>
#include <ogdf/planarity/FastPlanarSubgraph.h>
#include <ogdf/module/LayoutPlanRepModule.h>
#include <ogdf/orthogonal/OrthoRep.h>
#include <ogdf/orthogonal/OrthoLayout.h>
#include <ogdf/module/LayoutModule.h>
#include <ogdf/module/UMLLayoutModule.h>
#include <ogdf/layered/SugiyamaLayout.h>
#include <ogdf/misclayout/BalloonLayout.h>
#include <ogdf/planarity/PlanarizationLayout.h>

using namespace ogdf;


SWIGINTERN double DPoint_getX(DPoint const *self){
		return self->m_x;
	}
SWIGINTERN double DPoint_getY(DPoint const *self){
		return self->m_y;
	}
SWIGINTERN bool ListConstIterator_Sl_DPoint_Sg__hasNext(ListConstIterator<DPoint > const *self){
		return self->valid();
	}
SWIGINTERN DPoint const ListConstIterator_Sl_DPoint_Sg__next(ListConstIterator<DPoint > *self){
		DPoint element = *(*self);
		self->operator++();
		return element;
	}
SWIGINTERN void ListConstIterator_Sl_DPoint_Sg__remove(ListConstIterator<DPoint > *self){}
SWIGINTERN bool ListConstIterator_Sl_EdgeElement_Sm__Sg__hasNext(ListConstIterator<EdgeElement * > const *self){
		return self->valid();
	}
SWIGINTERN EdgeElement *const ListConstIterator_Sl_EdgeElement_Sm__Sg__next(ListConstIterator<EdgeElement * > *self){
		EdgeElement * element = *(*self);
		self->operator++();
		return element;
	}
SWIGINTERN void ListConstIterator_Sl_EdgeElement_Sm__Sg__remove(ListConstIterator<EdgeElement * > *self){}
SWIGINTERN ListConstIterator<DPoint > const List_Sl_DPoint_Sg__iterator(List<DPoint > const *self){
		return self->begin();
	}
SWIGINTERN ListConstIterator<EdgeElement * > const List_Sl_EdgeElement_Sm__Sg__iterator(List<EdgeElement * > const *self){
		return self->begin();
	}
SWIGINTERN void GraphAttributes_setNodeWidth(GraphAttributes *self,NodeElement *n,double w){
		self->width(n) = w;
	}
SWIGINTERN void GraphAttributes_setNodeHeight(GraphAttributes *self,NodeElement *n,double h){
		self->height(n) = h;
	}
SWIGINTERN void GraphAttributes_setNodeX(GraphAttributes *self,NodeElement *n,double a){
		self->x(n) = a;
	}
SWIGINTERN void GraphAttributes_setNodeY(GraphAttributes *self,NodeElement *n,double b){
		self->y(n) = b;
	}
SWIGINTERN void GraphAttributes_setEdgeType(GraphAttributes *self,EdgeElement *e,Graph::EdgeType type){
		self->type(e) = type;
	}
SWIGINTERN double GraphAttributes_getNodeWidth(GraphAttributes const *self,NodeElement *n){
		return self->width(n);
	}
SWIGINTERN double GraphAttributes_getNodeHeight(GraphAttributes const *self,NodeElement *n){
		return self->height(n);
	}
SWIGINTERN double GraphAttributes_getNodeX(GraphAttributes const *self,NodeElement *n){
		return self->x(n);
	}
SWIGINTERN double GraphAttributes_getNodeY(GraphAttributes const *self,NodeElement *n){
		return self->y(n);
	}
SWIGINTERN Graph::EdgeType GraphAttributes_getEdgeType(GraphAttributes const *self,EdgeElement *e){
		return self->type(e);
	}
SWIGINTERN int EdgeLabel_Sl_double_Sg__usedLabel__SWIG_1(EdgeLabel<double > *self){
		// converts reference to value to avoid generation of java int-pointer class
		return self->usedLabel();
	}
SWIGINTERN bool ELabelPosSimple_getAbsolute(ELabelPosSimple const *self){
		return self->m_absolut;
	}
SWIGINTERN double ELabelPosSimple_getMarginDistance(ELabelPosSimple const *self){
		return self->m_marginDistance;
	}
SWIGINTERN double ELabelPosSimple_getEdgeDistance(ELabelPosSimple const *self){
		return self->m_edgeDistance;
	}
SWIGINTERN bool ELabelPosSimple_getMidOnEdge(ELabelPosSimple const *self){
		return self->m_midOnEdge;
	}
SWIGINTERN void ELabelPosSimple_setAbsolute(ELabelPosSimple *self,bool absolute){
		self->m_absolut = absolute;
	}
SWIGINTERN void ELabelPosSimple_setMarginDistance(ELabelPosSimple *self,double distance){
		self->m_marginDistance = distance;
	}
SWIGINTERN void ELabelPosSimple_setEdgeDistance(ELabelPosSimple *self,double distance){
		self->m_edgeDistance = distance;
	}
SWIGINTERN void ELabelPosSimple_setMidOnEdge(ELabelPosSimple *self,bool midOnEdge){
		self->m_midOnEdge = midOnEdge;
	}
SWIGINTERN void SugiyamaLayout_setLayout_(SugiyamaLayout *self,HierarchyLayoutModule *hlm){
		self->setLayout(hlm);
	}
SWIGINTERN void PlanarizationLayout_setSubgraph_(PlanarizationLayout *self,PlanarSubgraphModule *psm){
		self->setSubgraph(psm);
	}
SWIGINTERN void PlanarizationLayout_setPlanarLayouter_(PlanarizationLayout *self,LayoutPlanRepModule *lprm){
		self->setPlanarLayouter(lprm);
	}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DPoint *)new DPoint();
  *(DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (DPoint *)new DPoint(arg1,arg2);
  *(DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_DPoint_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  DPoint *arg1 = (DPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DPoint **)&jarg1; 
  result = (double)DPoint_getX((DPoint const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_DPoint_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  DPoint *arg1 = (DPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DPoint **)&jarg1; 
  result = (double)DPoint_getY((DPoint const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DPoint *arg1 = (DPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DPoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DRect *)new DRect();
  *(DRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DPoint *arg1 = 0 ;
  DPoint *arg2 = 0 ;
  DRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPoint const & reference is null");
    return 0;
  } 
  arg2 = *(DPoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPoint const & reference is null");
    return 0;
  } 
  result = (DRect *)new DRect((DPoint const &)*arg1,(DPoint const &)*arg2);
  *(DRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DRect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (DRect *)new DRect(arg1,arg2,arg3,arg4);
  *(DRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_DRect_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  DRect *arg1 = (DRect *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRect **)&jarg1; 
  result = (double)((DRect const *)arg1)->width();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_DRect_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  DRect *arg1 = (DRect *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRect **)&jarg1; 
  result = (double)((DRect const *)arg1)->height();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_DRect_1p1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRect *arg1 = (DRect *) 0 ;
  DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRect **)&jarg1; 
  {
    DPoint const &_result_ref = ((DRect const *)arg1)->p1();
    result = (DPoint *) &_result_ref;
  }
  *(DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_DRect_1p2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRect *arg1 = (DRect *) 0 ;
  DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRect **)&jarg1; 
  {
    DPoint const &_result_ref = ((DRect const *)arg1)->p2();
    result = (DPoint *) &_result_ref;
  }
  *(DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_DRect_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  DRect *arg1 = (DRect *) 0 ;
  DPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DRect **)&jarg1; 
  arg2 = *(DPoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPoint const & reference is null");
    return 0;
  } 
  result = (bool)((DRect const *)arg1)->contains((DPoint const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1DRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DRect *arg1 = (DRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DRect **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DPointListConstIterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListConstIterator<DPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListConstIterator<DPoint > *)new ListConstIterator<DPoint >();
  *(ListConstIterator<DPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_DPointListConstIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListConstIterator<DPoint > *arg1 = (ListConstIterator<DPoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<DPoint > **)&jarg1; 
  result = (bool)ListConstIterator_Sl_DPoint_Sg__hasNext((ListConstIterator<DPoint > const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_DPointListConstIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListConstIterator<DPoint > *arg1 = (ListConstIterator<DPoint > *) 0 ;
  DPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<DPoint > **)&jarg1; 
  result = ListConstIterator_Sl_DPoint_Sg__next(arg1);
  *(DPoint **)&jresult = new DPoint((DPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_DPointListConstIterator_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListConstIterator<DPoint > *arg1 = (ListConstIterator<DPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<DPoint > **)&jarg1; 
  ListConstIterator_Sl_DPoint_Sg__remove(arg1);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1DPointListConstIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListConstIterator<DPoint > *arg1 = (ListConstIterator<DPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListConstIterator<DPoint > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1EdgeElementListConstIterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ListConstIterator<EdgeElement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ListConstIterator<EdgeElement * > *)new ListConstIterator<EdgeElement * >();
  *(ListConstIterator<EdgeElement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementListConstIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListConstIterator<EdgeElement * > *arg1 = (ListConstIterator<EdgeElement * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<EdgeElement * > **)&jarg1; 
  result = (bool)ListConstIterator_Sl_EdgeElement_Sm__Sg__hasNext((ListConstIterator<EdgeElement * > const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementListConstIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListConstIterator<EdgeElement * > *arg1 = (ListConstIterator<EdgeElement * > *) 0 ;
  EdgeElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<EdgeElement * > **)&jarg1; 
  result = (EdgeElement *)ListConstIterator_Sl_EdgeElement_Sm__Sg__next(arg1);
  *(EdgeElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementListConstIterator_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListConstIterator<EdgeElement * > *arg1 = (ListConstIterator<EdgeElement * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListConstIterator<EdgeElement * > **)&jarg1; 
  ListConstIterator_Sl_EdgeElement_Sm__Sg__remove(arg1);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1EdgeElementListConstIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListConstIterator<EdgeElement * > *arg1 = (ListConstIterator<EdgeElement * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListConstIterator<EdgeElement * > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1DPointList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  List<DPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (List<DPoint > *)new List<DPoint >();
  *(List<DPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_DPointList_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  List<DPoint > *arg1 = (List<DPoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<DPoint > **)&jarg1; 
  result = (bool)((List<DPoint > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_DPointList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  List<DPoint > *arg1 = (List<DPoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<DPoint > **)&jarg1; 
  result = (int)((List<DPoint > const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_DPointList_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  List<DPoint > *arg1 = (List<DPoint > *) 0 ;
  ListConstIterator<DPoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<DPoint > **)&jarg1; 
  result = List_Sl_DPoint_Sg__iterator((List<DPoint > const *)arg1);
  *(ListConstIterator<DPoint > **)&jresult = new ListConstIterator<DPoint >((ListConstIterator<DPoint > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1DPointList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  List<DPoint > *arg1 = (List<DPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(List<DPoint > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1EdgeElementList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  List<EdgeElement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (List<EdgeElement * > *)new List<EdgeElement * >();
  *(List<EdgeElement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementList_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  List<EdgeElement * > *arg1 = (List<EdgeElement * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<EdgeElement * > **)&jarg1; 
  result = (bool)((List<EdgeElement * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  List<EdgeElement * > *arg1 = (List<EdgeElement * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<EdgeElement * > **)&jarg1; 
  result = (int)((List<EdgeElement * > const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeElementList_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  List<EdgeElement * > *arg1 = (List<EdgeElement * > *) 0 ;
  ListConstIterator<EdgeElement * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(List<EdgeElement * > **)&jarg1; 
  result = List_Sl_EdgeElement_Sm__Sg__iterator((List<EdgeElement * > const *)arg1);
  *(ListConstIterator<EdgeElement * > **)&jresult = new ListConstIterator<EdgeElement * >((ListConstIterator<EdgeElement * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1EdgeElementList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  List<EdgeElement * > *arg1 = (List<EdgeElement * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(List<EdgeElement * > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1DPolyline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DPolyline *arg1 = (DPolyline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DPolyline **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1NodeElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NodeElement *arg1 = (NodeElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NodeElement **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1EdgeElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EdgeElement *arg1 = (EdgeElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EdgeElement **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1Graph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Graph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Graph *)new Graph();
  *(Graph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_Graph_1newNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Graph *arg1 = (Graph *) 0 ;
  NodeElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Graph **)&jarg1; 
  result = (NodeElement *)(arg1)->newNode();
  *(NodeElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_Graph_1newEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Graph *arg1 = (Graph *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  NodeElement *arg3 = (NodeElement *) 0 ;
  EdgeElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Graph **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  arg3 = *(NodeElement **)&jarg3; 
  result = (EdgeElement *)(arg1)->newEdge(arg2,arg3);
  *(EdgeElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1Graph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Graph *arg1 = (Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Graph **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1GraphAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Graph *arg1 = 0 ;
  long arg2 ;
  GraphAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Graph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Graph const & reference is null");
    return 0;
  } 
  arg2 = (long)jarg2; 
  result = (GraphAttributes *)new GraphAttributes((Graph const &)*arg1,arg2);
  *(GraphAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1GraphAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Graph *arg1 = 0 ;
  GraphAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Graph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Graph const & reference is null");
    return 0;
  } 
  result = (GraphAttributes *)new GraphAttributes((Graph const &)*arg1);
  *(GraphAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1bends(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  EdgeElement *arg2 = (EdgeElement *) 0 ;
  DPolyline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(EdgeElement **)&jarg2; 
  {
    DPolyline const &_result_ref = ((GraphAttributes const *)arg1)->bends(arg2);
    result = (DPolyline *) &_result_ref;
  }
  *(DPolyline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1addNodeCenter2Bends(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addNodeCenter2Bends(arg2);
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1boundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  DRect result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GraphAttributes **)&jarg1; 
  result = ((GraphAttributes const *)arg1)->boundingBox();
  *(DRect **)&jresult = new DRect((DRect &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1setNodeWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  arg3 = (double)jarg3; 
  GraphAttributes_setNodeWidth(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1setNodeHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  arg3 = (double)jarg3; 
  GraphAttributes_setNodeHeight(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1setNodeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  arg3 = (double)jarg3; 
  GraphAttributes_setNodeX(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1setNodeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  arg3 = (double)jarg3; 
  GraphAttributes_setNodeY(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1setEdgeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  EdgeElement *arg2 = (EdgeElement *) 0 ;
  Graph::EdgeType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(EdgeElement **)&jarg2; 
  arg3 = (Graph::EdgeType)jarg3; 
  GraphAttributes_setEdgeType(arg1,arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1getNodeWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  result = (double)GraphAttributes_getNodeWidth((GraphAttributes const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1getNodeHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  result = (double)GraphAttributes_getNodeHeight((GraphAttributes const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1getNodeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  result = (double)GraphAttributes_getNodeX((GraphAttributes const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1getNodeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  NodeElement *arg2 = (NodeElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(NodeElement **)&jarg2; 
  result = (double)GraphAttributes_getNodeY((GraphAttributes const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_GraphAttributes_1getEdgeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  EdgeElement *arg2 = (EdgeElement *) 0 ;
  Graph::EdgeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GraphAttributes **)&jarg1; 
  arg2 = *(EdgeElement **)&jarg2; 
  result = (Graph::EdgeType)GraphAttributes_getEdgeType((GraphAttributes const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1GraphAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GraphAttributes *arg1 = (GraphAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GraphAttributes **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1UMLGraph_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Graph *arg1 = 0 ;
  long arg2 ;
  UMLGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Graph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Graph & reference is null");
    return 0;
  } 
  arg2 = (long)jarg2; 
  result = (UMLGraph *)new UMLGraph(*arg1,arg2);
  *(UMLGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1UMLGraph_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Graph *arg1 = 0 ;
  UMLGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Graph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Graph & reference is null");
    return 0;
  } 
  result = (UMLGraph *)new UMLGraph(*arg1);
  *(UMLGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1UMLGraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMLGraph *arg1 = (UMLGraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMLGraph **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1EdgeLabelDouble(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EdgeLabel<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EdgeLabel<double > *)new EdgeLabel<double >();
  *(EdgeLabel<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setX(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setY(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setHeight(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setWidth(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1setEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  EdgeElement *arg2 = (EdgeElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = *(EdgeElement **)&jarg2; 
  (arg1)->setEdge(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1addType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  (arg1)->addType(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  result = (double)(arg1)->getX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  result = (double)(arg1)->getY(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  result = (double)(arg1)->getWidth(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  result = (double)(arg1)->getHeight(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1theEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  EdgeElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  result = (EdgeElement *)(arg1)->theEdge();
  *(EdgeElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1usedLabel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  eLabelTyp arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  arg2 = (eLabelTyp)jarg2; 
  result = (bool)(arg1)->usedLabel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_EdgeLabelDouble_1usedLabel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  result = (int)EdgeLabel_Sl_double_Sg__usedLabel__SWIG_1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1EdgeLabelDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EdgeLabel<double > *arg1 = (EdgeLabel<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EdgeLabel<double > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1ELabelInterfaceDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GraphAttributes *arg1 = 0 ;
  ELabelInterface<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GraphAttributes **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GraphAttributes & reference is null");
    return 0;
  } 
  result = (ELabelInterface<double > *)new ELabelInterface<double >(*arg1);
  *(ELabelInterface<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelInterfaceDouble_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ELabelInterface<double > *arg1 = (ELabelInterface<double > *) 0 ;
  EdgeElement **arg2 = 0 ;
  EdgeLabel<double > *arg3 = 0 ;
  EdgeElement *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ELabelInterface<double > **)&jarg1; 
  temp2 = *(EdgeElement **)&jarg2;
  arg2 = &temp2; 
  arg3 = *(EdgeLabel<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "EdgeLabel<double > const & reference is null");
    return ;
  } 
  (arg1)->setLabel(*arg2,(EdgeLabel<double > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelInterfaceDouble_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ELabelInterface<double > *arg1 = (ELabelInterface<double > *) 0 ;
  EdgeElement *arg2 = (EdgeElement *) 0 ;
  EdgeLabel<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ELabelInterface<double > **)&jarg1; 
  arg2 = *(EdgeElement **)&jarg2; 
  {
    EdgeLabel<double > &_result_ref = (arg1)->getLabel(arg2);
    result = (EdgeLabel<double > *) &_result_ref;
  }
  *(EdgeLabel<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1ELabelInterfaceDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ELabelInterface<double > *arg1 = (ELabelInterface<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ELabelInterface<double > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1ELabelPosSimple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ELabelPosSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ELabelPosSimple *)new ELabelPosSimple();
  *(ELabelPosSimple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  GraphAttributes *arg2 = 0 ;
  ELabelInterface<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  arg2 = *(GraphAttributes **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GraphAttributes & reference is null");
    return ;
  } 
  arg3 = *(ELabelInterface<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ELabelInterface<double > & reference is null");
    return ;
  } 
  (arg1)->call(*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1getAbsolute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  result = (bool)ELabelPosSimple_getAbsolute((ELabelPosSimple const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1getMarginDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  result = (double)ELabelPosSimple_getMarginDistance((ELabelPosSimple const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1getEdgeDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  result = (double)ELabelPosSimple_getEdgeDistance((ELabelPosSimple const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1getMidOnEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  result = (bool)ELabelPosSimple_getMidOnEdge((ELabelPosSimple const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1setAbsolute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ELabelPosSimple_setAbsolute(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1setMarginDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  arg2 = (double)jarg2; 
  ELabelPosSimple_setMarginDistance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1setEdgeDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  arg2 = (double)jarg2; 
  ELabelPosSimple_setEdgeDistance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_ELabelPosSimple_1setMidOnEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ELabelPosSimple_setMidOnEdge(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1ELabelPosSimple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ELabelPosSimple *arg1 = (ELabelPosSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ELabelPosSimple **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1HierarchyLayoutModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HierarchyLayoutModule *arg1 = (HierarchyLayoutModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HierarchyLayoutModule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1FastHierarchyLayout(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FastHierarchyLayout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FastHierarchyLayout *)new FastHierarchyLayout();
  *(FastHierarchyLayout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1FastHierarchyLayout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1nodeDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  result = (double)((FastHierarchyLayout const *)arg1)->nodeDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1nodeDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->nodeDistance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1layerDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  result = (double)((FastHierarchyLayout const *)arg1)->layerDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1layerDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->layerDistance(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1fixedLayerDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  result = (bool)((FastHierarchyLayout const *)arg1)->fixedLayerDistance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_FastHierarchyLayout_1fixedLayerDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FastHierarchyLayout *arg1 = (FastHierarchyLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastHierarchyLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->fixedLayerDistance(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1PlanarSubgraphModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PlanarSubgraphModule *arg1 = (PlanarSubgraphModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PlanarSubgraphModule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1FastPlanarSubgraph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FastPlanarSubgraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FastPlanarSubgraph *)new FastPlanarSubgraph();
  *(FastPlanarSubgraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_FastPlanarSubgraph_1runs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FastPlanarSubgraph *arg1 = (FastPlanarSubgraph *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastPlanarSubgraph **)&jarg1; 
  result = (int)((FastPlanarSubgraph const *)arg1)->runs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_FastPlanarSubgraph_1runs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FastPlanarSubgraph *arg1 = (FastPlanarSubgraph *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastPlanarSubgraph **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->runs(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1FastPlanarSubgraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FastPlanarSubgraph *arg1 = (FastPlanarSubgraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FastPlanarSubgraph **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1LayoutPlanRepModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LayoutPlanRepModule *arg1 = (LayoutPlanRepModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LayoutPlanRepModule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1OrthoLayout(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OrthoLayout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OrthoLayout *)new OrthoLayout();
  *(OrthoLayout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1separation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (double)((OrthoLayout const *)arg1)->separation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1separation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->separation(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1cOverhang_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (double)((OrthoLayout const *)arg1)->cOverhang();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1cOverhang_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->cOverhang(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1margin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (double)((OrthoLayout const *)arg1)->margin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1margin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->margin(arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1preferedDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  OrthoDir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (OrthoDir)((OrthoLayout const *)arg1)->preferedDir();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1preferedDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  OrthoDir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (OrthoDir)jarg2; 
  (arg1)->preferedDir(arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1costAssoc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (int)((OrthoLayout const *)arg1)->costAssoc();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1costAssoc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->costAssoc(arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1costGen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  result = (int)((OrthoLayout const *)arg1)->costGen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_OrthoLayout_1costGen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OrthoLayout **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->costGen(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1OrthoLayout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OrthoLayout *arg1 = (OrthoLayout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OrthoLayout **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_LayoutModule_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LayoutModule *arg1 = (LayoutModule *) 0 ;
  GraphAttributes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LayoutModule **)&jarg1; 
  arg2 = *(GraphAttributes **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GraphAttributes & reference is null");
    return ;
  } 
  (arg1)->call(*arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1LayoutModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LayoutModule *arg1 = (LayoutModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LayoutModule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_UMLLayoutModule_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UMLLayoutModule *arg1 = (UMLLayoutModule *) 0 ;
  UMLGraph *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UMLLayoutModule **)&jarg1; 
  arg2 = *(UMLGraph **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMLGraph & reference is null");
    return ;
  } 
  (arg1)->call(*arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1UMLLayoutModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMLLayoutModule *arg1 = (UMLLayoutModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMLLayoutModule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1SugiyamaLayout(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SugiyamaLayout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SugiyamaLayout *)new SugiyamaLayout();
  *(SugiyamaLayout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  GraphAttributes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = *(GraphAttributes **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GraphAttributes & reference is null");
    return ;
  } 
  (arg1)->call(*arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1fails_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (int)((SugiyamaLayout const *)arg1)->fails();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1fails_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->fails(arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1runs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (int)((SugiyamaLayout const *)arg1)->runs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1runs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->runs(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1transpose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (bool)((SugiyamaLayout const *)arg1)->transpose();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1transpose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->transpose(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1arrangeCCs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (bool)((SugiyamaLayout const *)arg1)->arrangeCCs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1arrangeCCs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->arrangeCCs(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1minDistCC_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (double)((SugiyamaLayout const *)arg1)->minDistCC();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1minDistCC_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->minDistCC(arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1pageRatio_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (double)((SugiyamaLayout const *)arg1)->pageRatio();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1pageRatio_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->pageRatio(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1alignBaseClasses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (bool)((SugiyamaLayout const *)arg1)->alignBaseClasses();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1alignBaseClasses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->alignBaseClasses(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1alignSiblings_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  result = (bool)((SugiyamaLayout const *)arg1)->alignSiblings();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1alignSiblings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->alignSiblings(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_SugiyamaLayout_1setLayout_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  HierarchyLayoutModule *arg2 = (HierarchyLayoutModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  arg2 = *(HierarchyLayoutModule **)&jarg2; 
  SugiyamaLayout_setLayout_(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1SugiyamaLayout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SugiyamaLayout *arg1 = (SugiyamaLayout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SugiyamaLayout **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_new_1PlanarizationLayout(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PlanarizationLayout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PlanarizationLayout *)new PlanarizationLayout();
  *(PlanarizationLayout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1call_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  GraphAttributes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = *(GraphAttributes **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GraphAttributes & reference is null");
    return ;
  } 
  (arg1)->call(*arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1call_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  UMLGraph *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = *(UMLGraph **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMLGraph & reference is null");
    return ;
  } 
  (arg1)->call(*arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1pageRatio_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  result = (double)((PlanarizationLayout const *)arg1)->pageRatio();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1pageRatio_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->pageRatio(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1preprocessCliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  result = (bool)((PlanarizationLayout const *)arg1)->preprocessCliques();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1preprocessCliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->preprocessCliques(arg2);
}


SWIGEXPORT jint JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1minCliqueSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  result = (int)((PlanarizationLayout const *)arg1)->minCliqueSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1minCliqueSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->minCliqueSize(arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1setSubgraph_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  PlanarSubgraphModule *arg2 = (PlanarSubgraphModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = *(PlanarSubgraphModule **)&jarg2; 
  PlanarizationLayout_setSubgraph_(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_PlanarizationLayout_1setPlanarLayouter_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  LayoutPlanRepModule *arg2 = (LayoutPlanRepModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  arg2 = *(LayoutPlanRepModule **)&jarg2; 
  PlanarizationLayout_setPlanarLayouter_(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_ogdf_lib_OgdfJNI_delete_1PlanarizationLayout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PlanarizationLayout *arg1 = (PlanarizationLayout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PlanarizationLayout **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGDPolylineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(List<DPoint > **)&baseptr = *(DPolyline **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGUMLGraphUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(GraphAttributes **)&baseptr = *(UMLGraph **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGFastHierarchyLayoutUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(HierarchyLayoutModule **)&baseptr = *(FastHierarchyLayout **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGFastPlanarSubgraphUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(PlanarSubgraphModule **)&baseptr = *(FastPlanarSubgraph **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGOrthoLayoutUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(LayoutPlanRepModule **)&baseptr = *(OrthoLayout **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGUMLLayoutModuleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(LayoutModule **)&baseptr = *(UMLLayoutModule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGSugiyamaLayoutUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(LayoutModule **)&baseptr = *(SugiyamaLayout **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_ogdf_lib_OgdfJNI_SWIGPlanarizationLayoutUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(UMLLayoutModule **)&baseptr = *(PlanarizationLayout **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

