/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

public class MemoryManager {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected MemoryManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MemoryManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgdfJNI.delete_MemoryManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setM_freeList(SWIGTYPE_p_p_ogdf__MemElem value) {
    OgdfJNI.MemoryManager_m_freeList_set(swigCPtr, this, SWIGTYPE_p_p_ogdf__MemElem.getCPtr(value));
  }

  public SWIGTYPE_p_p_ogdf__MemElem getM_freeList() {
    long cPtr = OgdfJNI.MemoryManager_m_freeList_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_ogdf__MemElem(cPtr, false);
  }

  public MemoryManager() {
    this(OgdfJNI.new_MemoryManager(), true);
  }

  public void init() {
    OgdfJNI.MemoryManager_init(swigCPtr, this);
  }

  public void cleanup() {
    OgdfJNI.MemoryManager_cleanup(swigCPtr, this);
  }

  public void allocateBlock(long nSizeSlice) {
    OgdfJNI.MemoryManager_allocateBlock(swigCPtr, this, nSizeSlice);
  }

  public SWIGTYPE_p_void allocate(long nBytes) {
    long cPtr = OgdfJNI.MemoryManager_allocate(swigCPtr, this, nBytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void deallocate(SWIGTYPE_p_void p, long nBytes) {
    OgdfJNI.MemoryManager_deallocate(swigCPtr, this, SWIGTYPE_p_void.getCPtr(p), nBytes);
  }

  public void deallocateList(SWIGTYPE_p_void pHead, SWIGTYPE_p_void pTail, int nBytes) {
    OgdfJNI.MemoryManager_deallocateList(swigCPtr, this, SWIGTYPE_p_void.getCPtr(pHead), SWIGTYPE_p_void.getCPtr(pTail), nBytes);
  }

}
