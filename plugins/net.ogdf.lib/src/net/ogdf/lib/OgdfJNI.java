/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

class OgdfJNI {
  public final static native void MemElem_m_next_set(long jarg1, MemElem jarg1_, long jarg2, MemElem jarg2_);
  public final static native long MemElem_m_next_get(long jarg1, MemElem jarg1_);
  public final static native long new_MemElem();
  public final static native void delete_MemElem(long jarg1);
  public final static native void MemoryManager_m_freeList_set(long jarg1, MemoryManager jarg1_, long jarg2);
  public final static native long MemoryManager_m_freeList_get(long jarg1, MemoryManager jarg1_);
  public final static native long new_MemoryManager();
  public final static native void delete_MemoryManager(long jarg1);
  public final static native void MemoryManager_init(long jarg1, MemoryManager jarg1_);
  public final static native void MemoryManager_cleanup(long jarg1, MemoryManager jarg1_);
  public final static native void MemoryManager_allocateBlock(long jarg1, MemoryManager jarg1_, long jarg2);
  public final static native long MemoryManager_allocate(long jarg1, MemoryManager jarg1_, long jarg2);
  public final static native void MemoryManager_deallocate(long jarg1, MemoryManager jarg1_, long jarg2, long jarg3);
  public final static native void MemoryManager_deallocateList(long jarg1, MemoryManager jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_SimpleMemoryManager();
  public final static native void delete_SimpleMemoryManager(long jarg1);
  public final static native void SimpleMemoryManager_init(long jarg1, SimpleMemoryManager jarg1_);
  public final static native void SimpleMemoryManager_cleanup(long jarg1, SimpleMemoryManager jarg1_);
  public final static native long SimpleMemoryManager_allocate(long jarg1, SimpleMemoryManager jarg1_, long jarg2);
  public final static native void SimpleMemoryManager_deallocate(long jarg1, SimpleMemoryManager jarg1_, long jarg2, long jarg3);
  public final static native void SimpleMemoryManager_deallocateList(long jarg1, SimpleMemoryManager jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void g_memory_set(long jarg1, MemoryManager jarg1_);
  public final static native long g_memory_get();
  public final static native boolean DIsEqual__SWIG_0(double jarg1, double jarg2, double jarg3);
  public final static native boolean DIsEqual__SWIG_1(double jarg1, double jarg2);
  public final static native boolean DIsGreaterEqual__SWIG_0(double jarg1, double jarg2, double jarg3);
  public final static native boolean DIsGreaterEqual__SWIG_1(double jarg1, double jarg2);
  public final static native boolean DIsGreater__SWIG_0(double jarg1, double jarg2, double jarg3);
  public final static native boolean DIsGreater__SWIG_1(double jarg1, double jarg2);
  public final static native boolean DIsLessEqual__SWIG_0(double jarg1, double jarg2, double jarg3);
  public final static native boolean DIsLessEqual__SWIG_1(double jarg1, double jarg2);
  public final static native boolean DIsLess__SWIG_0(double jarg1, double jarg2, double jarg3);
  public final static native boolean DIsLess__SWIG_1(double jarg1, double jarg2);
  public final static native double DRound__SWIG_0(double jarg1, int jarg2);
  public final static native double DRound__SWIG_1(double jarg1);
  public final static native long new_IPoint__SWIG_0();
  public final static native long new_IPoint__SWIG_1(int jarg1, int jarg2);
  public final static native long new_IPoint__SWIG_2(long jarg1, IPoint jarg1_);
  public final static native double IPoint_distance(long jarg1, IPoint jarg1_, long jarg2, IPoint jarg2_);
  public final static native void delete_IPoint(long jarg1);
  public final static native long new_IPolyline__SWIG_0();
  public final static native long new_IPolyline__SWIG_1(long jarg1, IPolyline jarg1_);
  public final static native double IPolyline_length(long jarg1, IPolyline jarg1_);
  public final static native void delete_IPolyline(long jarg1);
  public final static native long new_DPoint__SWIG_0();
  public final static native long new_DPoint__SWIG_1(double jarg1, double jarg2);
  public final static native long new_DPoint__SWIG_2(long jarg1, DPoint jarg1_);
  public final static native double DPoint_distance(long jarg1, DPoint jarg1_, long jarg2, DPoint jarg2_);
  public final static native void delete_DPoint(long jarg1);
  public final static native long new_DVector__SWIG_0();
  public final static native long new_DVector__SWIG_1(double jarg1, double jarg2);
  public final static native long new_DVector__SWIG_2(long jarg1, DVector jarg1_);
  public final static native double DVector_length(long jarg1, DVector jarg1_);
  public final static native void delete_DVector(long jarg1);
  public final static native long new_DPolyline__SWIG_0();
  public final static native long new_DPolyline__SWIG_1(long jarg1, DPolyline jarg1_);
  public final static native double DPolyline_length(long jarg1, DPolyline jarg1_);
  public final static native long DPolyline_position__SWIG_0(long jarg1, DPolyline jarg1_, double jarg2, double jarg3);
  public final static native long DPolyline_position__SWIG_1(long jarg1, DPolyline jarg1_, double jarg2);
  public final static native void DPolyline_writeGML__SWIG_0(long jarg1, DPolyline jarg1_, String jarg2);
  public final static native void DPolyline_writeGML__SWIG_1(long jarg1, DPolyline jarg1_, long jarg2);
  public final static native void DPolyline_unify(long jarg1, DPolyline jarg1_);
  public final static native void DPolyline_normalize(long jarg1, DPolyline jarg1_);
  public final static native void DPolyline_convertToInt(long jarg1, DPolyline jarg1_);
  public final static native void delete_DPolyline(long jarg1);
  public final static native long new_DLine__SWIG_0();
  public final static native long new_DLine__SWIG_1(long jarg1, DPoint jarg1_, long jarg2, DPoint jarg2_);
  public final static native long new_DLine__SWIG_2(long jarg1, DLine jarg1_);
  public final static native long new_DLine__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native long DLine_start(long jarg1, DLine jarg1_);
  public final static native long DLine_end(long jarg1, DLine jarg1_);
  public final static native double DLine_dx(long jarg1, DLine jarg1_);
  public final static native double DLine_dy(long jarg1, DLine jarg1_);
  public final static native double DLine_slope(long jarg1, DLine jarg1_);
  public final static native double DLine_yAbs(long jarg1, DLine jarg1_);
  public final static native boolean DLine_isVertical(long jarg1, DLine jarg1_);
  public final static native boolean DLine_isHorizontal(long jarg1, DLine jarg1_);
  public final static native boolean DLine_intersection__SWIG_0(long jarg1, DLine jarg1_, long jarg2, DLine jarg2_, long jarg3, DPoint jarg3_, boolean jarg4);
  public final static native boolean DLine_intersection__SWIG_1(long jarg1, DLine jarg1_, long jarg2, DLine jarg2_, long jarg3, DPoint jarg3_);
  public final static native boolean DLine_contains(long jarg1, DLine jarg1_, long jarg2, DPoint jarg2_);
  public final static native double DLine_length(long jarg1, DLine jarg1_);
  public final static native int DLine_horIntersection(long jarg1, DLine jarg1_, double jarg2, long jarg3);
  public final static native int DLine_verIntersection(long jarg1, DLine jarg1_, double jarg2, long jarg3);
  public final static native void delete_DLine(long jarg1);
  public final static native long new_DRect__SWIG_0();
  public final static native long new_DRect__SWIG_1(long jarg1, DPoint jarg1_, long jarg2, DPoint jarg2_);
  public final static native long new_DRect__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native long new_DRect__SWIG_3(long jarg1, DLine jarg1_);
  public final static native long new_DRect__SWIG_4(long jarg1, DRect jarg1_);
  public final static native double DRect_width(long jarg1, DRect jarg1_);
  public final static native double DRect_height(long jarg1, DRect jarg1_);
  public final static native void DRect_normalize(long jarg1, DRect jarg1_);
  public final static native long DRect_p1(long jarg1, DRect jarg1_);
  public final static native long DRect_p2(long jarg1, DRect jarg1_);
  public final static native long DRect_topLine(long jarg1, DRect jarg1_);
  public final static native long DRect_rightLine(long jarg1, DRect jarg1_);
  public final static native long DRect_leftLine(long jarg1, DRect jarg1_);
  public final static native long DRect_bottomLine(long jarg1, DRect jarg1_);
  public final static native void DRect_yInvert(long jarg1, DRect jarg1_);
  public final static native void DRect_xInvert(long jarg1, DRect jarg1_);
  public final static native boolean DRect_contains(long jarg1, DRect jarg1_, long jarg2, DPoint jarg2_);
  public final static native void delete_DRect(long jarg1);
  public final static native long new_DScaler(long jarg1, DRect jarg1_, long jarg2, DRect jarg2_);
  public final static native void delete_DScaler(long jarg1);
  public final static native long DScaler_from(long jarg1, DScaler jarg1_);
  public final static native long DScaler_to(long jarg1, DScaler jarg1_);
  public final static native double DScaler_scaleToX(long jarg1, DScaler jarg1_, double jarg2);
  public final static native double DScaler_scaleToY(long jarg1, DScaler jarg1_, double jarg2);
  public final static native double DScaler_scaleWidth(long jarg1, DScaler jarg1_, double jarg2);
  public final static native double DScaler_scaleHeight(long jarg1, DScaler jarg1_, double jarg2);
  public final static native long new_DSegment__SWIG_0();
  public final static native long new_DSegment__SWIG_1(long jarg1, DPoint jarg1_, long jarg2, DPoint jarg2_);
  public final static native long new_DSegment__SWIG_2(long jarg1, DLine jarg1_);
  public final static native long new_DSegment__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native long new_DSegment__SWIG_4(long jarg1, DSegment jarg1_);
  public final static native double DSegment_det(long jarg1, DSegment jarg1_, long jarg2, DSegment jarg2_);
  public final static native void delete_DSegment(long jarg1);
  public final static native long new_DPolygon__SWIG_0(boolean jarg1);
  public final static native long new_DPolygon__SWIG_1();
  public final static native long new_DPolygon__SWIG_2(long jarg1, DRect jarg1_, boolean jarg2);
  public final static native long new_DPolygon__SWIG_3(long jarg1, DRect jarg1_);
  public final static native long new_DPolygon__SWIG_4(long jarg1, DPolygon jarg1_);
  public final static native boolean DPolygon_counterclock(long jarg1, DPolygon jarg1_);
  public final static native long DPolygon_segment(long jarg1, DPolygon jarg1_, long jarg2);
  public final static native long DPolygon_insertPoint__SWIG_0(long jarg1, DPolygon jarg1_, long jarg2, DPoint jarg2_);
  public final static native long DPolygon_insertPoint__SWIG_1(long jarg1, DPolygon jarg1_, long jarg2, DPoint jarg2_, long jarg3, long jarg4);
  public final static native void DPolygon_insertCrossPoint(long jarg1, DPolygon jarg1_, long jarg2, DPoint jarg2_);
  public final static native int DPolygon_getCrossPoints(long jarg1, DPolygon jarg1_, long jarg2, DPolygon jarg2_, long jarg3);
  public final static native void DPolygon_unify(long jarg1, DPolygon jarg1_);
  public final static native void DPolygon_normalize(long jarg1, DPolygon jarg1_);
  public final static native void DPolygon_writeGML__SWIG_0(long jarg1, DPolygon jarg1_, String jarg2);
  public final static native void DPolygon_writeGML__SWIG_1(long jarg1, DPolygon jarg1_, long jarg2);
  public final static native void delete_DPolygon(long jarg1);
  public final static native long new_GraphElement();
  public final static native void delete_GraphElement(long jarg1);
  public final static native long new_GraphListBase();
  public final static native void delete_GraphListBase(long jarg1);
  public final static native void GraphListBase_pushBack(long jarg1, GraphListBase jarg1_, long jarg2, GraphElement jarg2_);
  public final static native void GraphListBase_insertAfter(long jarg1, GraphListBase jarg1_, long jarg2, GraphElement jarg2_, long jarg3, GraphElement jarg3_);
  public final static native void GraphListBase_insertBefore(long jarg1, GraphListBase jarg1_, long jarg2, GraphElement jarg2_, long jarg3, GraphElement jarg3_);
  public final static native void GraphListBase_del(long jarg1, GraphListBase jarg1_, long jarg2, GraphElement jarg2_);
  public final static native void GraphListBase_reverse(long jarg1, GraphListBase jarg1_);
  public final static native void GraphListBase_swap(long jarg1, GraphListBase jarg1_, long jarg2, GraphElement jarg2_, long jarg3, GraphElement jarg3_);
  public final static native boolean GraphListBase_consistencyCheck(long jarg1, GraphListBase jarg1_);
  public final static native long AdjElement_theEdge(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_theNode(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_twin(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_twinNode(long jarg1, AdjElement jarg1_);
  public final static native int AdjElement_index(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_clockwiseFaceSucc(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_clockwiseFacePred(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_counterClockwiseFaceSucc(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_counterClockwiseFacePred(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_faceCycleSucc(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_faceCyclePred(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_succ(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_pred(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_cyclicSucc(long jarg1, AdjElement jarg1_);
  public final static native long AdjElement_cyclicPred(long jarg1, AdjElement jarg1_);
  public final static native void delete_AdjElement(long jarg1);
  public final static native int NodeElement_index(long jarg1, NodeElement jarg1_);
  public final static native int NodeElement_indeg(long jarg1, NodeElement jarg1_);
  public final static native int NodeElement_outdeg(long jarg1, NodeElement jarg1_);
  public final static native int NodeElement_degree(long jarg1, NodeElement jarg1_);
  public final static native long NodeElement_firstAdj(long jarg1, NodeElement jarg1_);
  public final static native long NodeElement_lastAdj(long jarg1, NodeElement jarg1_);
  public final static native long NodeElement_succ(long jarg1, NodeElement jarg1_);
  public final static native long NodeElement_pred(long jarg1, NodeElement jarg1_);
  public final static native void delete_NodeElement(long jarg1);
  public final static native boolean test_forall_adj_edges(long jarg1, AdjElement jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native int EdgeElement_index(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_source(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_target(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_adjSource(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_adjTarget(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_opposite(long jarg1, EdgeElement jarg1_, long jarg2, NodeElement jarg2_);
  public final static native boolean EdgeElement_isSelfLoop(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_succ(long jarg1, EdgeElement jarg1_);
  public final static native long EdgeElement_pred(long jarg1, EdgeElement jarg1_);
  public final static native boolean EdgeElement_isIncident(long jarg1, EdgeElement jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long EdgeElement_commonNode(long jarg1, EdgeElement jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void delete_EdgeElement(long jarg1);
  public final static native long new_Graph__SWIG_0();
  public final static native long new_Graph__SWIG_1(long jarg1, Graph jarg1_);
  public final static native void delete_Graph(long jarg1);
  public final static native boolean Graph_empty(long jarg1, Graph jarg1_);
  public final static native int Graph_numberOfNodes(long jarg1, Graph jarg1_);
  public final static native int Graph_numberOfEdges(long jarg1, Graph jarg1_);
  public final static native int Graph_maxNodeIndex(long jarg1, Graph jarg1_);
  public final static native int Graph_maxEdgeIndex(long jarg1, Graph jarg1_);
  public final static native int Graph_maxAdjEntryIndex(long jarg1, Graph jarg1_);
  public final static native int Graph_nodeArrayTableSize(long jarg1, Graph jarg1_);
  public final static native int Graph_edgeArrayTableSize(long jarg1, Graph jarg1_);
  public final static native int Graph_adjEntryArrayTableSize(long jarg1, Graph jarg1_);
  public final static native long Graph_firstNode(long jarg1, Graph jarg1_);
  public final static native long Graph_lastNode(long jarg1, Graph jarg1_);
  public final static native long Graph_firstEdge(long jarg1, Graph jarg1_);
  public final static native long Graph_lastEdge(long jarg1, Graph jarg1_);
  public final static native long Graph_chooseNode(long jarg1, Graph jarg1_);
  public final static native long Graph_chooseEdge(long jarg1, Graph jarg1_);
  public final static native long Graph_newNode__SWIG_0(long jarg1, Graph jarg1_);
  public final static native long Graph_newNode__SWIG_1(long jarg1, Graph jarg1_, int jarg2);
  public final static native long Graph_newEdge__SWIG_0(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native long Graph_newEdge__SWIG_1(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_, long jarg3, NodeElement jarg3_, int jarg4);
  public final static native long Graph_newEdge__SWIG_2(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_, long jarg4);
  public final static native long Graph_newEdge__SWIG_3(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native long Graph_newEdge__SWIG_4(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native long Graph_newEdge__SWIG_5(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native void Graph_delNode(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_);
  public final static native void Graph_delEdge(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_clear(long jarg1, Graph jarg1_);
  public final static native void Graph_hideEdge(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_restoreEdge(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_restoreAllEdges(long jarg1, Graph jarg1_);
  public final static native long Graph_split(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_unsplit__SWIG_0(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_);
  public final static native void Graph_unsplit__SWIG_1(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, EdgeElement jarg3_);
  public final static native long Graph_splitNode(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native long Graph_contract(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_move(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, AdjElement jarg3_, long jarg4, long jarg5, AdjElement jarg5_, long jarg6);
  public final static native void Graph_moveTarget__SWIG_0(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native void Graph_moveTarget__SWIG_1(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, AdjElement jarg3_, long jarg4);
  public final static native void Graph_moveSource__SWIG_0(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native void Graph_moveSource__SWIG_1(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, AdjElement jarg3_, long jarg4);
  public final static native long Graph_searchEdge(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native void Graph_reverseEdge(long jarg1, Graph jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void Graph_reverseAllEdges(long jarg1, Graph jarg1_);
  public final static native void Graph_reverseAdjEdges__SWIG_0(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_);
  public final static native void Graph_moveAdj(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, long jarg4, AdjElement jarg4_);
  public final static native void Graph_moveAdjAfter(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native void Graph_moveAdjBefore(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native void Graph_reverseAdjEdges__SWIG_1(long jarg1, Graph jarg1_);
  public final static native void Graph_swapAdjEdges(long jarg1, Graph jarg1_, long jarg2, AdjElement jarg2_, long jarg3, AdjElement jarg3_);
  public final static native boolean Graph_readGML__SWIG_0(long jarg1, Graph jarg1_, String jarg2);
  public final static native boolean Graph_readGML__SWIG_1(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_writeGML__SWIG_0(long jarg1, Graph jarg1_, String jarg2);
  public final static native void Graph_writeGML__SWIG_1(long jarg1, Graph jarg1_, long jarg2);
  public final static native boolean Graph_readLEDAGraph__SWIG_0(long jarg1, Graph jarg1_, String jarg2);
  public final static native boolean Graph_readLEDAGraph__SWIG_1(long jarg1, Graph jarg1_, long jarg2);
  public final static native int Graph_genus(long jarg1, Graph jarg1_);
  public final static native boolean Graph_representsCombEmbedding(long jarg1, Graph jarg1_);
  public final static native boolean Graph_consistencyCheck(long jarg1, Graph jarg1_);
  public final static native long Graph_registerArray__SWIG_0(long jarg1, Graph jarg1_, long jarg2);
  public final static native long Graph_registerArray__SWIG_1(long jarg1, Graph jarg1_, long jarg2);
  public final static native long Graph_registerArray__SWIG_2(long jarg1, Graph jarg1_, long jarg2);
  public final static native long Graph_registerStructure(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_unregisterArray__SWIG_0(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_unregisterArray__SWIG_1(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_unregisterArray__SWIG_2(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_unregisterStructure(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_resetEdgeIdCount(long jarg1, Graph jarg1_, int jarg2);
  public final static native int Graph_nextPower2(int jarg1, int jarg2);
  public final static native int BucketSourceIndex_getBucket(long jarg1, BucketSourceIndex jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native long new_BucketSourceIndex();
  public final static native void delete_BucketSourceIndex(long jarg1);
  public final static native int BucketTargetIndex_getBucket(long jarg1, BucketTargetIndex jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native long new_BucketTargetIndex();
  public final static native void delete_BucketTargetIndex(long jarg1);
  public final static native int GraphAttributes_intToStyle(int jarg1);
  public final static native int GraphAttributes_intToPattern(int jarg1);
  public final static native long new_GraphAttributes__SWIG_0();
  public final static native long new_GraphAttributes__SWIG_1(long jarg1, Graph jarg1_, int jarg2);
  public final static native long new_GraphAttributes__SWIG_2(long jarg1, Graph jarg1_);
  public final static native void delete_GraphAttributes(long jarg1);
  public final static native void GraphAttributes_init(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, int jarg3);
  public final static native int GraphAttributes_attributes(long jarg1, GraphAttributes jarg1_);
  public final static native void GraphAttributes_initAttributes(long jarg1, GraphAttributes jarg1_, int jarg2);
  public final static native void GraphAttributes_destroyAttributes(long jarg1, GraphAttributes jarg1_, int jarg2);
  public final static native long GraphAttributes_constGraph(long jarg1, GraphAttributes jarg1_);
  public final static native long GraphAttributes_templateNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_x__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_y__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_width__SWIG_0(long jarg1, GraphAttributes jarg1_);
  public final static native double GraphAttributes_width__SWIG_2(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_height__SWIG_0(long jarg1, GraphAttributes jarg1_);
  public final static native double GraphAttributes_height__SWIG_2(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_level__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_nodePattern__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_styleNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_lineWidthNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_nodeLine__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_bends__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native int GraphAttributes_intWeight__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native double GraphAttributes_doubleWeight__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native double GraphAttributes_edgeWidth__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native long GraphAttributes_colorNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_shapeNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_labelNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native long GraphAttributes_labelEdge__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native int GraphAttributes_type__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native int GraphAttributes_type__SWIG_2(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_idNode__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_arrowEdge__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native int GraphAttributes_styleEdge__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native long GraphAttributes_colorEdge__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native long GraphAttributes_subGraphBits__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native boolean GraphAttributes_inSubGraph(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_, int jarg3);
  public final static native void GraphAttributes_addSubGraph(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_, int jarg3);
  public final static native void GraphAttributes_removeSubGraph(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_, int jarg3);
  public final static native long GraphAttributes_boundingBox(long jarg1, GraphAttributes jarg1_);
  public final static native boolean GraphAttributes_isAssociationClass(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native void GraphAttributes_addNodeCenter2Bends__SWIG_0(long jarg1, GraphAttributes jarg1_, int jarg2);
  public final static native void GraphAttributes_addNodeCenter2Bends__SWIG_1(long jarg1, GraphAttributes jarg1_);
  public final static native void GraphAttributes_clearAllBends(long jarg1, GraphAttributes jarg1_);
  public final static native int GraphAttributes_hierarchyList__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native int GraphAttributes_hierarchyList__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native void GraphAttributes_setAllWidth(long jarg1, GraphAttributes jarg1_, double jarg2);
  public final static native void GraphAttributes_setAllHeight(long jarg1, GraphAttributes jarg1_, double jarg2);
  public final static native boolean GraphAttributes_readGML__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native boolean GraphAttributes_readGML__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native void GraphAttributes_writeGML__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native void GraphAttributes_writeGML__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native boolean GraphAttributes_readXML__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native boolean GraphAttributes_readXML__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native void GraphAttributes_writeXML__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, String jarg3, String jarg4);
  public final static native void GraphAttributes_writeXML__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2, String jarg3);
  public final static native void GraphAttributes_writeXML__SWIG_2(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native void GraphAttributes_writeXML__SWIG_3(long jarg1, GraphAttributes jarg1_, long jarg2, String jarg3, String jarg4);
  public final static native void GraphAttributes_writeXML__SWIG_4(long jarg1, GraphAttributes jarg1_, long jarg2, String jarg3);
  public final static native void GraphAttributes_writeXML__SWIG_5(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native boolean GraphAttributes_readRudy__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native boolean GraphAttributes_readRudy__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2, Graph jarg2_, long jarg3);
  public final static native void GraphAttributes_writeRudy__SWIG_0(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native void GraphAttributes_writeRudy__SWIG_1(long jarg1, GraphAttributes jarg1_, long jarg2);
  public final static native void GraphAttributes_removeUnnecessaryBendsHV(long jarg1, GraphAttributes jarg1_);
  public final static native void delete_LayoutModule(long jarg1);
  public final static native void LayoutModule_call(long jarg1, LayoutModule jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native long new_SugiyamaLayout();
  public final static native void delete_SugiyamaLayout(long jarg1);
  public final static native void SugiyamaLayout_call__SWIG_0(long jarg1, SugiyamaLayout jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native void SugiyamaLayout_call__SWIG_1(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native void SugiyamaLayout_call__SWIG_2(long jarg1, SugiyamaLayout jarg1_, long jarg2, GraphAttributes jarg2_, long jarg3);
  public final static native void SugiyamaLayout_callUML(long jarg1, SugiyamaLayout jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native int SugiyamaLayout_fails__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_fails__SWIG_1(long jarg1, SugiyamaLayout jarg1_, int jarg2);
  public final static native int SugiyamaLayout_runs__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_runs__SWIG_1(long jarg1, SugiyamaLayout jarg1_, int jarg2);
  public final static native boolean SugiyamaLayout_transpose__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_transpose__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native boolean SugiyamaLayout_arrangeCCs__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_arrangeCCs__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native double SugiyamaLayout_minDistCC__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_minDistCC__SWIG_1(long jarg1, SugiyamaLayout jarg1_, double jarg2);
  public final static native double SugiyamaLayout_pageRatio__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_pageRatio__SWIG_1(long jarg1, SugiyamaLayout jarg1_, double jarg2);
  public final static native boolean SugiyamaLayout_alignBaseClasses__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_alignBaseClasses__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native boolean SugiyamaLayout_alignSiblings__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_alignSiblings__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native void SugiyamaLayout_setSubgraphs(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native boolean SugiyamaLayout_useSubgraphs(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_setRanking(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native void SugiyamaLayout_setCrossMin(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native void SugiyamaLayout_setLayout(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native void SugiyamaLayout_setClusterLayout(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native void SugiyamaLayout_setPacker(long jarg1, SugiyamaLayout jarg1_, long jarg2);
  public final static native int SugiyamaLayout_numberOfCrossings(long jarg1, SugiyamaLayout jarg1_);
  public final static native long SugiyamaLayout_numberOfCrossingsCluster(long jarg1, SugiyamaLayout jarg1_);
  public final static native long SWIGDVectorUpcast(long jarg1);
  public final static native long SWIGDSegmentUpcast(long jarg1);
  public final static native long SWIGDPolygonUpcast(long jarg1);
  public final static native long SWIGSugiyamaLayoutUpcast(long jarg1);
}
