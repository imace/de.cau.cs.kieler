/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

class OgdfJNI {

    static {
        try {
            System.loadLibrary("ogdf");
        } catch (UnsatisfiedLinkError e) {
            System.err.println("Failed to load native 'ogdf' library. \n" + e);
        }
    }

  public final static native long new_DPoint__SWIG_0();
  public final static native long new_DPoint__SWIG_1(double jarg1, double jarg2);
  public final static native double DPoint_getX(long jarg1, DPoint jarg1_);
  public final static native double DPoint_getY(long jarg1, DPoint jarg1_);
  public final static native void delete_DPoint(long jarg1);
  public final static native long new_DRect__SWIG_0();
  public final static native long new_DRect__SWIG_1(long jarg1, DPoint jarg1_, long jarg2, DPoint jarg2_);
  public final static native long new_DRect__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native double DRect_width(long jarg1, DRect jarg1_);
  public final static native double DRect_height(long jarg1, DRect jarg1_);
  public final static native long DRect_p1(long jarg1, DRect jarg1_);
  public final static native long DRect_p2(long jarg1, DRect jarg1_);
  public final static native boolean DRect_contains(long jarg1, DRect jarg1_, long jarg2, DPoint jarg2_);
  public final static native void delete_DRect(long jarg1);
  public final static native long new_DPointListConstIterator();
  public final static native boolean DPointListConstIterator_hasNext(long jarg1, DPointListConstIterator jarg1_);
  public final static native long DPointListConstIterator_next(long jarg1, DPointListConstIterator jarg1_);
  public final static native void DPointListConstIterator_remove(long jarg1, DPointListConstIterator jarg1_);
  public final static native void delete_DPointListConstIterator(long jarg1);
  public final static native long new_EdgeElementListConstIterator();
  public final static native boolean EdgeElementListConstIterator_hasNext(long jarg1, EdgeElementListConstIterator jarg1_);
  public final static native long EdgeElementListConstIterator_next(long jarg1, EdgeElementListConstIterator jarg1_);
  public final static native void EdgeElementListConstIterator_remove(long jarg1, EdgeElementListConstIterator jarg1_);
  public final static native void delete_EdgeElementListConstIterator(long jarg1);
  public final static native long new_DPointList();
  public final static native boolean DPointList_empty(long jarg1, DPointList jarg1_);
  public final static native int DPointList_size(long jarg1, DPointList jarg1_);
  public final static native long DPointList_iterator(long jarg1, DPointList jarg1_);
  public final static native void delete_DPointList(long jarg1);
  public final static native long new_EdgeElementList();
  public final static native boolean EdgeElementList_empty(long jarg1, EdgeElementList jarg1_);
  public final static native int EdgeElementList_size(long jarg1, EdgeElementList jarg1_);
  public final static native long EdgeElementList_iterator(long jarg1, EdgeElementList jarg1_);
  public final static native void delete_EdgeElementList(long jarg1);
  public final static native void delete_DPolyline(long jarg1);
  public final static native void delete_NodeElement(long jarg1);
  public final static native void delete_EdgeElement(long jarg1);
  public final static native long new_Graph();
  public final static native long Graph_newNode(long jarg1, Graph jarg1_);
  public final static native long Graph_newEdge(long jarg1, Graph jarg1_, long jarg2, NodeElement jarg2_, long jarg3, NodeElement jarg3_);
  public final static native void delete_Graph(long jarg1);
  public final static native long new_GraphAttributes__SWIG_0(long jarg1, Graph jarg1_, int jarg2);
  public final static native long new_GraphAttributes__SWIG_1(long jarg1, Graph jarg1_);
  public final static native long GraphAttributes_bends(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void GraphAttributes_addNodeCenter2Bends(long jarg1, GraphAttributes jarg1_, int jarg2);
  public final static native long GraphAttributes_boundingBox(long jarg1, GraphAttributes jarg1_);
  public final static native void GraphAttributes_setNodeWidth(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_, double jarg3);
  public final static native void GraphAttributes_setNodeHeight(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_, double jarg3);
  public final static native void GraphAttributes_setNodeX(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_, double jarg3);
  public final static native void GraphAttributes_setNodeY(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_, double jarg3);
  public final static native void GraphAttributes_setEdgeType(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_, int jarg3);
  public final static native double GraphAttributes_getNodeWidth(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_getNodeHeight(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_getNodeX(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native double GraphAttributes_getNodeY(long jarg1, GraphAttributes jarg1_, long jarg2, NodeElement jarg2_);
  public final static native int GraphAttributes_getEdgeType(long jarg1, GraphAttributes jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void delete_GraphAttributes(long jarg1);
  public final static native long new_UMLGraph__SWIG_0(long jarg1, Graph jarg1_, int jarg2);
  public final static native long new_UMLGraph__SWIG_1(long jarg1, Graph jarg1_);
  public final static native void delete_UMLGraph(long jarg1);
  public final static native long new_EdgeLabelDouble();
  public final static native void EdgeLabelDouble_setX(long jarg1, EdgeLabelDouble jarg1_, int jarg2, double jarg3);
  public final static native void EdgeLabelDouble_setY(long jarg1, EdgeLabelDouble jarg1_, int jarg2, double jarg3);
  public final static native void EdgeLabelDouble_setHeight(long jarg1, EdgeLabelDouble jarg1_, int jarg2, double jarg3);
  public final static native void EdgeLabelDouble_setWidth(long jarg1, EdgeLabelDouble jarg1_, int jarg2, double jarg3);
  public final static native void EdgeLabelDouble_setEdge(long jarg1, EdgeLabelDouble jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void EdgeLabelDouble_addType(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native double EdgeLabelDouble_getX(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native double EdgeLabelDouble_getY(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native double EdgeLabelDouble_getWidth(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native double EdgeLabelDouble_getHeight(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native long EdgeLabelDouble_theEdge(long jarg1, EdgeLabelDouble jarg1_);
  public final static native boolean EdgeLabelDouble_usedLabel__SWIG_0(long jarg1, EdgeLabelDouble jarg1_, int jarg2);
  public final static native int EdgeLabelDouble_usedLabel__SWIG_1(long jarg1, EdgeLabelDouble jarg1_);
  public final static native void delete_EdgeLabelDouble(long jarg1);
  public final static native long new_ELabelInterfaceDouble(long jarg1, GraphAttributes jarg1_);
  public final static native void ELabelInterfaceDouble_setLabel(long jarg1, ELabelInterfaceDouble jarg1_, long jarg2, EdgeElement jarg2_, long jarg3, EdgeLabelDouble jarg3_);
  public final static native long ELabelInterfaceDouble_getLabel(long jarg1, ELabelInterfaceDouble jarg1_, long jarg2, EdgeElement jarg2_);
  public final static native void delete_ELabelInterfaceDouble(long jarg1);
  public final static native long new_ELabelPosSimple();
  public final static native void ELabelPosSimple_call(long jarg1, ELabelPosSimple jarg1_, long jarg2, GraphAttributes jarg2_, long jarg3, ELabelInterfaceDouble jarg3_);
  public final static native boolean ELabelPosSimple_getAbsolute(long jarg1, ELabelPosSimple jarg1_);
  public final static native double ELabelPosSimple_getMarginDistance(long jarg1, ELabelPosSimple jarg1_);
  public final static native double ELabelPosSimple_getEdgeDistance(long jarg1, ELabelPosSimple jarg1_);
  public final static native boolean ELabelPosSimple_getMidOnEdge(long jarg1, ELabelPosSimple jarg1_);
  public final static native void ELabelPosSimple_setAbsolute(long jarg1, ELabelPosSimple jarg1_, boolean jarg2);
  public final static native void ELabelPosSimple_setMarginDistance(long jarg1, ELabelPosSimple jarg1_, double jarg2);
  public final static native void ELabelPosSimple_setEdgeDistance(long jarg1, ELabelPosSimple jarg1_, double jarg2);
  public final static native void ELabelPosSimple_setMidOnEdge(long jarg1, ELabelPosSimple jarg1_, boolean jarg2);
  public final static native void delete_ELabelPosSimple(long jarg1);
  public final static native void delete_HierarchyLayoutModule(long jarg1);
  public final static native long new_FastHierarchyLayout();
  public final static native void delete_FastHierarchyLayout(long jarg1);
  public final static native double FastHierarchyLayout_nodeDistance__SWIG_0(long jarg1, FastHierarchyLayout jarg1_);
  public final static native void FastHierarchyLayout_nodeDistance__SWIG_1(long jarg1, FastHierarchyLayout jarg1_, double jarg2);
  public final static native double FastHierarchyLayout_layerDistance__SWIG_0(long jarg1, FastHierarchyLayout jarg1_);
  public final static native void FastHierarchyLayout_layerDistance__SWIG_1(long jarg1, FastHierarchyLayout jarg1_, double jarg2);
  public final static native boolean FastHierarchyLayout_fixedLayerDistance__SWIG_0(long jarg1, FastHierarchyLayout jarg1_);
  public final static native void FastHierarchyLayout_fixedLayerDistance__SWIG_1(long jarg1, FastHierarchyLayout jarg1_, boolean jarg2);
  public final static native void delete_PlanarSubgraphModule(long jarg1);
  public final static native long new_FastPlanarSubgraph();
  public final static native int FastPlanarSubgraph_runs__SWIG_0(long jarg1, FastPlanarSubgraph jarg1_);
  public final static native void FastPlanarSubgraph_runs__SWIG_1(long jarg1, FastPlanarSubgraph jarg1_, int jarg2);
  public final static native void delete_FastPlanarSubgraph(long jarg1);
  public final static native void delete_LayoutPlanRepModule(long jarg1);
  public final static native long new_OrthoLayout();
  public final static native double OrthoLayout_separation__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_separation__SWIG_1(long jarg1, OrthoLayout jarg1_, double jarg2);
  public final static native double OrthoLayout_cOverhang__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_cOverhang__SWIG_1(long jarg1, OrthoLayout jarg1_, double jarg2);
  public final static native double OrthoLayout_margin__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_margin__SWIG_1(long jarg1, OrthoLayout jarg1_, double jarg2);
  public final static native int OrthoLayout_preferedDir__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_preferedDir__SWIG_1(long jarg1, OrthoLayout jarg1_, int jarg2);
  public final static native int OrthoLayout_costAssoc__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_costAssoc__SWIG_1(long jarg1, OrthoLayout jarg1_, int jarg2);
  public final static native int OrthoLayout_costGen__SWIG_0(long jarg1, OrthoLayout jarg1_);
  public final static native void OrthoLayout_costGen__SWIG_1(long jarg1, OrthoLayout jarg1_, int jarg2);
  public final static native void delete_OrthoLayout(long jarg1);
  public final static native void LayoutModule_call(long jarg1, LayoutModule jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native void delete_LayoutModule(long jarg1);
  public final static native void UMLLayoutModule_call(long jarg1, UMLLayoutModule jarg1_, long jarg2, UMLGraph jarg2_);
  public final static native void delete_UMLLayoutModule(long jarg1);
  public final static native long new_SugiyamaLayout();
  public final static native void SugiyamaLayout_call(long jarg1, SugiyamaLayout jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native int SugiyamaLayout_fails__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_fails__SWIG_1(long jarg1, SugiyamaLayout jarg1_, int jarg2);
  public final static native int SugiyamaLayout_runs__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_runs__SWIG_1(long jarg1, SugiyamaLayout jarg1_, int jarg2);
  public final static native boolean SugiyamaLayout_transpose__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_transpose__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native boolean SugiyamaLayout_arrangeCCs__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_arrangeCCs__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native double SugiyamaLayout_minDistCC__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_minDistCC__SWIG_1(long jarg1, SugiyamaLayout jarg1_, double jarg2);
  public final static native double SugiyamaLayout_pageRatio__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_pageRatio__SWIG_1(long jarg1, SugiyamaLayout jarg1_, double jarg2);
  public final static native boolean SugiyamaLayout_alignBaseClasses__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_alignBaseClasses__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native boolean SugiyamaLayout_alignSiblings__SWIG_0(long jarg1, SugiyamaLayout jarg1_);
  public final static native void SugiyamaLayout_alignSiblings__SWIG_1(long jarg1, SugiyamaLayout jarg1_, boolean jarg2);
  public final static native void SugiyamaLayout_setLayout_(long jarg1, SugiyamaLayout jarg1_, long jarg2, HierarchyLayoutModule jarg2_);
  public final static native void delete_SugiyamaLayout(long jarg1);
  public final static native long new_PlanarizationLayout();
  public final static native void PlanarizationLayout_call__SWIG_0(long jarg1, PlanarizationLayout jarg1_, long jarg2, GraphAttributes jarg2_);
  public final static native void PlanarizationLayout_call__SWIG_1(long jarg1, PlanarizationLayout jarg1_, long jarg2, UMLGraph jarg2_);
  public final static native double PlanarizationLayout_pageRatio__SWIG_0(long jarg1, PlanarizationLayout jarg1_);
  public final static native void PlanarizationLayout_pageRatio__SWIG_1(long jarg1, PlanarizationLayout jarg1_, double jarg2);
  public final static native boolean PlanarizationLayout_preprocessCliques__SWIG_0(long jarg1, PlanarizationLayout jarg1_);
  public final static native void PlanarizationLayout_preprocessCliques__SWIG_1(long jarg1, PlanarizationLayout jarg1_, boolean jarg2);
  public final static native int PlanarizationLayout_minCliqueSize__SWIG_0(long jarg1, PlanarizationLayout jarg1_);
  public final static native void PlanarizationLayout_minCliqueSize__SWIG_1(long jarg1, PlanarizationLayout jarg1_, int jarg2);
  public final static native void PlanarizationLayout_setSubgraph_(long jarg1, PlanarizationLayout jarg1_, long jarg2, PlanarSubgraphModule jarg2_);
  public final static native void PlanarizationLayout_setPlanarLayouter_(long jarg1, PlanarizationLayout jarg1_, long jarg2, LayoutPlanRepModule jarg2_);
  public final static native void delete_PlanarizationLayout(long jarg1);
  public final static native long SWIGDPolylineUpcast(long jarg1);
  public final static native long SWIGUMLGraphUpcast(long jarg1);
  public final static native long SWIGFastHierarchyLayoutUpcast(long jarg1);
  public final static native long SWIGFastPlanarSubgraphUpcast(long jarg1);
  public final static native long SWIGOrthoLayoutUpcast(long jarg1);
  public final static native long SWIGUMLLayoutModuleUpcast(long jarg1);
  public final static native long SWIGSugiyamaLayoutUpcast(long jarg1);
  public final static native long SWIGPlanarizationLayoutUpcast(long jarg1);
}
