/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

public class Graph {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Graph(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Graph obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      OgdfJNI.delete_Graph(swigCPtr);
    }
    swigCPtr = 0;
  }

  public Graph() {
    this(OgdfJNI.new_Graph(), true);
  }

  public NodeElement newNode() {
    long cPtr = OgdfJNI.Graph_newNode(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public EdgeElement newEdge(NodeElement arg0, NodeElement arg1) {
    long cPtr = OgdfJNI.Graph_newEdge(swigCPtr, this, NodeElement.getCPtr(arg0), arg0, NodeElement.getCPtr(arg1), arg1);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public enum EdgeType {
    association(0),
    generalization(1),
    dependency(2);

    public final int swigValue() {
      return swigValue;
    }

    public static EdgeType swigToEnum(int swigValue) {
      EdgeType[] swigValues = EdgeType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (EdgeType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + EdgeType.class + " with value " + swigValue);
    }

    private EdgeType() {
      this.swigValue = SwigNext.next++;
    }

    private EdgeType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    private EdgeType(EdgeType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
