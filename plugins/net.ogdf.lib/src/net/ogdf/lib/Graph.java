/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

public class Graph {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Graph(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Graph obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgdfJNI.delete_Graph(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Graph() {
    this(OgdfJNI.new_Graph__SWIG_0(), true);
  }

  public Graph(Graph G) {
    this(OgdfJNI.new_Graph__SWIG_1(Graph.getCPtr(G), G), true);
  }

  public boolean empty() {
    return OgdfJNI.Graph_empty(swigCPtr, this);
  }

  public int numberOfNodes() {
    return OgdfJNI.Graph_numberOfNodes(swigCPtr, this);
  }

  public int numberOfEdges() {
    return OgdfJNI.Graph_numberOfEdges(swigCPtr, this);
  }

  public int maxNodeIndex() {
    return OgdfJNI.Graph_maxNodeIndex(swigCPtr, this);
  }

  public int maxEdgeIndex() {
    return OgdfJNI.Graph_maxEdgeIndex(swigCPtr, this);
  }

  public int maxAdjEntryIndex() {
    return OgdfJNI.Graph_maxAdjEntryIndex(swigCPtr, this);
  }

  public int nodeArrayTableSize() {
    return OgdfJNI.Graph_nodeArrayTableSize(swigCPtr, this);
  }

  public int edgeArrayTableSize() {
    return OgdfJNI.Graph_edgeArrayTableSize(swigCPtr, this);
  }

  public int adjEntryArrayTableSize() {
    return OgdfJNI.Graph_adjEntryArrayTableSize(swigCPtr, this);
  }

  public NodeElement firstNode() {
    long cPtr = OgdfJNI.Graph_firstNode(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public NodeElement lastNode() {
    long cPtr = OgdfJNI.Graph_lastNode(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public EdgeElement firstEdge() {
    long cPtr = OgdfJNI.Graph_firstEdge(swigCPtr, this);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement lastEdge() {
    long cPtr = OgdfJNI.Graph_lastEdge(swigCPtr, this);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public NodeElement chooseNode() {
    long cPtr = OgdfJNI.Graph_chooseNode(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public EdgeElement chooseEdge() {
    long cPtr = OgdfJNI.Graph_chooseEdge(swigCPtr, this);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public NodeElement newNode() {
    long cPtr = OgdfJNI.Graph_newNode__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public NodeElement newNode(int index) {
    long cPtr = OgdfJNI.Graph_newNode__SWIG_1(swigCPtr, this, index);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public EdgeElement newEdge(NodeElement v, NodeElement w) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_0(swigCPtr, this, NodeElement.getCPtr(v), v, NodeElement.getCPtr(w), w);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement newEdge(NodeElement v, NodeElement w, int index) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_1(swigCPtr, this, NodeElement.getCPtr(v), v, NodeElement.getCPtr(w), w, index);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement newEdge(AdjElement adjSrc, AdjElement adjTgt, SWIGTYPE_p_Direction dir) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_2(swigCPtr, this, AdjElement.getCPtr(adjSrc), adjSrc, AdjElement.getCPtr(adjTgt), adjTgt, SWIGTYPE_p_Direction.getCPtr(dir));
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement newEdge(AdjElement adjSrc, AdjElement adjTgt) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_3(swigCPtr, this, AdjElement.getCPtr(adjSrc), adjSrc, AdjElement.getCPtr(adjTgt), adjTgt);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement newEdge(NodeElement v, AdjElement adjTgt) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_4(swigCPtr, this, NodeElement.getCPtr(v), v, AdjElement.getCPtr(adjTgt), adjTgt);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public EdgeElement newEdge(AdjElement adjSrc, NodeElement w) {
    long cPtr = OgdfJNI.Graph_newEdge__SWIG_5(swigCPtr, this, AdjElement.getCPtr(adjSrc), adjSrc, NodeElement.getCPtr(w), w);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public void delNode(NodeElement v) {
    OgdfJNI.Graph_delNode(swigCPtr, this, NodeElement.getCPtr(v), v);
  }

  public void delEdge(EdgeElement e) {
    OgdfJNI.Graph_delEdge(swigCPtr, this, EdgeElement.getCPtr(e), e);
  }

  public void clear() {
    OgdfJNI.Graph_clear(swigCPtr, this);
  }

  public void hideEdge(EdgeElement e) {
    OgdfJNI.Graph_hideEdge(swigCPtr, this, EdgeElement.getCPtr(e), e);
  }

  public void restoreEdge(EdgeElement e) {
    OgdfJNI.Graph_restoreEdge(swigCPtr, this, EdgeElement.getCPtr(e), e);
  }

  public void restoreAllEdges() {
    OgdfJNI.Graph_restoreAllEdges(swigCPtr, this);
  }

  public EdgeElement split(EdgeElement e) {
    long cPtr = OgdfJNI.Graph_split(swigCPtr, this, EdgeElement.getCPtr(e), e);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public void unsplit(NodeElement u) {
    OgdfJNI.Graph_unsplit__SWIG_0(swigCPtr, this, NodeElement.getCPtr(u), u);
  }

  public void unsplit(EdgeElement eIn, EdgeElement eOut) {
    OgdfJNI.Graph_unsplit__SWIG_1(swigCPtr, this, EdgeElement.getCPtr(eIn), eIn, EdgeElement.getCPtr(eOut), eOut);
  }

  public NodeElement splitNode(AdjElement adjStartLeft, AdjElement adjStartRight) {
    long cPtr = OgdfJNI.Graph_splitNode(swigCPtr, this, AdjElement.getCPtr(adjStartLeft), adjStartLeft, AdjElement.getCPtr(adjStartRight), adjStartRight);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public NodeElement contract(EdgeElement e) {
    long cPtr = OgdfJNI.Graph_contract(swigCPtr, this, EdgeElement.getCPtr(e), e);
    return (cPtr == 0) ? null : new NodeElement(cPtr, false);
  }

  public void move(EdgeElement e, AdjElement adjSrc, SWIGTYPE_p_Direction dirSrc, AdjElement adjTgt, SWIGTYPE_p_Direction dirTgt) {
    OgdfJNI.Graph_move(swigCPtr, this, EdgeElement.getCPtr(e), e, AdjElement.getCPtr(adjSrc), adjSrc, SWIGTYPE_p_Direction.getCPtr(dirSrc), AdjElement.getCPtr(adjTgt), adjTgt, SWIGTYPE_p_Direction.getCPtr(dirTgt));
  }

  public void moveTarget(EdgeElement e, NodeElement w) {
    OgdfJNI.Graph_moveTarget__SWIG_0(swigCPtr, this, EdgeElement.getCPtr(e), e, NodeElement.getCPtr(w), w);
  }

  public void moveTarget(EdgeElement e, AdjElement adjTgt, SWIGTYPE_p_Direction dir) {
    OgdfJNI.Graph_moveTarget__SWIG_1(swigCPtr, this, EdgeElement.getCPtr(e), e, AdjElement.getCPtr(adjTgt), adjTgt, SWIGTYPE_p_Direction.getCPtr(dir));
  }

  public void moveSource(EdgeElement e, NodeElement w) {
    OgdfJNI.Graph_moveSource__SWIG_0(swigCPtr, this, EdgeElement.getCPtr(e), e, NodeElement.getCPtr(w), w);
  }

  public void moveSource(EdgeElement e, AdjElement adjSrc, SWIGTYPE_p_Direction dir) {
    OgdfJNI.Graph_moveSource__SWIG_1(swigCPtr, this, EdgeElement.getCPtr(e), e, AdjElement.getCPtr(adjSrc), adjSrc, SWIGTYPE_p_Direction.getCPtr(dir));
  }

  public EdgeElement searchEdge(NodeElement v, NodeElement w) {
    long cPtr = OgdfJNI.Graph_searchEdge(swigCPtr, this, NodeElement.getCPtr(v), v, NodeElement.getCPtr(w), w);
    return (cPtr == 0) ? null : new EdgeElement(cPtr, false);
  }

  public void reverseEdge(EdgeElement e) {
    OgdfJNI.Graph_reverseEdge(swigCPtr, this, EdgeElement.getCPtr(e), e);
  }

  public void reverseAllEdges() {
    OgdfJNI.Graph_reverseAllEdges(swigCPtr, this);
  }

  public void reverseAdjEdges(NodeElement v) {
    OgdfJNI.Graph_reverseAdjEdges__SWIG_0(swigCPtr, this, NodeElement.getCPtr(v), v);
  }

  public void moveAdj(AdjElement adjMove, SWIGTYPE_p_Direction dir, AdjElement adjPos) {
    OgdfJNI.Graph_moveAdj(swigCPtr, this, AdjElement.getCPtr(adjMove), adjMove, SWIGTYPE_p_Direction.getCPtr(dir), AdjElement.getCPtr(adjPos), adjPos);
  }

  public void moveAdjAfter(AdjElement adjMove, AdjElement adjAfter) {
    OgdfJNI.Graph_moveAdjAfter(swigCPtr, this, AdjElement.getCPtr(adjMove), adjMove, AdjElement.getCPtr(adjAfter), adjAfter);
  }

  public void moveAdjBefore(AdjElement adjMove, AdjElement adjBefore) {
    OgdfJNI.Graph_moveAdjBefore(swigCPtr, this, AdjElement.getCPtr(adjMove), adjMove, AdjElement.getCPtr(adjBefore), adjBefore);
  }

  public void reverseAdjEdges() {
    OgdfJNI.Graph_reverseAdjEdges__SWIG_1(swigCPtr, this);
  }

  public void swapAdjEdges(AdjElement adj1, AdjElement adj2) {
    OgdfJNI.Graph_swapAdjEdges(swigCPtr, this, AdjElement.getCPtr(adj1), adj1, AdjElement.getCPtr(adj2), adj2);
  }

  public boolean readGML(String fileName) {
    return OgdfJNI.Graph_readGML__SWIG_0(swigCPtr, this, fileName);
  }

  public boolean readGML(SWIGTYPE_p_istream is) {
    return OgdfJNI.Graph_readGML__SWIG_1(swigCPtr, this, SWIGTYPE_p_istream.getCPtr(is));
  }

  public void writeGML(String fileName) {
    OgdfJNI.Graph_writeGML__SWIG_0(swigCPtr, this, fileName);
  }

  public void writeGML(SWIGTYPE_p_ostream os) {
    OgdfJNI.Graph_writeGML__SWIG_1(swigCPtr, this, SWIGTYPE_p_ostream.getCPtr(os));
  }

  public boolean readLEDAGraph(String fileName) {
    return OgdfJNI.Graph_readLEDAGraph__SWIG_0(swigCPtr, this, fileName);
  }

  public boolean readLEDAGraph(SWIGTYPE_p_istream is) {
    return OgdfJNI.Graph_readLEDAGraph__SWIG_1(swigCPtr, this, SWIGTYPE_p_istream.getCPtr(is));
  }

  public int genus() {
    return OgdfJNI.Graph_genus(swigCPtr, this);
  }

  public boolean representsCombEmbedding() {
    return OgdfJNI.Graph_representsCombEmbedding(swigCPtr, this);
  }

  public boolean consistencyCheck() {
    return OgdfJNI.Graph_consistencyCheck(swigCPtr, this);
  }

  public SWIGTYPE_p_ogdf__ListIteratorT_ogdf__NodeArrayBase_p_t registerArray(SWIGTYPE_p_ogdf__NodeArrayBase pNodeArray) {
    return new SWIGTYPE_p_ogdf__ListIteratorT_ogdf__NodeArrayBase_p_t(OgdfJNI.Graph_registerArray__SWIG_0(swigCPtr, this, SWIGTYPE_p_ogdf__NodeArrayBase.getCPtr(pNodeArray)), true);
  }

  public SWIGTYPE_p_ogdf__ListIteratorT_ogdf__EdgeArrayBase_p_t registerArray(SWIGTYPE_p_ogdf__EdgeArrayBase pEdgeArray) {
    return new SWIGTYPE_p_ogdf__ListIteratorT_ogdf__EdgeArrayBase_p_t(OgdfJNI.Graph_registerArray__SWIG_1(swigCPtr, this, SWIGTYPE_p_ogdf__EdgeArrayBase.getCPtr(pEdgeArray)), true);
  }

  public SWIGTYPE_p_ogdf__ListIteratorT_ogdf__AdjEntryArrayBase_p_t registerArray(SWIGTYPE_p_ogdf__AdjEntryArrayBase pAdjArray) {
    return new SWIGTYPE_p_ogdf__ListIteratorT_ogdf__AdjEntryArrayBase_p_t(OgdfJNI.Graph_registerArray__SWIG_2(swigCPtr, this, SWIGTYPE_p_ogdf__AdjEntryArrayBase.getCPtr(pAdjArray)), true);
  }

  public SWIGTYPE_p_ogdf__ListIteratorT_ogdf__GraphObserver_p_t registerStructure(SWIGTYPE_p_ogdf__GraphObserver pStructure) {
    return new SWIGTYPE_p_ogdf__ListIteratorT_ogdf__GraphObserver_p_t(OgdfJNI.Graph_registerStructure(swigCPtr, this, SWIGTYPE_p_ogdf__GraphObserver.getCPtr(pStructure)), true);
  }

  public void unregisterArray(SWIGTYPE_p_ogdf__ListIteratorT_ogdf__NodeArrayBase_p_t it) {
    OgdfJNI.Graph_unregisterArray__SWIG_0(swigCPtr, this, SWIGTYPE_p_ogdf__ListIteratorT_ogdf__NodeArrayBase_p_t.getCPtr(it));
  }

  public void unregisterArray(SWIGTYPE_p_ogdf__ListIteratorT_ogdf__EdgeArrayBase_p_t it) {
    OgdfJNI.Graph_unregisterArray__SWIG_1(swigCPtr, this, SWIGTYPE_p_ogdf__ListIteratorT_ogdf__EdgeArrayBase_p_t.getCPtr(it));
  }

  public void unregisterArray(SWIGTYPE_p_ogdf__ListIteratorT_ogdf__AdjEntryArrayBase_p_t it) {
    OgdfJNI.Graph_unregisterArray__SWIG_2(swigCPtr, this, SWIGTYPE_p_ogdf__ListIteratorT_ogdf__AdjEntryArrayBase_p_t.getCPtr(it));
  }

  public void unregisterStructure(SWIGTYPE_p_ogdf__ListIteratorT_ogdf__GraphObserver_p_t it) {
    OgdfJNI.Graph_unregisterStructure(swigCPtr, this, SWIGTYPE_p_ogdf__ListIteratorT_ogdf__GraphObserver_p_t.getCPtr(it));
  }

  public void resetEdgeIdCount(int maxId) {
    OgdfJNI.Graph_resetEdgeIdCount(swigCPtr, this, maxId);
  }

  public static int nextPower2(int start, int idCount) {
    return OgdfJNI.Graph_nextPower2(start, idCount);
  }

  public enum EdgeType {
    association(0),
    generalization(1),
    dependency(2);

    public final int swigValue() {
      return swigValue;
    }

    public static EdgeType swigToEnum(int swigValue) {
      EdgeType[] swigValues = EdgeType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (EdgeType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + EdgeType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private EdgeType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private EdgeType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private EdgeType(EdgeType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum NodeType {
    vertex,
    dummy,
    generalizationMerger,
    generalizationExpander,
    highDegreeExpander,
    lowDegreeExpander,
    associationClass;

    public final int swigValue() {
      return swigValue;
    }

    public static NodeType swigToEnum(int swigValue) {
      NodeType[] swigValues = NodeType.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (NodeType swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + NodeType.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private NodeType() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private NodeType(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private NodeType(NodeType swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
