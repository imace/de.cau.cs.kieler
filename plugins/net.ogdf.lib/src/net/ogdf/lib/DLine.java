/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.ogdf.lib;

public class DLine {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected DLine(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DLine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgdfJNI.delete_DLine(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DLine() {
    this(OgdfJNI.new_DLine__SWIG_0(), true);
  }

  public DLine(DPoint p1, DPoint p2) {
    this(OgdfJNI.new_DLine__SWIG_1(DPoint.getCPtr(p1), p1, DPoint.getCPtr(p2), p2), true);
  }

  public DLine(DLine dl) {
    this(OgdfJNI.new_DLine__SWIG_2(DLine.getCPtr(dl), dl), true);
  }

  public DLine(double x1, double y1, double x2, double y2) {
    this(OgdfJNI.new_DLine__SWIG_3(x1, y1, x2, y2), true);
  }

  public DPoint start() {
    return new DPoint(OgdfJNI.DLine_start(swigCPtr, this), false);
  }

  public DPoint end() {
    return new DPoint(OgdfJNI.DLine_end(swigCPtr, this), false);
  }

  public double dx() {
    return OgdfJNI.DLine_dx(swigCPtr, this);
  }

  public double dy() {
    return OgdfJNI.DLine_dy(swigCPtr, this);
  }

  public double slope() {
    return OgdfJNI.DLine_slope(swigCPtr, this);
  }

  public double yAbs() {
    return OgdfJNI.DLine_yAbs(swigCPtr, this);
  }

  public boolean isVertical() {
    return OgdfJNI.DLine_isVertical(swigCPtr, this);
  }

  public boolean isHorizontal() {
    return OgdfJNI.DLine_isHorizontal(swigCPtr, this);
  }

  public boolean intersection(DLine line, DPoint inter, boolean endpoints) {
    return OgdfJNI.DLine_intersection__SWIG_0(swigCPtr, this, DLine.getCPtr(line), line, DPoint.getCPtr(inter), inter, endpoints);
  }

  public boolean intersection(DLine line, DPoint inter) {
    return OgdfJNI.DLine_intersection__SWIG_1(swigCPtr, this, DLine.getCPtr(line), line, DPoint.getCPtr(inter), inter);
  }

  public boolean contains(DPoint p) {
    return OgdfJNI.DLine_contains(swigCPtr, this, DPoint.getCPtr(p), p);
  }

  public double length() {
    return OgdfJNI.DLine_length(swigCPtr, this);
  }

  public int horIntersection(double horAxis, SWIGTYPE_p_double crossing) {
    return OgdfJNI.DLine_horIntersection(swigCPtr, this, horAxis, SWIGTYPE_p_double.getCPtr(crossing));
  }

  public int verIntersection(double verAxis, SWIGTYPE_p_double crossing) {
    return OgdfJNI.DLine_verIntersection(swigCPtr, this, verAxis, SWIGTYPE_p_double.getCPtr(crossing));
  }

}
