import keg;
import kgraph;

extension org::eclipse::xtend::util::stdlib::cloning;

Node transform(KNode node, Boolean directed):
	let graph = new Node:
	node.data.addAll(node.data.clone()) ->
	node.children.transformNode(graph, directed) ->
	graph
;

Void transformNode(KNode node, Node parent, Boolean directed):
	let kegNode = getNode(node):
	parent.children.add(kegNode) ->
	node.children.transformNode(kegNode, directed) ->
	node.outgoingEdges.transformEdge(directed) ->
	node.ports.transformPort(kegNode)
;

Void transformEdge(KEdge edge, Boolean directed):
	let kegEdge = new Edge:
	let source = getNode(edge.source):
	let target = getNode(edge.target):
	source.outgoingEdges.add(kegEdge) ->
	kegEdge.setTarget(target) ->
    kegEdge.data.addAll(edge.data.clone()) ->
	(if directed then kegEdge.setDirected(true)) ->
	(if edge.sourcePort != null then kegEdge.setSourcePort(getPort(edge.sourcePort))) ->
	(if edge.targetPort != null then kegEdge.setTargetPort(getPort(edge.targetPort))) ->
	(if edge.sourcePort != null
			 	then (if edge.targetPort != null
			 			then kegEdge.setType(keg::EdgeType::Port2Port)
			 			else kegEdge.setType(keg::EdgeType::Port2Node))
			 	else (if edge.targetPort != null
			 			then kegEdge.setType(keg::EdgeType::Node2Port)
			 			else kegEdge.setType(keg::EdgeType::Node2Node)))
;

Void transformPort(KPort port, Node node):
	let kegPort = getPort(port):
	node.ports.add(kegPort)
;

create Node getNode(KNode node):
	(if node.label != null then this.setNodeLabel(node.label.text)) ->
	this.data.addAll(node.data.clone())
;

create Port getPort(KPort port):
	this.data.addAll(port.data.clone())
;
