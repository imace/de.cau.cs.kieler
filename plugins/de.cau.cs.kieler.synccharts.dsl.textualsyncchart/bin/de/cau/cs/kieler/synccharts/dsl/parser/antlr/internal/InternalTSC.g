/*
* generated by Xtext
*/
grammar InternalTSC;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.dsl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.synccharts.dsl.services.TSCGrammarAccess;

}

@parser::members {
 
 	private TSCGrammarAccess grammarAccess;
 	
    public InternalTSCParser(TokenStream input, IAstFactory factory, TSCGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/synccharts/dsl/parser/antlr/internal/InternalTSC.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "State";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleState
entryRuleState returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_isInitial_0='init' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0(), "isInitial"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInitial", true, "init", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_isFinal_1='final' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_0(), "isFinal"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFinal", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStateKindStateTypeEnumRuleCall_2_0(), currentNode); 
	    }
	    lv_stateKind_2=ruleStateType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "stateKind", lv_stateKind_2, "StateType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'state' 
    {
        createLeafNode(grammarAccess.getStateAccess().getStateKeyword_3(), null); 
    }
(	
	
	    lv_stateName_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getStateAccess().getStateNameIDTerminalRuleCall_4_0(), "stateName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stateName", lv_stateName_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_label_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_5_0(), "label"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "label", lv_label_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStateContentStateContentParserRuleCall_6_0(), currentNode); 
	    }
	    lv_stateContent_6=ruleStateContent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "stateContent", lv_stateContent_6, "StateContent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_7_0(), currentNode); 
	    }
	    lv_outgoingTransitions_7=ruleTransition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "outgoingTransitions", lv_outgoingTransitions_7, "Transition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleStateContent
entryRuleStateContent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStateContentRule(), currentNode); }
	 iv_ruleStateContent=ruleStateContent 
	 { $current=$iv_ruleStateContent.current; } 
	 EOF 
;

// Rule StateContent
ruleStateContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getStateContentAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getExitActionsExitActionParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_exitActions_1=ruleExitAction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "exitActions", lv_exitActions_1, "ExitAction", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getEntryActionsEntryActionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_entryActions_2=ruleEntryAction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "entryActions", lv_entryActions_2, "EntryAction", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getInnerActionInnerActionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_innerAction_3=ruleInnerAction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "innerAction", lv_innerAction_3, "InnerAction", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getSignalsAndVariablesValuedObjectParserRuleCall_1_3_0(), currentNode); 
	    }
	    lv_signalsAndVariables_4=ruleValuedObject 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signalsAndVariables", lv_signalsAndVariables_4, "ValuedObject", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getInnerStatesStateParserRuleCall_1_4_0_0(), currentNode); 
	    }
	    lv_innerStates_5=ruleState 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "innerStates", lv_innerStates_5, "State", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('||' 
    {
        createLeafNode(grammarAccess.getStateContentAccess().getVerticalLineVerticalLineKeyword_1_4_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateContentAccess().getParallelStatesStateParserRuleCall_1_4_1_1_0(), currentNode); 
	    }
	    lv_parallelStates_7=ruleState 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parallelStates", lv_parallelStates_7, "State", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*))+'}' 
    {
        createLeafNode(grammarAccess.getStateContentAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleEntryAction
entryRuleEntryAction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEntryActionRule(), currentNode); }
	 iv_ruleEntryAction=ruleEntryAction 
	 { $current=$iv_ruleEntryAction.current; } 
	 EOF 
;

// Rule EntryAction
ruleEntryAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('onentry' 
    {
        createLeafNode(grammarAccess.getEntryActionAccess().getOnentryKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEntryActionAccess().getTriggerPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trigger_1=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trigger", lv_trigger_1, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('/' 
    {
        createLeafNode(grammarAccess.getEntryActionAccess().getSolidusKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEntryActionAccess().getEffectsEffectParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_effects_3=ruleEffect 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "effects", lv_effects_3, "Effect", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)?);





// Entry rule entryRuleExitAction
entryRuleExitAction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExitActionRule(), currentNode); }
	 iv_ruleExitAction=ruleExitAction 
	 { $current=$iv_ruleExitAction.current; } 
	 EOF 
;

// Rule ExitAction
ruleExitAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('onexit' 
    {
        createLeafNode(grammarAccess.getExitActionAccess().getOnexitKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExitActionAccess().getTriggerPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trigger_1=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trigger", lv_trigger_1, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('/' 
    {
        createLeafNode(grammarAccess.getExitActionAccess().getSolidusKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExitActionAccess().getEffectsEffectParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_effects_3=ruleEffect 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "effects", lv_effects_3, "Effect", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)?);





// Entry rule entryRuleInnerAction
entryRuleInnerAction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInnerActionRule(), currentNode); }
	 iv_ruleInnerAction=ruleInnerAction 
	 { $current=$iv_ruleInnerAction.current; } 
	 EOF 
;

// Rule InnerAction
ruleInnerAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('oninner' 
    {
        createLeafNode(grammarAccess.getInnerActionAccess().getOninnerKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInnerActionAccess().getTriggerPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trigger_1=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInnerActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trigger", lv_trigger_1, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('/' 
    {
        createLeafNode(grammarAccess.getInnerActionAccess().getSolidusKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInnerActionAccess().getEffectsEffectParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_effects_3=ruleEffect 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInnerActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "effects", lv_effects_3, "Effect", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)?);





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_sourceStateName_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getTransitionAccess().getSourceStateNameIDTerminalRuleCall_0_0(), "sourceStateName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourceStateName", lv_sourceStateName_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTransitionTypeTransitionTypeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_transitionType_1=ruleTransitionType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "transitionType", lv_transitionType_1, "TransitionType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    lv_targetStateName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getTransitionAccess().getTargetStateNameIDTerminalRuleCall_2_0_0(), "targetStateName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "targetStateName", lv_targetStateName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getDeclaredTargetStateDeclaredTargetStateParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_declaredTargetState_3=ruledeclaredTargetState 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "declaredTargetState", lv_declaredTargetState_3, "declaredTargetState", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))('with' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getWithKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTransitionAccess().getTransitionLabelActionCrossReference_3_1_0(), "transitionLabel"); 
	}

		// TODO assign feature to currentNode
	
))?);





// Entry rule entryRuledeclaredTargetState
entryRuledeclaredTargetState returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDeclaredTargetStateRule(), currentNode); }
	 iv_ruledeclaredTargetState=ruledeclaredTargetState 
	 { $current=$iv_ruledeclaredTargetState.current; } 
	 EOF 
;

// Rule declaredTargetState
ruledeclaredTargetState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_isInitial_0='init' 
    {
        createLeafNode(grammarAccess.getDeclaredTargetStateAccess().getIsInitialInitKeyword_0_0(), "isInitial"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaredTargetStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInitial", true, "init", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_isFinal_1='final' 
    {
        createLeafNode(grammarAccess.getDeclaredTargetStateAccess().getIsFinalFinalKeyword_1_0(), "isFinal"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaredTargetStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFinal", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'state' 
    {
        createLeafNode(grammarAccess.getDeclaredTargetStateAccess().getStateKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDeclaredTargetStateAccess().getDeclaredStateTypeStateTypeEnumRuleCall_3_0(), currentNode); 
	    }
	    lv_declaredStateType_3=ruleStateType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaredTargetStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "declaredStateType", lv_declaredStateType_3, "StateType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_declaredStateName_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getDeclaredTargetStateAccess().getDeclaredStateNameIDTerminalRuleCall_4_0(), "declaredStateName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaredTargetStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "declaredStateName", lv_declaredStateName_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));







// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEffectRule(), currentNode); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0(), currentNode); 
    }
    this_Emission_0=ruleEmission
    { 
        $current = $this_Emission_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1(), currentNode); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getHostCodeParserRuleCall_2(), currentNode); 
    }
    this_HostCode_2=ruleHostCode
    { 
        $current = $this_HostCode_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleEmission
entryRuleEmission returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEmissionRule(), currentNode); }
	 iv_ruleEmission=ruleEmission 
	 { $current=$iv_ruleEmission.current; } 
	 EOF 
;

// Rule Emission
ruleEmission returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmissionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
)('(' 
    {
        createLeafNode(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEmissionAccess().getNewValuePrimaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_newValue_2=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmissionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "newValue", lv_newValue_2, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?);





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0(), "variable"); 
	}

		// TODO assign feature to currentNode
	
)':=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExpressionPrimaryExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expression_2=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_2, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleSignalReference
entryRuleSignalReference returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalReferenceRule(), currentNode); }
	 iv_ruleSignalReference=ruleSignalReference 
	 { $current=$iv_ruleSignalReference.current; } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalReferenceAccess().getReferenceSignalCrossReference_0(), "reference"); 
	}

		// TODO assign feature to currentNode
	
);





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableReferenceRule(), currentNode); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableReferenceAccess().getReferenceVariableCrossReference_0(), "reference"); 
	}

		// TODO assign feature to currentNode
	
);





// Entry rule entryRuleValuedObject
entryRuleValuedObject returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValuedObjectRule(), currentNode); }
	 iv_ruleValuedObject=ruleValuedObject 
	 { $current=$iv_ruleValuedObject.current; } 
	 EOF 
;

// Rule ValuedObject
ruleValuedObject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValuedObjectAccess().getSignalParserRuleCall_0(), currentNode); 
    }
    this_Signal_0=ruleSignal
    { 
        $current = $this_Signal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValuedObjectAccess().getVariableParserRuleCall_1(), currentNode); 
    }
    this_Variable_1=ruleVariable
    { 
        $current = $this_Variable_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('input' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getInputKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(	
	
	    lv_initialValue_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalAccess().getInitialValueIDTerminalRuleCall_2_1_0(), "initialValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "initialValue", lv_initialValue_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(':=' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(	
	
	    lv_initialValue_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getInitialValueIDTerminalRuleCall_2_1_0(), "initialValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "initialValue", lv_initialValue_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFloatValueRule(), currentNode); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_FLOAT
	{
		createLeafNode(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFloatValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "Float", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanValueRule(), currentNode); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_BOOLEAN
	{
		createLeafNode(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "Boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);







// Entry rule entryRuleHostCode
entryRuleHostCode returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHostCodeRule(), currentNode); }
	 iv_ruleHostCode=ruleHostCode 
	 { $current=$iv_ruleHostCode.current; } 
	 EOF 
;

// Rule HostCode
ruleHostCode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_code_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getHostCodeAccess().getCodeSTRINGTerminalRuleCall_0(), "code"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHostCodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "code", lv_code_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);







// Entry rule entryRuleValOperation
entryRuleValOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValOperationRule(), currentNode); }
	 iv_ruleValOperation=ruleValOperation 
	 { $current=$iv_ruleValOperation.current; } 
	 EOF 
;

// Rule ValOperation
ruleValOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_operator_0=ruleValOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_0, "ValOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0(), currentNode); 
	    }
	    lv_subExpressions_1=ruleSignalReference 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "subExpressions", lv_subExpressions_1, "SignalReference", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueExpressionRule(), currentNode); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getIntValueParserRuleCall_0(), currentNode); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getFloatValueParserRuleCall_1(), currentNode); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getValOperationParserRuleCall_2(), currentNode); 
    }
    this_ValOperation_2=ruleValOperation
    { 
        $current = $this_ValOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getVariableReferenceParserRuleCall_3(), currentNode); 
    }
    this_VariableReference_3=ruleVariableReference
    { 
        $current = $this_VariableReference_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompareOperationRule(), currentNode); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getValueExpressionParserRuleCall_0(), currentNode); 
    }
    this_ValueExpression_0=ruleValueExpression
    { 
        $current = $this_ValueExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getCompareOperationAccess().getOperationSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareOperationAccess().getOperationSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operator_2=ruleCompareOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2, "CompareOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsValueExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_subExpressions_3=ruleValueExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "subExpressions", lv_subExpressions_3, "ValueExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleNotOperation
entryRuleNotOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNotOperationRule(), currentNode); }
	 iv_ruleNotOperation=ruleNotOperation 
	 { $current=$iv_ruleNotOperation.current; } 
	 EOF 
;

// Rule NotOperation
ruleNotOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNotOperationAccess().getOperatorsNotOperatorEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_operators_0=ruleNotOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operators", lv_operators_0, "NotOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNotOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_subExpressions_1=ruleBooleanExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "subExpressions", lv_subExpressions_1, "BooleanExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleNotOrNormalExpression
entryRuleNotOrNormalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNotOrNormalExpressionRule(), currentNode); }
	 iv_ruleNotOrNormalExpression=ruleNotOrNormalExpression 
	 { $current=$iv_ruleNotOrNormalExpression.current; } 
	 EOF 
;

// Rule NotOrNormalExpression
ruleNotOrNormalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNotOrNormalExpressionAccess().getNotOperationParserRuleCall_0(), currentNode); 
    }
    this_NotOperation_0=ruleNotOperation
    { 
        $current = $this_NotOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNotOrNormalExpressionAccess().getBooleanExpressionParserRuleCall_1(), currentNode); 
    }
    this_BooleanExpression_1=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAndOperation
entryRuleAndOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndOperationRule(), currentNode); }
	 iv_ruleAndOperation=ruleAndOperation 
	 { $current=$iv_ruleAndOperation.current; } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getNotOrNormalExpressionParserRuleCall_0(), currentNode); 
    }
    this_NotOrNormalExpression_0=ruleNotOrNormalExpression
    { 
        $current = $this_NotOrNormalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndOperationAccess().getOperationSubExpressionAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpression", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndOperationAccess().getOperationSubExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operator_2=ruleOperatorAnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2, "OperatorAnd", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndOperationAccess().getSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_subExpression_3=ruleNotOrNormalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "subExpression", lv_subExpression_3, "NotOrNormalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleOrOperation
entryRuleOrOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrOperationRule(), currentNode); }
	 iv_ruleOrOperation=ruleOrOperation 
	 { $current=$iv_ruleOrOperation.current; } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0(), currentNode); 
    }
    this_AndOperation_0=ruleAndOperation
    { 
        $current = $this_AndOperation_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operator_2=ruleOperatorOr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2, "OperatorOr", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_subExpressions_3=ruleAndOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "subExpressions", lv_subExpressions_3, "AndOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanValueParserRuleCall_0(), currentNode); 
    }
    this_BooleanValue_0=ruleBooleanValue
    { 
        $current = $this_BooleanValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getSignalReferenceParserRuleCall_1(), currentNode); 
    }
    this_SignalReference_1=ruleSignalReference
    { 
        $current = $this_SignalReference_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getCompareOperationParserRuleCall_2(), currentNode); 
    }
    this_CompareOperation_2=ruleCompareOperation
    { 
        $current = $this_CompareOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |('(' 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall_3_1(), currentNode); 
    }
    this_OrOperation_4=ruleOrOperation
    { 
        $current = $this_OrOperation_4.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
));





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBooleanExpressionParserRuleCall(), currentNode); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Rule StateType
ruleStateType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'pseudo' 
	{
        $current = grammarAccess.getStateTypeAccess().getPSEUDOEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getPSEUDOEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'reference' 
	{
        $current = grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'textual' 
	{
        $current = grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_2(), null); 
    }
));



// Rule TransitionType
ruleTransitionType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'o->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'>->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2(), null); 
    }
));



// Rule OperatorKind
ruleOperatorKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getOperatorKindAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getOperatorKindAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getLTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getOperatorKindAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getLEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getOperatorKindAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getGTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getOperatorKindAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getGEQEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'not' 
	{
        $current = grammarAccess.getOperatorKindAccess().getNOTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getNOTEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getOperatorKindAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getOperatorKindAccess().getOREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getOREnumLiteralDeclaration_7(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getOperatorKindAccess().getADDEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getADDEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getOperatorKindAccess().getSUBEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getSUBEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getOperatorKindAccess().getMULTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getMULTEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'div' 
	{
        $current = grammarAccess.getOperatorKindAccess().getDIVEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getDIVEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'mod' 
	{
        $current = grammarAccess.getOperatorKindAccess().getMODEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getMODEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'?' 
	{
        $current = grammarAccess.getOperatorKindAccess().getVALEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getVALEnumLiteralDeclaration_13(), null); 
    }
)
    |(	'pre' 
	{
        $current = grammarAccess.getOperatorKindAccess().getPREEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorKindAccess().getPREEnumLiteralDeclaration_14(), null); 
    }
));



// Rule ValOperator
ruleValOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'?' 
	{
        $current = grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration(), null); 
    }
);



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4(), null); 
    }
));



// Rule NotOperator
ruleNotOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'not' 
	{
        $current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration(), null); 
    }
);



// Rule OperatorOr
ruleOperatorOr returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'or' 
	{
        $current = grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration(), null); 
    }
);



// Rule OperatorAnd
ruleOperatorAnd returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'and' 
	{
        $current = grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration(), null); 
    }
);



RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') ('-'|'+')? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


