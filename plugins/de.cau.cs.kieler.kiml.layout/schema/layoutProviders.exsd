<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.cau.cs.kieler.kiml.layout" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="de.cau.cs.kieler.kiml.layout" id="layoutProviders" name="Layout Providers"/>
      </appInfo>
      <documentation>
         The Layout Providers extension point allows plug-ins to add new layout providers to be used within the KIELER Infrastructure for Meta Layout. Layout providers are algorithms that automatically compute layout information for an instance of the &lt;code&gt;KGraph&lt;/code&gt; data structure.
&lt;p&gt;
Layout providers can be grouped using categories, and they can be given a type to describe the basic approach of the implemented algorithm. Furthermore, a layout provider can declare which diagrams it supports and which layout options it understands. All this data is gathered to decide at runtime which layout provider should be used to layout a specific diagram, and which options to set for that provider.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="layoutProvider"/>
            <element ref="layoutType"/>
            <element ref="category"/>
            <element ref="layoutOption"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  de.cau.cs.kieler.kiml.layout.layoutProviders
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  An optional identifier of the extension instance.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  An optional name of the extension instance.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="layoutProvider">
      <annotation>
         <documentation>
            A layout provider, that is an implementation of a layout algorithm that is able to process the &lt;code&gt;KGraph&lt;/code&gt; data structure. A library that provides multiple different layout algorithms should create one &lt;code&gt;layoutProvider&lt;/code&gt; element for each algorithm.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="knownOption"/>
            <element ref="supportedDiagram"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for this layout provider. It is recommended that the identifier be prefixed by the plug-in name, to guarantee uniqueness.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A user friendly name of this layout provider, to be displayed in the UI.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Implementing class of the layout provider, must extend &lt;code&gt;de.cau.cs.kieler.kiml.layout.services.AbstractLayoutProvider&lt;/code&gt;.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="de.cau.cs.kieler.kiml.layout.services.AbstractLayoutProvider:"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="parameter" type="string">
            <annotation>
               <documentation>
                  An optional string parameter which is passed to the layout provider instance for initialization.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  Identifier of a category, which can be defined using the &lt;code&gt;category&lt;/code&gt; element. Categories are used to group layout providers.
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.kiml.layout.layoutProviders/category/@id"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="type" type="string">
            <annotation>
               <documentation>
                  Identifier of a layout type, which can be defined using the &lt;code&gt;layoutType&lt;/code&gt; element. Layout types describe the general kind of layout algorithm that is implemented by that provider.
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.kiml.layout.layoutProviders/layoutType/@id"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="layoutType">
      <annotation>
         <documentation>
            A layout type, that is a general kind of layout algorithm. Layout types are used to give the user an idea of the expected results of a layout algorithm. For example, an algorithm that follows the &lt;i&gt;layered&lt;/i&gt; approach is expected to produce layouts in which most edges are oriented in a common direction.
&lt;p&gt;
Apart from a set of default layout types offered by KIML, new layout providers are free to define their own layout types.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for this layout type. It is recommended that the identifier be prefixed by the plug-in name, to guarantee uniqueness.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A user friendly name of the layout type, to be displayed in the UI.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="category">
      <annotation>
         <documentation>
            A layout provider category, used to group layout providers. For example, all layout algorithms of a specific library could be grouped with a common category.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for this category. It is recommended that the identifier be prefixed by the plug-in name, to guarantee uniqueness.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A user friendly name of this category, to be displayed in the UI.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="layoutOption">
      <annotation>
         <documentation>
            An option that can be passed to a layout provider. Layout options can be used to modify the behavior of layout algorithms. Apart from a set of default layout options offered by KIML, layout providers are free to define their own layout options.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for this layout option. It is recommended that the identifier be prefixed by the plug-in name, to guarantee uniqueness.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="type" type="string" use="required">
            <annotation>
               <documentation>
                  Defines the data type of this option; must be either &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;object&lt;/code&gt;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A user friendly name of this layout option, to be displayed in the UI.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  A user friendly description of this layout option, to be displayed in the UI. The description should contain all information needed to understand what this option does.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="knownOption">
      <annotation>
         <documentation>
            Declares that the layout provider knows the option referenced by an identifier. Only the known options of a layout provider can be modified by the user.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="option" type="string" use="required">
            <annotation>
               <documentation>
                  Identifier of a layout option, which can be defined using the &lt;code&gt;layoutOption&lt;/code&gt; element.
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.kiml.layout.layoutProviders/layoutOption/@id"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="supportedDiagram">
      <annotation>
         <documentation>
            Declares that the layout provider supports the diagram referenced by an identifier. If a layout provider supports a specific diagram type and it has the highest priority for that type, it is always chosen as the default layout provider for diagrams of that type. These priorities can be changed in the UI at runtime.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="type" type="string" use="required">
            <annotation>
               <documentation>
                  Identifier of a diagram type, which can be defined using the &lt;code&gt;diagramType&lt;/code&gt; element of the &lt;code&gt;layoutInfo&lt;/code&gt; extension point. Diagram types are used to classify diagrams with respect to their layout.
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.kiml.layout.layoutInfo/diagramType/@id"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="priority" type="string">
            <annotation>
               <documentation>
                  An integer value that defines the relative priority of the layout provider for this diagram type. The layout provider with highest priority is chosen as the default provider for that type.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following is an example for a layout provider extension:
&lt;pre&gt;
   &lt;extension
         point=&quot;de.cau.cs.kieler.kiml.layout.layoutProviders&quot;&gt;
      &lt;layoutProvider
            class=&quot;de.cau.cs.kieler.klodd.hierarchical.HierarchicalDataflowLayoutProvider&quot;
            category=&quot;de.cau.cs.kieler.layouter.category&quot;
            id=&quot;de.cau.cs.kieler.klodd.hierarchical&quot;
            name=&quot;KLoDD Hierarchical&quot;
            type=&quot;de.cau.cs.kieler.layout.types.layered&quot;&gt;
         &lt;supportedDiagram
               priority=&quot;10&quot;
               type=&quot;de.cau.cs.kieler.layout.info.types.dataFlow&quot;&gt;
         &lt;/supportedDiagram&gt;
         &lt;knownOption
               option=&quot;de.cau.cs.kieler.layout.options.fixedSize&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;de.cau.cs.kieler.layout.options.layoutDirection&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;de.cau.cs.kieler.layout.options.minSpacing&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;de.cau.cs.kieler.layout.options.portConstraints&quot;&gt;
         &lt;/knownOption&gt;
      &lt;/layoutProvider&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiinfo"/>
      </appInfo>
      <documentation>
         All data that is contributed to this extension point is gathered in the singleton class &lt;code&gt;de.cau.cs.kieler.kiml.layout.services.LayoutServices&lt;/code&gt;. This is the point where registered data can be read at runtime.
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; The extension point is read out by the &lt;code&gt;de.cau.cs.kieler.kiml.ui&lt;/code&gt; plug-in, &lt;em&gt;not&lt;/em&gt; by &lt;code&gt;de.cau.cs.kieler.kiml.layout&lt;/code&gt;.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         Registered layout providers are made available in the KIELER layout functionality. The KIELER Infrastructure for Meta Layout organizes appropriate selection of layout providers for layout of a graphical diagram, and provides means to manually select layout providers for each part of the diagram.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright 2008 by&lt;br&gt;
&amp;nbsp;+ Christian-Albrechts-University of Kiel&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Department of Computer Science&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Real-Time and Embedded Systems Group&lt;br&gt;
This program and the accompanying materials are made available under the terms of the Eclipse Public License (EPL) which accompanies this distribution, and is available at &lt;a href=&quot;http://www.eclipse.org/org/documents/epl-v10.html&quot;&gt;http://www.eclipse.org/org/documents/epl-v10.html&lt;/a&gt;.
      </documentation>
   </annotation>

</schema>
