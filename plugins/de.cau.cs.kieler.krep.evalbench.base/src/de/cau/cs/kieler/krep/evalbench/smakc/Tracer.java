/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2009 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.krep.evalbench.smakc;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.util.HashMap;
import java.util.Map;

import kiel.util.kit.lexer.Lexer;
import kiel.util.kit.lexer.LexerException;
import kiel.util.kit.node.Start;
import kiel.util.kit.parser.Parser;
import kiel.util.kit.parser.ParserException;

/**
 * Generate mapping between kit file and the KEP assembler that was generated by smakc.
 * 
 * @kieler.rating 2010-01-28 proposed yellow ctr
 * 
 * @author fast,ctr
 * 
 */
public final class Tracer {

    private Tracer() {
    }

    /**
     * @param kitfile
     *            sycnchart in kit format
     * @param kasmfile
     *            kep assembler for the synchcart generated by smakc!
     * @return a mapping from lines in the kit file to lines in the kasm file
     * @throws IOException
     *             thrown if a file cannot be read
     * @throws ParserException
     *             thrown at parsing of the kit file
     * @throws LexerException
     *             thrown at lexing of the kit file
     */
    public static Map<Integer, Integer> trace(final String kitfile, final String kasmfile)
            throws IOException, ParserException, LexerException {

        final HashMap<Integer, Integer> sem2line = new HashMap<Integer, Integer>();
        final BufferedReader br = new BufferedReader(new FileReader(kasmfile));
        PrintWriter pw = null;

        String read = "";
        final int lineNumber = 0;
        int instrNumber = 0;

        String nextState = "";
        String nextTrans = "";

        final HashMap<String, Integer> states = new HashMap<String, Integer>();
        try {
            pw = new PrintWriter(new FileWriter(kasmfile + ".trc"), true);
            final String[] startState = { "BEGINSTARTUP", "BEGINSIMPLESTATEC", "BEGINAWAITSTATE",
                    "SUBSTATESEND" };
            final String[] execState = { "AWAIT", "GOTO", "HALT", "JOIN" };
            final String[] execTrans = { "GOTO BEGINSTARTUP" };
            final String[] instr = { "AWAIT", "ABORT", "EMIT", "GOTO", "HALT", "JOIN", "LOAD",
                    "PAUSE", "PAR", "PRIO", "PRESENT", "SIGNAL", "SUSPEND", "WABORT" };

            while ((read = br.readLine()) != null) {
                read = read.toUpperCase().trim();
                pw.println("line " + lineNumber + ": " + read);
                if (!read.equals("")) {
                    for (int i = 0; i < startState.length; i++) {
                        if (read.startsWith(startState[i])) {
                            nextState = read.substring(startState[i].length(), read.length() - 1);
                            nextTrans = nextState;
                            break;
                        }
                    }
                    // if(nextState.length()>0){
                    for (int i = 0; i < execState.length; i++) {
                        if (read.startsWith(execState[i])) {
                            if (nextState.length() > 0) {
                                states.put(nextState, instrNumber);
                            }
                            nextState = "";
                            break;
                        }
                    }
                    // }

                    for (int i = 0; i < execTrans.length; i++) {
                        if (read.startsWith(execTrans[i])) {
                            states.put(nextTrans + "->"
                                    + read.substring(execTrans[i].length(), read.length()),
                                    instrNumber);
                            // nextState = "";
                            break;
                        }
                    }

                    for (int i = 0; i < instr.length; i++) {
                        if (read.startsWith(instr[i])) {
                            instrNumber++;
                            break;
                        }
                    }
                }

            }
        } finally {
            br.close();
            pw.flush();
            pw.close();
        }
        final Lexer lexer = new Lexer(new PushbackReader(new FileReader(kitfile)));
        final Parser parser = new Parser(lexer);
        final Start ast = parser.parse();
        final LineScanner ls = new LineScanner(states, sem2line);
        ast.apply(ls);
        return sem2line;
    }

}
