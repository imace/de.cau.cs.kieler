/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2009 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.krep.evalbench.helpers;

import java.util.HashMap;

import kiel.util.kit.analysis.DepthFirstAdapter;
import kiel.util.kit.node.ACompositeState;
import kiel.util.kit.node.AInitialTransition;
import kiel.util.kit.node.AOtherTransition;
import kiel.util.kit.node.ASimpleState;
import kiel.util.kit.node.Node;

/**
 * Scan assembler generated by smakc, to get correspondence between states and assembler lines.
 * 
 * @kieler.rating 2010-01-28 proposed yellow ctr
 * 
 * @author ctr
 */
public class LineScanner extends DepthFirstAdapter {

    private HashMap<String, Integer> states;
    private HashMap<Integer, Integer> sem2line;

    /**
     * @param state2id mapping from state-name to id
     * @param s2l mapping from id to assembler line
     */
    public LineScanner(final HashMap<String, Integer> state2id,
            final HashMap<Integer, Integer> s2l) {
        super();
        this.states = state2id;
        this.sem2line = s2l;
    }

    @Override
    public void defaultIn(final Node node) {
        super.defaultIn(node);
    }


    @Override
    public void inAInitialTransition(final AInitialTransition node) {
        System.out.println("unknown initial transition to: " + node.getTargetState());
        super.inAInitialTransition(node);
    }

    @Override
    public void inAOtherTransition(final AOtherTransition node) {
        String name = node.getSourceState().getText() + "->" + node.getTargetState().getText();

        Integer line = states.get(name.toUpperCase());
        if (line != null) {
            sem2line.put(line, node.getEdge().getLine());
        } else {
            System.out.println("unknown transition: " + name);
        }
        super.inAOtherTransition(node);
    }

    @Override
    public void inACompositeState(final ACompositeState node) {
        String name = node.getIdentifier().getText();
        Integer line = states.get(name.toUpperCase());
        if (line != null) {
            sem2line.put(line, node.getIdentifier().getLine());
        } else {
            System.out.println("unknown state: " + name);
        }
        super.inACompositeState(node);
    }

    @Override
    public void inASimpleState(final ASimpleState node) {
        String name = node.getIdentifier().getText();
        Integer line = states.get(name.toUpperCase());
        if (line != null) {
            sem2line.put(line, node.getIdentifier().getLine());
        } else {
            System.out.println("unknown state: " + name);
        }
        super.inASimpleState(node);
    }

}
