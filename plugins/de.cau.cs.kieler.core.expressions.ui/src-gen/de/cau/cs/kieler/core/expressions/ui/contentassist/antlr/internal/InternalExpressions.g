/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.core.expressions.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.core.expressions.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.core.expressions.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
(rule__NotExpression__Alternatives)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression 
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
(rule__AtomicExpression__Alternatives)
{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalReference
entryRuleSignalReference 
:
{ before(grammarAccess.getSignalReferenceRule()); }
	 ruleSignalReference
{ after(grammarAccess.getSignalReferenceRule()); } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalAssignment()); }
(rule__SignalReference__SignalAssignment)
{ after(grammarAccess.getSignalReferenceAccess().getSignalAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
(rule__CompareOperation__Group__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedExpression
entryRuleValuedExpression 
:
{ before(grammarAccess.getValuedExpressionRule()); }
	 ruleValuedExpression
{ after(grammarAccess.getValuedExpressionRule()); } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
	ruleAddExpression
{ after(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubExpression
entryRuleSubExpression 
:
{ before(grammarAccess.getSubExpressionRule()); }
	 ruleSubExpression
{ after(grammarAccess.getSubExpressionRule()); } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup()); }
(rule__SubExpression__Group__0)
{ after(grammarAccess.getSubExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModExpression
entryRuleModExpression 
:
{ before(grammarAccess.getModExpressionRule()); }
	 ruleModExpression
{ after(grammarAccess.getModExpressionRule()); } 
	 EOF 
;

// Rule ModExpression
ruleModExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModExpressionAccess().getGroup()); }
(rule__ModExpression__Group__0)
{ after(grammarAccess.getModExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression 
:
{ before(grammarAccess.getAtomicValuedExpressionRule()); }
	 ruleAtomicValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionRule()); } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
(rule__AtomicValuedExpression__Alternatives)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivExpression
entryRuleDivExpression 
:
{ before(grammarAccess.getDivExpressionRule()); }
	 ruleDivExpression
{ after(grammarAccess.getDivExpressionRule()); } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup()); }
(rule__DivExpression__Group__0)
{ after(grammarAccess.getDivExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
(rule__VariableReference__VariableAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueTestExpression
entryRuleValueTestExpression 
:
{ before(grammarAccess.getValueTestExpressionRule()); }
	 ruleValueTestExpression
{ after(grammarAccess.getValueTestExpressionRule()); } 
	 EOF 
;

// Rule ValueTestExpression
ruleValueTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueTestExpressionAccess().getGroup()); }
(rule__ValueTestExpression__Group__0)
{ after(grammarAccess.getValueTestExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreValueTestExpression
entryRulePreValueTestExpression 
:
{ before(grammarAccess.getPreValueTestExpressionRule()); }
	 rulePreValueTestExpression
{ after(grammarAccess.getPreValueTestExpressionRule()); } 
	 EOF 
;

// Rule PreValueTestExpression
rulePreValueTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getGroup()); }
(rule__PreValueTestExpression__Group__0)
{ after(grammarAccess.getPreValueTestExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup()); }
(rule__TextExpression__Group__0)
{ after(grammarAccess.getTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEIntegerObject
entryRuleEIntegerObject 
:
{ before(grammarAccess.getEIntegerObjectRule()); }
	 ruleEIntegerObject
{ after(grammarAccess.getEIntegerObjectRule()); } 
	 EOF 
;

// Rule EIntegerObject
ruleEIntegerObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntegerObjectAccess().getGroup()); }
(rule__EIntegerObject__Group__0)
{ after(grammarAccess.getEIntegerObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEFloatObject
entryRuleEFloatObject 
:
{ before(grammarAccess.getEFloatObjectRule()); }
	 ruleEFloatObject
{ after(grammarAccess.getEFloatObjectRule()); } 
	 EOF 
;

// Rule EFloatObject
ruleEFloatObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEFloatObjectAccess().getGroup()); }
(rule__EFloatObject__Group__0)
{ after(grammarAccess.getEFloatObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEBooleanObject
entryRuleEBooleanObject 
:
{ before(grammarAccess.getEBooleanObjectRule()); }
	 ruleEBooleanObject
{ after(grammarAccess.getEBooleanObjectRule()); } 
	 EOF 
;

// Rule EBooleanObject
ruleEBooleanObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEBooleanObjectAccess().getAlternatives()); }
(rule__EBooleanObject__Alternatives)
{ after(grammarAccess.getEBooleanObjectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PreOperator
rulePreOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddOperator
ruleAddOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
(	'+' 
)
{ after(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SubOperator
ruleSubOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
(	'-' 
)
{ after(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ModOperator
ruleModOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
(	'mod' 
)
{ after(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueTestOperator
ruleValueTestOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__NotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
	ruleAtomicExpression
{ after(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getGroup_1()); }
(rule__NotExpression__Group_1__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getSignalReferenceParserRuleCall_1()); }
	ruleSignalReference
{ after(grammarAccess.getAtomicExpressionAccess().getSignalReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
(rule__AtomicExpression__Group_2__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
(rule__AtomicExpression__Group_3__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_4()); }
(rule__AtomicExpression__Group_4__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getVariableReferenceParserRuleCall_2()); }
	ruleVariableReference
{ after(grammarAccess.getAtomicValuedExpressionAccess().getVariableReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getValueTestExpressionParserRuleCall_3()); }
	ruleValueTestExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getValueTestExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getPreValueTestExpressionParserRuleCall_4()); }
	rulePreValueTestExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getPreValueTestExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_5()); }
(rule__AtomicValuedExpression__Group_5__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_6()); }
(rule__AtomicValuedExpression__Group_6__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getTextExpressionParserRuleCall_7()); }
	ruleTextExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getTextExpressionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getEKeyword_4_0_0()); }

	'E' 

{ after(grammarAccess.getEFloatObjectAccess().getEKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getEFloatObjectAccess().getEKeyword_4_0_1()); }

	'e' 

{ after(grammarAccess.getEFloatObjectAccess().getEKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EBooleanObject__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanObjectAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getEBooleanObjectAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getEBooleanObjectAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getEBooleanObjectAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
{ after(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_1__0__Impl
	rule__NotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_1__1__Impl
	rule__NotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NotExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__NotExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getOperatorExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getAtomicExpressionAccess().getOperatorExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__1__Impl
	rule__AtomicExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getOperatorAssignment_2_1()); }
(rule__AtomicExpression__OperatorAssignment_2_1)
{ after(grammarAccess.getAtomicExpressionAccess().getOperatorAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__2__Impl
	rule__AtomicExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_2()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__3__Impl
	rule__AtomicExpression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getSubExpressionsAssignment_2_3()); }
(rule__AtomicExpression__SubExpressionsAssignment_2_3)
{ after(grammarAccess.getAtomicExpressionAccess().getSubExpressionsAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AtomicExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_3__0__Impl
	rule__AtomicExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_3__1__Impl
	rule__AtomicExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getCompareOperationParserRuleCall_3_1()); }
	ruleCompareOperation
{ after(grammarAccess.getAtomicExpressionAccess().getCompareOperationParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_4__0__Impl
	rule__AtomicExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_4__1__Impl
	rule__AtomicExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_4_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__0__Impl
	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getCompareOperationAccess().getValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_1()); }
(rule__CompareOperation__Group_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__0__Impl
	rule__CompareOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__1__Impl
	rule__CompareOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
(rule__CompareOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
	ruleSubExpression
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
	rule__AddExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AddExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AddExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__0__Impl
	rule__SubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1()); }
(rule__SubExpression__Group_1__0)*
{ after(grammarAccess.getSubExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__0__Impl
	rule__SubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__1__Impl
	rule__SubExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
(rule__SubExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__SubExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getModExpressionParserRuleCall_0()); }
	ruleModExpression
{ after(grammarAccess.getMultExpressionAccess().getModExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
	rule__MultExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__MultExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__0__Impl
	rule__ModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getModExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1()); }
(rule__ModExpression__Group_1__0)?
{ after(grammarAccess.getModExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__0__Impl
	rule__ModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__1__Impl
	rule__ModExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ModExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__ModExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_5__0__Impl
	rule__AtomicValuedExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_5__1__Impl
	rule__AtomicValuedExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getDivExpressionParserRuleCall_5_1()); }
	ruleDivExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getDivExpressionParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_6__0__Impl
	rule__AtomicValuedExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_6_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_6__1__Impl
	rule__AtomicValuedExpression__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_6_1()); }
	ruleValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_6_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__0__Impl
	rule__DivExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getDivExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__1__Impl
	rule__DivExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1()); }
(

)
{ after(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__2__Impl
	rule__DivExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorAssignment_2()); }
(rule__DivExpression__OperatorAssignment_2)
{ after(grammarAccess.getDivExpressionAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_3()); }
(rule__DivExpression__SubExpressionsAssignment_3)
{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ValueTestExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueTestExpression__Group__0__Impl
	rule__ValueTestExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getOperatorAssignment_0()); }
(rule__ValueTestExpression__OperatorAssignment_0)
{ after(grammarAccess.getValueTestExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTestExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueTestExpression__Group__1__Impl
	rule__ValueTestExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getValueTestExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTestExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueTestExpression__Group__2__Impl
	rule__ValueTestExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getSubExpressionsAssignment_2()); }
(rule__ValueTestExpression__SubExpressionsAssignment_2)
{ after(grammarAccess.getValueTestExpressionAccess().getSubExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTestExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueTestExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getValueTestExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PreValueTestExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreValueTestExpression__Group__0__Impl
	rule__PreValueTestExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getOperatorAssignment_0()); }
(rule__PreValueTestExpression__OperatorAssignment_0)
{ after(grammarAccess.getPreValueTestExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreValueTestExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreValueTestExpression__Group__1__Impl
	rule__PreValueTestExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPreValueTestExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreValueTestExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreValueTestExpression__Group__2__Impl
	rule__PreValueTestExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getSubExpressionsAssignment_2()); }
(rule__PreValueTestExpression__SubExpressionsAssignment_2)
{ after(grammarAccess.getPreValueTestExpressionAccess().getSubExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreValueTestExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreValueTestExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPreValueTestExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__0__Impl
	rule__TextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
(rule__TextExpression__CodeAssignment_0)
{ after(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup_1()); }
(rule__TextExpression__Group_1__0)?
{ after(grammarAccess.getTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__0__Impl
	rule__TextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__1__Impl
	rule__TextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
(rule__TextExpression__TypeAssignment_1_1)
{ after(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EIntegerObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EIntegerObject__Group__0__Impl
	rule__EIntegerObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerObjectAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntegerObjectAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EIntegerObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EIntegerObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EFloatObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group__0__Impl
	rule__EFloatObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEFloatObjectAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group__1__Impl
	rule__EFloatObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_1()); }
(	RULE_INT)?
{ after(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group__2__Impl
	rule__EFloatObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getEFloatObjectAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group__3__Impl
	rule__EFloatObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getGroup_4()); }
(rule__EFloatObject__Group_4__0)?
{ after(grammarAccess.getEFloatObjectAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EFloatObject__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group_4__0__Impl
	rule__EFloatObject__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getAlternatives_4_0()); }
(rule__EFloatObject__Alternatives_4_0)
{ after(grammarAccess.getEFloatObjectAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group_4__1__Impl
	rule__EFloatObject__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getHyphenMinusKeyword_4_1()); }
(
	'-' 
)?
{ after(grammarAccess.getEFloatObjectAccess().getHyphenMinusKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EFloatObject__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EFloatObject__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloatObject__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_4_2()); }
	RULE_INT
{ after(grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__OrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
	ruleOrOperator{ after(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_1_2_0()); }
	ruleNotExpression{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_1_1_0()); }
	ruleNotOperator{ after(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsAtomicExpressionParserRuleCall_1_2_0()); }
	ruleAtomicExpression{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsAtomicExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__OperatorAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getOperatorPreOperatorEnumRuleCall_2_1_0()); }
	rulePreOperator{ after(grammarAccess.getAtomicExpressionAccess().getOperatorPreOperatorEnumRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__SubExpressionsAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getSubExpressionsSignalReferenceParserRuleCall_2_3_0()); }
	ruleSignalReference{ after(grammarAccess.getAtomicExpressionAccess().getSubExpressionsSignalReferenceParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SignalAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0()); }
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalEStringParserRuleCall_0_1()); }
	ruleEString{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalEStringParserRuleCall_0_1()); }
)
{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsValuedExpressionParserRuleCall_1_2_0()); }
	ruleValuedExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
	ruleAddOperator{ after(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
	ruleSubExpression{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
	ruleSubOperator{ after(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
	ruleMultExpression{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
	ruleMultOperator{ after(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
	ruleModExpression{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
	ruleModOperator{ after(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_2_0()); }
	ruleDivOperator{ after(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__SubExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_3_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableEStringParserRuleCall_0_1()); }
	ruleEString{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableEStringParserRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_0_0()); }
	ruleValueTestOperator{ after(grammarAccess.getValueTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTestExpression__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestExpressionAccess().getSubExpressionsSignalReferenceParserRuleCall_2_0()); }
	ruleSignalReference{ after(grammarAccess.getValueTestExpressionAccess().getSubExpressionsSignalReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_0()); }
	rulePreOperator{ after(grammarAccess.getPreValueTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreValueTestExpression__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreValueTestExpressionAccess().getSubExpressionsValueTestExpressionParserRuleCall_2_0()); }
	ruleValueTestExpression{ after(grammarAccess.getPreValueTestExpressionAccess().getSubExpressionsValueTestExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueEIntegerObjectParserRuleCall_0()); }
	ruleEIntegerObject{ after(grammarAccess.getIntValueAccess().getValueEIntegerObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueEFloatObjectParserRuleCall_0()); }
	ruleEFloatObject{ after(grammarAccess.getFloatValueAccess().getValueEFloatObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueEBooleanObjectParserRuleCall_0()); }
	ruleEBooleanObject{ after(grammarAccess.getBooleanValueAccess().getValueEBooleanObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


