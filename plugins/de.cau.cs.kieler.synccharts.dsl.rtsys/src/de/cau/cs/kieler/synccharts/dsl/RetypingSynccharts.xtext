grammar de.cau.cs.kieler.synccharts.dsl.RetypingSynccharts with org.eclipse.xtext.common.Terminals
generate retypingSynccharts "http://www.cau.de/cs/kieler/synccharts/dsl/RetypingSynccharts" 

	//========================================================================================
	//===  									    STATE						               ===
	//========================================================================================

State:

	( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' id=ID
	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
	| ((isInitial?='init')(isFinal?='final')) (type=StateType) id=ID
	| ((isInitial?='init')(isFinal?='final')) 'state' id=ID
	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
	| ((isInitial?='init')(isFinal?='final')) 'state'
	| ((isInitial?='init')(isFinal?='final')) id=ID
	| ((isInitial?='init')(isFinal?='final'))
	
	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' id=ID
	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
	| ((isFinal?='final')(isInitial?='init')) (type=StateType) id=ID
	| ((isFinal?='final')(isInitial?='init')) 'state' id=ID
	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
	| ((isFinal?='final')(isInitial?='init')) 'state'
	| ((isFinal?='final')(isInitial?='init')) id=ID
	| ((isFinal?='final')(isInitial?='init'))
	
	| (isInitial?='init') (type=StateType) 'state' id=ID
	| (isInitial?='init') (type=StateType) 'state'
	| (isInitial?='init') (type=StateType) id=ID  
	| (isInitial?='init') 'state' id=ID
	| (isInitial?='init') (type=StateType) 
	| (isInitial?='init') 'state'
	| (isInitial?='init') id=ID
	| (isInitial?='init')
	
	| (isFinal?='final')  (type=StateType) 'state' id=ID
	| (isFinal?='final')  (type=StateType) 'state' 
	| (isFinal?='final')  (type=StateType) id=ID
	| (isFinal?='final')  'state' id=ID
	| (isFinal?='final')  (type=StateType)
	| (isFinal?='final')  'state' id=ID
	| (isFinal?='final')  id=ID
	| (isFinal?='final')
	
	| (type=StateType) 'state' id=ID
	| (type=StateType) 'state'
	| (type=StateType) id=ID
	| (type=StateType)
	
	| 'state' id=ID
	| 'state'
		
	| id=ID
	)
	
	(label=STRING)?
	(bodyText=STRING)?
	
('{'	
	(	 	('onentry' entryActions+=Action) 
		| 	('oninner' innerActions+=Action) 
		|   ('onexit' exitActions+=Action ) 
		| 	('suspension' suspensionTrigger=Action) 
		| 	(signals+=Signal) 
		|	((regions+=Region '||' )* regions+=Region)
	)+	
	'}'
)? 
;
Renaming:
	oldID=STRING'/'newID=STRING
;
	//========================================================================================
	//===  									    REGION  					               ===
	//========================================================================================
Region:
	('region')? (id=STRING)? 

	(		(variables+=Variable)
		|	(signals+=Signal)
		|   (innerStates+=State)
	)+
	//========================================================================================
	//===       optional referenced state //*** CHECK : StateContent_1 ***//               ===
	//===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
	//========================================================================================
	//( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
	
;
	//========================================================================================
	//===  									    ACTIONS  					               ===
	//========================================================================================
Action:
	((isImmediate?='#')? (triggersAndEfects=STRING) (delay=INT)?)
	//| Transition
	
;
	//========================================================================================
	//===  									    TRANSITION 					               ===
	//========================================================================================
//Transition:
//	
//;
	//========================================================================================
	//===  									    VAR,SIG  					               ===
	//========================================================================================
ValuedObject:
	Signal | Variable
;
Variable:
	name=ID (':= ' initialValue=INT)? (': ' (type=ValueType| hostType=STRING))? 
;
Signal:
 	
		(isLocal?='local' | isInput?='input' | isOutput?='output')
		
		name=ID 
		
		(':= ' initialValue=INT)? 
		
		(	(': ' (type=ValueType|hostType=STRING) )
		| 	(': ' 'combine' (type=ValueType|hostType=STRING) 'with' (combineOperator=CombineOperator | hostCombineOperator=STRING)) //*** CHECK : Signal_1 && Signal_2 ***//
		)?
;
	//========================================================================================
	//===  								 ENUMS, DATATYPES etc      			               ===
	//========================================================================================
TICK returns Signal	: 'tick' ; 
enum StateType		:  NORMAL | PSEUDO='cond' | REFERENCE='ref' | TEXTUAL='textual'; 
enum CombineOperator: NONE | ADD='+' | MULT='*' | AND='AND'|OR='OR' |HOST='host';
enum ValueType		:	PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST='host';	
