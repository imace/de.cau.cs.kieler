/******************************************************************************
 * KIELER - Kiel Integrated Environment for Layout for the Eclipse RCP
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright ${year} by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 ******************************************************************************
 * Namenueberlegungen fuer die neue Sprache:
 * RTSYS - ReTyped Synccharts
 * RTSYS - ReTentive Language for Synccharts
 * RTSYS - RevisiTing Synccharts
 * RTSYS - Rational Text for Synccharts // alle anderen waren irrational:p
 * RTSYS - Recasting Synccharts (ReKasting fuer KIEL?) //doof
 * RTSYS - Recapulated Synccharts (ReKapulated fuer KIEL?) //uebertrieben
 * RVH - Rational and Visionary Handling of Synccharts //Vision ist passend:) 
 * SEWINCH -Simple Way of Editing Synccharts // Sevinc halam -- DA Name?
 * KITTY - KIeler TexTual sYnccharts 
 ******************************************************************************/
grammar de.cau.cs.kieler.synccharts.dsl.RetypingSynccharts with org.eclipse.xtext.common.Terminals
generate retypingSynccharts "http://www.cau.de/cs/kieler/synccharts/dsl/RetypingSynccharts" 
//import "platform:/resource/de.cau.cs.kieler.synccharts.labelparser/src-gen/de/cau/cs/kieler/synccharts/TransitionLabel.ecore" as transitionlabel
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

	//========================================================================================
	//===  									    STATE						               ===
	//========================================================================================

State:
  //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
  //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
  // you have to list all possible combinations seperately 
  // arbitrary positions for optional alternatives is not possible
  // or you have to use ((..)?(..)?)* and then validate them manually   

(	(	  (	
			  // n=3, k=1
			    (isInitial?='init')
			  | (isFinal?='final')
			  | (type=StateType)
			  
			  // n=3, k=2
			  | (isInitial?='init' isFinal?='final')   
			  | (isInitial?='init' type=StateType)
			  | (isFinal?='final' isInitial?='init') 
			  | (isFinal?='final' type=StateType) 
			  | (type=StateType isInitial?='init') 
			  | (type=StateType isFinal?='final') 
			
			  // n=3, k=3
			  | (isInitial?='init' isFinal?='final' type=StateType)  
			  | (isInitial?='init' type=StateType isFinal?='final')
			  | (isFinal?='final' isInitial?='init' type=StateType)
			  | (isFinal?='final' type=StateType isInitial?='init') 
			  | (type=StateType isFinal?='final' isInitial?='init') 
			  | (type=StateType isInitial?='init' isFinal?='final') 
		  )?
 
	 	 ('state') // optional keyword, cf.Meeting_TextualSyntax-II
	
		 (id=ID)? //*** CHECK : State_2 ***// [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
	
		 (label=STRING)?
		
		 (bodyText=STRING)? //*** CHECK : State_3 ***//
	)
|
	(	//===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
		(newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' 
	)
)
	
    ('{'	
		(	 	('onentry' entryActions+=Action) //0..*
			| 	('oninner' innerActions+=Action) //0..*
			|   ('onexit' exitActions+=Action ) //0..*
			| 	('suspension' suspensionTrigger=Action) // 0..1
			| 	(signals+=Signal) //0..*
			|	((regions+=Region '||' )* regions+=Region)
		)+	
	 '}'
	)? 
;
SignalRenaming:
	oldSignal=[Signal|ID]'/'newSignal=[Signal|ID]
;
	//========================================================================================
	//===  									    REGION  					               ===
	//========================================================================================
Region:
	('region')? (id=STRING)? 

	(		(variables+=Variable)
		|	(signals+=Signal)
		|   (innerStates+=State)
	)+
	//========================================================================================
	//===       optional referenced state //*** CHECK : StateContent_1 ***//               ===
	//===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
	//========================================================================================
	//( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
	
;
	//========================================================================================
	//===  									    ACTIONS  					               ===
	//========================================================================================
Action:
	(isImmediate?='#' (triggersAndEfects=STRING) (delay=INT)?)
	//| Transition
	
;
	//========================================================================================
	//===  									    TRANSITION 					               ===
	//========================================================================================
//Transition:
//	
//;
	//========================================================================================
	//===  									    VAR,SIG  					               ===
	//========================================================================================
ValuedObject:
	Signal | Variable
;
Variable:
	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an 
	name=ID (':= ' initialValue=INT)? (': ' (type=ValueType| hostType=STRING))? 
;
Signal:
 	
		(isLocal?='local' | isInput?='input' | isOutput?='output')
		
		name=ID 
		
		(':=' initialValue=INT)? 
		
		(	(': ' (type=ValueType|hostType=STRING) )
		| 	(': ' 'combine' (type=ValueType|hostType=STRING) 'with' (combineOperator=CombineOperator | hostCombineOperator=STRING)) //*** CHECK : Signal_1 && Signal_2 ***//
		)?//*** CHECK : Signal_3 ***//	
;
	//========================================================================================
	//===  								 ENUMS, DATATYPES etc      			               ===
	//========================================================================================
TICK returns Signal:
	'tick' // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
; 
enum StateType:
  NORMAL | PSEUDO='cond' | REFERENCE='reference' | TEXTUAL='textual'
; 
enum CombineOperator :
NONE | ADD='+' | MULT='*' | HOST='host' //hostCombineOperator
;
enum ValueType:
	PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | DOUBLE='double' | HOST='host' //| FLOAT='float'
;	


