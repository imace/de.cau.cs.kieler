/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.synccharts.dsl.services.RetypingSyncchartsGrammarAccess;

import com.google.inject.Inject;

public class RetypingSyncchartsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private RetypingSyncchartsGrammarAccess grammarAccess;
		
	public RetypingSyncchartsGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule State ****************
 *
 * State:
 *   (isInitial?="init"? isFinal?="final"? stateKind=StateType?) "state" stateName=ID
 *   label=STRING?; 
 * 
 *   
 * 	//!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
 * 	 //!!!!!!!!!! ((isInitial?='init')|(isFinal?='final')|(stateKind=StateType)?)*   !!!!!!!!!! //
 * 	 //!!!!!!!!!! DO NOT USE THE RULE ABOVE !!!!!!!!!! //
 * 	 //((isInitial?='init')?(isFinal?='final')?(stateKind=StateType)?)* // if pseudo, the keyword becomes 'cond' etc instead of 'pseudo'
 * 	 
 * 	  // optional keyword, cf.Meeting_Textu alSyntax-II
 * 	   //optionale ID (Remember: "Kein ID ist auch ein eindeutiges ID!!")
 * 	  
 * //	(stateContent=StateContent)?
 * //	(outgoingTransitions+=Transition)*
 * 
 * //StateContent:
 * //	'{'
 * ////	(regions+=Region)*
 * //	(		(exitActions+=ExitAction )
 * //		| 	(entryActions+=EntryAction)
 * //		| 	(innerAction+=InnerAction)
 * //		| 	(signalsAndVariables+=ValuedObject)
 * //		|	(innerStates+=State	('||' parallelStates+=State)*)
 * //	)+	
 * //	'}'
 * //;
 *
 **/

// (isInitial?="init"? isFinal?="final"? stateKind=StateType?) "state" stateName=ID
// label=STRING? 
// 	//!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
// 	 //!!!!!!!!!! ((isInitial?='init')|(isFinal?='final')|(stateKind=StateType)?)*   !!!!!!!!!! //
// 	 //!!!!!!!!!! DO NOT USE THE RULE ABOVE !!!!!!!!!! //
// 	 //((isInitial?='init')?(isFinal?='final')?(stateKind=StateType)?)* // if pseudo, the keyword becomes 'cond' etc instead of 'pseudo'
// 	 
// 	  // optional keyword, cf.Meeting_Textu alSyntax-II
// 	   //optionale ID (Remember: "Kein ID ist auch ein eindeutiges ID!!")
// 	  
// //	(stateContent=StateContent)?
// //	(outgoingTransitions+=Transition)*
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_LabelAssignment_3(parent, this, 0, inst);
			case 1: return new State_StateNameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isInitial?="init"? isFinal?="final"? stateKind=StateType?
protected class State_Group_0 extends GroupToken {
	
	public State_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKindAssignment_0_2(parent, this, 0, inst);
			case 1: return new State_IsFinalAssignment_0_1(parent, this, 1, inst);
			case 2: return new State_IsInitialAssignment_0_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"?
protected class State_IsInitialAssignment_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"?
protected class State_IsFinalAssignment_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}

// stateKind=StateType?
protected class State_StateKindAssignment_0_2 extends AssignmentToken  {
	
	public State_StateKindAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKindAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_1(parent, this, 0, inst);
			case 1: return new State_IsInitialAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("stateKind",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("stateKind");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getStateKindStateTypeEnumRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// "state" 
// 	  // optional keyword, cf.Meeting_Textu alSyntax-II
protected class State_StateKeyword_1 extends KeywordToken  {
	
	public State_StateKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// stateName=ID
protected class State_StateNameAssignment_2 extends AssignmentToken  {
	
	public State_StateNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getStateNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("stateName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("stateName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getStateNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// label=STRING?
protected class State_LabelAssignment_3 extends AssignmentToken  {
	
	public State_LabelAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getLabelAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule State ****************/

}
