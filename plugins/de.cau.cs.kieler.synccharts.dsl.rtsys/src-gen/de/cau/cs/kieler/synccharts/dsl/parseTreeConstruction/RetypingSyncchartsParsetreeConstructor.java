/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.synccharts.dsl.services.RetypingSyncchartsGrammarAccess;

import com.google.inject.Inject;

public class RetypingSyncchartsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private RetypingSyncchartsGrammarAccess grammarAccess;
		
	public RetypingSyncchartsGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			case 1: return new SignalRenaming_Group(this, this, 1, inst);
			case 2: return new Region_Group(this, this, 2, inst);
			case 3: return new Action_Group(this, this, 3, inst);
			case 4: return new ValuedObject_Alternatives(this, this, 4, inst);
			case 5: return new Variable_Group(this, this, 5, inst);
			case 6: return new Signal_Group(this, this, 6, inst);
			case 7: return new TICK_TickKeyword(this, this, 7, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule State ****************
 *
 * State:
 *   ((isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
 *   "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
 *   isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
 *   isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
 *   "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
 *   StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
 *   ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
 *   "state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
 *   State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]"
 *   ) ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
 *   exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
 *   regions+=Region "||")* regions+=Region)+ "}")?; 
 * 
 * 	//========================================================================================
 * 	 //===  									    STATE						               ===
 * 	 //========================================================================================
 * 
 * 
 *   //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
 *    //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
 *    // you have to list all possible combinations seperately 
 *    // arbitrary positions for optional alternatives is not possible
 *    // or you have to use ((..)?(..)?)* and then validate them manually   
 * 
 * 	 	   	
 * 			  // n=3, k=1
 * 			     
 * 			    
 * 			    
 * 			  
 * 			  // n=3, k=2
 * 			          
 * 			      
 * 			       
 * 			       
 * 			       
 * 			       
 * 			
 * 			  // n=3, k=3
 * 			           
 * 			        
 * 			        
 * 			         
 * 			         
 * 			         
 * 		  
 *  
 * 	 	   // optional keyword, cf.Meeting_TextualSyntax-II
 * 	
 * 		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
 * 	
 * 		 
 * 		
 * 		   // *** CHECK : State_3 *** //
 * 	 
 * 
 * 		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
 * 		              
 * 	
 * 
 * 	
 *     	
 * 			 	     //0..*
 * 			  	     //0..*
 * 			           //0..*
 * 			  	     // 0..1
 * 			  	   //0..*
 *
 **/

// ((isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
// "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
// isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
// isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
// "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
// StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
// ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
// "state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
// State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]"
// ) ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
// exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
// regions+=Region "||")* regions+=Region)+ "}")? 
//   //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
//    //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
//    // you have to list all possible combinations seperately 
//    // arbitrary positions for optional alternatives is not possible
//    // or you have to use ((..)?(..)?)* and then validate them manually   
// 
// 	 	   	
// 			  // n=3, k=1
// 			     
// 			    
// 			    
// 			  
// 			  // n=3, k=2
// 			          
// 			      
// 			       
// 			       
// 			       
// 			       
// 			
// 			  // n=3, k=3
// 			           
// 			        
// 			        
// 			         
// 			         
// 			         
// 		  
//  
// 	 	   // optional keyword, cf.Meeting_TextualSyntax-II
// 	
// 		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
// 	
// 		 
// 		
// 		   // *** CHECK : State_3 *** //
// 	 
// 
// 		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
// 		              
// 	
// 
// 	
//     	
// 			 	     //0..*
// 			  	     //0..*
// 			           //0..*
// 			  	     // 0..1
// 			  	   //0..*
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1(parent, this, 0, inst);
			case 1: return new State_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
// "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
// isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
// isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
// "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
// StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
// ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
// "state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
// State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]" 
//   //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
//    //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
//    // you have to list all possible combinations seperately 
//    // arbitrary positions for optional alternatives is not possible
//    // or you have to use ((..)?(..)?)* and then validate them manually   
// 
// 	 	   	
// 			  // n=3, k=1
// 			     
// 			    
// 			    
// 			  
// 			  // n=3, k=2
// 			          
// 			      
// 			       
// 			       
// 			       
// 			       
// 			
// 			  // n=3, k=3
// 			           
// 			        
// 			        
// 			         
// 			         
// 			         
// 		  
//  
// 	 	   // optional keyword, cf.Meeting_TextualSyntax-II
// 	
// 		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
// 	
// 		 
// 		
// 		   // *** CHECK : State_3 *** //
// 	 
// 
// 		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
protected class State_Alternatives_0 extends AlternativesToken {

	public State_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_0_0(parent, this, 0, inst);
			case 1: return new State_Group_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
// "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
// isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
// isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
// "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
// StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
// ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
// "state" id=ID? label=STRING? bodyText=STRING? 	   	
// 			  // n=3, k=1
// 			     
// 			    
// 			    
// 			  
// 			  // n=3, k=2
// 			          
// 			      
// 			       
// 			       
// 			       
// 			       
// 			
// 			  // n=3, k=3
// 			           
// 			        
// 			        
// 			         
// 			         
// 			         
// 		  
//  
// 	 	   // optional keyword, cf.Meeting_TextualSyntax-II
// 	
// 		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
// 	
// 		 
// 		
// 		   // *** CHECK : State_3 *** //
protected class State_Group_0_0 extends GroupToken {
	
	public State_Group_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_BodyTextAssignment_0_0_4(parent, this, 0, inst);
			case 1: return new State_LabelAssignment_0_0_3(parent, this, 1, inst);
			case 2: return new State_IdAssignment_0_0_2(parent, this, 2, inst);
			case 3: return new State_StateKeyword_0_0_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// (isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
// "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
// isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
// isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
// "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
// StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
// ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")? 	   	
// 			  // n=3, k=1
// 			     
// 			    
// 			    
// 			  
// 			  // n=3, k=2
// 			          
// 			      
// 			       
// 			       
// 			       
// 			       
// 			
// 			  // n=3, k=3
protected class State_Alternatives_0_0_0 extends AlternativesToken {

	public State_Alternatives_0_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateAccess().getAlternatives_0_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_0(parent, this, 0, inst);
			case 1: return new State_IsFinalAssignment_0_0_0_1(parent, this, 1, inst);
			case 2: return new State_TypeAssignment_0_0_0_2(parent, this, 2, inst);
			case 3: return new State_Group_0_0_0_3(parent, this, 3, inst);
			case 4: return new State_Group_0_0_0_4(parent, this, 4, inst);
			case 5: return new State_Group_0_0_0_5(parent, this, 5, inst);
			case 6: return new State_Group_0_0_0_6(parent, this, 6, inst);
			case 7: return new State_Group_0_0_0_7(parent, this, 7, inst);
			case 8: return new State_Group_0_0_0_8(parent, this, 8, inst);
			case 9: return new State_Group_0_0_0_9(parent, this, 9, inst);
			case 10: return new State_Group_0_0_0_10(parent, this, 10, inst);
			case 11: return new State_Group_0_0_0_11(parent, this, 11, inst);
			case 12: return new State_Group_0_0_0_12(parent, this, 12, inst);
			case 13: return new State_Group_0_0_0_13(parent, this, 13, inst);
			case 14: return new State_Group_0_0_0_14(parent, this, 14, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_1_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_2 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_2_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init" isFinal?="final"
protected class State_Group_0_0_0_3 extends GroupToken {
	
	public State_Group_0_0_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_3_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_3_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_3_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_3_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" type=StateType
protected class State_Group_0_0_0_4 extends GroupToken {
	
	public State_Group_0_0_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_4_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_4_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_4_1 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_4_1_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" isInitial?="init"
protected class State_Group_0_0_0_5 extends GroupToken {
	
	public State_Group_0_0_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_5_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_5_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_5_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_5_1_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" type=StateType
protected class State_Group_0_0_0_6 extends GroupToken {
	
	public State_Group_0_0_0_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_6_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_6_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_6_1 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_6_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType isInitial?="init"
protected class State_Group_0_0_0_7 extends GroupToken {
	
	public State_Group_0_0_0_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_0_0_0_7_0 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_7_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_7_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_7_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType isFinal?="final"
protected class State_Group_0_0_0_8 extends GroupToken {
	
	public State_Group_0_0_0_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_0_0_0_8_0 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_8_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_8_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_8_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" isFinal?="final" type=StateType
protected class State_Group_0_0_0_9 extends GroupToken {
	
	public State_Group_0_0_0_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_9_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_9_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_9_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_9_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_9_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_9_1_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_9_2 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_9_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_9_2_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" type=StateType isFinal?="final"
protected class State_Group_0_0_0_10 extends GroupToken {
	
	public State_Group_0_0_0_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_10_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_10_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_10_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_10_1 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_10_1_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_10_2 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_10_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_10_2_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" isInitial?="init" type=StateType
protected class State_Group_0_0_0_11 extends GroupToken {
	
	public State_Group_0_0_0_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_11_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_11_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_11_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_11_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_11_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_11_1_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_11_2 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_11_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_11_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_11_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_11_2_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" type=StateType isInitial?="init"
protected class State_Group_0_0_0_12 extends GroupToken {
	
	public State_Group_0_0_0_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_12_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_12_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_12_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_0_0_0_12_1 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_12_1_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_12_2 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_12_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_12_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_12_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_12_2_0();
			return obj;
		}
		return null;
	}

}


// type=StateType isFinal?="final" isInitial?="init"
protected class State_Group_0_0_0_13 extends GroupToken {
	
	public State_Group_0_0_0_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_13_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_0_0_0_13_0 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_13_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_13_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_13_1_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_13_2 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_13_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_13_2_0();
			return obj;
		}
		return null;
	}

}


// type=StateType isInitial?="init" isFinal?="final"
protected class State_Group_0_0_0_14 extends GroupToken {
	
	public State_Group_0_0_0_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_0_0_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_0_0_0_14_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_0_0_0_14_0 extends AssignmentToken  {
	
	public State_TypeAssignment_0_0_0_14_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_0_0_0_14_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_0_0_0_14_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_0_0_0_14_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_0_0_0_14_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0_14_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_0_0_0_14_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_0_0_0_14_1_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_0_0_0_14_2 extends AssignmentToken  {
	
	public State_IsFinalAssignment_0_0_0_14_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_0_0_0_14_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_0_0_0_14_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_0_0_0_14_2_0();
			return obj;
		}
		return null;
	}

}



// "state"
protected class State_StateKeyword_0_0_1 extends KeywordToken  {
	
	public State_StateKeyword_0_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_0_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_0_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// id=ID?
protected class State_IdAssignment_0_0_2 extends AssignmentToken  {
	
	public State_IdAssignment_0_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_0_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_0_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getIdIDTerminalRuleCall_0_0_2_0();
			return obj;
		}
		return null;
	}

}

// label=STRING?
protected class State_LabelAssignment_0_0_3 extends AssignmentToken  {
	
	public State_LabelAssignment_0_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getLabelAssignment_0_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0_0_2(parent, this, 0, inst);
			case 1: return new State_StateKeyword_0_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_0_0_3_0();
			return obj;
		}
		return null;
	}

}

// bodyText=STRING?
protected class State_BodyTextAssignment_0_0_4 extends AssignmentToken  {
	
	public State_BodyTextAssignment_0_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getBodyTextAssignment_0_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_LabelAssignment_0_0_3(parent, this, 0, inst);
			case 1: return new State_IdAssignment_0_0_2(parent, this, 1, inst);
			case 2: return new State_StateKeyword_0_0_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bodyText",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bodyText");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getBodyTextSTRINGTerminalRuleCall_0_0_4_0();
			return obj;
		}
		return null;
	}

}


// (newStateID=ID "@")? referencedState=[State] "[" (signalRenamings+=SignalRenaming ","
// )* signalRenamings+=SignalRenaming "]" 	 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
protected class State_Group_0_1 extends GroupToken {
	
	public State_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RightSquareBracketKeyword_0_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (newStateID=ID "@")?
protected class State_Group_0_1_0 extends GroupToken {
	
	public State_Group_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_CommercialAtKeyword_0_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// newStateID=ID
protected class State_NewStateIDAssignment_0_1_0_0 extends AssignmentToken  {
	
	public State_NewStateIDAssignment_0_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getNewStateIDAssignment_0_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newStateID",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newStateID");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getNewStateIDIDTerminalRuleCall_0_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// "@"
protected class State_CommercialAtKeyword_0_1_0_1 extends KeywordToken  {
	
	public State_CommercialAtKeyword_0_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getCommercialAtKeyword_0_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_NewStateIDAssignment_0_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// referencedState=[State]
protected class State_ReferencedStateAssignment_0_1_1 extends AssignmentToken  {
	
	public State_ReferencedStateAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getReferencedStateAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_0_1_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencedState",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencedState");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateAccess().getReferencedStateStateCrossReference_0_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getStateAccess().getReferencedStateStateCrossReference_0_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class State_LeftSquareBracketKeyword_0_1_2 extends KeywordToken  {
	
	public State_LeftSquareBracketKeyword_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getLeftSquareBracketKeyword_0_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_ReferencedStateAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (signalRenamings+=SignalRenaming ",")*
protected class State_Group_0_1_3 extends GroupToken {
	
	public State_Group_0_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_0_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_CommaKeyword_0_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signalRenamings+=SignalRenaming
protected class State_SignalRenamingsAssignment_0_1_3_0 extends AssignmentToken  {
	
	public State_SignalRenamingsAssignment_0_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSignalRenamingsAssignment_0_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signalRenamings",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signalRenamings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSignalRenamingsSignalRenamingParserRuleCall_0_1_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Group_0_1_3(parent, next, actIndex, consumed);
			case 1: return new State_LeftSquareBracketKeyword_0_1_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class State_CommaKeyword_0_1_3_1 extends KeywordToken  {
	
	public State_CommaKeyword_0_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getCommaKeyword_0_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_SignalRenamingsAssignment_0_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// signalRenamings+=SignalRenaming
protected class State_SignalRenamingsAssignment_0_1_4 extends AssignmentToken  {
	
	public State_SignalRenamingsAssignment_0_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSignalRenamingsAssignment_0_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signalRenamings",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signalRenamings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSignalRenamingsSignalRenamingParserRuleCall_0_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Group_0_1_3(parent, next, actIndex, consumed);
			case 1: return new State_LeftSquareBracketKeyword_0_1_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class State_RightSquareBracketKeyword_0_1_5 extends KeywordToken  {
	
	public State_RightSquareBracketKeyword_0_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getRightSquareBracketKeyword_0_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_SignalRenamingsAssignment_0_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
// exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
// regions+=Region "||")* regions+=Region)+ "}")? 	
// 			 	     //0..*
// 			  	     //0..*
// 			           //0..*
// 			  	     // 0..1
// 			  	   //0..*
protected class State_Group_1 extends GroupToken {
	
	public State_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RightCurlyBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class State_LeftCurlyBracketKeyword_1_0 extends KeywordToken  {
	
	public State_LeftCurlyBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit" exitActions
// +=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(regions+=Region
// "||")* regions+=Region)+ 	
// 			 	     //0..*
// 			  	     //0..*
// 			           //0..*
// 			  	     // 0..1
// 			  	   //0..*
protected class State_Alternatives_1_1 extends AlternativesToken {

	public State_Alternatives_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateAccess().getAlternatives_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_1_0(parent, this, 0, inst);
			case 1: return new State_Group_1_1_1(parent, this, 1, inst);
			case 2: return new State_Group_1_1_2(parent, this, 2, inst);
			case 3: return new State_Group_1_1_3(parent, this, 3, inst);
			case 4: return new State_SignalsAssignment_1_1_4(parent, this, 4, inst);
			case 5: return new State_Group_1_1_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// "onentry" entryActions+=Action
protected class State_Group_1_1_0 extends GroupToken {
	
	public State_Group_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_EntryActionsAssignment_1_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "onentry"
protected class State_OnentryKeyword_1_1_0_0 extends KeywordToken  {
	
	public State_OnentryKeyword_1_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOnentryKeyword_1_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entryActions+=Action
protected class State_EntryActionsAssignment_1_1_0_1 extends AssignmentToken  {
	
	public State_EntryActionsAssignment_1_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getEntryActionsAssignment_1_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getEntryActionsActionParserRuleCall_1_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OnentryKeyword_1_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "oninner" innerActions+=Action
protected class State_Group_1_1_1 extends GroupToken {
	
	public State_Group_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_InnerActionsAssignment_1_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "oninner"
protected class State_OninnerKeyword_1_1_1_0 extends KeywordToken  {
	
	public State_OninnerKeyword_1_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOninnerKeyword_1_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// innerActions+=Action
protected class State_InnerActionsAssignment_1_1_1_1 extends AssignmentToken  {
	
	public State_InnerActionsAssignment_1_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getInnerActionsAssignment_1_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("innerActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("innerActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getInnerActionsActionParserRuleCall_1_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OninnerKeyword_1_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "onexit" exitActions+=Action
protected class State_Group_1_1_2 extends GroupToken {
	
	public State_Group_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_ExitActionsAssignment_1_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "onexit"
protected class State_OnexitKeyword_1_1_2_0 extends KeywordToken  {
	
	public State_OnexitKeyword_1_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOnexitKeyword_1_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// exitActions+=Action
protected class State_ExitActionsAssignment_1_1_2_1 extends AssignmentToken  {
	
	public State_ExitActionsAssignment_1_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getExitActionsAssignment_1_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exitActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exitActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getExitActionsActionParserRuleCall_1_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OnexitKeyword_1_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "suspension" suspensionTrigger=Action
protected class State_Group_1_1_3 extends GroupToken {
	
	public State_Group_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_SuspensionTriggerAssignment_1_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "suspension"
protected class State_SuspensionKeyword_1_1_3_0 extends KeywordToken  {
	
	public State_SuspensionKeyword_1_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getSuspensionKeyword_1_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// suspensionTrigger=Action
protected class State_SuspensionTriggerAssignment_1_1_3_1 extends AssignmentToken  {
	
	public State_SuspensionTriggerAssignment_1_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSuspensionTriggerAssignment_1_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("suspensionTrigger",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("suspensionTrigger");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSuspensionTriggerActionParserRuleCall_1_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_SuspensionKeyword_1_1_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// signals+=Signal
protected class State_SignalsAssignment_1_1_4 extends AssignmentToken  {
	
	public State_SignalsAssignment_1_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSignalsAssignment_1_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_1_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, next, actIndex, consumed);
			case 1: return new State_LeftCurlyBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (regions+=Region "||")* regions+=Region
protected class State_Group_1_1_5 extends GroupToken {
	
	public State_Group_1_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RegionsAssignment_1_1_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (regions+=Region "||")*
protected class State_Group_1_1_5_0 extends GroupToken {
	
	public State_Group_1_1_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_VerticalLineVerticalLineKeyword_1_1_5_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// regions+=Region
protected class State_RegionsAssignment_1_1_5_0_0 extends AssignmentToken  {
	
	public State_RegionsAssignment_1_1_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getRegionsAssignment_1_1_5_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_1_1_5_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Group_1_1_5_0(parent, next, actIndex, consumed);
			case 1: return new State_Alternatives_1_1(parent, next, actIndex, consumed);
			case 2: return new State_LeftCurlyBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "||"
protected class State_VerticalLineVerticalLineKeyword_1_1_5_0_1 extends KeywordToken  {
	
	public State_VerticalLineVerticalLineKeyword_1_1_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getVerticalLineVerticalLineKeyword_1_1_5_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RegionsAssignment_1_1_5_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// regions+=Region
protected class State_RegionsAssignment_1_1_5_1 extends AssignmentToken  {
	
	public State_RegionsAssignment_1_1_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getRegionsAssignment_1_1_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_1_1_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Group_1_1_5_0(parent, next, actIndex, consumed);
			case 1: return new State_Alternatives_1_1(parent, next, actIndex, consumed);
			case 2: return new State_LeftCurlyBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class State_RightCurlyBracketKeyword_1_2 extends KeywordToken  {
	
	public State_RightCurlyBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule State ****************/


/************ begin Rule SignalRenaming ****************
 *
 * SignalRenaming:
 *   oldSignal=[Signal] "/" newSignal=[Signal]; 
 * 
 * 	
 * 
 * 	//========================================================================================
 * 	 //===  									    REGION  					               ===
 * 	 //========================================================================================
 *
 **/

// oldSignal=[Signal] "/" newSignal=[Signal]
protected class SignalRenaming_Group extends GroupToken {
	
	public SignalRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_NewSignalAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// oldSignal=[Signal]
protected class SignalRenaming_OldSignalAssignment_0 extends AssignmentToken  {
	
	public SignalRenaming_OldSignalAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getOldSignalAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldSignal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldSignal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingAccess().getOldSignalSignalCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSignalRenamingAccess().getOldSignalSignalCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class SignalRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public SignalRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_OldSignalAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// newSignal=[Signal]
protected class SignalRenaming_NewSignalAssignment_2 extends AssignmentToken  {
	
	public SignalRenaming_NewSignalAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getNewSignalAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newSignal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newSignal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingAccess().getNewSignalSignalCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSignalRenamingAccess().getNewSignalSignalCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule SignalRenaming ****************/


/************ begin Rule Region ****************
 *
 * Region:
 *   "region"? id=STRING? (variables+=Variable|signals+=Signal|innerStates+=State)+; 
 * 	//========================================================================================
 * 	 //===  									    REGION  					               ===
 * 	 //========================================================================================
 * 
 * 	   
 * 
 * 			 
 * 			 
 * 		    
 * 	
 * 	//========================================================================================
 * 	 //===       optional referenced state // *** CHECK : StateContent_1 *** //               ===
 * 	 //===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
 * 	 //========================================================================================
 * 	 //( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
 * 	
 * 
 * 	//========================================================================================
 * 	 //===  									    ACTIONS  					               ===
 * 	 //========================================================================================
 *
 **/

// "region"? id=STRING? (variables+=Variable|signals+=Signal|innerStates+=State)+ 
// 	   
// 
// 			 
// 			 
// 		    
// 	
// 	//========================================================================================
// 	 //===       optional referenced state // *** CHECK : StateContent_1 *** //               ===
// 	 //===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
// 	 //========================================================================================
// 	 //( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
protected class Region_Group extends GroupToken {
	
	public Region_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// id=STRING?
protected class Region_IdAssignment_1 extends AssignmentToken  {
	
	public Region_IdAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getIdAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegionAccess().getIdSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (variables+=Variable|signals+=Signal|innerStates+=State)+
protected class Region_Alternatives_2 extends AlternativesToken {

	public Region_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRegionAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_VariablesAssignment_2_0(parent, this, 0, inst);
			case 1: return new Region_SignalsAssignment_2_1(parent, this, 1, inst);
			case 2: return new Region_InnerStatesAssignment_2_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// variables+=Variable
protected class Region_VariablesAssignment_2_0 extends AssignmentToken  {
	
	public Region_VariablesAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getVariablesAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("variables",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("variables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRegionAccess().getVariablesVariableParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Region_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new Region_IdAssignment_1(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// signals+=Signal
protected class Region_SignalsAssignment_2_1 extends AssignmentToken  {
	
	public Region_SignalsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getSignalsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRegionAccess().getSignalsSignalParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Region_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new Region_IdAssignment_1(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// innerStates+=State
protected class Region_InnerStatesAssignment_2_2 extends AssignmentToken  {
	
	public Region_InnerStatesAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getInnerStatesAssignment_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("innerStates",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("innerStates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRegionAccess().getInnerStatesStateParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Region_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new Region_IdAssignment_1(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}



/************ end Rule Region ****************/


/************ begin Rule Action ****************
 *
 * Action:
 *   isImmediate?="#" triggersAndEfects=STRING delay=INT?; 
 * 	//========================================================================================
 * 	 //===  									    ACTIONS  					               ===
 * 	 //========================================================================================
 * 
 * 	    
 * 	//| Transition
 * 	
 * 
 * 	//========================================================================================
 * 	 //===  									    TRANSITION 					               ===
 * 	 //========================================================================================
 * //Transition:
 * //	
 * //;
 * 	 //========================================================================================
 * 	 //===  									    VAR,SIG  					               ===
 * 	 //========================================================================================
 *
 **/

// isImmediate?="#" triggersAndEfects=STRING delay=INT?
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_DelayAssignment_2(parent, this, 0, inst);
			case 1: return new Action_TriggersAndEfectsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isImmediate?="#"
protected class Action_IsImmediateAssignment_0 extends AssignmentToken  {
	
	public Action_IsImmediateAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getIsImmediateAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isImmediate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isImmediate");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// triggersAndEfects=STRING
protected class Action_TriggersAndEfectsAssignment_1 extends AssignmentToken  {
	
	public Action_TriggersAndEfectsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getTriggersAndEfectsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_IsImmediateAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("triggersAndEfects",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("triggersAndEfects");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getTriggersAndEfectsSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// delay=INT?
protected class Action_DelayAssignment_2 extends AssignmentToken  {
	
	public Action_DelayAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getDelayAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_TriggersAndEfectsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Action ****************/


/************ begin Rule ValuedObject ****************
 *
 * ValuedObject:
 *   Signal|Variable; 
 * 	//========================================================================================
 * 	 //===  									    TRANSITION 					               ===
 * 	 //========================================================================================
 * //Transition:
 * //	
 * //;
 * 	 //========================================================================================
 * 	 //===  									    VAR,SIG  					               ===
 * 	 //========================================================================================
 *
 **/

// Signal|Variable 
// 	//========================================================================================
// 	 //===  									    TRANSITION 					               ===
// 	 //========================================================================================
// //Transition:
// //	
// //;
// 	 //========================================================================================
// 	 //===  									    VAR,SIG  					               ===
// 	 //========================================================================================
protected class ValuedObject_Alternatives extends AlternativesToken {

	public ValuedObject_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValuedObject_SignalParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValuedObject_VariableParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValuedObjectRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Signal
protected class ValuedObject_SignalParserRuleCall_0 extends RuleCallToken {
	
	public ValuedObject_SignalParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getSignalParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Signal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Variable
protected class ValuedObject_VariableParserRuleCall_1 extends RuleCallToken {
	
	public ValuedObject_VariableParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getVariableParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Variable_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValuedObject ****************/


/************ begin Rule Variable ****************
 *
 * Variable:
 *   name=ID (":= " initialValue=INT)? (": " (type=ValueType|hostType=STRING))?; 
 * 
 * 	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
 *
 **/

// name=ID (":= " initialValue=INT)? (": " (type=ValueType|hostType=STRING))? 
// 	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
protected class Variable_Group extends GroupToken {
	
	public Variable_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group_2(parent, this, 0, inst);
			case 1: return new Variable_Group_1(parent, this, 1, inst);
			case 2: return new Variable_NameAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID 
// 	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
protected class Variable_NameAssignment_0 extends AssignmentToken  {
	
	public Variable_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (":= " initialValue=INT)?
protected class Variable_Group_1 extends GroupToken {
	
	public Variable_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_InitialValueAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":= "
protected class Variable_ColonEqualsSignSpaceKeyword_1_0 extends KeywordToken  {
	
	public Variable_ColonEqualsSignSpaceKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getColonEqualsSignSpaceKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialValue=INT
protected class Variable_InitialValueAssignment_1_1 extends AssignmentToken  {
	
	public Variable_InitialValueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getInitialValueAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonEqualsSignSpaceKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableAccess().getInitialValueINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// (": " (type=ValueType|hostType=STRING))?
protected class Variable_Group_2 extends GroupToken {
	
	public Variable_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Alternatives_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": "
protected class Variable_ColonSpaceKeyword_2_0 extends KeywordToken  {
	
	public Variable_ColonSpaceKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getColonSpaceKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group_1(parent, this, 0, inst);
			case 1: return new Variable_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType|hostType=STRING
protected class Variable_Alternatives_2_1 extends AlternativesToken {

	public Variable_Alternatives_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableAccess().getAlternatives_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_TypeAssignment_2_1_0(parent, this, 0, inst);
			case 1: return new Variable_HostTypeAssignment_2_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Variable_TypeAssignment_2_1_0 extends AssignmentToken  {
	
	public Variable_TypeAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getTypeAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonSpaceKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// hostType=STRING
protected class Variable_HostTypeAssignment_2_1_1 extends AssignmentToken  {
	
	public Variable_HostTypeAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getHostTypeAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonSpaceKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableAccess().getHostTypeSTRINGTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Variable ****************/


/************ begin Rule Signal ****************
 *
 * Signal:
 *   (isLocal?="local"|isInput?="input"|isOutput?="output") name=ID (":=" initialValue=
 *   INT)? (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType
 *   =STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?; 
 * 
 *  	
 * 		        
 * 		
 * 		 
 * 		
 * 		   
 * 		
 * 			     
 * 		 	               // *** CHECK : Signal_1 && Signal_2 *** //
 * 		 // *** CHECK : Signal_3 *** //	
 * 
 * 	//========================================================================================
 * 	 //===  								 ENUMS, DATATYPES etc      			               ===
 * 	 //========================================================================================
 *
 **/

// (isLocal?="local"|isInput?="input"|isOutput?="output") name=ID (":=" initialValue=
// INT)? (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType
// =STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))? 
//  	
// 		        
// 		
// 		 
// 		
// 		   
// 		
// 			     
// 		 	               // *** CHECK : Signal_1 && Signal_2 *** //
// 		 // *** CHECK : Signal_3 *** //
protected class Signal_Group extends GroupToken {
	
	public Signal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_3(parent, this, 0, inst);
			case 1: return new Signal_Group_2(parent, this, 1, inst);
			case 2: return new Signal_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isLocal?="local"|isInput?="input"|isOutput?="output"
protected class Signal_Alternatives_0 extends AlternativesToken {

	public Signal_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_IsLocalAssignment_0_0(parent, this, 0, inst);
			case 1: return new Signal_IsInputAssignment_0_1(parent, this, 1, inst);
			case 2: return new Signal_IsOutputAssignment_0_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// isLocal?="local"
protected class Signal_IsLocalAssignment_0_0 extends AssignmentToken  {
	
	public Signal_IsLocalAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getIsLocalAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isLocal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isLocal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSignalAccess().getIsLocalLocalKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInput?="input"
protected class Signal_IsInputAssignment_0_1 extends AssignmentToken  {
	
	public Signal_IsInputAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getIsInputAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInput",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInput");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSignalAccess().getIsInputInputKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}

// isOutput?="output"
protected class Signal_IsOutputAssignment_0_2 extends AssignmentToken  {
	
	public Signal_IsOutputAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getIsOutputAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isOutput",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isOutput");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSignalAccess().getIsOutputOutputKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}


// name=ID
protected class Signal_NameAssignment_1 extends AssignmentToken  {
	
	public Signal_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (":=" initialValue=INT)?
protected class Signal_Group_2 extends GroupToken {
	
	public Signal_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_InitialValueAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class Signal_ColonEqualsSignKeyword_2_0 extends KeywordToken  {
	
	public Signal_ColonEqualsSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialValue=INT
protected class Signal_InitialValueAssignment_2_1 extends AssignmentToken  {
	
	public Signal_InitialValueAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getInitialValueAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonEqualsSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getInitialValueINTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType=
// STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?  
// 		
// 			     
// 		 	               // *** CHECK : Signal_1 && Signal_2 *** //
protected class Signal_Alternatives_3 extends AlternativesToken {

	public Signal_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group_3_0(parent, this, 0, inst);
			case 1: return new Signal_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ": " (type=ValueType|hostType=STRING)
protected class Signal_Group_3_0 extends GroupToken {
	
	public Signal_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": "
protected class Signal_ColonSpaceKeyword_3_0_0 extends KeywordToken  {
	
	public Signal_ColonSpaceKeyword_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonSpaceKeyword_3_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group_2(parent, this, 0, inst);
			case 1: return new Signal_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType|hostType=STRING
protected class Signal_Alternatives_3_0_1 extends AlternativesToken {

	public Signal_Alternatives_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_3_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_3_0_1_0(parent, this, 0, inst);
			case 1: return new Signal_HostTypeAssignment_3_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_3_0_1_0 extends AssignmentToken  {
	
	public Signal_TypeAssignment_3_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_3_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonSpaceKeyword_3_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_3_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// hostType=STRING
protected class Signal_HostTypeAssignment_3_0_1_1 extends AssignmentToken  {
	
	public Signal_HostTypeAssignment_3_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getHostTypeAssignment_3_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonSpaceKeyword_3_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getHostTypeSTRINGTerminalRuleCall_3_0_1_1_0();
			return obj;
		}
		return null;
	}

}



// ": " "combine" (type=ValueType|hostType=STRING) "with" (combineOperator=
// CombineOperator|hostCombineOperator=STRING)
protected class Signal_Group_3_1 extends GroupToken {
	
	public Signal_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_3_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": "
protected class Signal_ColonSpaceKeyword_3_1_0 extends KeywordToken  {
	
	public Signal_ColonSpaceKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonSpaceKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group_2(parent, this, 0, inst);
			case 1: return new Signal_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "combine"
protected class Signal_CombineKeyword_3_1_1 extends KeywordToken  {
	
	public Signal_CombineKeyword_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineKeyword_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonSpaceKeyword_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType|hostType=STRING
protected class Signal_Alternatives_3_1_2 extends AlternativesToken {

	public Signal_Alternatives_3_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_3_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_3_1_2_0(parent, this, 0, inst);
			case 1: return new Signal_HostTypeAssignment_3_1_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_3_1_2_0 extends AssignmentToken  {
	
	public Signal_TypeAssignment_3_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_3_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineKeyword_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_3_1_2_0_0();
			return obj;
		}
		return null;
	}

}

// hostType=STRING
protected class Signal_HostTypeAssignment_3_1_2_1 extends AssignmentToken  {
	
	public Signal_HostTypeAssignment_3_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getHostTypeAssignment_3_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineKeyword_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getHostTypeSTRINGTerminalRuleCall_3_1_2_1_0();
			return obj;
		}
		return null;
	}

}


// "with"
protected class Signal_WithKeyword_3_1_3 extends KeywordToken  {
	
	public Signal_WithKeyword_3_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getWithKeyword_3_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_3_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator|hostCombineOperator=STRING
protected class Signal_Alternatives_3_1_4 extends AlternativesToken {

	public Signal_Alternatives_3_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_3_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineOperatorAssignment_3_1_4_0(parent, this, 0, inst);
			case 1: return new Signal_HostCombineOperatorAssignment_3_1_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator
protected class Signal_CombineOperatorAssignment_3_1_4_0 extends AssignmentToken  {
	
	public Signal_CombineOperatorAssignment_3_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineOperatorAssignment_3_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_3_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("combineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("combineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_3_1_4_0_0();
			return obj;
		}
		return null;
	}

}

// hostCombineOperator=STRING
protected class Signal_HostCombineOperatorAssignment_3_1_4_1 extends AssignmentToken  {
	
	public Signal_HostCombineOperatorAssignment_3_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_3_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_3_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostCombineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostCombineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_3_1_4_1_0();
			return obj;
		}
		return null;
	}

}





/************ end Rule Signal ****************/


/************ begin Rule TICK ****************
 *
 * TICK returns Signal:
 *   "tick"; 
 * 	//========================================================================================
 * 	 //===  								 ENUMS, DATATYPES etc      			               ===
 * 	 //========================================================================================
 *     
 * 	  // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
 *
 **/

// "tick" 
// 	  // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
protected class TICK_TickKeyword extends KeywordToken  {
	
	public TICK_TickKeyword(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTICKAccess().getTickKeyword();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTICKRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

/************ end Rule TICK ****************/

}
