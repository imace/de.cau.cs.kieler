/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.synccharts.dsl.services.RetypingSyncchartsGrammarAccess;

import com.google.inject.Inject;

public class RetypingSyncchartsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private RetypingSyncchartsGrammarAccess grammarAccess;
		
	public RetypingSyncchartsGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_InnerStatesAssignment(this, this, 0, inst);
			case 1: return new State_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Region ****************
 *
 * Region returns sync::Region:
 *   innerStates+=State; 
 * //generate retypingSynccharts "http://www.cau.de/cs/kieler/synccharts/dsl/RetypingSynccharts" 
 * //========================================================================================
 * //===  									    STATE						               ===
 * //========================================================================================
 * 
 * 
 *     
 * //'region' id=ID
 *    // the first state because the GMF editors root element is of type synch::Region
 *    //  (innerStates+=State)*
 *
 **/

// innerStates+=State 
// //'region' id=ID
//    // the first state because the GMF editors root element is of type synch::Region
//    //  (innerStates+=State)*
protected class Region_InnerStatesAssignment extends AssignmentToken  {
	
	public Region_InnerStatesAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getInnerStatesAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("innerStates",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("innerStates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRegionAccess().getInnerStatesStateParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Region ****************/


/************ begin Rule State ****************
 *
 * State returns sync::State:
 *   id=ID label=STRING? bodyText=STRING?; 
 *     
 * //		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
 *    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
 *    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
 *    //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
 *    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
 *    //	| ((isInitial?='init')(isFinal?='final')) 'state'
 *    //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
 *    //	| ((isInitial?='init')(isFinal?='final'))
 *    //	
 *    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
 *    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
 *    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
 *    //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
 *    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
 *    //	| ((isFinal?='final')(isInitial?='init')) 'state'
 *    //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
 *    //	| ((isFinal?='final')(isInitial?='init'))
 *    //	
 *    //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
 *    //	| (isInitial?='init') (type=StateType) 'state'
 *    //	| (isInitial?='init') (type=StateType) name=FullStateID  
 *    //	| (isInitial?='init') 'state' name=FullStateID
 *    //	| (isInitial?='init') (type=StateType) 
 *    //	| (isInitial?='init') 'state'
 *    //	| (isInitial?='init') name=FullStateID
 *    //	| (isInitial?='init')
 *    //	
 *    //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
 *    //	| (isFinal?='final')  (type=StateType) 'state' 
 *    //	| (isFinal?='final')  (type=StateType) name=FullStateID
 *    //	| (isFinal?='final')  'state' name=FullStateID
 *    //	| (isFinal?='final')  (type=StateType)
 *    //	| (isFinal?='final')  'state' name=FullStateID
 *    //	| (isFinal?='final')  name=FullStateID
 *    //	| (isFinal?='final')
 *    //	
 *    //	| (type=StateType) 'state' name=FullStateID
 *    //	| (type=StateType) 'state'
 *    //	| (type=StateType) name=FullStateID
 *    //	| (type=StateType)
 *    //	
 *    //	| 'state' name=FullStateID
 *    //	| 'state'
 *    //		
 *    //	| name=FullStateID
 *    //	)
 *      //FullStateID
 *      //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
 *      //(	(outgoingTransitions+=Transition)*
 *    //|	
 *    // ('{' //		(	 	('onentry' entryActions+=Action) 
 *    //			| 	('oninner' innerActions+=Action) 
 *    //			|   ('onexit' exitActions+=Action ) 
 *    //			| 	('suspension' suspensionTrigger=Action) // kein effect, kein delay, kein immediate
 *    //			| 	(signals+=Signal) 
 *    // (regions+=Region ('||' regions+=Region)*) //		)+	
 *    //  '}')? //	(outgoingTransitions+=Transition)*
 *    //) // this is another big OR because if my state has a content (the curly brackets) then its transition have to come after the curly brackets 
 * 
 * //Renaming: // returns sync::SignalRenaming:
 * //	oldID=STRING'/'newID=STRING
 * //;
 * //FullStateID : ((ID'@')?ID);
 * //
 * //	//========================================================================================
 * //	//===  									    ACTIONS  					               ===
 * //	//========================================================================================
 * //Action:
 * //	((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))
 * //| 
 * //	Transition
 * //	
 * //;
 * //	//========================================================================================
 * //	//===  									    REGIONS  					               ===
 * //	//========================================================================================
 * //Region returns sync::Region :
 * //	(	variables+=Variable
 * //	|	innerStates+=State
 * //	|	signals+=Signal
 * //	) +
 * //;	
 * //
 * //	//========================================================================================
 * //	//===  									    TRANSITION 					               ===
 * //	//========================================================================================
 * //	
 * //Transition:
 * //
 * //	//((sourceState=[State|FullStateID]))? //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
 * //	newSourceState=TransitionState
 * //	type=TransitionType
 * //	(targetState=[sync::State|FullStateID])//|newTargetState=TransitionState )
 * //	( 'with' triggersAndEffects=STRING)?
 * //	(isHistory?=' history')?
 * //	';'
 * //;
 * //TransitionState:// returns State:
 * //	//name=FullStateID
 * //	( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
 * //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
 * //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
 * //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
 * //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
 * //	| ((isInitial?='init')(isFinal?='final')) 'state'
 * //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
 * //	| ((isInitial?='init')(isFinal?='final'))
 * //	
 * //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
 * //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
 * //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
 * //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
 * //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
 * //	| ((isFinal?='final')(isInitial?='init')) 'state'
 * //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
 * //	| ((isFinal?='final')(isInitial?='init'))
 * //	
 * //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
 * //	| (isInitial?='init') (type=StateType) 'state'
 * //	| (isInitial?='init') (type=StateType) name=FullStateID  
 * //	| (isInitial?='init') 'state' name=FullStateID
 * //	| (isInitial?='init') (type=StateType) 
 * //	| (isInitial?='init') 'state'
 * //	| (isInitial?='init') name=FullStateID
 * //	| (isInitial?='init')
 * //	
 * //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
 * //	| (isFinal?='final')  (type=StateType) 'state' 
 * //	| (isFinal?='final')  (type=StateType) name=FullStateID
 * //	| (isFinal?='final')  'state' name=FullStateID
 * //	| (isFinal?='final')  (type=StateType)
 * //	| (isFinal?='final')  'state' name=FullStateID
 * //	| (isFinal?='final')  name=FullStateID
 * //	| (isFinal?='final')
 * //	
 * //	| (type=StateType) 'state' name=FullStateID
 * //	| (type=StateType) 'state'
 * //	| (type=StateType) name=FullStateID
 * //	| (type=StateType)
 * //	
 * //	| 'state' name=FullStateID
 * //	| 'state'
 * //		
 * //	| name=FullStateID
 * //	) 
 * //	
 * //;
 * // 	//========================================================================================
 * //	//===  									    VAR,SIG  					               ===
 * //	//========================================================================================
 * //ValuedObject:
 * //	Signal | Variable
 * //;
 * //Variable:
 * //	'var' name=ID 
 * //	( 
 * //	  (': ' type=ValueType)//or type only, type being either pre-defined or hostcode
 * //	| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type 
 * //	)  
 * //;
 * //Signal:
 * // 	
 * //		//(isLocal?='local')? this does not make any sense anymore, does it?
 * //		( (isInputOutput?='inputoutput')
 * //		| (isInput?='input')
 * //		| (isOutput?='output')
 * //		)		
 * //		name=ID 
 * //		( 
 * //		  (': ' type=ValueType) //or type only, type being either pre-defined or hostcode
 * //		| (': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING))//or combine type only
 * //		| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type
 * //		| (':=' initialValue=INT ': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING)) //or initial value and combine type
 * //		)? 
 * //;
 * //	//========================================================================================
 * //	//===  								 ENUMS, DATATYPES etc      			               ===
 * //	//========================================================================================
 * //enum StateType		: NORMAL='state' | PSEUDO='cond' | REFERENCE='ref' | TEXTUAL='textual'; 
 * //enum CombineOperator: NONE | ADD='+' | MULT='*' | AND='AND'| OR='OR' |HOST='hostCombineOperator';
 * //enum ValueType: PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST='hostType';	
 * //enum TransitionType : WEAKABORT='-->' |  STRONGABORT='o->' | NORMALTERMINATION='>->' ;
 *
 **/

// id=ID label=STRING? bodyText=STRING? 
// //		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
//    //	| ((isInitial?='init')(isFinal?='final')) 'state'
//    //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final'))
//    //	
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
//    //	| ((isFinal?='final')(isInitial?='init')) 'state'
//    //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init'))
//    //	
//    //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
//    //	| (isInitial?='init') (type=StateType) 'state'
//    //	| (isInitial?='init') (type=StateType) name=FullStateID  
//    //	| (isInitial?='init') 'state' name=FullStateID
//    //	| (isInitial?='init') (type=StateType) 
//    //	| (isInitial?='init') 'state'
//    //	| (isInitial?='init') name=FullStateID
//    //	| (isInitial?='init')
//    //	
//    //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
//    //	| (isFinal?='final')  (type=StateType) 'state' 
//    //	| (isFinal?='final')  (type=StateType) name=FullStateID
//    //	| (isFinal?='final')  'state' name=FullStateID
//    //	| (isFinal?='final')  (type=StateType)
//    //	| (isFinal?='final')  'state' name=FullStateID
//    //	| (isFinal?='final')  name=FullStateID
//    //	| (isFinal?='final')
//    //	
//    //	| (type=StateType) 'state' name=FullStateID
//    //	| (type=StateType) 'state'
//    //	| (type=StateType) name=FullStateID
//    //	| (type=StateType)
//    //	
//    //	| 'state' name=FullStateID
//    //	| 'state'
//    //		
//    //	| name=FullStateID
//    //	)
//      //FullStateID
//      //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
//      //(	(outgoingTransitions+=Transition)*
//    //|	
//    // ('{' //		(	 	('onentry' entryActions+=Action) 
//    //			| 	('oninner' innerActions+=Action) 
//    //			|   ('onexit' exitActions+=Action ) 
//    //			| 	('suspension' suspensionTrigger=Action) // kein effect, kein delay, kein immediate
//    //			| 	(signals+=Signal) 
//    // (regions+=Region ('||' regions+=Region)*) //		)+	
//    //  '}')? //	(outgoingTransitions+=Transition)*
//    //) // this is another big OR because if my state has a content (the curly brackets) then its transition have to come after the curly brackets
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_BodyTextAssignment_2(parent, this, 0, inst);
			case 1: return new State_LabelAssignment_1(parent, this, 1, inst);
			case 2: return new State_IdAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// id=ID 
// //		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
//    //	| ((isInitial?='init')(isFinal?='final')) 'state'
//    //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
//    //	| ((isInitial?='init')(isFinal?='final'))
//    //	
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
//    //	| ((isFinal?='final')(isInitial?='init')) 'state'
//    //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
//    //	| ((isFinal?='final')(isInitial?='init'))
//    //	
//    //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
//    //	| (isInitial?='init') (type=StateType) 'state'
//    //	| (isInitial?='init') (type=StateType) name=FullStateID  
//    //	| (isInitial?='init') 'state' name=FullStateID
//    //	| (isInitial?='init') (type=StateType) 
//    //	| (isInitial?='init') 'state'
//    //	| (isInitial?='init') name=FullStateID
//    //	| (isInitial?='init')
//    //	
//    //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
//    //	| (isFinal?='final')  (type=StateType) 'state' 
//    //	| (isFinal?='final')  (type=StateType) name=FullStateID
//    //	| (isFinal?='final')  'state' name=FullStateID
//    //	| (isFinal?='final')  (type=StateType)
//    //	| (isFinal?='final')  'state' name=FullStateID
//    //	| (isFinal?='final')  name=FullStateID
//    //	| (isFinal?='final')
//    //	
//    //	| (type=StateType) 'state' name=FullStateID
//    //	| (type=StateType) 'state'
//    //	| (type=StateType) name=FullStateID
//    //	| (type=StateType)
//    //	
//    //	| 'state' name=FullStateID
//    //	| 'state'
//    //		
//    //	| name=FullStateID
//    //	)
//      //FullStateID
protected class State_IdAssignment_0 extends AssignmentToken  {
	
	public State_IdAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getIdIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// label=STRING?
protected class State_LabelAssignment_1 extends AssignmentToken  {
	
	public State_LabelAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getLabelAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// bodyText=STRING?
protected class State_BodyTextAssignment_2 extends AssignmentToken  {
	
	public State_BodyTextAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getBodyTextAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_LabelAssignment_1(parent, this, 0, inst);
			case 1: return new State_IdAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bodyText",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bodyText");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getBodyTextSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule State ****************/

}
