/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RetypingSyncchartsGrammarAccess implements IGrammarAccess {
	
	
	public class StateElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_0 = (Assignment)cAlternatives_0_0_0.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_0_0 = (Keyword)cIsInitialAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_1 = (Assignment)cAlternatives_0_0_0.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_1_0 = (Keyword)cIsFinalAssignment_0_0_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_2 = (Assignment)cAlternatives_0_0_0.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_2_0 = (RuleCall)cTypeAssignment_0_0_0_2.eContents().get(0);
		private final Group cGroup_0_0_0_3 = (Group)cAlternatives_0_0_0.eContents().get(3);
		private final Assignment cIsInitialAssignment_0_0_0_3_0 = (Assignment)cGroup_0_0_0_3.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_3_0_0 = (Keyword)cIsInitialAssignment_0_0_0_3_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_3_1 = (Assignment)cGroup_0_0_0_3.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_3_1_0 = (Keyword)cIsFinalAssignment_0_0_0_3_1.eContents().get(0);
		private final Group cGroup_0_0_0_4 = (Group)cAlternatives_0_0_0.eContents().get(4);
		private final Assignment cIsInitialAssignment_0_0_0_4_0 = (Assignment)cGroup_0_0_0_4.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_4_0_0 = (Keyword)cIsInitialAssignment_0_0_0_4_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_4_1 = (Assignment)cGroup_0_0_0_4.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_4_1_0 = (RuleCall)cTypeAssignment_0_0_0_4_1.eContents().get(0);
		private final Group cGroup_0_0_0_5 = (Group)cAlternatives_0_0_0.eContents().get(5);
		private final Assignment cIsFinalAssignment_0_0_0_5_0 = (Assignment)cGroup_0_0_0_5.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_0_0_0_5_0_0 = (Keyword)cIsFinalAssignment_0_0_0_5_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_5_1 = (Assignment)cGroup_0_0_0_5.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_0_0_0_5_1_0 = (Keyword)cIsInitialAssignment_0_0_0_5_1.eContents().get(0);
		private final Group cGroup_0_0_0_6 = (Group)cAlternatives_0_0_0.eContents().get(6);
		private final Assignment cIsFinalAssignment_0_0_0_6_0 = (Assignment)cGroup_0_0_0_6.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_0_0_0_6_0_0 = (Keyword)cIsFinalAssignment_0_0_0_6_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_6_1 = (Assignment)cGroup_0_0_0_6.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_6_1_0 = (RuleCall)cTypeAssignment_0_0_0_6_1.eContents().get(0);
		private final Group cGroup_0_0_0_7 = (Group)cAlternatives_0_0_0.eContents().get(7);
		private final Assignment cTypeAssignment_0_0_0_7_0 = (Assignment)cGroup_0_0_0_7.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_7_0_0 = (RuleCall)cTypeAssignment_0_0_0_7_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_7_1 = (Assignment)cGroup_0_0_0_7.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_0_0_0_7_1_0 = (Keyword)cIsInitialAssignment_0_0_0_7_1.eContents().get(0);
		private final Group cGroup_0_0_0_8 = (Group)cAlternatives_0_0_0.eContents().get(8);
		private final Assignment cTypeAssignment_0_0_0_8_0 = (Assignment)cGroup_0_0_0_8.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_8_0_0 = (RuleCall)cTypeAssignment_0_0_0_8_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_8_1 = (Assignment)cGroup_0_0_0_8.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_8_1_0 = (Keyword)cIsFinalAssignment_0_0_0_8_1.eContents().get(0);
		private final Group cGroup_0_0_0_9 = (Group)cAlternatives_0_0_0.eContents().get(9);
		private final Assignment cIsInitialAssignment_0_0_0_9_0 = (Assignment)cGroup_0_0_0_9.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_9_0_0 = (Keyword)cIsInitialAssignment_0_0_0_9_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_9_1 = (Assignment)cGroup_0_0_0_9.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_9_1_0 = (Keyword)cIsFinalAssignment_0_0_0_9_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_9_2 = (Assignment)cGroup_0_0_0_9.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_9_2_0 = (RuleCall)cTypeAssignment_0_0_0_9_2.eContents().get(0);
		private final Group cGroup_0_0_0_10 = (Group)cAlternatives_0_0_0.eContents().get(10);
		private final Assignment cIsInitialAssignment_0_0_0_10_0 = (Assignment)cGroup_0_0_0_10.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_10_0_0 = (Keyword)cIsInitialAssignment_0_0_0_10_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_10_1 = (Assignment)cGroup_0_0_0_10.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_10_1_0 = (RuleCall)cTypeAssignment_0_0_0_10_1.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_10_2 = (Assignment)cGroup_0_0_0_10.eContents().get(2);
		private final Keyword cIsFinalFinalKeyword_0_0_0_10_2_0 = (Keyword)cIsFinalAssignment_0_0_0_10_2.eContents().get(0);
		private final Group cGroup_0_0_0_11 = (Group)cAlternatives_0_0_0.eContents().get(11);
		private final Assignment cIsFinalAssignment_0_0_0_11_0 = (Assignment)cGroup_0_0_0_11.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_0_0_0_11_0_0 = (Keyword)cIsFinalAssignment_0_0_0_11_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_11_1 = (Assignment)cGroup_0_0_0_11.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_0_0_0_11_1_0 = (Keyword)cIsInitialAssignment_0_0_0_11_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_11_2 = (Assignment)cGroup_0_0_0_11.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_11_2_0 = (RuleCall)cTypeAssignment_0_0_0_11_2.eContents().get(0);
		private final Group cGroup_0_0_0_12 = (Group)cAlternatives_0_0_0.eContents().get(12);
		private final Assignment cIsFinalAssignment_0_0_0_12_0 = (Assignment)cGroup_0_0_0_12.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_0_0_0_12_0_0 = (Keyword)cIsFinalAssignment_0_0_0_12_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_12_1 = (Assignment)cGroup_0_0_0_12.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_12_1_0 = (RuleCall)cTypeAssignment_0_0_0_12_1.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_12_2 = (Assignment)cGroup_0_0_0_12.eContents().get(2);
		private final Keyword cIsInitialInitKeyword_0_0_0_12_2_0 = (Keyword)cIsInitialAssignment_0_0_0_12_2.eContents().get(0);
		private final Group cGroup_0_0_0_13 = (Group)cAlternatives_0_0_0.eContents().get(13);
		private final Assignment cTypeAssignment_0_0_0_13_0 = (Assignment)cGroup_0_0_0_13.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_13_0_0 = (RuleCall)cTypeAssignment_0_0_0_13_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_13_1 = (Assignment)cGroup_0_0_0_13.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_13_1_0 = (Keyword)cIsFinalAssignment_0_0_0_13_1.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_13_2 = (Assignment)cGroup_0_0_0_13.eContents().get(2);
		private final Keyword cIsInitialInitKeyword_0_0_0_13_2_0 = (Keyword)cIsInitialAssignment_0_0_0_13_2.eContents().get(0);
		private final Group cGroup_0_0_0_14 = (Group)cAlternatives_0_0_0.eContents().get(14);
		private final Assignment cTypeAssignment_0_0_0_14_0 = (Assignment)cGroup_0_0_0_14.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0_0_14_0_0 = (RuleCall)cTypeAssignment_0_0_0_14_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_14_1 = (Assignment)cGroup_0_0_0_14.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_0_0_0_14_1_0 = (Keyword)cIsInitialAssignment_0_0_0_14_1.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_14_2 = (Assignment)cGroup_0_0_0_14.eContents().get(2);
		private final Keyword cIsFinalFinalKeyword_0_0_0_14_2_0 = (Keyword)cIsFinalAssignment_0_0_0_14_2.eContents().get(0);
		private final Keyword cStateKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIdAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_0_0_2_0 = (RuleCall)cIdAssignment_0_0_2.eContents().get(0);
		private final Assignment cLabelAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_0_3_0 = (RuleCall)cLabelAssignment_0_0_3.eContents().get(0);
		private final Assignment cBodyTextAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cBodyTextSTRINGTerminalRuleCall_0_0_4_0 = (RuleCall)cBodyTextAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Assignment cNewStateIDAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cNewStateIDIDTerminalRuleCall_0_1_0_0_0 = (RuleCall)cNewStateIDAssignment_0_1_0_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cReferencedStateAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cReferencedStateStateCrossReference_0_1_1_0 = (CrossReference)cReferencedStateAssignment_0_1_1.eContents().get(0);
		private final RuleCall cReferencedStateStateIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cReferencedStateStateCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Assignment cSignalRenamingsAssignment_0_1_3_0 = (Assignment)cGroup_0_1_3.eContents().get(0);
		private final RuleCall cSignalRenamingsSignalRenamingParserRuleCall_0_1_3_0_0 = (RuleCall)cSignalRenamingsAssignment_0_1_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_3_1 = (Keyword)cGroup_0_1_3.eContents().get(1);
		private final Assignment cSignalRenamingsAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cSignalRenamingsSignalRenamingParserRuleCall_0_1_4_0 = (RuleCall)cSignalRenamingsAssignment_0_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_5 = (Keyword)cGroup_0_1.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOnentryKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cEntryActionsAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_1_1_0_1_0 = (RuleCall)cEntryActionsAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cOninnerKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cInnerActionsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cInnerActionsActionParserRuleCall_1_1_1_1_0 = (RuleCall)cInnerActionsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cOnexitKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExitActionsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_1_1_2_1_0 = (RuleCall)cExitActionsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSuspensionKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSuspensionTriggerAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSuspensionTriggerActionParserRuleCall_1_1_3_1_0 = (RuleCall)cSuspensionTriggerAssignment_1_1_3_1.eContents().get(0);
		private final Assignment cSignalsAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cSignalsSignalParserRuleCall_1_1_4_0 = (RuleCall)cSignalsAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cAlternatives_1_1.eContents().get(5);
		private final Group cGroup_1_1_5_0 = (Group)cGroup_1_1_5.eContents().get(0);
		private final Assignment cRegionsAssignment_1_1_5_0_0 = (Assignment)cGroup_1_1_5_0.eContents().get(0);
		private final RuleCall cRegionsRegionParserRuleCall_1_1_5_0_0_0 = (RuleCall)cRegionsAssignment_1_1_5_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_5_0_1 = (Keyword)cGroup_1_1_5_0.eContents().get(1);
		private final Assignment cRegionsAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_1_1_5_1_0 = (RuleCall)cRegionsAssignment_1_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//State:
		//  ((isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
		//  "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
		//  isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
		//  isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
		//  "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
		//  StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
		//  ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
		//  "state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
		//  State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]"
		//  ) ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
		//  exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
		//  regions+=Region "||")* regions+=Region)+ "}")?; 
		//
		//	//========================================================================================
		//	 //===  									    STATE						               ===
		//	 //========================================================================================
		//
		//
		//  //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
		//   //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
		//   // you have to list all possible combinations seperately 
		//   // arbitrary positions for optional alternatives is not possible
		//   // or you have to use ((..)?(..)?)* and then validate them manually   
		//
		//	 	   	
		//			  // n=3, k=1
		//			     
		//			    
		//			    
		//			  
		//			  // n=3, k=2
		//			          
		//			      
		//			       
		//			       
		//			       
		//			       
		//			
		//			  // n=3, k=3
		//			           
		//			        
		//			        
		//			         
		//			         
		//			         
		//		  
		// 
		//	 	   // optional keyword, cf.Meeting_TextualSyntax-II
		//	
		//		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
		//	
		//		 
		//		
		//		   // *** CHECK : State_3 *** //
		//	 
		//
		//		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
		//		              
		//	
		//
		//	
		//    	
		//			 	     //0..*
		//			  	     //0..*
		//			           //0..*
		//			  	     // 0..1
		//			  	   //0..*
		public ParserRule getRule() { return rule; }

		//((isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
		//"final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
		//isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
		//isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
		//"init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
		//StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
		//?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
		//"state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
		//State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]"
		//) ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
		//exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
		//regions+=Region "||")* regions+=Region)+ "}")? 
		//  //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
		//   //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
		//   // you have to list all possible combinations seperately 
		//   // arbitrary positions for optional alternatives is not possible
		//   // or you have to use ((..)?(..)?)* and then validate them manually   
		//
		//	 	   	
		//			  // n=3, k=1
		//			     
		//			    
		//			    
		//			  
		//			  // n=3, k=2
		//			          
		//			      
		//			       
		//			       
		//			       
		//			       
		//			
		//			  // n=3, k=3
		//			           
		//			        
		//			        
		//			         
		//			         
		//			         
		//		  
		// 
		//	 	   // optional keyword, cf.Meeting_TextualSyntax-II
		//	
		//		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
		//	
		//		 
		//		
		//		   // *** CHECK : State_3 *** //
		//	 
		//
		//		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
		//		              
		//	
		//
		//	
		//    	
		//			 	     //0..*
		//			  	     //0..*
		//			           //0..*
		//			  	     // 0..1
		//			  	   //0..*
		public Group getGroup() { return cGroup; }

		//(isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
		//"final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
		//isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
		//isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
		//"init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
		//StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
		//?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
		//"state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
		//State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]" 
		//  //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
		//   //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
		//   // you have to list all possible combinations seperately 
		//   // arbitrary positions for optional alternatives is not possible
		//   // or you have to use ((..)?(..)?)* and then validate them manually   
		//
		//	 	   	
		//			  // n=3, k=1
		//			     
		//			    
		//			    
		//			  
		//			  // n=3, k=2
		//			          
		//			      
		//			       
		//			       
		//			       
		//			       
		//			
		//			  // n=3, k=3
		//			           
		//			        
		//			        
		//			         
		//			         
		//			         
		//		  
		// 
		//	 	   // optional keyword, cf.Meeting_TextualSyntax-II
		//	
		//		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
		//	
		//		 
		//		
		//		   // *** CHECK : State_3 *** //
		//	 
		//
		//		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//(isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
		//"final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
		//isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
		//isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
		//"init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
		//StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
		//?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
		//"state" id=ID? label=STRING? bodyText=STRING? 	   	
		//			  // n=3, k=1
		//			     
		//			    
		//			    
		//			  
		//			  // n=3, k=2
		//			          
		//			      
		//			       
		//			       
		//			       
		//			       
		//			
		//			  // n=3, k=3
		//			           
		//			        
		//			        
		//			         
		//			         
		//			         
		//		  
		// 
		//	 	   // optional keyword, cf.Meeting_TextualSyntax-II
		//	
		//		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
		//	
		//		 
		//		
		//		   // *** CHECK : State_3 *** //
		public Group getGroup_0_0() { return cGroup_0_0; }

		//(isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
		//"final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
		//isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
		//isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
		//"init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
		//StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
		//?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")? 	   	
		//			  // n=3, k=1
		//			     
		//			    
		//			    
		//			  
		//			  // n=3, k=2
		//			          
		//			      
		//			       
		//			       
		//			       
		//			       
		//			
		//			  // n=3, k=3
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_0() { return cIsInitialAssignment_0_0_0_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_0_0() { return cIsInitialInitKeyword_0_0_0_0_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_1() { return cIsFinalAssignment_0_0_0_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_1_0() { return cIsFinalFinalKeyword_0_0_0_1_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_2() { return cTypeAssignment_0_0_0_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_2_0() { return cTypeStateTypeEnumRuleCall_0_0_0_2_0; }

		//isInitial?="init" isFinal?="final"
		public Group getGroup_0_0_0_3() { return cGroup_0_0_0_3; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_3_0() { return cIsInitialAssignment_0_0_0_3_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_3_0_0() { return cIsInitialInitKeyword_0_0_0_3_0_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_3_1() { return cIsFinalAssignment_0_0_0_3_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_3_1_0() { return cIsFinalFinalKeyword_0_0_0_3_1_0; }

		//isInitial?="init" type=StateType
		public Group getGroup_0_0_0_4() { return cGroup_0_0_0_4; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_4_0() { return cIsInitialAssignment_0_0_0_4_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_4_0_0() { return cIsInitialInitKeyword_0_0_0_4_0_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_4_1() { return cTypeAssignment_0_0_0_4_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_4_1_0() { return cTypeStateTypeEnumRuleCall_0_0_0_4_1_0; }

		//isFinal?="final" isInitial?="init"
		public Group getGroup_0_0_0_5() { return cGroup_0_0_0_5; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_5_0() { return cIsFinalAssignment_0_0_0_5_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_5_0_0() { return cIsFinalFinalKeyword_0_0_0_5_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_5_1() { return cIsInitialAssignment_0_0_0_5_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_5_1_0() { return cIsInitialInitKeyword_0_0_0_5_1_0; }

		//isFinal?="final" type=StateType
		public Group getGroup_0_0_0_6() { return cGroup_0_0_0_6; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_6_0() { return cIsFinalAssignment_0_0_0_6_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_6_0_0() { return cIsFinalFinalKeyword_0_0_0_6_0_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_6_1() { return cTypeAssignment_0_0_0_6_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_6_1_0() { return cTypeStateTypeEnumRuleCall_0_0_0_6_1_0; }

		//type=StateType isInitial?="init"
		public Group getGroup_0_0_0_7() { return cGroup_0_0_0_7; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_7_0() { return cTypeAssignment_0_0_0_7_0; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_7_0_0() { return cTypeStateTypeEnumRuleCall_0_0_0_7_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_7_1() { return cIsInitialAssignment_0_0_0_7_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_7_1_0() { return cIsInitialInitKeyword_0_0_0_7_1_0; }

		//type=StateType isFinal?="final"
		public Group getGroup_0_0_0_8() { return cGroup_0_0_0_8; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_8_0() { return cTypeAssignment_0_0_0_8_0; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_8_0_0() { return cTypeStateTypeEnumRuleCall_0_0_0_8_0_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_8_1() { return cIsFinalAssignment_0_0_0_8_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_8_1_0() { return cIsFinalFinalKeyword_0_0_0_8_1_0; }

		//isInitial?="init" isFinal?="final" type=StateType
		public Group getGroup_0_0_0_9() { return cGroup_0_0_0_9; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_9_0() { return cIsInitialAssignment_0_0_0_9_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_9_0_0() { return cIsInitialInitKeyword_0_0_0_9_0_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_9_1() { return cIsFinalAssignment_0_0_0_9_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_9_1_0() { return cIsFinalFinalKeyword_0_0_0_9_1_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_9_2() { return cTypeAssignment_0_0_0_9_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_9_2_0() { return cTypeStateTypeEnumRuleCall_0_0_0_9_2_0; }

		//isInitial?="init" type=StateType isFinal?="final"
		public Group getGroup_0_0_0_10() { return cGroup_0_0_0_10; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_10_0() { return cIsInitialAssignment_0_0_0_10_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_10_0_0() { return cIsInitialInitKeyword_0_0_0_10_0_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_10_1() { return cTypeAssignment_0_0_0_10_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_10_1_0() { return cTypeStateTypeEnumRuleCall_0_0_0_10_1_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_10_2() { return cIsFinalAssignment_0_0_0_10_2; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_10_2_0() { return cIsFinalFinalKeyword_0_0_0_10_2_0; }

		//isFinal?="final" isInitial?="init" type=StateType
		public Group getGroup_0_0_0_11() { return cGroup_0_0_0_11; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_11_0() { return cIsFinalAssignment_0_0_0_11_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_11_0_0() { return cIsFinalFinalKeyword_0_0_0_11_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_11_1() { return cIsInitialAssignment_0_0_0_11_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_11_1_0() { return cIsInitialInitKeyword_0_0_0_11_1_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_11_2() { return cTypeAssignment_0_0_0_11_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_11_2_0() { return cTypeStateTypeEnumRuleCall_0_0_0_11_2_0; }

		//isFinal?="final" type=StateType isInitial?="init"
		public Group getGroup_0_0_0_12() { return cGroup_0_0_0_12; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_12_0() { return cIsFinalAssignment_0_0_0_12_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_12_0_0() { return cIsFinalFinalKeyword_0_0_0_12_0_0; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_12_1() { return cTypeAssignment_0_0_0_12_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_12_1_0() { return cTypeStateTypeEnumRuleCall_0_0_0_12_1_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_12_2() { return cIsInitialAssignment_0_0_0_12_2; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_12_2_0() { return cIsInitialInitKeyword_0_0_0_12_2_0; }

		//type=StateType isFinal?="final" isInitial?="init"
		public Group getGroup_0_0_0_13() { return cGroup_0_0_0_13; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_13_0() { return cTypeAssignment_0_0_0_13_0; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_13_0_0() { return cTypeStateTypeEnumRuleCall_0_0_0_13_0_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_13_1() { return cIsFinalAssignment_0_0_0_13_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_13_1_0() { return cIsFinalFinalKeyword_0_0_0_13_1_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_13_2() { return cIsInitialAssignment_0_0_0_13_2; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_13_2_0() { return cIsInitialInitKeyword_0_0_0_13_2_0; }

		//type=StateType isInitial?="init" isFinal?="final"
		public Group getGroup_0_0_0_14() { return cGroup_0_0_0_14; }

		//type=StateType
		public Assignment getTypeAssignment_0_0_0_14_0() { return cTypeAssignment_0_0_0_14_0; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0_0_14_0_0() { return cTypeStateTypeEnumRuleCall_0_0_0_14_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_14_1() { return cIsInitialAssignment_0_0_0_14_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_14_1_0() { return cIsInitialInitKeyword_0_0_0_14_1_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_0_0_14_2() { return cIsFinalAssignment_0_0_0_14_2; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_14_2_0() { return cIsFinalFinalKeyword_0_0_0_14_2_0; }

		//"state"
		public Keyword getStateKeyword_0_0_1() { return cStateKeyword_0_0_1; }

		//id=ID?
		public Assignment getIdAssignment_0_0_2() { return cIdAssignment_0_0_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_2_0() { return cIdIDTerminalRuleCall_0_0_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_0_0_3() { return cLabelAssignment_0_0_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_0_3_0() { return cLabelSTRINGTerminalRuleCall_0_0_3_0; }

		//bodyText=STRING?
		public Assignment getBodyTextAssignment_0_0_4() { return cBodyTextAssignment_0_0_4; }

		//STRING
		public RuleCall getBodyTextSTRINGTerminalRuleCall_0_0_4_0() { return cBodyTextSTRINGTerminalRuleCall_0_0_4_0; }

		//(newStateID=ID "@")? referencedState=[State] "[" (signalRenamings+=SignalRenaming ","
		//)* signalRenamings+=SignalRenaming "]" 	 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
		public Group getGroup_0_1() { return cGroup_0_1; }

		//(newStateID=ID "@")?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//newStateID=ID
		public Assignment getNewStateIDAssignment_0_1_0_0() { return cNewStateIDAssignment_0_1_0_0; }

		//ID
		public RuleCall getNewStateIDIDTerminalRuleCall_0_1_0_0_0() { return cNewStateIDIDTerminalRuleCall_0_1_0_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_1_0_1() { return cCommercialAtKeyword_0_1_0_1; }

		//referencedState=[State]
		public Assignment getReferencedStateAssignment_0_1_1() { return cReferencedStateAssignment_0_1_1; }

		//[State]
		public CrossReference getReferencedStateStateCrossReference_0_1_1_0() { return cReferencedStateStateCrossReference_0_1_1_0; }

		//ID
		public RuleCall getReferencedStateStateIDTerminalRuleCall_0_1_1_0_1() { return cReferencedStateStateIDTerminalRuleCall_0_1_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_2() { return cLeftSquareBracketKeyword_0_1_2; }

		//(signalRenamings+=SignalRenaming ",")*
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }

		//signalRenamings+=SignalRenaming
		public Assignment getSignalRenamingsAssignment_0_1_3_0() { return cSignalRenamingsAssignment_0_1_3_0; }

		//SignalRenaming
		public RuleCall getSignalRenamingsSignalRenamingParserRuleCall_0_1_3_0_0() { return cSignalRenamingsSignalRenamingParserRuleCall_0_1_3_0_0; }

		//","
		public Keyword getCommaKeyword_0_1_3_1() { return cCommaKeyword_0_1_3_1; }

		//signalRenamings+=SignalRenaming
		public Assignment getSignalRenamingsAssignment_0_1_4() { return cSignalRenamingsAssignment_0_1_4; }

		//SignalRenaming
		public RuleCall getSignalRenamingsSignalRenamingParserRuleCall_0_1_4_0() { return cSignalRenamingsSignalRenamingParserRuleCall_0_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_5() { return cRightSquareBracketKeyword_0_1_5; }

		//("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
		//exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
		//regions+=Region "||")* regions+=Region)+ "}")? 	
		//			 	     //0..*
		//			  	     //0..*
		//			           //0..*
		//			  	     // 0..1
		//			  	   //0..*
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit" exitActions
		//+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(regions+=Region
		//"||")* regions+=Region)+ 	
		//			 	     //0..*
		//			  	     //0..*
		//			           //0..*
		//			  	     // 0..1
		//			  	   //0..*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"onentry" entryActions+=Action
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"onentry"
		public Keyword getOnentryKeyword_1_1_0_0() { return cOnentryKeyword_1_1_0_0; }

		//entryActions+=Action
		public Assignment getEntryActionsAssignment_1_1_0_1() { return cEntryActionsAssignment_1_1_0_1; }

		//Action
		public RuleCall getEntryActionsActionParserRuleCall_1_1_0_1_0() { return cEntryActionsActionParserRuleCall_1_1_0_1_0; }

		//"oninner" innerActions+=Action
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"oninner"
		public Keyword getOninnerKeyword_1_1_1_0() { return cOninnerKeyword_1_1_1_0; }

		//innerActions+=Action
		public Assignment getInnerActionsAssignment_1_1_1_1() { return cInnerActionsAssignment_1_1_1_1; }

		//Action
		public RuleCall getInnerActionsActionParserRuleCall_1_1_1_1_0() { return cInnerActionsActionParserRuleCall_1_1_1_1_0; }

		//"onexit" exitActions+=Action
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"onexit"
		public Keyword getOnexitKeyword_1_1_2_0() { return cOnexitKeyword_1_1_2_0; }

		//exitActions+=Action
		public Assignment getExitActionsAssignment_1_1_2_1() { return cExitActionsAssignment_1_1_2_1; }

		//Action
		public RuleCall getExitActionsActionParserRuleCall_1_1_2_1_0() { return cExitActionsActionParserRuleCall_1_1_2_1_0; }

		//"suspension" suspensionTrigger=Action
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//"suspension"
		public Keyword getSuspensionKeyword_1_1_3_0() { return cSuspensionKeyword_1_1_3_0; }

		//suspensionTrigger=Action
		public Assignment getSuspensionTriggerAssignment_1_1_3_1() { return cSuspensionTriggerAssignment_1_1_3_1; }

		//Action
		public RuleCall getSuspensionTriggerActionParserRuleCall_1_1_3_1_0() { return cSuspensionTriggerActionParserRuleCall_1_1_3_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_1_1_4() { return cSignalsAssignment_1_1_4; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_1_1_4_0() { return cSignalsSignalParserRuleCall_1_1_4_0; }

		//(regions+=Region "||")* regions+=Region
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }

		//(regions+=Region "||")*
		public Group getGroup_1_1_5_0() { return cGroup_1_1_5_0; }

		//regions+=Region
		public Assignment getRegionsAssignment_1_1_5_0_0() { return cRegionsAssignment_1_1_5_0_0; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_1_1_5_0_0_0() { return cRegionsRegionParserRuleCall_1_1_5_0_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_5_0_1() { return cVerticalLineVerticalLineKeyword_1_1_5_0_1; }

		//regions+=Region
		public Assignment getRegionsAssignment_1_1_5_1() { return cRegionsAssignment_1_1_5_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_1_1_5_1_0() { return cRegionsRegionParserRuleCall_1_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class SignalRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldSignalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOldSignalSignalCrossReference_0_0 = (CrossReference)cOldSignalAssignment_0.eContents().get(0);
		private final RuleCall cOldSignalSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cOldSignalSignalCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNewSignalSignalCrossReference_2_0 = (CrossReference)cNewSignalAssignment_2.eContents().get(0);
		private final RuleCall cNewSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cNewSignalSignalCrossReference_2_0.eContents().get(1);
		
		//SignalRenaming:
		//  oldSignal=[Signal] "/" newSignal=[Signal]; 
		//
		//	
		//
		//	//========================================================================================
		//	 //===  									    REGION  					               ===
		//	 //========================================================================================
		public ParserRule getRule() { return rule; }

		//oldSignal=[Signal] "/" newSignal=[Signal]
		public Group getGroup() { return cGroup; }

		//oldSignal=[Signal]
		public Assignment getOldSignalAssignment_0() { return cOldSignalAssignment_0; }

		//[Signal]
		public CrossReference getOldSignalSignalCrossReference_0_0() { return cOldSignalSignalCrossReference_0_0; }

		//ID
		public RuleCall getOldSignalSignalIDTerminalRuleCall_0_0_1() { return cOldSignalSignalIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//newSignal=[Signal]
		public Assignment getNewSignalAssignment_2() { return cNewSignalAssignment_2; }

		//[Signal]
		public CrossReference getNewSignalSignalCrossReference_2_0() { return cNewSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getNewSignalSignalIDTerminalRuleCall_2_0_1() { return cNewSignalSignalIDTerminalRuleCall_2_0_1; }
	}

	public class RegionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Assignment cSignalsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_2_1_0 = (RuleCall)cSignalsAssignment_2_1.eContents().get(0);
		private final Assignment cInnerStatesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cInnerStatesStateParserRuleCall_2_2_0 = (RuleCall)cInnerStatesAssignment_2_2.eContents().get(0);
		
		//Region:
		//  "region"? id=STRING? (variables+=Variable|signals+=Signal|innerStates+=State)+; 
		//	//========================================================================================
		//	 //===  									    REGION  					               ===
		//	 //========================================================================================
		//
		//	   
		//
		//			 
		//			 
		//		    
		//	
		//	//========================================================================================
		//	 //===       optional referenced state // *** CHECK : StateContent_1 *** //               ===
		//	 //===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
		//	 //========================================================================================
		//	 //( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
		//	
		//
		//	//========================================================================================
		//	 //===  									    ACTIONS  					               ===
		//	 //========================================================================================
		public ParserRule getRule() { return rule; }

		//"region"? id=STRING? (variables+=Variable|signals+=Signal|innerStates+=State)+ 
		//	   
		//
		//			 
		//			 
		//		    
		//	
		//	//========================================================================================
		//	 //===       optional referenced state // *** CHECK : StateContent_1 *** //               ===
		//	 //===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
		//	 //========================================================================================
		//	 //( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
		public Group getGroup() { return cGroup; }

		//"region"?
		public Keyword getRegionKeyword_0() { return cRegionKeyword_0; }

		//id=STRING?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_1_0() { return cIdSTRINGTerminalRuleCall_1_0; }

		//(variables+=Variable|signals+=Signal|innerStates+=State)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0_0() { return cVariablesVariableParserRuleCall_2_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_2_1() { return cSignalsAssignment_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_2_1_0() { return cSignalsSignalParserRuleCall_2_1_0; }

		//innerStates+=State
		public Assignment getInnerStatesAssignment_2_2() { return cInnerStatesAssignment_2_2; }

		//State
		public RuleCall getInnerStatesStateParserRuleCall_2_2_0() { return cInnerStatesStateParserRuleCall_2_2_0; }
	}

	public class ActionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsImmediateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsImmediateNumberSignKeyword_0_0 = (Keyword)cIsImmediateAssignment_0.eContents().get(0);
		private final Assignment cTriggersAndEfectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggersAndEfectsSTRINGTerminalRuleCall_1_0 = (RuleCall)cTriggersAndEfectsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayINTTerminalRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		
		//Action:
		//  isImmediate?="#" triggersAndEfects=STRING delay=INT?; 
		//	//========================================================================================
		//	 //===  									    ACTIONS  					               ===
		//	 //========================================================================================
		//
		//	    
		//	//| Transition
		//	
		//
		//	//========================================================================================
		//	 //===  									    TRANSITION 					               ===
		//	 //========================================================================================
		////Transition:
		////	
		////;
		//	 //========================================================================================
		//	 //===  									    VAR,SIG  					               ===
		//	 //========================================================================================
		public ParserRule getRule() { return rule; }

		//isImmediate?="#" triggersAndEfects=STRING delay=INT?
		public Group getGroup() { return cGroup; }

		//isImmediate?="#"
		public Assignment getIsImmediateAssignment_0() { return cIsImmediateAssignment_0; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_0_0() { return cIsImmediateNumberSignKeyword_0_0; }

		//triggersAndEfects=STRING
		public Assignment getTriggersAndEfectsAssignment_1() { return cTriggersAndEfectsAssignment_1; }

		//STRING
		public RuleCall getTriggersAndEfectsSTRINGTerminalRuleCall_1_0() { return cTriggersAndEfectsSTRINGTerminalRuleCall_1_0; }

		//delay=INT?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_2_0() { return cDelayINTTerminalRuleCall_2_0; }
	}

	public class ValuedObjectElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuedObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValuedObject:
		//  Signal|Variable; 
		//	//========================================================================================
		//	 //===  									    TRANSITION 					               ===
		//	 //========================================================================================
		////Transition:
		////	
		////;
		//	 //========================================================================================
		//	 //===  									    VAR,SIG  					               ===
		//	 //========================================================================================
		public ParserRule getRule() { return rule; }

		//Signal|Variable 
		//	//========================================================================================
		//	 //===  									    TRANSITION 					               ===
		//	 //========================================================================================
		////Transition:
		////	
		////;
		//	 //========================================================================================
		//	 //===  									    VAR,SIG  					               ===
		//	 //========================================================================================
		public Alternatives getAlternatives() { return cAlternatives; }

		//Signal
		public RuleCall getSignalParserRuleCall_0() { return cSignalParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class VariableElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitialValueINTTerminalRuleCall_1_1_0 = (RuleCall)cInitialValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cHostTypeAssignment_2_1_1.eContents().get(0);
		
		//Variable:
		//  name=ID (":= " initialValue=INT)? (": " (type=ValueType|hostType=STRING))?; 
		//
		//	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
		public ParserRule getRule() { return rule; }

		//name=ID (":= " initialValue=INT)? (": " (type=ValueType|hostType=STRING))? 
		//	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
		public Group getGroup() { return cGroup; }

		//name=ID 
		//	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":= " initialValue=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//":= "
		public Keyword getColonEqualsSignSpaceKeyword_1_0() { return cColonEqualsSignSpaceKeyword_1_0; }

		//initialValue=INT
		public Assignment getInitialValueAssignment_1_1() { return cInitialValueAssignment_1_1; }

		//INT
		public RuleCall getInitialValueINTTerminalRuleCall_1_1_0() { return cInitialValueINTTerminalRuleCall_1_1_0; }

		//(": " (type=ValueType|hostType=STRING))?
		public Group getGroup_2() { return cGroup_2; }

		//": "
		public Keyword getColonSpaceKeyword_2_0() { return cColonSpaceKeyword_2_0; }

		//type=ValueType|hostType=STRING
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//type=ValueType
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_2_1_0_0() { return cTypeValueTypeEnumRuleCall_2_1_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_2_1_1() { return cHostTypeAssignment_2_1_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_2_1_1_0() { return cHostTypeSTRINGTerminalRuleCall_2_1_1_0; }
	}

	public class SignalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsLocalAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsLocalLocalKeyword_0_0_0 = (Keyword)cIsLocalAssignment_0_0.eContents().get(0);
		private final Assignment cIsInputAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsInputInputKeyword_0_1_0 = (Keyword)cIsInputAssignment_0_1.eContents().get(0);
		private final Assignment cIsOutputAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cIsOutputOutputKeyword_0_2_0 = (Keyword)cIsOutputAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialValueINTTerminalRuleCall_2_1_0 = (RuleCall)cInitialValueAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonSpaceKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cTypeAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_0_1_0_0 = (RuleCall)cTypeAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_3_0_1_1_0 = (RuleCall)cHostTypeAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cColonSpaceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cCombineKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Alternatives cAlternatives_3_1_2 = (Alternatives)cGroup_3_1.eContents().get(2);
		private final Assignment cTypeAssignment_3_1_2_0 = (Assignment)cAlternatives_3_1_2.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_1_2_0_0 = (RuleCall)cTypeAssignment_3_1_2_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_3_1_2_1 = (Assignment)cAlternatives_3_1_2.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_3_1_2_1_0 = (RuleCall)cHostTypeAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Alternatives cAlternatives_3_1_4 = (Alternatives)cGroup_3_1.eContents().get(4);
		private final Assignment cCombineOperatorAssignment_3_1_4_0 = (Assignment)cAlternatives_3_1_4.eContents().get(0);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_3_1_4_0_0 = (RuleCall)cCombineOperatorAssignment_3_1_4_0.eContents().get(0);
		private final Assignment cHostCombineOperatorAssignment_3_1_4_1 = (Assignment)cAlternatives_3_1_4.eContents().get(1);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_3_1_4_1_0 = (RuleCall)cHostCombineOperatorAssignment_3_1_4_1.eContents().get(0);
		
		//Signal:
		//  (isLocal?="local"|isInput?="input"|isOutput?="output") name=ID (":=" initialValue=
		//  INT)? (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType
		//  =STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?; 
		//
		// 	
		//		        
		//		
		//		 
		//		
		//		   
		//		
		//			     
		//		 	               // *** CHECK : Signal_1 && Signal_2 *** //
		//		 // *** CHECK : Signal_3 *** //	
		//
		//	//========================================================================================
		//	 //===  								 ENUMS, DATATYPES etc      			               ===
		//	 //========================================================================================
		public ParserRule getRule() { return rule; }

		//(isLocal?="local"|isInput?="input"|isOutput?="output") name=ID (":=" initialValue=
		//INT)? (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType
		//=STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))? 
		// 	
		//		        
		//		
		//		 
		//		
		//		   
		//		
		//			     
		//		 	               // *** CHECK : Signal_1 && Signal_2 *** //
		//		 // *** CHECK : Signal_3 *** //
		public Group getGroup() { return cGroup; }

		//isLocal?="local"|isInput?="input"|isOutput?="output"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isLocal?="local"
		public Assignment getIsLocalAssignment_0_0() { return cIsLocalAssignment_0_0; }

		//"local"
		public Keyword getIsLocalLocalKeyword_0_0_0() { return cIsLocalLocalKeyword_0_0_0; }

		//isInput?="input"
		public Assignment getIsInputAssignment_0_1() { return cIsInputAssignment_0_1; }

		//"input"
		public Keyword getIsInputInputKeyword_0_1_0() { return cIsInputInputKeyword_0_1_0; }

		//isOutput?="output"
		public Assignment getIsOutputAssignment_0_2() { return cIsOutputAssignment_0_2; }

		//"output"
		public Keyword getIsOutputOutputKeyword_0_2_0() { return cIsOutputOutputKeyword_0_2_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":=" initialValue=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }

		//initialValue=INT
		public Assignment getInitialValueAssignment_2_1() { return cInitialValueAssignment_2_1; }

		//INT
		public RuleCall getInitialValueINTTerminalRuleCall_2_1_0() { return cInitialValueINTTerminalRuleCall_2_1_0; }

		//(": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType=
		//STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?  
		//		
		//			     
		//		 	               // *** CHECK : Signal_1 && Signal_2 *** //
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//": " (type=ValueType|hostType=STRING)
		public Group getGroup_3_0() { return cGroup_3_0; }

		//": "
		public Keyword getColonSpaceKeyword_3_0_0() { return cColonSpaceKeyword_3_0_0; }

		//type=ValueType|hostType=STRING
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//type=ValueType
		public Assignment getTypeAssignment_3_0_1_0() { return cTypeAssignment_3_0_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_0_1_0_0() { return cTypeValueTypeEnumRuleCall_3_0_1_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_3_0_1_1() { return cHostTypeAssignment_3_0_1_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_3_0_1_1_0() { return cHostTypeSTRINGTerminalRuleCall_3_0_1_1_0; }

		//": " "combine" (type=ValueType|hostType=STRING) "with" (combineOperator=
		//CombineOperator|hostCombineOperator=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//": "
		public Keyword getColonSpaceKeyword_3_1_0() { return cColonSpaceKeyword_3_1_0; }

		//"combine"
		public Keyword getCombineKeyword_3_1_1() { return cCombineKeyword_3_1_1; }

		//type=ValueType|hostType=STRING
		public Alternatives getAlternatives_3_1_2() { return cAlternatives_3_1_2; }

		//type=ValueType
		public Assignment getTypeAssignment_3_1_2_0() { return cTypeAssignment_3_1_2_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_1_2_0_0() { return cTypeValueTypeEnumRuleCall_3_1_2_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_3_1_2_1() { return cHostTypeAssignment_3_1_2_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_3_1_2_1_0() { return cHostTypeSTRINGTerminalRuleCall_3_1_2_1_0; }

		//"with"
		public Keyword getWithKeyword_3_1_3() { return cWithKeyword_3_1_3; }

		//combineOperator=CombineOperator|hostCombineOperator=STRING
		public Alternatives getAlternatives_3_1_4() { return cAlternatives_3_1_4; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_3_1_4_0() { return cCombineOperatorAssignment_3_1_4_0; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_3_1_4_0_0() { return cCombineOperatorCombineOperatorEnumRuleCall_3_1_4_0_0; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_3_1_4_1() { return cHostCombineOperatorAssignment_3_1_4_1; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_3_1_4_1_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_3_1_4_1_0; }
	}

	public class TICKElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TICK");
		private final Keyword cTickKeyword = (Keyword)rule.eContents().get(1);
		
		//TICK returns Signal:
		//  "tick"; 
		//	//========================================================================================
		//	 //===  								 ENUMS, DATATYPES etc      			               ===
		//	 //========================================================================================
		//    
		//	  // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
		public ParserRule getRule() { return rule; }

		//"tick" 
		//	  // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
		public Keyword getTickKeyword() { return cTickKeyword; }
	}
	
	
	public class StateTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNORMALKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPSEUDOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPSEUDOCondKeyword_1_0 = (Keyword)cPSEUDOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEReferenceKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StateType:
		//  NORMAL | PSEUDO="cond" | REFERENCE="reference" | TEXTUAL="textual";
		public EnumRule getRule() { return rule; }

		//NORMAL | PSEUDO="cond" | REFERENCE="reference" | TEXTUAL="textual"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"NORMAL"
		public Keyword getNORMALNORMALKeyword_0_0() { return cNORMALNORMALKeyword_0_0; }

		//PSEUDO="cond"
		public EnumLiteralDeclaration getPSEUDOEnumLiteralDeclaration_1() { return cPSEUDOEnumLiteralDeclaration_1; }

		//"cond"
		public Keyword getPSEUDOCondKeyword_1_0() { return cPSEUDOCondKeyword_1_0; }

		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"reference"
		public Keyword getREFERENCEReferenceKeyword_2_0() { return cREFERENCEReferenceKeyword_2_0; }

		//TEXTUAL="textual"
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"textual"
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class CombineOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTAsteriskKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cHOSTHostKeyword_3_0 = (Keyword)cHOSTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CombineOperator:
		//  NONE | ADD="+" | MULT="*" | HOST="host";  
		//    
		//              //hostCombineOperator
		public EnumRule getRule() { return rule; }

		//NONE | ADD="+" | MULT="*" | HOST="host"  
		//    
		//              //hostCombineOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }

		//ADD="+" 
		//              //hostCombineOperator
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getADDPlusSignKeyword_1_0() { return cADDPlusSignKeyword_1_0; }

		//MULT="*" 
		//              //hostCombineOperator
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULTAsteriskKeyword_2_0() { return cMULTAsteriskKeyword_2_0; }

		//HOST="host" 
		//              //hostCombineOperator
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_3() { return cHOSTEnumLiteralDeclaration_3; }

		//"host"     //hostCombineOperator
		public Keyword getHOSTHostKeyword_3_0() { return cHOSTHostKeyword_3_0; }
	}

	public class ValueTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPUREKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBooleanKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSIGNEDUnsignedKeyword_2_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTEGERIntegerKeyword_3_0 = (Keyword)cINTEGEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDOUBLEDoubleKeyword_4_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHOSTHostKeyword_5_0 = (Keyword)cHOSTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ValueType:
		//  PURE | BOOL="boolean" | UNSIGNED="unsigned" | INTEGER="integer" | DOUBLE="double" | HOST=
		//  "host"; 
		//  
		//	                      //| FLOAT='float'
		public EnumRule getRule() { return rule; }

		//PURE | BOOL="boolean" | UNSIGNED="unsigned" | INTEGER="integer" | DOUBLE="double" | HOST=
		//"host" 
		//  
		//	                      //| FLOAT='float'
		public Alternatives getAlternatives() { return cAlternatives; }

		//PURE
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }

		//"PURE"
		public Keyword getPUREPUREKeyword_0_0() { return cPUREPUREKeyword_0_0; }

		//BOOL="boolean" 
		//	                      //| FLOAT='float'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBOOLBooleanKeyword_1_0() { return cBOOLBooleanKeyword_1_0; }

		//UNSIGNED="unsigned" 
		//	                      //| FLOAT='float'
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_2() { return cUNSIGNEDEnumLiteralDeclaration_2; }

		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_2_0() { return cUNSIGNEDUnsignedKeyword_2_0; }

		//INTEGER="integer" 
		//	                      //| FLOAT='float'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_3() { return cINTEGEREnumLiteralDeclaration_3; }

		//"integer"
		public Keyword getINTEGERIntegerKeyword_3_0() { return cINTEGERIntegerKeyword_3_0; }

		//DOUBLE="double" 
		//	                      //| FLOAT='float'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_4() { return cDOUBLEEnumLiteralDeclaration_4; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_4_0() { return cDOUBLEDoubleKeyword_4_0; }

		//HOST="host" 
		//	                      //| FLOAT='float'
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_5() { return cHOSTEnumLiteralDeclaration_5; }

		//"host"     //| FLOAT='float'
		public Keyword getHOSTHostKeyword_5_0() { return cHOSTHostKeyword_5_0; }
	}
	
	private StateElements pState;
	private SignalRenamingElements pSignalRenaming;
	private RegionElements pRegion;
	private ActionElements pAction;
	private ValuedObjectElements pValuedObject;
	private VariableElements pVariable;
	private SignalElements pSignal;
	private TICKElements pTICK;
	private StateTypeElements unknownRuleStateType;
	private CombineOperatorElements unknownRuleCombineOperator;
	private ValueTypeElements unknownRuleValueType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RetypingSyncchartsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//State:
	//  ((isInitial?="init"|isFinal?="final"|type=StateType|isInitial?="init" isFinal?=
	//  "final"|isInitial?="init" type=StateType|isFinal?="final" isInitial?="init"|
	//  isFinal?="final" type=StateType|type=StateType isInitial?="init"|type=StateType
	//  isFinal?="final"|isInitial?="init" isFinal?="final" type=StateType|isInitial?=
	//  "init" type=StateType isFinal?="final"|isFinal?="final" isInitial?="init" type=
	//  StateType|isFinal?="final" type=StateType isInitial?="init"|type=StateType isFinal
	//  ?="final" isInitial?="init"|type=StateType isInitial?="init" isFinal?="final")?
	//  "state" id=ID? label=STRING? bodyText=STRING?|(newStateID=ID "@")? referencedState=[
	//  State] "[" (signalRenamings+=SignalRenaming ",")* signalRenamings+=SignalRenaming "]"
	//  ) ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
	//  exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|(
	//  regions+=Region "||")* regions+=Region)+ "}")?; 
	//
	//	//========================================================================================
	//	 //===  									    STATE						               ===
	//	 //========================================================================================
	//
	//
	//  //!!!!!!!!!! DO NOT USE THE FOLLOWING RULE !!!!!!!!!! //
	//   //  ((isInitial?='init')|(isFinal?='final')|(type=StateType)?)+
	//   // you have to list all possible combinations seperately 
	//   // arbitrary positions for optional alternatives is not possible
	//   // or you have to use ((..)?(..)?)* and then validate them manually   
	//
	//	 	   	
	//			  // n=3, k=1
	//			     
	//			    
	//			    
	//			  
	//			  // n=3, k=2
	//			          
	//			      
	//			       
	//			       
	//			       
	//			       
	//			
	//			  // n=3, k=3
	//			           
	//			        
	//			        
	//			         
	//			         
	//			         
	//		  
	// 
	//	 	   // optional keyword, cf.Meeting_TextualSyntax-II
	//	
	//		   // *** CHECK : State_2 *** // [optionale ID aber erinnere dich: "keine ID ist auch eine eindeutige ID"!!]
	//	
	//		 
	//		
	//		   // *** CHECK : State_3 *** //
	//	 
	//
	//		 //===  aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]   ===//
	//		              
	//	
	//
	//	
	//    	
	//			 	     //0..*
	//			  	     //0..*
	//			           //0..*
	//			  	     // 0..1
	//			  	   //0..*
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//SignalRenaming:
	//  oldSignal=[Signal] "/" newSignal=[Signal]; 
	//
	//	
	//
	//	//========================================================================================
	//	 //===  									    REGION  					               ===
	//	 //========================================================================================
	public SignalRenamingElements getSignalRenamingAccess() {
		return (pSignalRenaming != null) ? pSignalRenaming : (pSignalRenaming = new SignalRenamingElements());
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}

	//Region:
	//  "region"? id=STRING? (variables+=Variable|signals+=Signal|innerStates+=State)+; 
	//	//========================================================================================
	//	 //===  									    REGION  					               ===
	//	 //========================================================================================
	//
	//	   
	//
	//			 
	//			 
	//		    
	//	
	//	//========================================================================================
	//	 //===       optional referenced state // *** CHECK : StateContent_1 *** //               ===
	//	 //===       e.g.: aNewNameForTheReferencedState @ aStateID [A1/a,A2/b]                 ===
	//	 //========================================================================================
	//	 //( (newStateID=ID '@')? referencedState=[State|ID] '[' (signalRenamings+=SignalRenaming',')* signalRenamings+=SignalRenaming ']' )?
	//	
	//
	//	//========================================================================================
	//	 //===  									    ACTIONS  					               ===
	//	 //========================================================================================
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//Action:
	//  isImmediate?="#" triggersAndEfects=STRING delay=INT?; 
	//	//========================================================================================
	//	 //===  									    ACTIONS  					               ===
	//	 //========================================================================================
	//
	//	    
	//	//| Transition
	//	
	//
	//	//========================================================================================
	//	 //===  									    TRANSITION 					               ===
	//	 //========================================================================================
	////Transition:
	////	
	////;
	//	 //========================================================================================
	//	 //===  									    VAR,SIG  					               ===
	//	 //========================================================================================
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ValuedObject:
	//  Signal|Variable; 
	//	//========================================================================================
	//	 //===  									    TRANSITION 					               ===
	//	 //========================================================================================
	////Transition:
	////	
	////;
	//	 //========================================================================================
	//	 //===  									    VAR,SIG  					               ===
	//	 //========================================================================================
	public ValuedObjectElements getValuedObjectAccess() {
		return (pValuedObject != null) ? pValuedObject : (pValuedObject = new ValuedObjectElements());
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	//Variable:
	//  name=ID (":= " initialValue=INT)? (": " (type=ValueType|hostType=STRING))?; 
	//
	//	//'var' brauche ich nicht, denn Signale fangen mit (input|output|local) an
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Signal:
	//  (isLocal?="local"|isInput?="input"|isOutput?="output") name=ID (":=" initialValue=
	//  INT)? (": " (type=ValueType|hostType=STRING)|": " "combine" (type=ValueType|hostType
	//  =STRING) "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?; 
	//
	// 	
	//		        
	//		
	//		 
	//		
	//		   
	//		
	//			     
	//		 	               // *** CHECK : Signal_1 && Signal_2 *** //
	//		 // *** CHECK : Signal_3 *** //	
	//
	//	//========================================================================================
	//	 //===  								 ENUMS, DATATYPES etc      			               ===
	//	 //========================================================================================
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//TICK returns Signal:
	//  "tick"; 
	//	//========================================================================================
	//	 //===  								 ENUMS, DATATYPES etc      			               ===
	//	 //========================================================================================
	//    
	//	  // wie sind die flags von diesem "Signal Element" definiert usw? muss noch getestet werden, verzichte darauf, wenn es nicht etwas einfaches ist.
	public TICKElements getTICKAccess() {
		return (pTICK != null) ? pTICK : (pTICK = new TICKElements());
	}
	
	public ParserRule getTICKRule() {
		return getTICKAccess().getRule();
	}

	//enum StateType:
	//  NORMAL | PSEUDO="cond" | REFERENCE="reference" | TEXTUAL="textual";
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum CombineOperator:
	//  NONE | ADD="+" | MULT="*" | HOST="host";  
	//    
	//              //hostCombineOperator
	public CombineOperatorElements getCombineOperatorAccess() {
		return (unknownRuleCombineOperator != null) ? unknownRuleCombineOperator : (unknownRuleCombineOperator = new CombineOperatorElements());
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//enum ValueType:
	//  PURE | BOOL="boolean" | UNSIGNED="unsigned" | INTEGER="integer" | DOUBLE="double" | HOST=
	//  "host"; 
	//  
	//	                      //| FLOAT='float'
	public ValueTypeElements getValueTypeAccess() {
		return (unknownRuleValueType != null) ? unknownRuleValueType : (unknownRuleValueType = new ValueTypeElements());
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
