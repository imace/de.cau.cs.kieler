/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RetypingSyncchartsGrammarAccess implements IGrammarAccess {
	
	
	public class RegionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Assignment cInnerStatesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInnerStatesStateParserRuleCall_0 = (RuleCall)cInnerStatesAssignment.eContents().get(0);
		
		//Region returns sync::Region:
		//  innerStates+=State; 
		////generate retypingSynccharts "http://www.cau.de/cs/kieler/synccharts/dsl/RetypingSynccharts" 
		////========================================================================================
		////===  									    STATE						               ===
		////========================================================================================
		//
		//
		//    
		////'region' id=ID
		//   // the first state because the GMF editors root element is of type synch::Region
		//   //  (innerStates+=State)*
		public ParserRule getRule() { return rule; }

		//innerStates+=State 
		////'region' id=ID
		//   // the first state because the GMF editors root element is of type synch::Region
		//   //  (innerStates+=State)*
		public Assignment getInnerStatesAssignment() { return cInnerStatesAssignment; }

		//State // the first state because the GMF editors root element is of type synch::Region
		//   //  (innerStates+=State)*
		public RuleCall getInnerStatesStateParserRuleCall_0() { return cInnerStatesStateParserRuleCall_0; }
	}

	public class StateElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cBodyTextAssignment_2.eContents().get(0);
		
		//State returns sync::State:
		//  id=ID label=STRING? bodyText=STRING?; 
		//    
		////		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final'))
		//   //	
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init'))
		//   //	
		//   //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 'state'
		//   //	| (isInitial?='init') (type=StateType) name=FullStateID  
		//   //	| (isInitial?='init') 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 
		//   //	| (isInitial?='init') 'state'
		//   //	| (isInitial?='init') name=FullStateID
		//   //	| (isInitial?='init')
		//   //	
		//   //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType) 'state' 
		//   //	| (isFinal?='final')  (type=StateType) name=FullStateID
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType)
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  name=FullStateID
		//   //	| (isFinal?='final')
		//   //	
		//   //	| (type=StateType) 'state' name=FullStateID
		//   //	| (type=StateType) 'state'
		//   //	| (type=StateType) name=FullStateID
		//   //	| (type=StateType)
		//   //	
		//   //	| 'state' name=FullStateID
		//   //	| 'state'
		//   //		
		//   //	| name=FullStateID
		//   //	)
		//     //FullStateID
		//     //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
		//     //(	(outgoingTransitions+=Transition)*
		//   //|	
		//   // ('{' //		(	 	('onentry' entryActions+=Action) 
		//   //			| 	('oninner' innerActions+=Action) 
		//   //			|   ('onexit' exitActions+=Action ) 
		//   //			| 	('suspension' suspensionTrigger=Action) // kein effect, kein delay, kein immediate
		//   //			| 	(signals+=Signal) 
		//   // (regions+=Region ('||' regions+=Region)*) //		)+	
		//   //  '}')? //	(outgoingTransitions+=Transition)*
		//   //) // this is another big OR because if my state has a content (the curly brackets) then its transition have to come after the curly brackets 
		//
		////Renaming: // returns sync::SignalRenaming:
		////	oldID=STRING'/'newID=STRING
		////;
		////FullStateID : ((ID'@')?ID);
		////
		////	//========================================================================================
		////	//===  									    ACTIONS  					               ===
		////	//========================================================================================
		////Action:
		////	((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))
		////| 
		////	Transition
		////	
		////;
		////	//========================================================================================
		////	//===  									    REGIONS  					               ===
		////	//========================================================================================
		////Region returns sync::Region :
		////	(	variables+=Variable
		////	|	innerStates+=State
		////	|	signals+=Signal
		////	) +
		////;	
		////
		////	//========================================================================================
		////	//===  									    TRANSITION 					               ===
		////	//========================================================================================
		////	
		////Transition:
		////
		////	//((sourceState=[State|FullStateID]))? //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
		////	newSourceState=TransitionState
		////	type=TransitionType
		////	(targetState=[sync::State|FullStateID])//|newTargetState=TransitionState )
		////	( 'with' triggersAndEffects=STRING)?
		////	(isHistory?=' history')?
		////	';'
		////;
		////TransitionState:// returns State:
		////	//name=FullStateID
		////	( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
		////	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
		////	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
		////	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
		////	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
		////	| ((isInitial?='init')(isFinal?='final')) 'state'
		////	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
		////	| ((isInitial?='init')(isFinal?='final'))
		////	
		////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
		////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
		////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
		////	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
		////	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
		////	| ((isFinal?='final')(isInitial?='init')) 'state'
		////	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
		////	| ((isFinal?='final')(isInitial?='init'))
		////	
		////	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
		////	| (isInitial?='init') (type=StateType) 'state'
		////	| (isInitial?='init') (type=StateType) name=FullStateID  
		////	| (isInitial?='init') 'state' name=FullStateID
		////	| (isInitial?='init') (type=StateType) 
		////	| (isInitial?='init') 'state'
		////	| (isInitial?='init') name=FullStateID
		////	| (isInitial?='init')
		////	
		////	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
		////	| (isFinal?='final')  (type=StateType) 'state' 
		////	| (isFinal?='final')  (type=StateType) name=FullStateID
		////	| (isFinal?='final')  'state' name=FullStateID
		////	| (isFinal?='final')  (type=StateType)
		////	| (isFinal?='final')  'state' name=FullStateID
		////	| (isFinal?='final')  name=FullStateID
		////	| (isFinal?='final')
		////	
		////	| (type=StateType) 'state' name=FullStateID
		////	| (type=StateType) 'state'
		////	| (type=StateType) name=FullStateID
		////	| (type=StateType)
		////	
		////	| 'state' name=FullStateID
		////	| 'state'
		////		
		////	| name=FullStateID
		////	) 
		////	
		////;
		//// 	//========================================================================================
		////	//===  									    VAR,SIG  					               ===
		////	//========================================================================================
		////ValuedObject:
		////	Signal | Variable
		////;
		////Variable:
		////	'var' name=ID 
		////	( 
		////	  (': ' type=ValueType)//or type only, type being either pre-defined or hostcode
		////	| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type 
		////	)  
		////;
		////Signal:
		//// 	
		////		//(isLocal?='local')? this does not make any sense anymore, does it?
		////		( (isInputOutput?='inputoutput')
		////		| (isInput?='input')
		////		| (isOutput?='output')
		////		)		
		////		name=ID 
		////		( 
		////		  (': ' type=ValueType) //or type only, type being either pre-defined or hostcode
		////		| (': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING))//or combine type only
		////		| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type
		////		| (':=' initialValue=INT ': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING)) //or initial value and combine type
		////		)? 
		////;
		////	//========================================================================================
		////	//===  								 ENUMS, DATATYPES etc      			               ===
		////	//========================================================================================
		////enum StateType		: NORMAL='state' | PSEUDO='cond' | REFERENCE='ref' | TEXTUAL='textual'; 
		////enum CombineOperator: NONE | ADD='+' | MULT='*' | AND='AND'| OR='OR' |HOST='hostCombineOperator';
		////enum ValueType: PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST='hostType';	
		////enum TransitionType : WEAKABORT='-->' |  STRONGABORT='o->' | NORMALTERMINATION='>->' ;
		public ParserRule getRule() { return rule; }

		//id=ID label=STRING? bodyText=STRING? 
		////		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final'))
		//   //	
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init'))
		//   //	
		//   //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 'state'
		//   //	| (isInitial?='init') (type=StateType) name=FullStateID  
		//   //	| (isInitial?='init') 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 
		//   //	| (isInitial?='init') 'state'
		//   //	| (isInitial?='init') name=FullStateID
		//   //	| (isInitial?='init')
		//   //	
		//   //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType) 'state' 
		//   //	| (isFinal?='final')  (type=StateType) name=FullStateID
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType)
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  name=FullStateID
		//   //	| (isFinal?='final')
		//   //	
		//   //	| (type=StateType) 'state' name=FullStateID
		//   //	| (type=StateType) 'state'
		//   //	| (type=StateType) name=FullStateID
		//   //	| (type=StateType)
		//   //	
		//   //	| 'state' name=FullStateID
		//   //	| 'state'
		//   //		
		//   //	| name=FullStateID
		//   //	)
		//     //FullStateID
		//     //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
		//     //(	(outgoingTransitions+=Transition)*
		//   //|	
		//   // ('{' //		(	 	('onentry' entryActions+=Action) 
		//   //			| 	('oninner' innerActions+=Action) 
		//   //			|   ('onexit' exitActions+=Action ) 
		//   //			| 	('suspension' suspensionTrigger=Action) // kein effect, kein delay, kein immediate
		//   //			| 	(signals+=Signal) 
		//   // (regions+=Region ('||' regions+=Region)*) //		)+	
		//   //  '}')? //	(outgoingTransitions+=Transition)*
		//   //) // this is another big OR because if my state has a content (the curly brackets) then its transition have to come after the curly brackets
		public Group getGroup() { return cGroup; }

		//id=ID 
		////		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
		//   //	| ((isInitial?='init')(isFinal?='final')) 'state'
		//   //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
		//   //	| ((isInitial?='init')(isFinal?='final'))
		//   //	
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
		//   //	| ((isFinal?='final')(isInitial?='init')) 'state'
		//   //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
		//   //	| ((isFinal?='final')(isInitial?='init'))
		//   //	
		//   //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 'state'
		//   //	| (isInitial?='init') (type=StateType) name=FullStateID  
		//   //	| (isInitial?='init') 'state' name=FullStateID
		//   //	| (isInitial?='init') (type=StateType) 
		//   //	| (isInitial?='init') 'state'
		//   //	| (isInitial?='init') name=FullStateID
		//   //	| (isInitial?='init')
		//   //	
		//   //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType) 'state' 
		//   //	| (isFinal?='final')  (type=StateType) name=FullStateID
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  (type=StateType)
		//   //	| (isFinal?='final')  'state' name=FullStateID
		//   //	| (isFinal?='final')  name=FullStateID
		//   //	| (isFinal?='final')
		//   //	
		//   //	| (type=StateType) 'state' name=FullStateID
		//   //	| (type=StateType) 'state'
		//   //	| (type=StateType) name=FullStateID
		//   //	| (type=StateType)
		//   //	
		//   //	| 'state' name=FullStateID
		//   //	| 'state'
		//   //		
		//   //	| name=FullStateID
		//   //	)
		//     //FullStateID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID   //FullStateID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//label=STRING?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }

		//bodyText=STRING?
		public Assignment getBodyTextAssignment_2() { return cBodyTextAssignment_2; }

		//STRING
		public RuleCall getBodyTextSTRINGTerminalRuleCall_2_0() { return cBodyTextSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private RegionElements pRegion;
	private StateElements pState;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RetypingSyncchartsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Region returns sync::Region:
	//  innerStates+=State; 
	////generate retypingSynccharts "http://www.cau.de/cs/kieler/synccharts/dsl/RetypingSynccharts" 
	////========================================================================================
	////===  									    STATE						               ===
	////========================================================================================
	//
	//
	//    
	////'region' id=ID
	//   // the first state because the GMF editors root element is of type synch::Region
	//   //  (innerStates+=State)*
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//State returns sync::State:
	//  id=ID label=STRING? bodyText=STRING?; 
	//    
	////		( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
	//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
	//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
	//   //	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
	//   //	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
	//   //	| ((isInitial?='init')(isFinal?='final')) 'state'
	//   //	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
	//   //	| ((isInitial?='init')(isFinal?='final'))
	//   //	
	//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
	//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
	//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
	//   //	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
	//   //	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
	//   //	| ((isFinal?='final')(isInitial?='init')) 'state'
	//   //	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
	//   //	| ((isFinal?='final')(isInitial?='init'))
	//   //	
	//   //	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
	//   //	| (isInitial?='init') (type=StateType) 'state'
	//   //	| (isInitial?='init') (type=StateType) name=FullStateID  
	//   //	| (isInitial?='init') 'state' name=FullStateID
	//   //	| (isInitial?='init') (type=StateType) 
	//   //	| (isInitial?='init') 'state'
	//   //	| (isInitial?='init') name=FullStateID
	//   //	| (isInitial?='init')
	//   //	
	//   //	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
	//   //	| (isFinal?='final')  (type=StateType) 'state' 
	//   //	| (isFinal?='final')  (type=StateType) name=FullStateID
	//   //	| (isFinal?='final')  'state' name=FullStateID
	//   //	| (isFinal?='final')  (type=StateType)
	//   //	| (isFinal?='final')  'state' name=FullStateID
	//   //	| (isFinal?='final')  name=FullStateID
	//   //	| (isFinal?='final')
	//   //	
	//   //	| (type=StateType) 'state' name=FullStateID
	//   //	| (type=StateType) 'state'
	//   //	| (type=StateType) name=FullStateID
	//   //	| (type=StateType)
	//   //	
	//   //	| 'state' name=FullStateID
	//   //	| 'state'
	//   //		
	//   //	| name=FullStateID
	//   //	)
	//     //FullStateID
	//     //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
	//     //(	(outgoingTransitions+=Transition)*
	//   //|	
	//   // ('{' //		(	 	('onentry' entryActions+=Action) 
	//   //			| 	('oninner' innerActions+=Action) 
	//   //			|   ('onexit' exitActions+=Action ) 
	//   //			| 	('suspension' suspensionTrigger=Action) // kein effect, kein delay, kein immediate
	//   //			| 	(signals+=Signal) 
	//   // (regions+=Region ('||' regions+=Region)*) //		)+	
	//   //  '}')? //	(outgoingTransitions+=Transition)*
	//   //) // this is another big OR because if my state has a content (the curly brackets) then its transition have to come after the curly brackets 
	//
	////Renaming: // returns sync::SignalRenaming:
	////	oldID=STRING'/'newID=STRING
	////;
	////FullStateID : ((ID'@')?ID);
	////
	////	//========================================================================================
	////	//===  									    ACTIONS  					               ===
	////	//========================================================================================
	////Action:
	////	((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))
	////| 
	////	Transition
	////	
	////;
	////	//========================================================================================
	////	//===  									    REGIONS  					               ===
	////	//========================================================================================
	////Region returns sync::Region :
	////	(	variables+=Variable
	////	|	innerStates+=State
	////	|	signals+=Signal
	////	) +
	////;	
	////
	////	//========================================================================================
	////	//===  									    TRANSITION 					               ===
	////	//========================================================================================
	////	
	////Transition:
	////
	////	//((sourceState=[State|FullStateID]))? //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
	////	newSourceState=TransitionState
	////	type=TransitionType
	////	(targetState=[sync::State|FullStateID])//|newTargetState=TransitionState )
	////	( 'with' triggersAndEffects=STRING)?
	////	(isHistory?=' history')?
	////	';'
	////;
	////TransitionState:// returns State:
	////	//name=FullStateID
	////	( ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state' name=FullStateID
	////	| ((isInitial?='init')(isFinal?='final')) (type=StateType) 'state'
	////	| ((isInitial?='init')(isFinal?='final')) (type=StateType) name=FullStateID
	////	| ((isInitial?='init')(isFinal?='final')) 'state' name=FullStateID
	////	| ((isInitial?='init')(isFinal?='final')) (type=StateType)
	////	| ((isInitial?='init')(isFinal?='final')) 'state'
	////	| ((isInitial?='init')(isFinal?='final')) name=FullStateID
	////	| ((isInitial?='init')(isFinal?='final'))
	////	
	////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state' name=FullStateID
	////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) 'state'
	////	| ((isFinal?='final')(isInitial?='init')) (type=StateType) name=FullStateID
	////	| ((isFinal?='final')(isInitial?='init')) 'state' name=FullStateID
	////	| ((isFinal?='final')(isInitial?='init')) (type=StateType)
	////	| ((isFinal?='final')(isInitial?='init')) 'state'
	////	| ((isFinal?='final')(isInitial?='init')) name=FullStateID
	////	| ((isFinal?='final')(isInitial?='init'))
	////	
	////	| (isInitial?='init') (type=StateType) 'state' name=FullStateID
	////	| (isInitial?='init') (type=StateType) 'state'
	////	| (isInitial?='init') (type=StateType) name=FullStateID  
	////	| (isInitial?='init') 'state' name=FullStateID
	////	| (isInitial?='init') (type=StateType) 
	////	| (isInitial?='init') 'state'
	////	| (isInitial?='init') name=FullStateID
	////	| (isInitial?='init')
	////	
	////	| (isFinal?='final')  (type=StateType) 'state' name=FullStateID
	////	| (isFinal?='final')  (type=StateType) 'state' 
	////	| (isFinal?='final')  (type=StateType) name=FullStateID
	////	| (isFinal?='final')  'state' name=FullStateID
	////	| (isFinal?='final')  (type=StateType)
	////	| (isFinal?='final')  'state' name=FullStateID
	////	| (isFinal?='final')  name=FullStateID
	////	| (isFinal?='final')
	////	
	////	| (type=StateType) 'state' name=FullStateID
	////	| (type=StateType) 'state'
	////	| (type=StateType) name=FullStateID
	////	| (type=StateType)
	////	
	////	| 'state' name=FullStateID
	////	| 'state'
	////		
	////	| name=FullStateID
	////	) 
	////	
	////;
	//// 	//========================================================================================
	////	//===  									    VAR,SIG  					               ===
	////	//========================================================================================
	////ValuedObject:
	////	Signal | Variable
	////;
	////Variable:
	////	'var' name=ID 
	////	( 
	////	  (': ' type=ValueType)//or type only, type being either pre-defined or hostcode
	////	| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type 
	////	)  
	////;
	////Signal:
	//// 	
	////		//(isLocal?='local')? this does not make any sense anymore, does it?
	////		( (isInputOutput?='inputoutput')
	////		| (isInput?='input')
	////		| (isOutput?='output')
	////		)		
	////		name=ID 
	////		( 
	////		  (': ' type=ValueType) //or type only, type being either pre-defined or hostcode
	////		| (': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING))//or combine type only
	////		| (':=' initialValue=INT ': ' type=ValueType) // either initial value and type
	////		| (':=' initialValue=INT ': combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=STRING)) //or initial value and combine type
	////		)? 
	////;
	////	//========================================================================================
	////	//===  								 ENUMS, DATATYPES etc      			               ===
	////	//========================================================================================
	////enum StateType		: NORMAL='state' | PSEUDO='cond' | REFERENCE='ref' | TEXTUAL='textual'; 
	////enum CombineOperator: NONE | ADD='+' | MULT='*' | AND='AND'| OR='OR' |HOST='hostCombineOperator';
	////enum ValueType: PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST='hostType';	
	////enum TransitionType : WEAKABORT='-->' |  STRONGABORT='o->' | NORMALTERMINATION='>->' ;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
