import dataflow;

Void inferTypes(Box box) :
  JAVA de.cau.cs.kieler.dataflow.codegen.TypeHelper.inferTypes(de.cau.cs.kieler.dataflow.Box);

Void init(Box b) :
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.init(de.cau.cs.kieler.dataflow.Box);

Void initIO(Box b) :
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.initIO(de.cau.cs.kieler.dataflow.Box);

Set[Port] getInputs() : 
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.getInputs();
 
Set[Port] getOutputs() :
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.getOutputs(); 
  
Set[Port] getLocals() :
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.getLocals();   

boolean hasLocals(Box box) :
  getLocals(box).size>0;
  
Set[Port] getLocals(Box box) :
 // box.boxes.connections.collect(c | !box.inputs.contains(c.sourcePort) && !box.outputs.contains(c.targetPort));
  JAVA de.cau.cs.kieler.dataflow.codegen.Helper.getLocals(de.cau.cs.kieler.dataflow.Box);   

boolean hasLocals(Box box) :
  getLocals(box).size > 0;  
  
String getName(Port p) :
  p.name;
  
String getType(Port p) :
  JAVA de.cau.cs.kieler.dataflow.codegen.TypeHelper.getType(de.cau.cs.kieler.dataflow.Port);
  
boolean isBinOp(String op) :
  op.compareTo("+")==0
  ||  op.compareTo("-")==0
  ||  op.compareTo("*")==0
  ||  op.compareTo("/")==0
  ||  op.toLowerCase().compareTo("and")==0
  ||  op.toLowerCase().compareTo("or")==0
  ||  op.toLowerCase().compareTo("when")==0
  ||  op.compareTo("->")==0  
  ||  op.compareTo("<")==0
  ||  op.compareTo("<=")==0
  ||  op.compareTo("=")==0
  ||  op.compareTo(">=")==0
  ||  op.compareTo(">")==0
  ||  op.compareTo("<>")==0
  ;    
  
boolean isUnOp(String op) :
  op.toLowerCase().compareTo("pre")==0
  ||  op.toLowerCase().compareTo("current")==0
  ||  op.toLowerCase().compareTo("not")==0
  ;     