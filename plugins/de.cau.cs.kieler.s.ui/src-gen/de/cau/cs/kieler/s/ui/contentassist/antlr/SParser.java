/*
* generated by Xtext
*/
package de.cau.cs.kieler.s.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.s.services.SGrammarAccess;

public class SParser extends AbstractContentAssistParser {
	
	@Inject
	private SGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser createParser() {
		de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser result = new de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSignalAccess().getAlternatives_5(), "rule__Signal__Alternatives_5");
					put(grammarAccess.getSignalAccess().getAlternatives_5_1_4(), "rule__Signal__Alternatives_5_1_4");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getGotoAccess().getAlternatives(), "rule__Goto__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getParanthesedValuedExpressionAccess().getAlternatives(), "rule__ParanthesedValuedExpression__Alternatives");
					put(grammarAccess.getMultOrDivOperationAccess().getAlternatives(), "rule__MultOrDivOperation__Alternatives");
					put(grammarAccess.getPreOrNormalValuedExpressionAccess().getAlternatives(), "rule__PreOrNormalValuedExpression__Alternatives");
					put(grammarAccess.getUnaryOperationAccess().getSubExpressionsAlternatives_1_0(), "rule__UnaryOperation__SubExpressionsAlternatives_1_0");
					put(grammarAccess.getUnaryOrNormalExpressionAccess().getAlternatives(), "rule__UnaryOrNormalExpression__Alternatives");
					put(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives(), "rule__ParanthesedBooleanExpression__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getOperatorTypeAccess().getAlternatives(), "rule__OperatorType__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getPlusOperatorAccess().getAlternatives(), "rule__PlusOperator__Alternatives");
					put(grammarAccess.getMultOperatorAccess().getAlternatives(), "rule__MultOperator__Alternatives");
					put(grammarAccess.getValueTypeAccess().getAlternatives(), "rule__ValueType__Alternatives");
					put(grammarAccess.getCombineOperatorAccess().getAlternatives(), "rule__CombineOperator__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
					put(grammarAccess.getSignalAccess().getGroup_4(), "rule__Signal__Group_4__0");
					put(grammarAccess.getSignalAccess().getGroup_5_0(), "rule__Signal__Group_5_0__0");
					put(grammarAccess.getSignalAccess().getGroup_5_1(), "rule__Signal__Group_5_1__0");
					put(grammarAccess.getPauseAccess().getGroup(), "rule__Pause__Group__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getHaltAccess().getGroup(), "rule__Halt__Group__0");
					put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
					put(grammarAccess.getAbortAccess().getGroup(), "rule__Abort__Group__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_3(), "rule__If__Group_3__0");
					put(grammarAccess.getIfAccess().getGroup_6(), "rule__If__Group_6__0");
					put(grammarAccess.getGotoAccess().getGroup_0(), "rule__Goto__Group_0__0");
					put(grammarAccess.getGotoAccess().getGroup_1(), "rule__Goto__Group_1__0");
					put(grammarAccess.getGotoAccess().getGroup_1_0(), "rule__Goto__Group_1_0__0");
					put(grammarAccess.getForkAccess().getGroup(), "rule__Fork__Group__0");
					put(grammarAccess.getForkAccess().getGroup_5(), "rule__Fork__Group_5__0");
					put(grammarAccess.getForkeAccess().getGroup(), "rule__Forke__Group__0");
					put(grammarAccess.getForkeAccess().getGroup_3(), "rule__Forke__Group_3__0");
					put(grammarAccess.getEmitAccess().getGroup(), "rule__Emit__Group__0");
					put(grammarAccess.getEmitAccess().getGroup_3(), "rule__Emit__Group_3__0");
					put(grammarAccess.getAwaitAccess().getGroup(), "rule__Await__Group__0");
					put(grammarAccess.getAwaitAccess().getGroup_3(), "rule__Await__Group_3__0");
					put(grammarAccess.getPrioAccess().getGroup(), "rule__Prio__Group__0");
					put(grammarAccess.getPrioAccess().getGroup_3(), "rule__Prio__Group_3__0");
					put(grammarAccess.getSignalReferenceAccess().getGroup(), "rule__SignalReference__Group__0");
					put(grammarAccess.getSignalReferenceAccess().getGroup_1(), "rule__SignalReference__Group_1__0");
					put(grammarAccess.getSignalReferenceAccess().getGroup_1_1(), "rule__SignalReference__Group_1_1__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup(), "rule__VariableReference__Group__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup_1(), "rule__VariableReference__Group_1__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup_1_1(), "rule__VariableReference__Group_1_1__0");
					put(grammarAccess.getValOperationAccess().getGroup(), "rule__ValOperation__Group__0");
					put(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_5(), "rule__ParanthesedValuedExpression__Group_5__0");
					put(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_6(), "rule__ParanthesedValuedExpression__Group_6__0");
					put(grammarAccess.getPlusOperationAccess().getGroup(), "rule__PlusOperation__Group__0");
					put(grammarAccess.getPlusOperationAccess().getGroup_1(), "rule__PlusOperation__Group_1__0");
					put(grammarAccess.getMultOrDivOperationAccess().getGroup_1(), "rule__MultOrDivOperation__Group_1__0");
					put(grammarAccess.getMultOperationAccess().getGroup(), "rule__MultOperation__Group__0");
					put(grammarAccess.getMultOperationAccess().getGroup_1(), "rule__MultOperation__Group_1__0");
					put(grammarAccess.getDivOperationAccess().getGroup(), "rule__DivOperation__Group__0");
					put(grammarAccess.getDivOperationAccess().getGroup_1(), "rule__DivOperation__Group_1__0");
					put(grammarAccess.getPreArithmOperationAccess().getGroup(), "rule__PreArithmOperation__Group__0");
					put(grammarAccess.getCompareOperationAccess().getGroup(), "rule__CompareOperation__Group__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_1(), "rule__CompareOperation__Group_1__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup(), "rule__UnaryOperation__Group__0");
					put(grammarAccess.getUnaryParanthesedOperationAccess().getGroup(), "rule__UnaryParanthesedOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup(), "rule__AndOperation__Group__0");
					put(grammarAccess.getAndOperationAccess().getGroup_1(), "rule__AndOperation__Group_1__0");
					put(grammarAccess.getOrOperationAccess().getGroup(), "rule__OrOperation__Group__0");
					put(grammarAccess.getOrOperationAccess().getGroup_1(), "rule__OrOperation__Group_1__0");
					put(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_5(), "rule__ParanthesedBooleanExpression__Group_5__0");
					put(grammarAccess.getTextExpressionAccess().getGroup(), "rule__TextExpression__Group__0");
					put(grammarAccess.getTextExpressionAccess().getGroup_1(), "rule__TextExpression__Group_1__0");
					put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
					put(grammarAccess.getProgramAccess().getPriorityAssignment_3(), "rule__Program__PriorityAssignment_3");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_5(), "rule__Program__SignalsAssignment_5");
					put(grammarAccess.getProgramAccess().getStatesAssignment_6(), "rule__Program__StatesAssignment_6");
					put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
					put(grammarAccess.getStateAccess().getSignalsAssignment_2_1(), "rule__State__SignalsAssignment_2_1");
					put(grammarAccess.getStateAccess().getInstructionsAssignment_3_0(), "rule__State__InstructionsAssignment_3_0");
					put(grammarAccess.getSignalAccess().getIsInputAssignment_0(), "rule__Signal__IsInputAssignment_0");
					put(grammarAccess.getSignalAccess().getIsOutputAssignment_1(), "rule__Signal__IsOutputAssignment_1");
					put(grammarAccess.getSignalAccess().getNameAssignment_3(), "rule__Signal__NameAssignment_3");
					put(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1(), "rule__Signal__InitialValueAssignment_4_1");
					put(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1(), "rule__Signal__TypeAssignment_5_0_1");
					put(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2(), "rule__Signal__TypeAssignment_5_1_2");
					put(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0(), "rule__Signal__CombineOperatorAssignment_5_1_4_0");
					put(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1(), "rule__Signal__HostCombineOperatorAssignment_5_1_4_1");
					put(grammarAccess.getPauseAccess().getContinuationAssignment_3(), "rule__Pause__ContinuationAssignment_3");
					put(grammarAccess.getTermAccess().getContinuationAssignment_3(), "rule__Term__ContinuationAssignment_3");
					put(grammarAccess.getHaltAccess().getContinuationAssignment_3(), "rule__Halt__ContinuationAssignment_3");
					put(grammarAccess.getJoinAccess().getContinuationAssignment_3(), "rule__Join__ContinuationAssignment_3");
					put(grammarAccess.getAbortAccess().getContinuationAssignment_3(), "rule__Abort__ContinuationAssignment_3");
					put(grammarAccess.getIfAccess().getExpressionAssignment_2(), "rule__If__ExpressionAssignment_2");
					put(grammarAccess.getIfAccess().getContinuationAssignment_3_1(), "rule__If__ContinuationAssignment_3_1");
					put(grammarAccess.getIfAccess().getInstructionsAssignment_6_0(), "rule__If__InstructionsAssignment_6_0");
					put(grammarAccess.getGotoAccess().getStateAssignment_0_2(), "rule__Goto__StateAssignment_0_2");
					put(grammarAccess.getGotoAccess().getContinuationAssignment_1_0_1(), "rule__Goto__ContinuationAssignment_1_0_1");
					put(grammarAccess.getForkAccess().getStateAssignment_2(), "rule__Fork__StateAssignment_2");
					put(grammarAccess.getForkAccess().getPriorityAssignment_4(), "rule__Fork__PriorityAssignment_4");
					put(grammarAccess.getForkAccess().getContinuationAssignment_5_1(), "rule__Fork__ContinuationAssignment_5_1");
					put(grammarAccess.getForkeAccess().getStateAssignment_2(), "rule__Forke__StateAssignment_2");
					put(grammarAccess.getForkeAccess().getContinuationAssignment_3_1(), "rule__Forke__ContinuationAssignment_3_1");
					put(grammarAccess.getEmitAccess().getSignalAssignment_2(), "rule__Emit__SignalAssignment_2");
					put(grammarAccess.getEmitAccess().getContinuationAssignment_3_1(), "rule__Emit__ContinuationAssignment_3_1");
					put(grammarAccess.getAwaitAccess().getSignalAssignment_2(), "rule__Await__SignalAssignment_2");
					put(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1(), "rule__Await__ContinuationAssignment_3_1");
					put(grammarAccess.getPrioAccess().getPriorityAssignment_2(), "rule__Prio__PriorityAssignment_2");
					put(grammarAccess.getPrioAccess().getContinuationAssignment_3_1(), "rule__Prio__ContinuationAssignment_3_1");
					put(grammarAccess.getSignalReferenceAccess().getSignalAssignment_0(), "rule__SignalReference__SignalAssignment_0");
					put(grammarAccess.getSignalReferenceAccess().getSubExpressionsAssignment_1_1_0(), "rule__SignalReference__SubExpressionsAssignment_1_1_0");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0(), "rule__VariableReference__VariableAssignment_0");
					put(grammarAccess.getVariableReferenceAccess().getSubExpressionsAssignment_1_1_0(), "rule__VariableReference__SubExpressionsAssignment_1_1_0");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
					put(grammarAccess.getValOperationAccess().getOperatorAssignment_0(), "rule__ValOperation__OperatorAssignment_0");
					put(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1(), "rule__ValOperation__SubExpressionsAssignment_1");
					put(grammarAccess.getPlusOperationAccess().getOperatorAssignment_1_1(), "rule__PlusOperation__OperatorAssignment_1_1");
					put(grammarAccess.getPlusOperationAccess().getSubExpressionsAssignment_1_2(), "rule__PlusOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getMultOperationAccess().getOperatorAssignment_1_1(), "rule__MultOperation__OperatorAssignment_1_1");
					put(grammarAccess.getMultOperationAccess().getSubExpressionsAssignment_1_2(), "rule__MultOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getDivOperationAccess().getOperatorAssignment_1_1(), "rule__DivOperation__OperatorAssignment_1_1");
					put(grammarAccess.getDivOperationAccess().getSubExpressionsAssignment_1_2(), "rule__DivOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getPreArithmOperationAccess().getOperatorAssignment_0(), "rule__PreArithmOperation__OperatorAssignment_0");
					put(grammarAccess.getPreArithmOperationAccess().getSubExpressionsAssignment_2(), "rule__PreArithmOperation__SubExpressionsAssignment_2");
					put(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1(), "rule__CompareOperation__OperatorAssignment_1_1");
					put(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2(), "rule__CompareOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0(), "rule__UnaryOperation__OperatorAssignment_0");
					put(grammarAccess.getUnaryOperationAccess().getSubExpressionsAssignment_1(), "rule__UnaryOperation__SubExpressionsAssignment_1");
					put(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorAssignment_0(), "rule__UnaryParanthesedOperation__OperatorAssignment_0");
					put(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsAssignment_2(), "rule__UnaryParanthesedOperation__SubExpressionsAssignment_2");
					put(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1(), "rule__AndOperation__OperatorAssignment_1_1");
					put(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2(), "rule__AndOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1(), "rule__OrOperation__OperatorAssignment_1_1");
					put(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2(), "rule__OrOperation__SubExpressionsAssignment_1_2");
					put(grammarAccess.getTextExpressionAccess().getCodeAssignment_0(), "rule__TextExpression__CodeAssignment_0");
					put(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1(), "rule__TextExpression__TypeAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser typedParser = (de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
