/*
* generated by Xtext
*/
package de.cau.cs.kieler.s.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.s.services.SGrammarAccess;

public class SParser extends AbstractContentAssistParser {
	
	@Inject
	private SGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser createParser() {
		de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser result = new de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAnnotatableAccess().getAlternatives(), "rule__Annotatable__Alternatives");
					put(grammarAccess.getSignalTypeAccess().getAlternatives(), "rule__SignalType__Alternatives");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_5(), "rule__Program__Group_5__0");
					put(grammarAccess.getProgramAccess().getGroup_5_2(), "rule__Program__Group_5_2__0");
					put(grammarAccess.getProgramAccess().getGroup_6(), "rule__Program__Group_6__0");
					put(grammarAccess.getProgramAccess().getGroup_6_2(), "rule__Program__Group_6_2__0");
					put(grammarAccess.getProgramAccess().getGroup_7(), "rule__Program__Group_7__0");
					put(grammarAccess.getProgramAccess().getGroup_7_2(), "rule__Program__Group_7_2__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
					put(grammarAccess.getStateAccess().getGroup_2_1(), "rule__State__Group_2_1__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
					put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
					put(grammarAccess.getSignalAccess().getGroup_3(), "rule__Signal__Group_3__0");
					put(grammarAccess.getSignalAccess().getGroup_4(), "rule__Signal__Group_4__0");
					put(grammarAccess.getSignalAccess().getGroup_4_1(), "rule__Signal__Group_4_1__0");
					put(grammarAccess.getCombineFunctionAccess().getGroup(), "rule__CombineFunction__Group__0");
					put(grammarAccess.getCustomSignalTypeAccess().getGroup(), "rule__CustomSignalType__Group__0");
					put(grammarAccess.getInstructionAccess().getGroup_10(), "rule__Instruction__Group_10__0");
					put(grammarAccess.getInstructionAccess().getGroup_10_1(), "rule__Instruction__Group_10_1__0");
					put(grammarAccess.getInstructionAccess().getGroup_10_1_1(), "rule__Instruction__Group_10_1_1__0");
					put(grammarAccess.getPauseAccess().getGroup(), "rule__Pause__Group__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
					put(grammarAccess.getAbortAccess().getGroup(), "rule__Abort__Group__0");
					put(grammarAccess.getPresentAccess().getGroup(), "rule__Present__Group__0");
					put(grammarAccess.getPresentAccess().getGroup_3(), "rule__Present__Group_3__0");
					put(grammarAccess.getPresentAccess().getGroup_6(), "rule__Present__Group_6__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getGotoAccess().getGroup_3(), "rule__Goto__Group_3__0");
					put(grammarAccess.getForkAccess().getGroup(), "rule__Fork__Group__0");
					put(grammarAccess.getForkAccess().getGroup_5(), "rule__Fork__Group_5__0");
					put(grammarAccess.getForkeAccess().getGroup(), "rule__Forke__Group__0");
					put(grammarAccess.getForkeAccess().getGroup_3(), "rule__Forke__Group_3__0");
					put(grammarAccess.getEmitAccess().getGroup(), "rule__Emit__Group__0");
					put(grammarAccess.getEmitAccess().getGroup_3(), "rule__Emit__Group_3__0");
					put(grammarAccess.getAwaitAccess().getGroup(), "rule__Await__Group__0");
					put(grammarAccess.getAwaitAccess().getGroup_3(), "rule__Await__Group_3__0");
					put(grammarAccess.getPrioAccess().getGroup(), "rule__Prio__Group__0");
					put(grammarAccess.getPrioAccess().getGroup_3(), "rule__Prio__Group_3__0");
					put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
					put(grammarAccess.getProgramAccess().getPriorityAssignment_3(), "rule__Program__PriorityAssignment_3");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_5_1(), "rule__Program__SignalsAssignment_5_1");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_5_2_1(), "rule__Program__SignalsAssignment_5_2_1");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_6_1(), "rule__Program__SignalsAssignment_6_1");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_6_2_1(), "rule__Program__SignalsAssignment_6_2_1");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_7_1(), "rule__Program__SignalsAssignment_7_1");
					put(grammarAccess.getProgramAccess().getSignalsAssignment_7_2_1(), "rule__Program__SignalsAssignment_7_2_1");
					put(grammarAccess.getProgramAccess().getStatesAssignment_8(), "rule__Program__StatesAssignment_8");
					put(grammarAccess.getAnnotationAccess().getKeyAssignment_1(), "rule__Annotation__KeyAssignment_1");
					put(grammarAccess.getAnnotationAccess().getValueAssignment_3(), "rule__Annotation__ValueAssignment_3");
					put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
					put(grammarAccess.getStateAccess().getAnnotationsAssignment_2_0(), "rule__State__AnnotationsAssignment_2_0");
					put(grammarAccess.getStateAccess().getAnnotationsAssignment_2_1_1(), "rule__State__AnnotationsAssignment_2_1_1");
					put(grammarAccess.getStateAccess().getSignalsAssignment_3_1(), "rule__State__SignalsAssignment_3_1");
					put(grammarAccess.getStateAccess().getInstructionsAssignment_4_0(), "rule__State__InstructionsAssignment_4_0");
					put(grammarAccess.getSignalAccess().getNameAssignment_0(), "rule__Signal__NameAssignment_0");
					put(grammarAccess.getSignalAccess().getTypeAssignment_2(), "rule__Signal__TypeAssignment_2");
					put(grammarAccess.getSignalAccess().getCombineFunctionAssignment_3_1(), "rule__Signal__CombineFunctionAssignment_3_1");
					put(grammarAccess.getSignalAccess().getAnnotationsAssignment_4_0(), "rule__Signal__AnnotationsAssignment_4_0");
					put(grammarAccess.getSignalAccess().getAnnotationsAssignment_4_1_1(), "rule__Signal__AnnotationsAssignment_4_1_1");
					put(grammarAccess.getCombineFunctionAccess().getNameAssignment_0(), "rule__CombineFunction__NameAssignment_0");
					put(grammarAccess.getCombineFunctionAccess().getTypeAssignment_1(), "rule__CombineFunction__TypeAssignment_1");
					put(grammarAccess.getCustomSignalTypeAccess().getCustomTypeAssignment_1(), "rule__CustomSignalType__CustomTypeAssignment_1");
					put(grammarAccess.getPrimitiveSignalTypeAccess().getPrimitiveTypeAssignment(), "rule__PrimitiveSignalType__PrimitiveTypeAssignment");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
					put(grammarAccess.getInstructionAccess().getAnnotationsAssignment_10_1_0(), "rule__Instruction__AnnotationsAssignment_10_1_0");
					put(grammarAccess.getInstructionAccess().getAnnotationsAssignment_10_1_1_1(), "rule__Instruction__AnnotationsAssignment_10_1_1_1");
					put(grammarAccess.getPauseAccess().getContinuationAssignment_3(), "rule__Pause__ContinuationAssignment_3");
					put(grammarAccess.getTermAccess().getContinuationAssignment_3(), "rule__Term__ContinuationAssignment_3");
					put(grammarAccess.getJoinAccess().getContinuationAssignment_3(), "rule__Join__ContinuationAssignment_3");
					put(grammarAccess.getAbortAccess().getContinuationAssignment_3(), "rule__Abort__ContinuationAssignment_3");
					put(grammarAccess.getPresentAccess().getSignalAssignment_2(), "rule__Present__SignalAssignment_2");
					put(grammarAccess.getPresentAccess().getContinuationAssignment_3_1(), "rule__Present__ContinuationAssignment_3_1");
					put(grammarAccess.getPresentAccess().getInstructionsAssignment_6_0(), "rule__Present__InstructionsAssignment_6_0");
					put(grammarAccess.getGotoAccess().getStateAssignment_2(), "rule__Goto__StateAssignment_2");
					put(grammarAccess.getGotoAccess().getContinuationAssignment_3_1(), "rule__Goto__ContinuationAssignment_3_1");
					put(grammarAccess.getForkAccess().getStateAssignment_2(), "rule__Fork__StateAssignment_2");
					put(grammarAccess.getForkAccess().getPriorityAssignment_4(), "rule__Fork__PriorityAssignment_4");
					put(grammarAccess.getForkAccess().getContinuationAssignment_5_1(), "rule__Fork__ContinuationAssignment_5_1");
					put(grammarAccess.getForkeAccess().getStateAssignment_2(), "rule__Forke__StateAssignment_2");
					put(grammarAccess.getForkeAccess().getContinuationAssignment_3_1(), "rule__Forke__ContinuationAssignment_3_1");
					put(grammarAccess.getEmitAccess().getSignalAssignment_2(), "rule__Emit__SignalAssignment_2");
					put(grammarAccess.getEmitAccess().getContinuationAssignment_3_1(), "rule__Emit__ContinuationAssignment_3_1");
					put(grammarAccess.getAwaitAccess().getSignalAssignment_2(), "rule__Await__SignalAssignment_2");
					put(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1(), "rule__Await__ContinuationAssignment_3_1");
					put(grammarAccess.getPrioAccess().getPriorityAssignment_2(), "rule__Prio__PriorityAssignment_2");
					put(grammarAccess.getPrioAccess().getContinuationAssignment_3_1(), "rule__Prio__ContinuationAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser typedParser = (de.cau.cs.kieler.s.ui.contentassist.antlr.internal.InternalSParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
