/*
* generated by Xtext
*/
grammar InternalS;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.s.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.s.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.s.services.SGrammarAccess;

}

@parser::members {
 
 	private SGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignal
entryRuleSignal 
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalAccess().getGroup()); }
(rule__Signal__Group__0)
{ after(grammarAccess.getSignalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePause
entryRulePause 
:
{ before(grammarAccess.getPauseRule()); }
	 rulePause
{ after(grammarAccess.getPauseRule()); } 
	 EOF 
;

// Rule Pause
rulePause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPauseAccess().getGroup()); }
(rule__Pause__Group__0)
{ after(grammarAccess.getPauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHalt
entryRuleHalt 
:
{ before(grammarAccess.getHaltRule()); }
	 ruleHalt
{ after(grammarAccess.getHaltRule()); } 
	 EOF 
;

// Rule Halt
ruleHalt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHaltAccess().getGroup()); }
(rule__Halt__Group__0)
{ after(grammarAccess.getHaltAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoin
entryRuleJoin 
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJoinAccess().getGroup()); }
(rule__Join__Group__0)
{ after(grammarAccess.getJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbort
entryRuleAbort 
:
{ before(grammarAccess.getAbortRule()); }
	 ruleAbort
{ after(grammarAccess.getAbortRule()); } 
	 EOF 
;

// Rule Abort
ruleAbort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbortAccess().getGroup()); }
(rule__Abort__Group__0)
{ after(grammarAccess.getAbortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoto
entryRuleGoto 
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGotoAccess().getAlternatives()); }
(rule__Goto__Alternatives)
{ after(grammarAccess.getGotoAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFork
entryRuleFork 
:
{ before(grammarAccess.getForkRule()); }
	 ruleFork
{ after(grammarAccess.getForkRule()); } 
	 EOF 
;

// Rule Fork
ruleFork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkAccess().getGroup()); }
(rule__Fork__Group__0)
{ after(grammarAccess.getForkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForke
entryRuleForke 
:
{ before(grammarAccess.getForkeRule()); }
	 ruleForke
{ after(grammarAccess.getForkeRule()); } 
	 EOF 
;

// Rule Forke
ruleForke
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkeAccess().getGroup()); }
(rule__Forke__Group__0)
{ after(grammarAccess.getForkeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmit
entryRuleEmit 
:
{ before(grammarAccess.getEmitRule()); }
	 ruleEmit
{ after(grammarAccess.getEmitRule()); } 
	 EOF 
;

// Rule Emit
ruleEmit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmitAccess().getGroup()); }
(rule__Emit__Group__0)
{ after(grammarAccess.getEmitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAwait
entryRuleAwait 
:
{ before(grammarAccess.getAwaitRule()); }
	 ruleAwait
{ after(grammarAccess.getAwaitRule()); } 
	 EOF 
;

// Rule Await
ruleAwait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAwaitAccess().getGroup()); }
(rule__Await__Group__0)
{ after(grammarAccess.getAwaitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrio
entryRulePrio 
:
{ before(grammarAccess.getPrioRule()); }
	 rulePrio
{ after(grammarAccess.getPrioRule()); } 
	 EOF 
;

// Rule Prio
rulePrio
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrioAccess().getGroup()); }
(rule__Prio__Group__0)
{ after(grammarAccess.getPrioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalReference
entryRuleSignalReference 
:
{ before(grammarAccess.getSignalReferenceRule()); }
	 ruleSignalReference
{ after(grammarAccess.getSignalReferenceRule()); } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup()); }
(rule__SignalReference__Group__0)
{ after(grammarAccess.getSignalReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleValOperation
entryRuleValOperation 
:
{ before(grammarAccess.getValOperationRule()); }
	 ruleValOperation
{ after(grammarAccess.getValOperationRule()); } 
	 EOF 
;

// Rule ValOperation
ruleValOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValOperationAccess().getGroup()); }
(rule__ValOperation__Group__0)
{ after(grammarAccess.getValOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedExpression
entryRuleValuedExpression 
:
{ before(grammarAccess.getValuedExpressionRule()); }
	 ruleValuedExpression
{ after(grammarAccess.getValuedExpressionRule()); } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedExpressionAccess().getPlusOperationParserRuleCall()); }
	rulePlusOperation
{ after(grammarAccess.getValuedExpressionAccess().getPlusOperationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesedValuedExpression
entryRuleParanthesedValuedExpression 
:
{ before(grammarAccess.getParanthesedValuedExpressionRule()); }
	 ruleParanthesedValuedExpression
{ after(grammarAccess.getParanthesedValuedExpressionRule()); } 
	 EOF 
;

// Rule ParanthesedValuedExpression
ruleParanthesedValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getAlternatives()); }
(rule__ParanthesedValuedExpression__Alternatives)
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusOperation
entryRulePlusOperation 
:
{ before(grammarAccess.getPlusOperationRule()); }
	 rulePlusOperation
{ after(grammarAccess.getPlusOperationRule()); } 
	 EOF 
;

// Rule PlusOperation
rulePlusOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusOperationAccess().getGroup()); }
(rule__PlusOperation__Group__0)
{ after(grammarAccess.getPlusOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultOrDivOperation
entryRuleMultOrDivOperation 
:
{ before(grammarAccess.getMultOrDivOperationRule()); }
	 ruleMultOrDivOperation
{ after(grammarAccess.getMultOrDivOperationRule()); } 
	 EOF 
;

// Rule MultOrDivOperation
ruleMultOrDivOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getAlternatives()); }
(rule__MultOrDivOperation__Alternatives)
{ after(grammarAccess.getMultOrDivOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultOperation
entryRuleMultOperation 
:
{ before(grammarAccess.getMultOperationRule()); }
	 ruleMultOperation
{ after(grammarAccess.getMultOperationRule()); } 
	 EOF 
;

// Rule MultOperation
ruleMultOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultOperationAccess().getGroup()); }
(rule__MultOperation__Group__0)
{ after(grammarAccess.getMultOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivOperation
entryRuleDivOperation 
:
{ before(grammarAccess.getDivOperationRule()); }
	 ruleDivOperation
{ after(grammarAccess.getDivOperationRule()); } 
	 EOF 
;

// Rule DivOperation
ruleDivOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivOperationAccess().getGroup()); }
(rule__DivOperation__Group__0)
{ after(grammarAccess.getDivOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreArithmOperation
entryRulePreArithmOperation 
:
{ before(grammarAccess.getPreArithmOperationRule()); }
	 rulePreArithmOperation
{ after(grammarAccess.getPreArithmOperationRule()); } 
	 EOF 
;

// Rule PreArithmOperation
rulePreArithmOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreArithmOperationAccess().getGroup()); }
(rule__PreArithmOperation__Group__0)
{ after(grammarAccess.getPreArithmOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreOrNormalValuedExpression
entryRulePreOrNormalValuedExpression 
:
{ before(grammarAccess.getPreOrNormalValuedExpressionRule()); }
	 rulePreOrNormalValuedExpression
{ after(grammarAccess.getPreOrNormalValuedExpressionRule()); } 
	 EOF 
;

// Rule PreOrNormalValuedExpression
rulePreOrNormalValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreOrNormalValuedExpressionAccess().getAlternatives()); }
(rule__PreOrNormalValuedExpression__Alternatives)
{ after(grammarAccess.getPreOrNormalValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
(rule__CompareOperation__Group__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup()); }
(rule__UnaryOperation__Group__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryParanthesedOperation
entryRuleUnaryParanthesedOperation 
:
{ before(grammarAccess.getUnaryParanthesedOperationRule()); }
	 ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryParanthesedOperationRule()); } 
	 EOF 
;

// Rule UnaryParanthesedOperation
ruleUnaryParanthesedOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getGroup()); }
(rule__UnaryParanthesedOperation__Group__0)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOrNormalExpression
entryRuleUnaryOrNormalExpression 
:
{ before(grammarAccess.getUnaryOrNormalExpressionRule()); }
	 ruleUnaryOrNormalExpression
{ after(grammarAccess.getUnaryOrNormalExpressionRule()); } 
	 EOF 
;

// Rule UnaryOrNormalExpression
ruleUnaryOrNormalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getAlternatives()); }
(rule__UnaryOrNormalExpression__Alternatives)
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperation
entryRuleAndOperation 
:
{ before(grammarAccess.getAndOperationRule()); }
	 ruleAndOperation
{ after(grammarAccess.getAndOperationRule()); } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndOperationAccess().getGroup()); }
(rule__AndOperation__Group__0)
{ after(grammarAccess.getAndOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperation
entryRuleOrOperation 
:
{ before(grammarAccess.getOrOperationRule()); }
	 ruleOrOperation
{ after(grammarAccess.getOrOperationRule()); } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrOperationAccess().getGroup()); }
(rule__OrOperation__Group__0)
{ after(grammarAccess.getOrOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesedBooleanExpression
entryRuleParanthesedBooleanExpression 
:
{ before(grammarAccess.getParanthesedBooleanExpressionRule()); }
	 ruleParanthesedBooleanExpression
{ after(grammarAccess.getParanthesedBooleanExpressionRule()); } 
	 EOF 
;

// Rule ParanthesedBooleanExpression
ruleParanthesedBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
(rule__ParanthesedBooleanExpression__Alternatives)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
	ruleOrOperation
{ after(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup()); }
(rule__TextExpression__Group__0)
{ after(grammarAccess.getTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule ValOperator
ruleValOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryParanthesedOperator
ruleUnaryParanthesedOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorOr
ruleOperatorOr
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorAnd
ruleOperatorAnd
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Rule PlusOperator
rulePlusOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
(rule__PlusOperator__Alternatives)
{ after(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getAlternatives()); }
(rule__MultOperator__Alternatives)
{ after(grammarAccess.getMultOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueType
ruleValueType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getAlternatives()); }
(rule__ValueType__Alternatives)
{ after(grammarAccess.getValueTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CombineOperator
ruleCombineOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
(rule__CombineOperator__Alternatives)
{ after(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Signal__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_5_0()); }
(rule__Signal__Group_5_0__0)
{ after(grammarAccess.getSignalAccess().getGroup_5_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_5_1()); }
(rule__Signal__Group_5_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Alternatives_5_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0()); }
(rule__Signal__CombineOperatorAssignment_5_1_4_0)
{ after(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1()); }
(rule__Signal__HostCombineOperatorAssignment_5_1_4_1)
{ after(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getHaltParserRuleCall_0()); }
	ruleHalt
{ after(grammarAccess.getInstructionAccess().getHaltParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAbortParserRuleCall_1()); }
	ruleAbort
{ after(grammarAccess.getInstructionAccess().getAbortParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getJoinParserRuleCall_2()); }
	ruleJoin
{ after(grammarAccess.getInstructionAccess().getJoinParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPauseParserRuleCall_3()); }
	rulePause
{ after(grammarAccess.getInstructionAccess().getPauseParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getTermParserRuleCall_4()); }
	ruleTerm
{ after(grammarAccess.getInstructionAccess().getTermParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getIfParserRuleCall_5()); }
	ruleIf
{ after(grammarAccess.getInstructionAccess().getIfParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getGotoParserRuleCall_6()); }
	ruleGoto
{ after(grammarAccess.getInstructionAccess().getGotoParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForkParserRuleCall_7()); }
	ruleFork
{ after(grammarAccess.getInstructionAccess().getForkParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForkeParserRuleCall_8()); }
	ruleForke
{ after(grammarAccess.getInstructionAccess().getForkeParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getEmitParserRuleCall_9()); }
	ruleEmit
{ after(grammarAccess.getInstructionAccess().getEmitParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_10()); }
	ruleAwait
{ after(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPrioParserRuleCall_11()); }
	rulePrio
{ after(grammarAccess.getInstructionAccess().getPrioParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGroup_0()); }
(rule__Goto__Group_0__0)
{ after(grammarAccess.getGotoAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getGotoAccess().getGroup_1()); }
(rule__Goto__Group_1__0)
{ after(grammarAccess.getGotoAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getValOperationParserRuleCall_2()); }
	ruleValOperation
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getValOperationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getVariableReferenceParserRuleCall_3()); }
	ruleVariableReference
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getVariableReferenceParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getTextExpressionParserRuleCall_4()); }
	ruleTextExpression
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getTextExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_5()); }
(rule__ParanthesedValuedExpression__Group_5__0)
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_6()); }
(rule__ParanthesedValuedExpression__Group_6__0)
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOrDivOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getMultOperationParserRuleCall_0()); }
	ruleMultOperation
{ after(grammarAccess.getMultOrDivOperationAccess().getMultOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMultOrDivOperationAccess().getGroup_1()); }
(rule__MultOrDivOperation__Group_1__0)
{ after(grammarAccess.getMultOrDivOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreOrNormalValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOrNormalValuedExpressionAccess().getPreArithmOperationParserRuleCall_0()); }
	rulePreArithmOperation
{ after(grammarAccess.getPreOrNormalValuedExpressionAccess().getPreArithmOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPreOrNormalValuedExpressionAccess().getParanthesedValuedExpressionParserRuleCall_1()); }
	ruleParanthesedValuedExpression
{ after(grammarAccess.getPreOrNormalValuedExpressionAccess().getParanthesedValuedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__SubExpressionsAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0_0()); }
	ruleParanthesedBooleanExpression
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsUnaryParanthesedOperationParserRuleCall_1_0_1()); }
	ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsUnaryParanthesedOperationParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrNormalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryParanthesedOperationParserRuleCall_1()); }
	ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryParanthesedOperationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_2()); }
	ruleParanthesedBooleanExpression
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getCompareOperationParserRuleCall_1()); }
	ruleCompareOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getCompareOperationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_2()); }
	ruleSignalReference
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getValOperationParserRuleCall_3()); }
	ruleValOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getValOperationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getTextExpressionParserRuleCall_4()); }
	ruleTextExpression
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getTextExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_5()); }
(rule__ParanthesedBooleanExpression__Group_5__0)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1()); }
(	'mod' 
)
{ after(grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
(	'PURE' 
)
{ after(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
(	'BOOL' 
)
{ after(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
(	'UNSIGNED' 
)
{ after(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
(	'INT' 
)
{ after(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
(	'FLOAT' 
)
{ after(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5()); }
(	'HOST' 
)
{ after(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CombineOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
(	'NONE' 
)
{ after(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
(	'+' 
)
{ after(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
(	'*' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
(	'max' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
(	'min' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
(	'or' 
)
{ after(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
(	'and' 
)
{ after(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
(	'host' 
)
{ after(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0()); }

	'Synchronous Program' 

{ after(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
(rule__Program__NameAssignment_1)
{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPriorityAssignment_3()); }
(rule__Program__PriorityAssignment_3)
{ after(grammarAccess.getProgramAccess().getPriorityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSignalsAssignment_5()); }
(rule__Program__SignalsAssignment_5)*
{ after(grammarAccess.getProgramAccess().getSignalsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
(rule__Program__StatesAssignment_6)
{ after(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
)
(
{ before(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
(rule__Program__StatesAssignment_6)*
{ after(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_0()); }
(rule__State__NameAssignment_0)
{ after(grammarAccess.getStateAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_2()); }
(rule__State__Group_2__0)?
{ after(grammarAccess.getStateAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_3()); }
(rule__State__Group_3__0)*
{ after(grammarAccess.getStateAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__0__Impl
	rule__State__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSIGNALSKeyword_2_0()); }

	'SIGNALS' 

{ after(grammarAccess.getStateAccess().getSIGNALSKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__1__Impl
	rule__State__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSignalsAssignment_2_1()); }
(rule__State__SignalsAssignment_2_1)*
{ after(grammarAccess.getStateAccess().getSignalsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSemicolonKeyword_2_2()); }

	';' 

{ after(grammarAccess.getStateAccess().getSemicolonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__State__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_3__0__Impl
	rule__State__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInstructionsAssignment_3_0()); }
(rule__State__InstructionsAssignment_3_0)
{ after(grammarAccess.getStateAccess().getInstructionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSemicolonKeyword_3_1()); }

	';' 

{ after(grammarAccess.getStateAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__0__Impl
	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsInputAssignment_0()); }
(rule__Signal__IsInputAssignment_0)?
{ after(grammarAccess.getSignalAccess().getIsInputAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__1__Impl
	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsOutputAssignment_1()); }
(rule__Signal__IsOutputAssignment_1)?
{ after(grammarAccess.getSignalAccess().getIsOutputAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__2__Impl
	rule__Signal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getSignalKeyword_2()); }

	'signal' 

{ after(grammarAccess.getSignalAccess().getSignalKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__3__Impl
	rule__Signal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_3()); }
(rule__Signal__NameAssignment_3)
{ after(grammarAccess.getSignalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__4__Impl
	rule__Signal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_4()); }
(rule__Signal__Group_4__0)?
{ after(grammarAccess.getSignalAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__5__Impl
	rule__Signal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getAlternatives_5()); }
(rule__Signal__Alternatives_5)?
{ after(grammarAccess.getSignalAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getSignalAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Signal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__0__Impl
	rule__Signal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1()); }
(rule__Signal__InitialValueAssignment_4_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_0__0__Impl
	rule__Signal__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_5_0_0()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1()); }
(rule__Signal__TypeAssignment_5_0_1)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__0__Impl
	rule__Signal__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_5_1_0()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__1__Impl
	rule__Signal__Group_5_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_5_1_1()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__2__Impl
	rule__Signal__Group_5_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2()); }
(rule__Signal__TypeAssignment_5_1_2)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__3__Impl
	rule__Signal__Group_5_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_5_1_3()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_5_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getAlternatives_5_1_4()); }
(rule__Signal__Alternatives_5_1_4)
{ after(grammarAccess.getSignalAccess().getAlternatives_5_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Pause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__0__Impl
	rule__Pause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getPauseAction_0()); }
(

)
{ after(grammarAccess.getPauseAccess().getPauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__1__Impl
	rule__Pause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getPAUSEKeyword_1()); }

	'PAUSE' 

{ after(grammarAccess.getPauseAccess().getPAUSEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__2__Impl
	rule__Pause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__3__Impl
	rule__Pause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getContinuationAssignment_3()); }
(rule__Pause__ContinuationAssignment_3)?
{ after(grammarAccess.getPauseAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPauseAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTermAction_0()); }
(

)
{ after(grammarAccess.getTermAccess().getTermAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
	rule__Term__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTERMKeyword_1()); }

	'TERM' 

{ after(grammarAccess.getTermAccess().getTERMKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__2__Impl
	rule__Term__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__3__Impl
	rule__Term__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getContinuationAssignment_3()); }
(rule__Term__ContinuationAssignment_3)?
{ after(grammarAccess.getTermAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Halt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__0__Impl
	rule__Halt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getHaltAction_0()); }
(

)
{ after(grammarAccess.getHaltAccess().getHaltAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__1__Impl
	rule__Halt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getHaltKeyword_1()); }

	'Halt' 

{ after(grammarAccess.getHaltAccess().getHaltKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__2__Impl
	rule__Halt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getHaltAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__3__Impl
	rule__Halt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getContinuationAssignment_3()); }
(rule__Halt__ContinuationAssignment_3)?
{ after(grammarAccess.getHaltAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getHaltAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Join__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJoinAction_0()); }
(

)
{ after(grammarAccess.getJoinAccess().getJoinAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJOINKeyword_1()); }

	'JOIN' 

{ after(grammarAccess.getJoinAccess().getJOINKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__3__Impl
	rule__Join__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getContinuationAssignment_3()); }
(rule__Join__ContinuationAssignment_3)?
{ after(grammarAccess.getJoinAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Abort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__0__Impl
	rule__Abort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getAbortAction_0()); }
(

)
{ after(grammarAccess.getAbortAccess().getAbortAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__1__Impl
	rule__Abort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getABORTKeyword_1()); }

	'ABORT' 

{ after(grammarAccess.getAbortAccess().getABORTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__2__Impl
	rule__Abort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__3__Impl
	rule__Abort__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getContinuationAssignment_3()); }
(rule__Abort__ContinuationAssignment_3)?
{ after(grammarAccess.getAbortAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAbortAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIFKeyword_0()); }

	'IF' 

{ after(grammarAccess.getIfAccess().getIFKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExpressionAssignment_2()); }
(rule__If__ExpressionAssignment_2)
{ after(grammarAccess.getIfAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_3()); }
(rule__If__Group_3__0)?
{ after(grammarAccess.getIfAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_6()); }
(rule__If__Group_6__0)*
{ after(grammarAccess.getIfAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__If__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_3__0__Impl
	rule__If__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getIfAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getContinuationAssignment_3_1()); }
(rule__If__ContinuationAssignment_3_1)
{ after(grammarAccess.getIfAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_6__0__Impl
	rule__If__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getInstructionsAssignment_6_0()); }
(rule__If__InstructionsAssignment_6_0)
{ after(grammarAccess.getIfAccess().getInstructionsAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getSemicolonKeyword_6_1()); }

	';' 

{ after(grammarAccess.getIfAccess().getSemicolonKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Goto__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_0__0__Impl
	rule__Goto__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGOTOKeyword_0_0()); }

	'GOTO' 

{ after(grammarAccess.getGotoAccess().getGOTOKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_0__1__Impl
	rule__Goto__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_0_1()); }

	'(' 

{ after(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getStateAssignment_0_2()); }
(rule__Goto__StateAssignment_0_2)
{ after(grammarAccess.getGotoAccess().getStateAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Goto__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_1__0__Impl
	rule__Goto__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGroup_1_0()); }
(rule__Goto__Group_1_0__0)?
{ after(grammarAccess.getGotoAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getRightParenthesisKeyword_1_1()); }

	')' 

{ after(grammarAccess.getGotoAccess().getRightParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Goto__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_1_0__0__Impl
	rule__Goto__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getCommaKeyword_1_0_0()); }

	',' 

{ after(grammarAccess.getGotoAccess().getCommaKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getContinuationAssignment_1_0_1()); }
(rule__Goto__ContinuationAssignment_1_0_1)
{ after(grammarAccess.getGotoAccess().getContinuationAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fork__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__0__Impl
	rule__Fork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getFORKKeyword_0()); }

	'FORK' 

{ after(grammarAccess.getForkAccess().getFORKKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__1__Impl
	rule__Fork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForkAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__2__Impl
	rule__Fork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getStateAssignment_2()); }
(rule__Fork__StateAssignment_2)
{ after(grammarAccess.getForkAccess().getStateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__3__Impl
	rule__Fork__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getForkAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__4__Impl
	rule__Fork__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getPriorityAssignment_4()); }
(rule__Fork__PriorityAssignment_4)
{ after(grammarAccess.getForkAccess().getPriorityAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__5__Impl
	rule__Fork__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getGroup_5()); }
(rule__Fork__Group_5__0)?
{ after(grammarAccess.getForkAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForkAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Fork__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group_5__0__Impl
	rule__Fork__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getForkAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getContinuationAssignment_5_1()); }
(rule__Fork__ContinuationAssignment_5_1)
{ after(grammarAccess.getForkAccess().getContinuationAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Forke__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__0__Impl
	rule__Forke__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getFORKEKeyword_0()); }

	'FORKE' 

{ after(grammarAccess.getForkeAccess().getFORKEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__1__Impl
	rule__Forke__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__2__Impl
	rule__Forke__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getStateAssignment_2()); }
(rule__Forke__StateAssignment_2)
{ after(grammarAccess.getForkeAccess().getStateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__3__Impl
	rule__Forke__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getGroup_3()); }
(rule__Forke__Group_3__0)?
{ after(grammarAccess.getForkeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getForkeAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Forke__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group_3__0__Impl
	rule__Forke__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getForkeAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getContinuationAssignment_3_1()); }
(rule__Forke__ContinuationAssignment_3_1)
{ after(grammarAccess.getForkeAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__0__Impl
	rule__Emit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getEMITKeyword_0()); }

	'EMIT' 

{ after(grammarAccess.getEmitAccess().getEMITKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__1__Impl
	rule__Emit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__2__Impl
	rule__Emit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getSignalAssignment_2()); }
(rule__Emit__SignalAssignment_2)
{ after(grammarAccess.getEmitAccess().getSignalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__3__Impl
	rule__Emit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getGroup_3()); }
(rule__Emit__Group_3__0)?
{ after(grammarAccess.getEmitAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getEmitAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Emit__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group_3__0__Impl
	rule__Emit__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getEmitAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getContinuationAssignment_3_1()); }
(rule__Emit__ContinuationAssignment_3_1)
{ after(grammarAccess.getEmitAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Await__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__0__Impl
	rule__Await__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getAWAITKeyword_0()); }

	'AWAIT' 

{ after(grammarAccess.getAwaitAccess().getAWAITKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__1__Impl
	rule__Await__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__2__Impl
	rule__Await__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getSignalAssignment_2()); }
(rule__Await__SignalAssignment_2)
{ after(grammarAccess.getAwaitAccess().getSignalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__3__Impl
	rule__Await__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getGroup_3()); }
(rule__Await__Group_3__0)?
{ after(grammarAccess.getAwaitAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Await__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group_3__0__Impl
	rule__Await__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getAwaitAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1()); }
(rule__Await__ContinuationAssignment_3_1)
{ after(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Prio__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__0__Impl
	rule__Prio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }

	'PRIO' 

{ after(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__1__Impl
	rule__Prio__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__2__Impl
	rule__Prio__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPriorityAssignment_2()); }
(rule__Prio__PriorityAssignment_2)
{ after(grammarAccess.getPrioAccess().getPriorityAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__3__Impl
	rule__Prio__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getGroup_3()); }
(rule__Prio__Group_3__0)?
{ after(grammarAccess.getPrioAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPrioAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Prio__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group_3__0__Impl
	rule__Prio__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getPrioAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getContinuationAssignment_3_1()); }
(rule__Prio__ContinuationAssignment_3_1)
{ after(grammarAccess.getPrioAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignalReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group__0__Impl
	rule__SignalReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalAssignment_0()); }
(rule__SignalReference__SignalAssignment_0)
{ after(grammarAccess.getSignalReferenceAccess().getSignalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup_1()); }
(rule__SignalReference__Group_1__0)?
{ after(grammarAccess.getSignalReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignalReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group_1__0__Impl
	rule__SignalReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSignalReferenceAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group_1__1__Impl
	rule__SignalReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup_1_1()); }
(rule__SignalReference__Group_1_1__0)*
{ after(grammarAccess.getSignalReferenceAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSignalReferenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignalReference__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group_1_1__0__Impl
	rule__SignalReference__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
(rule__SignalReference__SubExpressionsAssignment_1_1_0)
{ after(grammarAccess.getSignalReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalReference__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getCommaKeyword_1_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getSignalReferenceAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__0__Impl
	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
(rule__VariableReference__VariableAssignment_0)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
(rule__VariableReference__Group_1__0)?
{ after(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_1__0__Impl
	rule__VariableReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_1__1__Impl
	rule__VariableReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_1_1()); }
(rule__VariableReference__Group_1_1__0)*
{ after(grammarAccess.getVariableReferenceAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_1_1__0__Impl
	rule__VariableReference__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
(rule__VariableReference__SubExpressionsAssignment_1_1_0)
{ after(grammarAccess.getVariableReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getCommaKeyword_1_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getVariableReferenceAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValOperation__Group__0__Impl
	rule__ValOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
(rule__ValOperation__OperatorAssignment_0)
{ after(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
(rule__ValOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParanthesedValuedExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_5__0__Impl
	rule__ParanthesedValuedExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValuedExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_5__1__Impl
	rule__ParanthesedValuedExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getPlusOperationParserRuleCall_5_1()); }
	rulePlusOperation
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getPlusOperationParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValuedExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParanthesedValuedExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_6__0__Impl
	rule__ParanthesedValuedExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_6_0()); }

	'(' 

{ after(grammarAccess.getParanthesedValuedExpressionAccess().getLeftParenthesisKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValuedExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_6__1__Impl
	rule__ParanthesedValuedExpression__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getDivOperationParserRuleCall_6_1()); }
	ruleDivOperation
{ after(grammarAccess.getParanthesedValuedExpressionAccess().getDivOperationParserRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValuedExpression__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedValuedExpression__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedValuedExpression__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_6_2()); }

	')' 

{ after(grammarAccess.getParanthesedValuedExpressionAccess().getRightParenthesisKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PlusOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOperation__Group__0__Impl
	rule__PlusOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getMultOrDivOperationParserRuleCall_0()); }
	ruleMultOrDivOperation
{ after(grammarAccess.getPlusOperationAccess().getMultOrDivOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getGroup_1()); }
(rule__PlusOperation__Group_1__0)*
{ after(grammarAccess.getPlusOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOperation__Group_1__0__Impl
	rule__PlusOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOperation__Group_1__1__Impl
	rule__PlusOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorAssignment_1_1()); }
(rule__PlusOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getPlusOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__PlusOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getPlusOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultOrDivOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOrDivOperation__Group_1__0__Impl
	rule__MultOrDivOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOrDivOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getMultOrDivOperationAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultOrDivOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOrDivOperation__Group_1__1__Impl
	rule__MultOrDivOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOrDivOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getDivOperationParserRuleCall_1_1()); }
	ruleDivOperation
{ after(grammarAccess.getMultOrDivOperationAccess().getDivOperationParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultOrDivOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOrDivOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOrDivOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getMultOrDivOperationAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOperation__Group__0__Impl
	rule__MultOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0()); }
	rulePreOrNormalValuedExpression
{ after(grammarAccess.getMultOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getGroup_1()); }
(rule__MultOperation__Group_1__0)*
{ after(grammarAccess.getMultOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOperation__Group_1__0__Impl
	rule__MultOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOperation__Group_1__1__Impl
	rule__MultOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorAssignment_1_1()); }
(rule__MultOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getMultOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__MultOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getMultOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivOperation__Group__0__Impl
	rule__DivOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0()); }
	rulePreOrNormalValuedExpression
{ after(grammarAccess.getDivOperationAccess().getPreOrNormalValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getGroup_1()); }
(rule__DivOperation__Group_1__0)*
{ after(grammarAccess.getDivOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivOperation__Group_1__0__Impl
	rule__DivOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivOperation__Group_1__1__Impl
	rule__DivOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorAssignment_1_1()); }
(rule__DivOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getDivOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__DivOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getDivOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PreArithmOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreArithmOperation__Group__0__Impl
	rule__PreArithmOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getOperatorAssignment_0()); }
(rule__PreArithmOperation__OperatorAssignment_0)
{ after(grammarAccess.getPreArithmOperationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreArithmOperation__Group__1__Impl
	rule__PreArithmOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPreArithmOperationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreArithmOperation__Group__2__Impl
	rule__PreArithmOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getSubExpressionsAssignment_2()); }
(rule__PreArithmOperation__SubExpressionsAssignment_2)
{ after(grammarAccess.getPreArithmOperationAccess().getSubExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreArithmOperation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPreArithmOperationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CompareOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__0__Impl
	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getCompareOperationAccess().getValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_1()); }
(rule__CompareOperation__Group_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__0__Impl
	rule__CompareOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__1__Impl
	rule__CompareOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
(rule__CompareOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group__0__Impl
	rule__UnaryOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0()); }
(rule__UnaryOperation__OperatorAssignment_0)
{ after(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsAssignment_1()); }
(rule__UnaryOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryParanthesedOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryParanthesedOperation__Group__0__Impl
	rule__UnaryParanthesedOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorAssignment_0()); }
(rule__UnaryParanthesedOperation__OperatorAssignment_0)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryParanthesedOperation__Group__1__Impl
	rule__UnaryParanthesedOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getUnaryParanthesedOperationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryParanthesedOperation__Group__2__Impl
	rule__UnaryParanthesedOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsAssignment_2()); }
(rule__UnaryParanthesedOperation__SubExpressionsAssignment_2)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryParanthesedOperation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getUnaryParanthesedOperationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AndOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperation__Group__0__Impl
	rule__AndOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getUnaryOrNormalExpressionParserRuleCall_0()); }
	ruleUnaryOrNormalExpression
{ after(grammarAccess.getAndOperationAccess().getUnaryOrNormalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getGroup_1()); }
(rule__AndOperation__Group_1__0)*
{ after(grammarAccess.getAndOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperation__Group_1__0__Impl
	rule__AndOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperation__Group_1__1__Impl
	rule__AndOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
(rule__AndOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperation__Group__0__Impl
	rule__OrOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
	ruleAndOperation
{ after(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getGroup_1()); }
(rule__OrOperation__Group_1__0)*
{ after(grammarAccess.getOrOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperation__Group_1__0__Impl
	rule__OrOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperation__Group_1__1__Impl
	rule__OrOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
(rule__OrOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParanthesedBooleanExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedBooleanExpression__Group_5__0__Impl
	rule__ParanthesedBooleanExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedBooleanExpression__Group_5__1__Impl
	rule__ParanthesedBooleanExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_5_1()); }
	ruleOrOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesedBooleanExpression__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__0__Impl
	rule__TextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
(rule__TextExpression__CodeAssignment_0)
{ after(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup_1()); }
(rule__TextExpression__Group_1__0)?
{ after(grammarAccess.getTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__0__Impl
	rule__TextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__1__Impl
	rule__TextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
(rule__TextExpression__TypeAssignment_1_1)
{ after(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Program__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__PriorityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPriorityINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getProgramAccess().getPriorityINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__SignalsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_0()); }
	ruleSignal{ after(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_6_0()); }
	ruleState{ after(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__SignalsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_2_1_0()); }
	ruleSignal{ after(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__InstructionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
	ruleInstruction{ after(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__IsInputAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
(
{ before(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }

	'input' 

{ after(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
)

{ after(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__IsOutputAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
(
{ before(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }

	'output' 

{ after(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
)

{ after(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getSignalAccess().getNameSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_0_1_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_5_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_1_2_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__CombineOperatorAssignment_5_1_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0()); }
	ruleCombineOperator{ after(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostCombineOperatorAssignment_5_1_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_5_1_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_5_1_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getPauseAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPauseAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPauseAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getTermAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getTermAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getTermAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getHaltAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getHaltAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getHaltAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getJoinAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getJoinAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getJoinAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getAbortAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getAbortAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getAbortAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getIfAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getIfAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getIfAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__InstructionsAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getInstructionsInstructionParserRuleCall_6_0_0()); }
	ruleInstruction{ after(grammarAccess.getIfAccess().getInstructionsInstructionParserRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__StateAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getStateStateCrossReference_0_2_0()); }
(
{ before(grammarAccess.getGotoAccess().getStateStateIDTerminalRuleCall_0_2_0_1()); }
	RULE_ID{ after(grammarAccess.getGotoAccess().getStateStateIDTerminalRuleCall_0_2_0_1()); }
)
{ after(grammarAccess.getGotoAccess().getStateStateCrossReference_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__ContinuationAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getContinuationStateCrossReference_1_0_1_0()); }
(
{ before(grammarAccess.getGotoAccess().getContinuationStateIDTerminalRuleCall_1_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGotoAccess().getContinuationStateIDTerminalRuleCall_1_0_1_0_1()); }
)
{ after(grammarAccess.getGotoAccess().getContinuationStateCrossReference_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getForkAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getForkAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getForkAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__PriorityAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getPriorityINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getForkAccess().getPriorityINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__ContinuationAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getContinuationStateCrossReference_5_1_0()); }
(
{ before(grammarAccess.getForkAccess().getContinuationStateIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getForkAccess().getContinuationStateIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getForkAccess().getContinuationStateCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getForkeAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getForkeAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getForkeAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getForkeAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getForkeAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getForkeAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__SignalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getSignalSignalCrossReference_2_0()); }
(
{ before(grammarAccess.getEmitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getEmitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getEmitAccess().getSignalSignalCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getEmitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEmitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getEmitAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Await__SignalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getSignalSignalCrossReference_2_0()); }
(
{ before(grammarAccess.getAwaitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getAwaitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getAwaitAccess().getSignalSignalCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Await__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getAwaitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAwaitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getAwaitAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__PriorityAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPriorityINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getPrioAccess().getPriorityINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getPrioAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPrioAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getPrioAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SignalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0_0()); }
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SubExpressionsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
	ruleExpression{ after(grammarAccess.getSignalReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__SubExpressionsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
	ruleExpression{ after(grammarAccess.getVariableReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
	ruleValOperator{ after(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
	ruleSignalReference{ after(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorPlusOperatorEnumRuleCall_1_1_0()); }
	rulePlusOperator{ after(grammarAccess.getPlusOperationAccess().getOperatorPlusOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getSubExpressionsMultOrDivOperationParserRuleCall_1_2_0()); }
	ruleMultOrDivOperation{ after(grammarAccess.getPlusOperationAccess().getSubExpressionsMultOrDivOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
	ruleMultOperator{ after(grammarAccess.getMultOperationAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0()); }
	rulePreOrNormalValuedExpression{ after(grammarAccess.getMultOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
	ruleDivOperator{ after(grammarAccess.getDivOperationAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0()); }
	rulePreOrNormalValuedExpression{ after(grammarAccess.getDivOperationAccess().getSubExpressionsPreOrNormalValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
	ruleUnaryParanthesedOperator{ after(grammarAccess.getPreArithmOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getSubExpressionsValOperationParserRuleCall_2_0()); }
	ruleValOperation{ after(grammarAccess.getPreArithmOperationAccess().getSubExpressionsValOperationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsValuedExpressionParserRuleCall_1_2_0()); }
	ruleValuedExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsAlternatives_1_0()); }
(rule__UnaryOperation__SubExpressionsAlternatives_1_0)
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
	ruleUnaryParanthesedOperator{ after(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
	ruleOperatorAnd{ after(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsUnaryOrNormalExpressionParserRuleCall_1_2_0()); }
	ruleUnaryOrNormalExpression{ after(grammarAccess.getAndOperationAccess().getSubExpressionsUnaryOrNormalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
	ruleOperatorOr{ after(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
	ruleAndOperation{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


