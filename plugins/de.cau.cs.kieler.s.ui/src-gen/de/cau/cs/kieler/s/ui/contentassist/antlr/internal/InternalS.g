/*
* generated by Xtext
*/
grammar InternalS;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.s.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.s.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.s.services.SGrammarAccess;

}

@parser::members {
 
 	private SGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignal
entryRuleSignal 
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalAccess().getGroup()); }
(rule__Signal__Group__0)
{ after(grammarAccess.getSignalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePause
entryRulePause 
:
{ before(grammarAccess.getPauseRule()); }
	 rulePause
{ after(grammarAccess.getPauseRule()); } 
	 EOF 
;

// Rule Pause
rulePause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPauseAccess().getGroup()); }
(rule__Pause__Group__0)
{ after(grammarAccess.getPauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHalt
entryRuleHalt 
:
{ before(grammarAccess.getHaltRule()); }
	 ruleHalt
{ after(grammarAccess.getHaltRule()); } 
	 EOF 
;

// Rule Halt
ruleHalt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHaltAccess().getGroup()); }
(rule__Halt__Group__0)
{ after(grammarAccess.getHaltAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoin
entryRuleJoin 
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJoinAccess().getGroup()); }
(rule__Join__Group__0)
{ after(grammarAccess.getJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbort
entryRuleAbort 
:
{ before(grammarAccess.getAbortRule()); }
	 ruleAbort
{ after(grammarAccess.getAbortRule()); } 
	 EOF 
;

// Rule Abort
ruleAbort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbortAccess().getGroup()); }
(rule__Abort__Group__0)
{ after(grammarAccess.getAbortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoto
entryRuleGoto 
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGotoAccess().getGroup()); }
(rule__Goto__Group__0)
{ after(grammarAccess.getGotoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFork
entryRuleFork 
:
{ before(grammarAccess.getForkRule()); }
	 ruleFork
{ after(grammarAccess.getForkRule()); } 
	 EOF 
;

// Rule Fork
ruleFork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkAccess().getGroup()); }
(rule__Fork__Group__0)
{ after(grammarAccess.getForkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForke
entryRuleForke 
:
{ before(grammarAccess.getForkeRule()); }
	 ruleForke
{ after(grammarAccess.getForkeRule()); } 
	 EOF 
;

// Rule Forke
ruleForke
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkeAccess().getGroup()); }
(rule__Forke__Group__0)
{ after(grammarAccess.getForkeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmit
entryRuleEmit 
:
{ before(grammarAccess.getEmitRule()); }
	 ruleEmit
{ after(grammarAccess.getEmitRule()); } 
	 EOF 
;

// Rule Emit
ruleEmit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmitAccess().getGroup()); }
(rule__Emit__Group__0)
{ after(grammarAccess.getEmitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAwait
entryRuleAwait 
:
{ before(grammarAccess.getAwaitRule()); }
	 ruleAwait
{ after(grammarAccess.getAwaitRule()); } 
	 EOF 
;

// Rule Await
ruleAwait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAwaitAccess().getGroup()); }
(rule__Await__Group__0)
{ after(grammarAccess.getAwaitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrio
entryRulePrio 
:
{ before(grammarAccess.getPrioRule()); }
	 rulePrio
{ after(grammarAccess.getPrioRule()); } 
	 EOF 
;

// Rule Prio
rulePrio
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrioAccess().getGroup()); }
(rule__Prio__Group__0)
{ after(grammarAccess.getPrioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getAlternatives()); }
(rule__CompareOperation__Alternatives)
{ after(grammarAccess.getCompareOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression 
:
{ before(grammarAccess.getNotOrValuedExpressionRule()); }
	 ruleNotOrValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionRule()); } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
(rule__NotOrValuedExpression__Alternatives)
{ after(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
(rule__NotExpression__Alternatives)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedExpression
entryRuleValuedExpression 
:
{ before(grammarAccess.getValuedExpressionRule()); }
	 ruleValuedExpression
{ after(grammarAccess.getValuedExpressionRule()); } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
	ruleAddExpression
{ after(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubExpression
entryRuleSubExpression 
:
{ before(grammarAccess.getSubExpressionRule()); }
	 ruleSubExpression
{ after(grammarAccess.getSubExpressionRule()); } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup()); }
(rule__SubExpression__Group__0)
{ after(grammarAccess.getSubExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivExpression
entryRuleDivExpression 
:
{ before(grammarAccess.getDivExpressionRule()); }
	 ruleDivExpression
{ after(grammarAccess.getDivExpressionRule()); } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup()); }
(rule__DivExpression__Group__0)
{ after(grammarAccess.getDivExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModExpression
entryRuleModExpression 
:
{ before(grammarAccess.getModExpressionRule()); }
	 ruleModExpression
{ after(grammarAccess.getModExpressionRule()); } 
	 EOF 
;

// Rule ModExpression
ruleModExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModExpressionAccess().getGroup()); }
(rule__ModExpression__Group__0)
{ after(grammarAccess.getModExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegExpression
entryRuleNegExpression 
:
{ before(grammarAccess.getNegExpressionRule()); }
	 ruleNegExpression
{ after(grammarAccess.getNegExpressionRule()); } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegExpressionAccess().getAlternatives()); }
(rule__NegExpression__Alternatives)
{ after(grammarAccess.getNegExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression 
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
(rule__AtomicExpression__Alternatives)
{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression 
:
{ before(grammarAccess.getAtomicValuedExpressionRule()); }
	 ruleAtomicValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionRule()); } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
(rule__AtomicValuedExpression__Alternatives)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression 
:
{ before(grammarAccess.getValuedObjectTestExpressionRule()); }
	 ruleValuedObjectTestExpression
{ after(grammarAccess.getValuedObjectTestExpressionRule()); } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
(rule__ValuedObjectTestExpression__Alternatives)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference 
:
{ before(grammarAccess.getValuedObjectReferenceRule()); }
	 ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectReferenceRule()); } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment()); }
(rule__ValuedObjectReference__ValuedObjectAssignment)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup()); }
(rule__TextExpression__Group__0)
{ after(grammarAccess.getTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration 
:
{ before(grammarAccess.getInterfaceDeclarationRule()); }
	 ruleInterfaceDeclaration
{ after(grammarAccess.getInterfaceDeclarationRule()); } 
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceDeclarationAccess().getAlternatives()); }
(rule__InterfaceDeclaration__Alternatives)
{ after(grammarAccess.getInterfaceDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleISignal
entryRuleISignal 
:
{ before(grammarAccess.getISignalRule()); }
	 ruleISignal
{ after(grammarAccess.getISignalRule()); } 
	 EOF 
;

// Rule ISignal
ruleISignal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getISignalAccess().getGroup()); }
(rule__ISignal__Group__0)
{ after(grammarAccess.getISignalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceSignalDecl
entryRuleInterfaceSignalDecl 
:
{ before(grammarAccess.getInterfaceSignalDeclRule()); }
	 ruleInterfaceSignalDecl
{ after(grammarAccess.getInterfaceSignalDeclRule()); } 
	 EOF 
;

// Rule InterfaceSignalDecl
ruleInterfaceSignalDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getAlternatives()); }
(rule__InterfaceSignalDecl__Alternatives)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChannelDescription
entryRuleChannelDescription 
:
{ before(grammarAccess.getChannelDescriptionRule()); }
	 ruleChannelDescription
{ after(grammarAccess.getChannelDescriptionRule()); } 
	 EOF 
;

// Rule ChannelDescription
ruleChannelDescription
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChannelDescriptionAccess().getAlternatives()); }
(rule__ChannelDescription__Alternatives)
{ after(grammarAccess.getChannelDescriptionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceVariableDecl
entryRuleInterfaceVariableDecl 
:
{ before(grammarAccess.getInterfaceVariableDeclRule()); }
	 ruleInterfaceVariableDecl
{ after(grammarAccess.getInterfaceVariableDeclRule()); } 
	 EOF 
;

// Rule InterfaceVariableDecl
ruleInterfaceVariableDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getGroup()); }
(rule__InterfaceVariableDecl__Group__0)
{ after(grammarAccess.getInterfaceVariableDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDecl
entryRuleVariableDecl 
:
{ before(grammarAccess.getVariableDeclRule()); }
	 ruleVariableDecl
{ after(grammarAccess.getVariableDeclRule()); } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclAccess().getGroup()); }
(rule__VariableDecl__Group__0)
{ after(grammarAccess.getVariableDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIVariable
entryRuleIVariable 
:
{ before(grammarAccess.getIVariableRule()); }
	 ruleIVariable
{ after(grammarAccess.getIVariableRule()); } 
	 EOF 
;

// Rule IVariable
ruleIVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIVariableAccess().getGroup()); }
(rule__IVariable__Group__0)
{ after(grammarAccess.getIVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeIdentifier
entryRuleTypeIdentifier 
:
{ before(grammarAccess.getTypeIdentifierRule()); }
	 ruleTypeIdentifier
{ after(grammarAccess.getTypeIdentifierRule()); } 
	 EOF 
;

// Rule TypeIdentifier
ruleTypeIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeIdentifierAccess().getAlternatives()); }
(rule__TypeIdentifier__Alternatives)
{ after(grammarAccess.getTypeIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives()); }
(rule__Annotation__Alternatives)
{ after(grammarAccess.getAnnotationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation 
:
{ before(grammarAccess.getCommentAnnotationRule()); }
	 ruleCommentAnnotation
{ after(grammarAccess.getCommentAnnotationRule()); } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
(rule__CommentAnnotation__ValueAssignment)
{ after(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation 
:
{ before(grammarAccess.getTagAnnotationRule()); }
	 ruleTagAnnotation
{ after(grammarAccess.getTagAnnotationRule()); } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTagAnnotationAccess().getGroup()); }
(rule__TagAnnotation__Group__0)
{ after(grammarAccess.getTagAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation 
:
{ before(grammarAccess.getKeyStringValueAnnotationRule()); }
	 ruleKeyStringValueAnnotation
{ after(grammarAccess.getKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getGroup()); }
(rule__KeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation 
:
{ before(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 ruleTypedKeyStringValueAnnotation
{ after(grammarAccess.getTypedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup()); }
(rule__TypedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyBooleanValueAnnotation
entryRuleKeyBooleanValueAnnotation 
:
{ before(grammarAccess.getKeyBooleanValueAnnotationRule()); }
	 ruleKeyBooleanValueAnnotation
{ after(grammarAccess.getKeyBooleanValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyBooleanValueAnnotation
ruleKeyBooleanValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup()); }
(rule__KeyBooleanValueAnnotation__Group__0)
{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyIntValueAnnotation
entryRuleKeyIntValueAnnotation 
:
{ before(grammarAccess.getKeyIntValueAnnotationRule()); }
	 ruleKeyIntValueAnnotation
{ after(grammarAccess.getKeyIntValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyIntValueAnnotation
ruleKeyIntValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getGroup()); }
(rule__KeyIntValueAnnotation__Group__0)
{ after(grammarAccess.getKeyIntValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyFloatValueAnnotation
entryRuleKeyFloatValueAnnotation 
:
{ before(grammarAccess.getKeyFloatValueAnnotationRule()); }
	 ruleKeyFloatValueAnnotation
{ after(grammarAccess.getKeyFloatValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyFloatValueAnnotation
ruleKeyFloatValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup()); }
(rule__KeyFloatValueAnnotation__Group__0)
{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeId
entryRuleTypeId 
:
{ before(grammarAccess.getTypeIdRule()); }
	 ruleTypeId
{ after(grammarAccess.getTypeIdRule()); } 
	 EOF 
;

// Rule TypeId
ruleTypeId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeIdAccess().getGroup()); }
(rule__TypeId__Group__0)
{ after(grammarAccess.getTypeIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PreOperator
rulePreOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddOperator
ruleAddOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
(	'+' 
)
{ after(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SubOperator
ruleSubOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
(	'-' 
)
{ after(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ModOperator
ruleModOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
(	'mod' 
)
{ after(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueTestOperator
ruleValueTestOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueType
ruleValueType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getAlternatives()); }
(rule__ValueType__Alternatives)
{ after(grammarAccess.getValueTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CombineOperator
ruleCombineOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
(rule__CombineOperator__Alternatives)
{ after(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Signal__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_5_0()); }
(rule__Signal__Group_5_0__0)
{ after(grammarAccess.getSignalAccess().getGroup_5_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_5_1()); }
(rule__Signal__Group_5_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Alternatives_5_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0()); }
(rule__Signal__CombineOperatorAssignment_5_1_4_0)
{ after(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1()); }
(rule__Signal__HostCombineOperatorAssignment_5_1_4_1)
{ after(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getHaltParserRuleCall_0()); }
	ruleHalt
{ after(grammarAccess.getInstructionAccess().getHaltParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAbortParserRuleCall_1()); }
	ruleAbort
{ after(grammarAccess.getInstructionAccess().getAbortParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getJoinParserRuleCall_2()); }
	ruleJoin
{ after(grammarAccess.getInstructionAccess().getJoinParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPauseParserRuleCall_3()); }
	rulePause
{ after(grammarAccess.getInstructionAccess().getPauseParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getTermParserRuleCall_4()); }
	ruleTerm
{ after(grammarAccess.getInstructionAccess().getTermParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getIfParserRuleCall_5()); }
	ruleIf
{ after(grammarAccess.getInstructionAccess().getIfParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getGotoParserRuleCall_6()); }
	ruleGoto
{ after(grammarAccess.getInstructionAccess().getGotoParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForkParserRuleCall_7()); }
	ruleFork
{ after(grammarAccess.getInstructionAccess().getForkParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForkeParserRuleCall_8()); }
	ruleForke
{ after(grammarAccess.getInstructionAccess().getForkeParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getEmitParserRuleCall_9()); }
	ruleEmit
{ after(grammarAccess.getInstructionAccess().getEmitParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_10()); }
	ruleAwait
{ after(grammarAccess.getInstructionAccess().getAwaitParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPrioParserRuleCall_11()); }
	rulePrio
{ after(grammarAccess.getInstructionAccess().getPrioParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); }
	ruleValuedExpression
{ after(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_0()); }
(rule__CompareOperation__Group_0__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup_0()); }
(rule__NotExpression__Group_0__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
	ruleAtomicExpression
{ after(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getGroup_0()); }
(rule__NegExpression__Group_0__0)
{ after(grammarAccess.getNegExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
	ruleValuedObjectTestExpression
{ after(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
(rule__AtomicExpression__Group_2__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3()); }
	ruleTextExpression
{ after(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_2()); }
(rule__AtomicValuedExpression__Group_2__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_3()); }
	ruleAtomicExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
(rule__ValuedObjectTestExpression__Group_0__0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_1()); }
(rule__ValuedObjectTestExpression__Group_1__0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); }
	ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDeclarationAccess().getInterfaceSignalDeclParserRuleCall_0()); }
	ruleInterfaceSignalDecl
{ after(grammarAccess.getInterfaceDeclarationAccess().getInterfaceSignalDeclParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceDeclarationAccess().getInterfaceVariableDeclParserRuleCall_1()); }
	ruleInterfaceVariableDecl
{ after(grammarAccess.getInterfaceDeclarationAccess().getInterfaceVariableDeclParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_0()); }
(rule__InterfaceSignalDecl__Group_0__0)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_1()); }
(rule__InterfaceSignalDecl__Group_1__0)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_2()); }
(rule__InterfaceSignalDecl__Group_2__0)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_3()); }
(rule__InterfaceSignalDecl__Group_3__0)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getGroup_0()); }
(rule__ChannelDescription__Group_0__0)
{ after(grammarAccess.getChannelDescriptionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getChannelDescriptionAccess().getGroup_1()); }
(rule__ChannelDescription__Group_1__0)
{ after(grammarAccess.getChannelDescriptionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getChannelDescriptionAccess().getGroup_2()); }
(rule__ChannelDescription__Group_2__0)
{ after(grammarAccess.getChannelDescriptionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeAssignment_0()); }
(rule__TypeIdentifier__TypeAssignment_0)
{ after(grammarAccess.getTypeIdentifierAccess().getTypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeIDAssignment_1()); }
(rule__TypeIdentifier__TypeIDAssignment_1)
{ after(grammarAccess.getTypeIdentifierAccess().getTypeIDAssignment_1()); }
)

    |(
{ before(grammarAccess.getTypeIdentifierAccess().getGroup_2()); }
(rule__TypeIdentifier__Group_2__0)
{ after(grammarAccess.getTypeIdentifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeAssignment_2_1_0()); }
(rule__TypeIdentifier__TypeAssignment_2_1_0)
{ after(grammarAccess.getTypeIdentifierAccess().getTypeAssignment_2_1_0()); }
)

    |(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeIDAssignment_2_1_1()); }
(rule__TypeIdentifier__TypeIDAssignment_2_1_1)
{ after(grammarAccess.getTypeIdentifierAccess().getTypeIDAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); }
	ruleCommentAnnotation
{ after(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_1()); }
	ruleTagAnnotation
{ after(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); }
	ruleKeyStringValueAnnotation
{ after(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); }
	ruleTypedKeyStringValueAnnotation
{ after(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_4()); }
	ruleKeyBooleanValueAnnotation
{ after(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_5()); }
	ruleKeyIntValueAnnotation
{ after(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_6()); }
	ruleKeyFloatValueAnnotation
{ after(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
(	'pure' 
)
{ after(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
(	'boolean' 
)
{ after(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
(	'unsigned' 
)
{ after(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
(	'integer' 
)
{ after(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
(	'float' 
)
{ after(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); }
(	'double' 
)
{ after(grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6()); }
(	'string' 
)
{ after(grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7()); }
(	'host' 
)
{ after(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CombineOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
(	'none' 
)
{ after(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
(	'+' 
)
{ after(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
(	'*' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
(	'max' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
(	'min' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
(	'or' 
)
{ after(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
(	'and' 
)
{ after(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
(	'host' 
)
{ after(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0()); }

	'Synchronous Program' 

{ after(grammarAccess.getProgramAccess().getSynchronousProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
(rule__Program__NameAssignment_1)
{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getProgramAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPriorityAssignment_3()); }
(rule__Program__PriorityAssignment_3)
{ after(grammarAccess.getProgramAccess().getPriorityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getProgramAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSignalsAssignment_5()); }
(rule__Program__SignalsAssignment_5)*
{ after(grammarAccess.getProgramAccess().getSignalsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
(rule__Program__StatesAssignment_6)
{ after(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
)
(
{ before(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
(rule__Program__StatesAssignment_6)*
{ after(grammarAccess.getProgramAccess().getStatesAssignment_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_0()); }
(rule__State__NameAssignment_0)
{ after(grammarAccess.getStateAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_2()); }
(rule__State__Group_2__0)?
{ after(grammarAccess.getStateAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_3()); }
(rule__State__Group_3__0)*
{ after(grammarAccess.getStateAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__0__Impl
	rule__State__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSIGNALSKeyword_2_0()); }

	'SIGNALS' 

{ after(grammarAccess.getStateAccess().getSIGNALSKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__1__Impl
	rule__State__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSignalsAssignment_2_1()); }
(rule__State__SignalsAssignment_2_1)*
{ after(grammarAccess.getStateAccess().getSignalsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSemicolonKeyword_2_2()); }

	';' 

{ after(grammarAccess.getStateAccess().getSemicolonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__State__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_3__0__Impl
	rule__State__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInstructionsAssignment_3_0()); }
(rule__State__InstructionsAssignment_3_0)
{ after(grammarAccess.getStateAccess().getInstructionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSemicolonKeyword_3_1()); }

	';' 

{ after(grammarAccess.getStateAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__0__Impl
	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsInputAssignment_0()); }
(rule__Signal__IsInputAssignment_0)?
{ after(grammarAccess.getSignalAccess().getIsInputAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__1__Impl
	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsOutputAssignment_1()); }
(rule__Signal__IsOutputAssignment_1)?
{ after(grammarAccess.getSignalAccess().getIsOutputAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__2__Impl
	rule__Signal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getSignalKeyword_2()); }

	'signal' 

{ after(grammarAccess.getSignalAccess().getSignalKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__3__Impl
	rule__Signal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_3()); }
(rule__Signal__NameAssignment_3)
{ after(grammarAccess.getSignalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__4__Impl
	rule__Signal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_4()); }
(rule__Signal__Group_4__0)?
{ after(grammarAccess.getSignalAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__5__Impl
	rule__Signal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getAlternatives_5()); }
(rule__Signal__Alternatives_5)?
{ after(grammarAccess.getSignalAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getSignalAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Signal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__0__Impl
	rule__Signal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1()); }
(rule__Signal__InitialValueAssignment_4_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_0__0__Impl
	rule__Signal__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_5_0_0()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1()); }
(rule__Signal__TypeAssignment_5_0_1)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__0__Impl
	rule__Signal__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_5_1_0()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__1__Impl
	rule__Signal__Group_5_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_5_1_1()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__2__Impl
	rule__Signal__Group_5_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2()); }
(rule__Signal__TypeAssignment_5_1_2)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__3__Impl
	rule__Signal__Group_5_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_5_1_3()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_5_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getAlternatives_5_1_4()); }
(rule__Signal__Alternatives_5_1_4)
{ after(grammarAccess.getSignalAccess().getAlternatives_5_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Pause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__0__Impl
	rule__Pause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getPauseAction_0()); }
(

)
{ after(grammarAccess.getPauseAccess().getPauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__1__Impl
	rule__Pause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getPAUSEKeyword_1()); }

	'PAUSE' 

{ after(grammarAccess.getPauseAccess().getPAUSEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__2__Impl
	rule__Pause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPauseAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__3__Impl
	rule__Pause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getContinuationAssignment_3()); }
(rule__Pause__ContinuationAssignment_3)?
{ after(grammarAccess.getPauseAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPauseAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTermAction_0()); }
(

)
{ after(grammarAccess.getTermAccess().getTermAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
	rule__Term__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTERMKeyword_1()); }

	'TERM' 

{ after(grammarAccess.getTermAccess().getTERMKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__2__Impl
	rule__Term__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__3__Impl
	rule__Term__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getContinuationAssignment_3()); }
(rule__Term__ContinuationAssignment_3)?
{ after(grammarAccess.getTermAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Halt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__0__Impl
	rule__Halt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getHaltAction_0()); }
(

)
{ after(grammarAccess.getHaltAccess().getHaltAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__1__Impl
	rule__Halt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getHaltKeyword_1()); }

	'Halt' 

{ after(grammarAccess.getHaltAccess().getHaltKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__2__Impl
	rule__Halt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getHaltAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__3__Impl
	rule__Halt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getContinuationAssignment_3()); }
(rule__Halt__ContinuationAssignment_3)?
{ after(grammarAccess.getHaltAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Halt__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Halt__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getHaltAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Join__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJoinAction_0()); }
(

)
{ after(grammarAccess.getJoinAccess().getJoinAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJOINKeyword_1()); }

	'JOIN' 

{ after(grammarAccess.getJoinAccess().getJOINKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__3__Impl
	rule__Join__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getContinuationAssignment_3()); }
(rule__Join__ContinuationAssignment_3)?
{ after(grammarAccess.getJoinAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Abort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__0__Impl
	rule__Abort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getAbortAction_0()); }
(

)
{ after(grammarAccess.getAbortAccess().getAbortAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__1__Impl
	rule__Abort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getABORTKeyword_1()); }

	'ABORT' 

{ after(grammarAccess.getAbortAccess().getABORTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__2__Impl
	rule__Abort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAbortAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__3__Impl
	rule__Abort__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getContinuationAssignment_3()); }
(rule__Abort__ContinuationAssignment_3)?
{ after(grammarAccess.getAbortAccess().getContinuationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abort__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abort__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAbortAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIFKeyword_0()); }

	'IF' 

{ after(grammarAccess.getIfAccess().getIFKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExpressionAssignment_2()); }
(rule__If__ExpressionAssignment_2)
{ after(grammarAccess.getIfAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_3()); }
(rule__If__Group_3__0)?
{ after(grammarAccess.getIfAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getGroup_6()); }
(rule__If__Group_6__0)*
{ after(grammarAccess.getIfAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__If__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_3__0__Impl
	rule__If__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getIfAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getContinuationAssignment_3_1()); }
(rule__If__ContinuationAssignment_3_1)
{ after(grammarAccess.getIfAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_6__0__Impl
	rule__If__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getInstructionsAssignment_6_0()); }
(rule__If__InstructionsAssignment_6_0)
{ after(grammarAccess.getIfAccess().getInstructionsAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getSemicolonKeyword_6_1()); }

	';' 

{ after(grammarAccess.getIfAccess().getSemicolonKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Goto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGOTOKeyword_0()); }

	'GOTO' 

{ after(grammarAccess.getGotoAccess().getGOTOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__1__Impl
	rule__Goto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getGotoAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__2__Impl
	rule__Goto__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getStateAssignment_2()); }
(rule__Goto__StateAssignment_2)
{ after(grammarAccess.getGotoAccess().getStateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__3__Impl
	rule__Goto__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGroup_3()); }
(rule__Goto__Group_3__0)?
{ after(grammarAccess.getGotoAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getGotoAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Goto__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_3__0__Impl
	rule__Goto__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getGotoAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getContinuationAssignment_3_1()); }
(rule__Goto__ContinuationAssignment_3_1)
{ after(grammarAccess.getGotoAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fork__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__0__Impl
	rule__Fork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getFORKKeyword_0()); }

	'FORK' 

{ after(grammarAccess.getForkAccess().getFORKKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__1__Impl
	rule__Fork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForkAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__2__Impl
	rule__Fork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getStateAssignment_2()); }
(rule__Fork__StateAssignment_2)
{ after(grammarAccess.getForkAccess().getStateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__3__Impl
	rule__Fork__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getForkAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__4__Impl
	rule__Fork__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getPriorityAssignment_4()); }
(rule__Fork__PriorityAssignment_4)
{ after(grammarAccess.getForkAccess().getPriorityAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__5__Impl
	rule__Fork__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getGroup_5()); }
(rule__Fork__Group_5__0)?
{ after(grammarAccess.getForkAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForkAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Fork__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group_5__0__Impl
	rule__Fork__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getForkAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getContinuationAssignment_5_1()); }
(rule__Fork__ContinuationAssignment_5_1)
{ after(grammarAccess.getForkAccess().getContinuationAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Forke__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__0__Impl
	rule__Forke__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getFORKEKeyword_0()); }

	'FORKE' 

{ after(grammarAccess.getForkeAccess().getFORKEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__1__Impl
	rule__Forke__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForkeAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__2__Impl
	rule__Forke__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getStateAssignment_2()); }
(rule__Forke__StateAssignment_2)
{ after(grammarAccess.getForkeAccess().getStateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__3__Impl
	rule__Forke__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getGroup_3()); }
(rule__Forke__Group_3__0)?
{ after(grammarAccess.getForkeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getForkeAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Forke__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group_3__0__Impl
	rule__Forke__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getForkeAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forke__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forke__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getContinuationAssignment_3_1()); }
(rule__Forke__ContinuationAssignment_3_1)
{ after(grammarAccess.getForkeAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__0__Impl
	rule__Emit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getEMITKeyword_0()); }

	'EMIT' 

{ after(grammarAccess.getEmitAccess().getEMITKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__1__Impl
	rule__Emit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__2__Impl
	rule__Emit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getSignalAssignment_2()); }
(rule__Emit__SignalAssignment_2)
{ after(grammarAccess.getEmitAccess().getSignalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__3__Impl
	rule__Emit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getGroup_3()); }
(rule__Emit__Group_3__0)?
{ after(grammarAccess.getEmitAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getEmitAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Emit__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group_3__0__Impl
	rule__Emit__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getEmitAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emit__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emit__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getContinuationAssignment_3_1()); }
(rule__Emit__ContinuationAssignment_3_1)
{ after(grammarAccess.getEmitAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Await__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__0__Impl
	rule__Await__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getAWAITKeyword_0()); }

	'AWAIT' 

{ after(grammarAccess.getAwaitAccess().getAWAITKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__1__Impl
	rule__Await__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAwaitAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__2__Impl
	rule__Await__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getSignalAssignment_2()); }
(rule__Await__SignalAssignment_2)
{ after(grammarAccess.getAwaitAccess().getSignalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__3__Impl
	rule__Await__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getGroup_3()); }
(rule__Await__Group_3__0)?
{ after(grammarAccess.getAwaitAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAwaitAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Await__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group_3__0__Impl
	rule__Await__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getAwaitAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Await__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Await__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Await__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1()); }
(rule__Await__ContinuationAssignment_3_1)
{ after(grammarAccess.getAwaitAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Prio__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__0__Impl
	rule__Prio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }

	'PRIO' 

{ after(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__1__Impl
	rule__Prio__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPrioAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__2__Impl
	rule__Prio__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPriorityAssignment_2()); }
(rule__Prio__PriorityAssignment_2)
{ after(grammarAccess.getPrioAccess().getPriorityAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__3__Impl
	rule__Prio__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getGroup_3()); }
(rule__Prio__Group_3__0)?
{ after(grammarAccess.getPrioAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPrioAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Prio__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group_3__0__Impl
	rule__Prio__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getPrioAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prio__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getContinuationAssignment_3_1()); }
(rule__Prio__ContinuationAssignment_3_1)
{ after(grammarAccess.getPrioAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
	ruleCompareOperation
{ after(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0__0__Impl
	rule__CompareOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); }
	ruleNotOrValuedExpression
{ after(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_0_1()); }
(rule__CompareOperation__Group_0_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__0__Impl
	rule__CompareOperation__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__1__Impl
	rule__CompareOperation__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1()); }
(rule__CompareOperation__OperatorAssignment_0_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_0_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__0__Impl
	rule__NotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__1__Impl
	rule__NotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
(rule__NotExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__NotExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
	ruleSubExpression
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
	rule__AddExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AddExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AddExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__0__Impl
	rule__SubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1()); }
(rule__SubExpression__Group_1__0)*
{ after(grammarAccess.getSubExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__0__Impl
	rule__SubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__1__Impl
	rule__SubExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
(rule__SubExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__SubExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); }
	ruleDivExpression
{ after(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
	rule__MultExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__MultExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__0__Impl
	rule__DivExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); }
	ruleModExpression
{ after(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup_1()); }
(rule__DivExpression__Group_1__0)?
{ after(grammarAccess.getDivExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__0__Impl
	rule__DivExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__1__Impl
	rule__DivExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorAssignment_1_1()); }
(rule__DivExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getDivExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__DivExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__0__Impl
	rule__ModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); }
	ruleNegExpression
{ after(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1()); }
(rule__ModExpression__Group_1__0)?
{ after(grammarAccess.getModExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__0__Impl
	rule__ModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__1__Impl
	rule__ModExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ModExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__ModExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__0__Impl
	rule__NegExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__1__Impl
	rule__NegExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorAssignment_0_1()); }
(rule__NegExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getNegExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__NegExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getNegExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__1__Impl
	rule__AtomicExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__0__Impl
	rule__AtomicValuedExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__1__Impl
	rule__AtomicValuedExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_2_1()); }
	ruleValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValuedObjectTestExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__0__Impl
	rule__ValuedObjectTestExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__1__Impl
	rule__ValuedObjectTestExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
(rule__ValuedObjectTestExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__2__Impl
	rule__ValuedObjectTestExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }

	'(' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__3__Impl
	rule__ValuedObjectTestExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
(rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ValuedObjectTestExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__0__Impl
	rule__ValuedObjectTestExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__1__Impl
	rule__ValuedObjectTestExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ValuedObjectTestExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__ValuedObjectTestExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__0__Impl
	rule__TextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
(rule__TextExpression__CodeAssignment_0)
{ after(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup_1()); }
(rule__TextExpression__Group_1__0)?
{ after(grammarAccess.getTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__0__Impl
	rule__TextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__1__Impl
	rule__TextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
(rule__TextExpression__TypeAssignment_1_1)
{ after(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ISignal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ISignal__Group__0__Impl
	rule__ISignal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ISignal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getISignalAccess().getNameAssignment_0()); }
(rule__ISignal__NameAssignment_0)
{ after(grammarAccess.getISignalAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ISignal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ISignal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ISignal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getISignalAccess().getChannelDescrAssignment_1()); }
(rule__ISignal__ChannelDescrAssignment_1)?
{ after(grammarAccess.getISignalAccess().getChannelDescrAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceSignalDecl__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0__0__Impl
	rule__InterfaceSignalDecl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getInputAction_0_0()); }
(

)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getInputAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0__1__Impl
	rule__InterfaceSignalDecl__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getInputKeyword_0_1()); }

	'input' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getInputKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0__2__Impl
	rule__InterfaceSignalDecl__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_0_2()); }
(rule__InterfaceSignalDecl__SignalsAssignment_0_2)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0__3__Impl
	rule__InterfaceSignalDecl__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_0_3()); }
(rule__InterfaceSignalDecl__Group_0_3__0)*
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_0_4()); }

	';' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InterfaceSignalDecl__Group_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0_3__0__Impl
	rule__InterfaceSignalDecl__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_0_3_0()); }

	',' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_0_3_1()); }
(rule__InterfaceSignalDecl__SignalsAssignment_0_3_1)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceSignalDecl__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1__0__Impl
	rule__InterfaceSignalDecl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getOutputAction_1_0()); }
(

)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getOutputAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1__1__Impl
	rule__InterfaceSignalDecl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getOutputKeyword_1_1()); }

	'output' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getOutputKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1__2__Impl
	rule__InterfaceSignalDecl__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_1_2()); }
(rule__InterfaceSignalDecl__SignalsAssignment_1_2)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1__3__Impl
	rule__InterfaceSignalDecl__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_1_3()); }
(rule__InterfaceSignalDecl__Group_1_3__0)*
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_1_4()); }

	';' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InterfaceSignalDecl__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1_3__0__Impl
	rule__InterfaceSignalDecl__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_1_3_0()); }

	',' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_1_3_1()); }
(rule__InterfaceSignalDecl__SignalsAssignment_1_3_1)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceSignalDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2__0__Impl
	rule__InterfaceSignalDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getInputOutputAction_2_0()); }
(

)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getInputOutputAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2__1__Impl
	rule__InterfaceSignalDecl__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getInputoutputKeyword_2_1()); }

	'inputoutput' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getInputoutputKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2__2__Impl
	rule__InterfaceSignalDecl__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_2_2()); }
(rule__InterfaceSignalDecl__SignalsAssignment_2_2)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2__3__Impl
	rule__InterfaceSignalDecl__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_2_3()); }
(rule__InterfaceSignalDecl__Group_2_3__0)*
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_2_4()); }

	';' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InterfaceSignalDecl__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2_3__0__Impl
	rule__InterfaceSignalDecl__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_2_3_0()); }

	',' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_2_3_1()); }
(rule__InterfaceSignalDecl__SignalsAssignment_2_3_1)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceSignalDecl__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3__0__Impl
	rule__InterfaceSignalDecl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getReturnAction_3_0()); }
(

)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getReturnAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3__1__Impl
	rule__InterfaceSignalDecl__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getReturnKeyword_3_1()); }

	'return' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getReturnKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3__2__Impl
	rule__InterfaceSignalDecl__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_3_2()); }
(rule__InterfaceSignalDecl__SignalsAssignment_3_2)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3__3__Impl
	rule__InterfaceSignalDecl__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getGroup_3_3()); }
(rule__InterfaceSignalDecl__Group_3_3__0)*
{ after(grammarAccess.getInterfaceSignalDeclAccess().getGroup_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_3_4()); }

	';' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InterfaceSignalDecl__Group_3_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3_3__0__Impl
	rule__InterfaceSignalDecl__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_3_3_0()); }

	',' 

{ after(grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDecl__Group_3_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDecl__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__Group_3_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_3_3_1()); }
(rule__InterfaceSignalDecl__SignalsAssignment_3_3_1)
{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsAssignment_3_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChannelDescription__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_0__0__Impl
	rule__ChannelDescription__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0()); }

	':' 

{ after(grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_0_1()); }
(rule__ChannelDescription__TypeAssignment_0_1)
{ after(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChannelDescription__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_1__0__Impl
	rule__ChannelDescription__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_1__1__Impl
	rule__ChannelDescription__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_1_1()); }
(rule__ChannelDescription__TypeAssignment_1_1)
{ after(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ChannelDescription__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_2__0__Impl
	rule__ChannelDescription__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0()); }

	':=' 

{ after(grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_2__1__Impl
	rule__ChannelDescription__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getExpressionAssignment_2_1()); }
(rule__ChannelDescription__ExpressionAssignment_2_1)
{ after(grammarAccess.getChannelDescriptionAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_2__2__Impl
	rule__ChannelDescription__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2()); }

	':' 

{ after(grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDescription__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDescription__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_2_3()); }
(rule__ChannelDescription__TypeAssignment_2_3)
{ after(grammarAccess.getChannelDescriptionAccess().getTypeAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InterfaceVariableDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDecl__Group__0__Impl
	rule__InterfaceVariableDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getInterfaceVariableDeclAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDecl__Group__1__Impl
	rule__InterfaceVariableDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsAssignment_1()); }
(rule__InterfaceVariableDecl__VarDeclsAssignment_1)
{ after(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getGroup_2()); }
(rule__InterfaceVariableDecl__Group_2__0)*
{ after(grammarAccess.getInterfaceVariableDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InterfaceVariableDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDecl__Group_2__0__Impl
	rule__InterfaceVariableDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getInterfaceVariableDeclAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsAssignment_2_1()); }
(rule__InterfaceVariableDecl__VarDeclsAssignment_2_1)
{ after(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__0__Impl
	rule__VariableDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getVariablesAssignment_0()); }
(rule__VariableDecl__VariablesAssignment_0)
{ after(grammarAccess.getVariableDeclAccess().getVariablesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__1__Impl
	rule__VariableDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getGroup_1()); }
(rule__VariableDecl__Group_1__0)*
{ after(grammarAccess.getVariableDeclAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__2__Impl
	rule__VariableDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getVariableDeclAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeAssignment_3()); }
(rule__VariableDecl__TypeAssignment_3)
{ after(grammarAccess.getVariableDeclAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDecl__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group_1__0__Impl
	rule__VariableDecl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVariableDeclAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getVariablesAssignment_1_1()); }
(rule__VariableDecl__VariablesAssignment_1_1)
{ after(grammarAccess.getVariableDeclAccess().getVariablesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IVariable__Group__0__Impl
	rule__IVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getNameAssignment_0()); }
(rule__IVariable__NameAssignment_0)
{ after(grammarAccess.getIVariableAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getGroup_1()); }
(rule__IVariable__Group_1__0)?
{ after(grammarAccess.getIVariableAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IVariable__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IVariable__Group_1__0__Impl
	rule__IVariable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getColonEqualsSignKeyword_1_0()); }

	':=' 

{ after(grammarAccess.getIVariableAccess().getColonEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IVariable__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IVariable__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getExpressionAssignment_1_1()); }
(rule__IVariable__ExpressionAssignment_1_1)
{ after(grammarAccess.getIVariableAccess().getExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeIdentifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeIdentifier__Group_2__0__Impl
	rule__TypeIdentifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getCombineKeyword_2_0()); }

	'combine' 

{ after(grammarAccess.getTypeIdentifierAccess().getCombineKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeIdentifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeIdentifier__Group_2__1__Impl
	rule__TypeIdentifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getAlternatives_2_1()); }
(rule__TypeIdentifier__Alternatives_2_1)
{ after(grammarAccess.getTypeIdentifierAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeIdentifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeIdentifier__Group_2__2__Impl
	rule__TypeIdentifier__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getWithKeyword_2_2()); }

	'with' 

{ after(grammarAccess.getTypeIdentifierAccess().getWithKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeIdentifier__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeIdentifier__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getOperatorAssignment_2_3()); }
(rule__TypeIdentifier__OperatorAssignment_2_3)
{ after(grammarAccess.getTypeIdentifierAccess().getOperatorAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TagAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group__0__Impl
	rule__TagAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group__1__Impl
	rule__TagAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getNameAssignment_1()); }
(rule__TagAnnotation__NameAssignment_1)
{ after(grammarAccess.getTagAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getGroup_2()); }
(rule__TagAnnotation__Group_2__0)?
{ after(grammarAccess.getTagAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TagAnnotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group_2__0__Impl
	rule__TagAnnotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getTagAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group_2__1__Impl
	rule__TagAnnotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getAnnotationsAssignment_2_1()); }
(rule__TagAnnotation__AnnotationsAssignment_2_1)*
{ after(grammarAccess.getTagAnnotationAccess().getAnnotationsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getTagAnnotationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__0__Impl
	rule__KeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__1__Impl
	rule__KeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__2__Impl
	rule__KeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyStringValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3()); }
(rule__KeyStringValueAnnotation__Group_3__0)?
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KeyStringValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group_3__0__Impl
	rule__KeyStringValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group_3__1__Impl
	rule__KeyStringValueAnnotation__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
(rule__KeyStringValueAnnotation__AnnotationsAssignment_3_1)*
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getKeyStringValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__0__Impl
	rule__TypedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__1__Impl
	rule__TypedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__TypedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__2__Impl
	rule__TypedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__3__Impl
	rule__TypedKeyStringValueAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
(rule__TypedKeyStringValueAnnotation__TypeAssignment_3)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__4__Impl
	rule__TypedKeyStringValueAnnotation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__5__Impl
	rule__TypedKeyStringValueAnnotation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueAssignment_5()); }
(rule__TypedKeyStringValueAnnotation__ValueAssignment_5)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6()); }
(rule__TypedKeyStringValueAnnotation__Group_6__0)?
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__TypedKeyStringValueAnnotation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group_6__0__Impl
	rule__TypedKeyStringValueAnnotation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_6_0()); }

	'(' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group_6__1__Impl
	rule__TypedKeyStringValueAnnotation__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAssignment_6_1()); }
(rule__TypedKeyStringValueAnnotation__AnnotationsAssignment_6_1)*
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightParenthesisKeyword_6_2()); }

	')' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightParenthesisKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeyBooleanValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group__0__Impl
	rule__KeyBooleanValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyBooleanValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group__1__Impl
	rule__KeyBooleanValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyBooleanValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyBooleanValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group__2__Impl
	rule__KeyBooleanValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyBooleanValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyBooleanValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup_3()); }
(rule__KeyBooleanValueAnnotation__Group_3__0)?
{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KeyBooleanValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group_3__0__Impl
	rule__KeyBooleanValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyBooleanValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group_3__1__Impl
	rule__KeyBooleanValueAnnotation__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
(rule__KeyBooleanValueAnnotation__AnnotationsAssignment_3_1)*
{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyBooleanValueAnnotation__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyBooleanValueAnnotation__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeyIntValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group__0__Impl
	rule__KeyIntValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyIntValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group__1__Impl
	rule__KeyIntValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyIntValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyIntValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyIntValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group__2__Impl
	rule__KeyIntValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyIntValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyIntValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyIntValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getGroup_3()); }
(rule__KeyIntValueAnnotation__Group_3__0)?
{ after(grammarAccess.getKeyIntValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KeyIntValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group_3__0__Impl
	rule__KeyIntValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getKeyIntValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyIntValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group_3__1__Impl
	rule__KeyIntValueAnnotation__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
(rule__KeyIntValueAnnotation__AnnotationsAssignment_3_1)*
{ after(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyIntValueAnnotation__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyIntValueAnnotation__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getKeyIntValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeyFloatValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group__0__Impl
	rule__KeyFloatValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyFloatValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group__1__Impl
	rule__KeyFloatValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyFloatValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyFloatValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group__2__Impl
	rule__KeyFloatValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyFloatValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyFloatValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup_3()); }
(rule__KeyFloatValueAnnotation__Group_3__0)?
{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KeyFloatValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group_3__0__Impl
	rule__KeyFloatValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyFloatValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group_3__1__Impl
	rule__KeyFloatValueAnnotation__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
(rule__KeyFloatValueAnnotation__AnnotationsAssignment_3_1)*
{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyFloatValueAnnotation__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyFloatValueAnnotation__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__TypeId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeId__Group__0__Impl
	rule__TypeId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getTypeIdAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdAccess().getGroup_1()); }
(rule__TypeId__Group_1__0)*
{ after(grammarAccess.getTypeIdAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeId__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeId__Group_1__0__Impl
	rule__TypeId__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeId__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getTypeIdAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeId__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeId__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeId__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getTypeIdAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__PriorityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPriorityINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getProgramAccess().getPriorityINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__SignalsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_0()); }
	ruleSignal{ after(grammarAccess.getProgramAccess().getSignalsSignalParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_6_0()); }
	ruleState{ after(grammarAccess.getProgramAccess().getStatesStateParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__SignalsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_2_1_0()); }
	ruleSignal{ after(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__InstructionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
	ruleInstruction{ after(grammarAccess.getStateAccess().getInstructionsInstructionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__IsInputAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
(
{ before(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }

	'input' 

{ after(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
)

{ after(grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__IsOutputAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
(
{ before(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }

	'output' 

{ after(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
)

{ after(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameEStringParserRuleCall_3_0()); }
	ruleEString{ after(grammarAccess.getSignalAccess().getNameEStringParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueEStringParserRuleCall_4_1_0()); }
	ruleEString{ after(grammarAccess.getSignalAccess().getInitialValueEStringParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_0_1_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_5_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_1_2_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_5_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__CombineOperatorAssignment_5_1_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0()); }
	ruleCombineOperator{ after(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostCombineOperatorAssignment_5_1_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorEStringParserRuleCall_5_1_4_1_0()); }
	ruleEString{ after(grammarAccess.getSignalAccess().getHostCombineOperatorEStringParserRuleCall_5_1_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pause__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPauseAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getPauseAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPauseAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPauseAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getTermAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getTermAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getTermAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Halt__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHaltAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getHaltAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getHaltAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getHaltAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getJoinAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getJoinAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getJoinAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Abort__ContinuationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbortAccess().getContinuationStateCrossReference_3_0()); }
(
{ before(grammarAccess.getAbortAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getAbortAccess().getContinuationStateIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getAbortAccess().getContinuationStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getIfAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getIfAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getIfAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__InstructionsAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getInstructionsInstructionParserRuleCall_6_0_0()); }
	ruleInstruction{ after(grammarAccess.getIfAccess().getInstructionsInstructionParserRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getGotoAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getGotoAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getGotoAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getGotoAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGotoAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getGotoAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getForkAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getForkAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getForkAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__PriorityAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getPriorityINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getForkAccess().getPriorityINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__ContinuationAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getContinuationStateCrossReference_5_1_0()); }
(
{ before(grammarAccess.getForkAccess().getContinuationStateIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getForkAccess().getContinuationStateIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getForkAccess().getContinuationStateCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getForkeAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getForkeAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getForkeAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forke__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkeAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getForkeAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getForkeAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getForkeAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__SignalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getSignalSignalCrossReference_2_0()); }
(
{ before(grammarAccess.getEmitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getEmitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getEmitAccess().getSignalSignalCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emit__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmitAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getEmitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEmitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getEmitAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Await__SignalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getSignalSignalCrossReference_2_0()); }
(
{ before(grammarAccess.getAwaitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getAwaitAccess().getSignalSignalIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getAwaitAccess().getSignalSignalCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Await__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAwaitAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getAwaitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAwaitAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getAwaitAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__PriorityAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPriorityINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getPrioAccess().getPriorityINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getContinuationStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getPrioAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPrioAccess().getContinuationStateIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getPrioAccess().getContinuationStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
	ruleOrOperator{ after(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); }
	ruleCompareOperation{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); }
	ruleNotOrValuedExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
	ruleNotOperator{ after(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
	ruleNotExpression{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
	ruleAddOperator{ after(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
	ruleSubExpression{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
	ruleSubOperator{ after(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
	ruleMultExpression{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
	ruleMultOperator{ after(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); }
	ruleDivExpression{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
	ruleDivOperator{ after(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
	ruleModExpression{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
	ruleModOperator{ after(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); }
	ruleSubOperator{ after(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); }
	ruleNegExpression{ after(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); }
	rulePreOperator{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
	ruleValuedObjectTestExpression{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); }
	ruleValueTestOperator{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); }
	ruleValuedObjectReference{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__ValuedObjectAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); }
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeHOSTCODETerminalRuleCall_0_0()); }
	RULE_HOSTCODE{ after(grammarAccess.getTextExpressionAccess().getCodeHOSTCODETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ISignal__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getISignalAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getISignalAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ISignal__ChannelDescrAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getISignalAccess().getChannelDescrChannelDescriptionParserRuleCall_1_0()); }
	ruleChannelDescription{ after(grammarAccess.getISignalAccess().getChannelDescrChannelDescriptionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_2_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_3_1_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_2_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_3_1_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_2_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_3_1_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_2_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDecl__SignalsAssignment_3_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_3_1_0()); }
	ruleISignal{ after(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__TypeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_0_1_0()); }
	ruleTypeIdentifier{ after(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_1_1_0()); }
	ruleTypeIdentifier{ after(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getChannelDescriptionAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDescription__TypeAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_2_3_0()); }
	ruleTypeIdentifier{ after(grammarAccess.getChannelDescriptionAccess().getTypeTypeIdentifierParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__VarDeclsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_1_0()); }
	ruleVariableDecl{ after(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDecl__VarDeclsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_2_1_0()); }
	ruleVariableDecl{ after(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__VariablesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_0_0()); }
	ruleIVariable{ after(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__VariablesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_1_1_0()); }
	ruleIVariable{ after(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeTypeIdentifierParserRuleCall_3_0()); }
	ruleTypeIdentifier{ after(grammarAccess.getVariableDeclAccess().getTypeTypeIdentifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getIVariableAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IVariable__ExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIVariableAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getIVariableAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_0_0()); }
	ruleValueType{ after(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__TypeIDAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__TypeAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_2_1_0_0()); }
	ruleValueType{ after(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__TypeIDAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__OperatorAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdentifierAccess().getOperatorCombineOperatorEnumRuleCall_2_3_0()); }
	ruleCombineOperator{ after(grammarAccess.getTypeIdentifierAccess().getOperatorCombineOperatorEnumRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommentAnnotation__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
	RULE_COMMENT_ANNOTATION{ after(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTagAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__AnnotationsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); }
	ruleAnnotation{ after(grammarAccess.getTagAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyStringValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__AnnotationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
	ruleAnnotation{ after(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeTypeIdParserRuleCall_3_0()); }
	ruleTypeId{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeTypeIdParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_5_0()); }
	ruleEString{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__AnnotationsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_6_1_0()); }
	ruleAnnotation{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBooleanTerminalRuleCall_2_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBooleanTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyBooleanValueAnnotation__AnnotationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
	ruleAnnotation{ after(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyIntValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getKeyIntValueAnnotationAccess().getValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyIntValueAnnotation__AnnotationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
	ruleAnnotation{ after(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getValueFloatTerminalRuleCall_2_0()); }
	RULE_FLOAT{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getValueFloatTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyFloatValueAnnotation__AnnotationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
	ruleAnnotation{ after(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



RULE_HOSTCODE : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ('-'? ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? 'f'?|'-'? ('0'..'9')+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


