/*
* generated by Xtext
*/
package de.cau.cs.kieler.ksbase.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.ksbase.services.FeatureDefinitionGrammarAccess;

import com.google.inject.Inject;

public class FeatureDefinitionParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FeatureDefinitionGrammarAccess grammarAccess;
		
	public FeatureDefinitionGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_Group(this, this, 0, inst);
			case 1: return new FeatureType_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule FeatureDefinitions ****************
 *
 * FeatureDefinitions:
 *   "ModelPackage = " modelName=STRING ";" ("ModelPackagePath = " modelPath=STRING ";")?
 *   "FeatureMenuTitle = " featureMenuTitle=STRING ";" ("TransformationFile = "
 *   featureFile=STRING ";")? elements+=FeatureType*;
 *
 **/

// "ModelPackage = " modelName=STRING ";" ("ModelPackagePath = " modelPath=STRING ";")?
// "FeatureMenuTitle = " featureMenuTitle=STRING ";" ("TransformationFile = "
// featureFile=STRING ";")? elements+=FeatureType*
protected class FeatureDefinitions_Group extends GroupToken {
	
	public FeatureDefinitions_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_ElementsAssignment_8(parent, this, 0, inst);
			case 1: return new FeatureDefinitions_Group_7(parent, this, 1, inst);
			case 2: return new FeatureDefinitions_SemicolonKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureDefinitionsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "ModelPackage = "
protected class FeatureDefinitions_ModelPackageKeyword_0 extends KeywordToken  {
	
	public FeatureDefinitions_ModelPackageKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getModelPackageKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=STRING
protected class FeatureDefinitions_ModelNameAssignment_1 extends AssignmentToken  {
	
	public FeatureDefinitions_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_ModelPackageKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureDefinitionsAccess().getModelNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureDefinitions_SemicolonKeyword_2 extends KeywordToken  {
	
	public FeatureDefinitions_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("ModelPackagePath = " modelPath=STRING ";")?
protected class FeatureDefinitions_Group_3 extends GroupToken {
	
	public FeatureDefinitions_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_SemicolonKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "ModelPackagePath = "
protected class FeatureDefinitions_ModelPackagePathKeyword_3_0 extends KeywordToken  {
	
	public FeatureDefinitions_ModelPackagePathKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getModelPackagePathKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// modelPath=STRING
protected class FeatureDefinitions_ModelPathAssignment_3_1 extends AssignmentToken  {
	
	public FeatureDefinitions_ModelPathAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getModelPathAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_ModelPackagePathKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelPath",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelPath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureDefinitionsAccess().getModelPathSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureDefinitions_SemicolonKeyword_3_2 extends KeywordToken  {
	
	public FeatureDefinitions_SemicolonKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getSemicolonKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_ModelPathAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "FeatureMenuTitle = "
protected class FeatureDefinitions_FeatureMenuTitleKeyword_4 extends KeywordToken  {
	
	public FeatureDefinitions_FeatureMenuTitleKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getFeatureMenuTitleKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_Group_3(parent, this, 0, inst);
			case 1: return new FeatureDefinitions_SemicolonKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// featureMenuTitle=STRING
protected class FeatureDefinitions_FeatureMenuTitleAssignment_5 extends AssignmentToken  {
	
	public FeatureDefinitions_FeatureMenuTitleAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getFeatureMenuTitleAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_FeatureMenuTitleKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureMenuTitle",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureMenuTitle");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureDefinitionsAccess().getFeatureMenuTitleSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureDefinitions_SemicolonKeyword_6 extends KeywordToken  {
	
	public FeatureDefinitions_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_FeatureMenuTitleAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("TransformationFile = " featureFile=STRING ";")?
protected class FeatureDefinitions_Group_7 extends GroupToken {
	
	public FeatureDefinitions_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_SemicolonKeyword_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "TransformationFile = "
protected class FeatureDefinitions_TransformationFileKeyword_7_0 extends KeywordToken  {
	
	public FeatureDefinitions_TransformationFileKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getTransformationFileKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// featureFile=STRING
protected class FeatureDefinitions_FeatureFileAssignment_7_1 extends AssignmentToken  {
	
	public FeatureDefinitions_FeatureFileAssignment_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getFeatureFileAssignment_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_TransformationFileKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureFile",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureFile");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureDefinitionsAccess().getFeatureFileSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureDefinitions_SemicolonKeyword_7_2 extends KeywordToken  {
	
	public FeatureDefinitions_SemicolonKeyword_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getSemicolonKeyword_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureDefinitions_FeatureFileAssignment_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// elements+=FeatureType*
protected class FeatureDefinitions_ElementsAssignment_8 extends AssignmentToken  {
	
	public FeatureDefinitions_ElementsAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureDefinitionsAccess().getElementsAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFeatureDefinitionsAccess().getElementsFeatureTypeParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureDefinitions_ElementsAssignment_8(parent, next, actIndex, consumed);
			case 1: return new FeatureDefinitions_Group_7(parent, next, actIndex, consumed);
			case 2: return new FeatureDefinitions_SemicolonKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FeatureDefinitions ****************/


/************ begin Rule FeatureType ****************
 *
 * FeatureType:
 *   "Feature" name=ID "{" ("File = " fileName=STRING ";")? "MethodName = " methodName=
 *   STRING ";" ("NumParameter = " numParameter+=INT ";")? ("Parameter = " parameter+=
 *   STRING ";")+ "MenuEntry = " menuEntry=STRING ";" "}";
 *
 **/

// "Feature" name=ID "{" ("File = " fileName=STRING ";")? "MethodName = " methodName=
// STRING ";" ("NumParameter = " numParameter+=INT ";")? ("Parameter = " parameter+=
// STRING ";")+ "MenuEntry = " menuEntry=STRING ";" "}"
protected class FeatureType_Group extends GroupToken {
	
	public FeatureType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_RightCurlyBracketKeyword_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Feature"
protected class FeatureType_FeatureKeyword_0 extends KeywordToken  {
	
	public FeatureType_FeatureKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getFeatureKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class FeatureType_NameAssignment_1 extends AssignmentToken  {
	
	public FeatureType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_FeatureKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class FeatureType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public FeatureType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("File = " fileName=STRING ";")?
protected class FeatureType_Group_3 extends GroupToken {
	
	public FeatureType_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_SemicolonKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "File = "
protected class FeatureType_FileKeyword_3_0 extends KeywordToken  {
	
	public FeatureType_FileKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getFileKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fileName=STRING
protected class FeatureType_FileNameAssignment_3_1 extends AssignmentToken  {
	
	public FeatureType_FileNameAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getFileNameAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_FileKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getFileNameSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureType_SemicolonKeyword_3_2 extends KeywordToken  {
	
	public FeatureType_SemicolonKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getSemicolonKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_FileNameAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "MethodName = "
protected class FeatureType_MethodNameKeyword_4 extends KeywordToken  {
	
	public FeatureType_MethodNameKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getMethodNameKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_Group_3(parent, this, 0, inst);
			case 1: return new FeatureType_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// methodName=STRING
protected class FeatureType_MethodNameAssignment_5 extends AssignmentToken  {
	
	public FeatureType_MethodNameAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getMethodNameAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_MethodNameKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("methodName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("methodName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getMethodNameSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureType_SemicolonKeyword_6 extends KeywordToken  {
	
	public FeatureType_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_MethodNameAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("NumParameter = " numParameter+=INT ";")?
protected class FeatureType_Group_7 extends GroupToken {
	
	public FeatureType_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_SemicolonKeyword_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "NumParameter = "
protected class FeatureType_NumParameterKeyword_7_0 extends KeywordToken  {
	
	public FeatureType_NumParameterKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getNumParameterKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// numParameter+=INT
protected class FeatureType_NumParameterAssignment_7_1 extends AssignmentToken  {
	
	public FeatureType_NumParameterAssignment_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getNumParameterAssignment_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_NumParameterKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("numParameter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("numParameter");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getNumParameterINTTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureType_SemicolonKeyword_7_2 extends KeywordToken  {
	
	public FeatureType_SemicolonKeyword_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getSemicolonKeyword_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_NumParameterAssignment_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("Parameter = " parameter+=STRING ";")+
protected class FeatureType_Group_8 extends GroupToken {
	
	public FeatureType_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_SemicolonKeyword_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "Parameter = "
protected class FeatureType_ParameterKeyword_8_0 extends KeywordToken  {
	
	public FeatureType_ParameterKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getParameterKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_Group_8(parent, this, 0, inst);
			case 1: return new FeatureType_Group_7(parent, this, 1, inst);
			case 2: return new FeatureType_SemicolonKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// parameter+=STRING
protected class FeatureType_ParameterAssignment_8_1 extends AssignmentToken  {
	
	public FeatureType_ParameterAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getParameterAssignment_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_ParameterKeyword_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameter");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getParameterSTRINGTerminalRuleCall_8_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureType_SemicolonKeyword_8_2 extends KeywordToken  {
	
	public FeatureType_SemicolonKeyword_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getSemicolonKeyword_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_ParameterAssignment_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "MenuEntry = "
protected class FeatureType_MenuEntryKeyword_9 extends KeywordToken  {
	
	public FeatureType_MenuEntryKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getMenuEntryKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_Group_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// menuEntry=STRING
protected class FeatureType_MenuEntryAssignment_10 extends AssignmentToken  {
	
	public FeatureType_MenuEntryAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getMenuEntryAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_MenuEntryKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("menuEntry",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("menuEntry");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureTypeAccess().getMenuEntrySTRINGTerminalRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FeatureType_SemicolonKeyword_11 extends KeywordToken  {
	
	public FeatureType_SemicolonKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getSemicolonKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_MenuEntryAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "}"
protected class FeatureType_RightCurlyBracketKeyword_12 extends KeywordToken  {
	
	public FeatureType_RightCurlyBracketKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureTypeAccess().getRightCurlyBracketKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureType_SemicolonKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FeatureType ****************/

}
