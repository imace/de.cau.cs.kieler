import synccharts;

// ================================================================================================
// Additional restrictions for simulation

context Transition if (delay != 1) WARNING "Delays <> 1 cannot be simulated yet!" :
  false;
  
context Transition WARNING "Immediate transitions cannot be simulated yet!" :
  isImmediate == false;
  
context Signal if (type != ValueType::PURE) WARNING "Only pure signals are supported in the simulation!" :
  false;  
  
context State if (type != StateType::NORMAL) WARNING "Only normal states are supported in the simulation!" :
  false;  

context State WARNING "Exit actions cannot be simulated yet!" :
  exitActions.size == 0;

context State WARNING "Enty actions cannot be simulated yet!" :
  entryActions.size == 0;

context State WARNING "Inner actions cannot be simulated yet!" :
  innerActions.size == 0;

context State WARNING "Suspend cannot be simulated yet!" :
  suspensionTrigger == null;

// ================================================================================================
// Pseudo States 
context State if (type == StateType::CONDITIONAL) ERROR "Conditional states must not be initial or final!" :
	isInitial == false && isFinal == false;
	
context State if (type == StateType::CONDITIONAL) ERROR "Conditional states must not contain regions!" :
	(regions == null) || (regions.size == 0);
	
context State if (type == StateType::CONDITIONAL) ERROR "Conditional states must not contain signals!" :
	(signals == null) || (signals.size == 0);
	
context State if (type == StateType::CONDITIONAL) ERROR "Conditional states must not contain actions!" :
	((entryActions == null) || (entryActions.size == 0))
	&& ((innerActions == null) || (innerActions.size == 0))
	&& ((exitActions == null) || (exitActions.size == 0));
	
context State if (type == StateType::CONDITIONAL) ERROR "Conditional states must not contain a suspension trigger!" :
	suspensionTrigger == null;
// ================================================================================================
// Reference States 
//context State if (type != StateType::REFERENCE) ERROR "only reference states may contain signal renamings!" :
//	(renamings == null) || (renamings.size == 0);

context State if (type != StateType::REFERENCE || type!= StateType::TEXTUAL) ERROR "Only textual or reference states may contain body text!" :
	(bodyText == null) || (bodyText.matches("\\s*"));
// ================================================================================================
// General States 
context State if (parentRegion != null && parentRegion.parentState != null && isInitial == false) // not checked for root state 
  ERROR "Not reachable state! Every state needs at least one incoming transition!" :
  (parentRegion.innerStates.exists(e|e.outgoingTransitions.exists(t|t.targetState == this)));

context State if ( label == null || label.matches("\\s*"))
	ERROR "Anonymous states (= no label) need an ID." : 
	(id != null && id.length>0);

context State if (label != null && !label.matches("\\s*"))
	ERROR "States within a region need to have different labels." :
	parentRegion.innerStates.forAll(s| (s.label != label) || (s == this));

context State
	ERROR "Names and IDs should be of standard identifier type, i.e. only contain characters, numbers and the _ sign." :
	(id.matches("\\w*") && label.matches("\\w*"));

// ================================================================================================
// Regions

context Region if (parentState != null) // not checked for root state
	ERROR "Every region should have exactly one initial state!" : 
	(innerStates.select(s|s.isInitial).size == 1);

context Region
	ERROR "Names and IDs should be of standard identifier type, i.e. only contain characters, numbers and the _ sign." :
	id.matches("\\w*");

// ================================================================================================
// Signals
context Signal if (parentState != null && parentState.parentRegion != null && parentState.parentRegion.parentState != null) 
    ERROR "Only signals in the root state may be global inputs or outputs." :
	((!isInput) && (!isOutput));
	
context Signal if ((initialValue == null) || (initialValue == "")) 
    ERROR "Only valued signals may have a combine type other than NONE!" :
	combineOperator == CombineOperator::NONE;
	
context Signal
	ERROR "Signals need unique names in a State or Region declaration." :
	( parentRegion != null && parentRegion.signals.forAll(s| (s.name != name) || (s == this)) ||
	  parentState != null && parentState.signals.forAll(s| (s.name != name) || (s == this)) )
	;

context Variable
	ERROR "Variables need unique names in a Region declaration." :
	( parentRegion != null && parentRegion.signals.forAll(s| (s.name != name) || (s == this)) )
	;

context ValuedObject
	ERROR "Names and IDs should be of standard identifier type, i.e. only contain characters, numbers and the _ sign." :
	(name.matches("\\w*"));
	
// ================================================================================================
// Transitions
context Transition if (isImmediate) ERROR "Immediate transitions must not have a delay!" :
	(delay == null) || (delay == 1);
	
context Transition ERROR "Delays have to be at least 1!" :
	(delay == null) || (delay >= 1);

context State if(outgoingTransitions.size > 1) 
    ERROR "Priorities of outgoing transitions need to be distinct!" :
    (outgoingTransitions.forAll(t| outgoingTransitions.forAll(s| (s.priority != t.priority) || s == t)));

// ================================================================================================
// Expressions
context ComplexExpression if ((operator == OperatorType::NOT) || (operator == OperatorType::VAL)) ERROR "Unary operators may not have more or less than one operand!" :
	subExpressions.size == 1;
	
context ComplexExpression if (!((operator == OperatorType::NOT) || (operator == OperatorType::VAL))) ERROR "Binary operators may not have more or less than two operands!" :
	subExpressions.size == 2;

// ================================================================================================
// Emissions
	
context Emission if (signal.type == ValueType::PURE) ERROR "Pure signals cannot be assigned a value!" :
	newValue == null;
	
context Emission if (!(signal.type == ValueType::PURE)) ERROR "Valued signals must be assigned a value!" :
	newValue != null;
	
// ================================================================================================
// Actions

context Action if (triggersAndEffects != null && triggersAndEffects.trim().compareTo("") != 0 ) 
    ERROR "Triggers and Effects String has not correctly been parsed yet!" :
    (trigger != null || (effects!=null && effects.size >0) );
	