grammar de.cau.cs.kieler.editor.quartz.Quartz hidden(WS, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate quartz "http://www.cau.de/cs/kieler/editor/quartz/Quartz"

 QrzFile : PackagePath? imports=ImportList? macros+=MacroDef* module=QModule;

 PackagePath : "package" PointedName ";" ;

 ImportList : ("import" imp+=PointedName ";" )+;
 
 PointedName :  id=ID ("." name+=PointedName)* all?=(".*");
                 
MacroDef: "macro" name=QName "(" args=QNameList ")" "=" expr=UtyExpr ";"
        | "macro" name=QName "(" ")" "=" expr=UtyExpr ";";

QModule : "module" name=Name "(" intf=InterfaceList ")" ("{" stmt=LocStmt "}")? obs+=ObservedSpecList*;

ObservedSpecList : //"satisfies" "{" "observer" "(" InterfaceList ")" "{" stmts=LocStmt "}" proofs=ProofGoalList "}" 
                 //| "satisfies" "{" "observer" "(" InterfaceList ")" "{" stmts=LocStmt "}" "}" 
                // | 
                "satisfies" "{" ProofGoalList "}" ;

Name : id=ID;

QName : Name;

QNameList : name=QName ("," names+=QNameList)*;

Storage : "event" | "mem";
        
QType : ("bool"
          | "real"
          | "bv"
          | "bv" "{" ta=UtyExpr "}"
          | "nat"
          | "nat" "{" tb=UtyExpr "}"
          | "int"
          | "int" "{" tc=UtyExpr "}"
          //| "(" QTypeList ")"
          ) (dims=DimList)?
          ;
          
QTypeList : type=QType ("*" t+=QType)+;

DimList : ("[" expr+=UtyExpr "]")+;

InOutName : ("?" | "!")? QName;

InOutNameList : InOutName ("," names+=InOutName)*;

InOutNameListComma : (names+=InOutName ",")+;

Interface : (Storage? type=QType | "event") names=InOutNameList;

InterfaceComma : (Storage? type=QType | "event") names=InOutNameListComma;

InterfaceList : intf=Interface ( "," interfaces+=Interface)* ;

VerifTask : "[" "ProveE" "]"
            | "[" "ProveA" "]"
            | "[" "DisProveE" "]"
            | "[" "DisProveA" "]"
;

ControlList : "{" QNameList "}";

AssumeList : "with" "{" QNameList "}";

ProofGoalList : (name+=QName ":" "assume" expr+=UtyExpr ";"
              | name+=QName ":" "assume" expr+=UtyExpr ";" goals+=ProofGoalList
              | name+=QName ver+=VerifTask (ctrl+=ControlList)? ":" "assert" expr+=UtyExpr ass+=AssumeList? ";"
              | name+=QName ctr+=ControlList ":" "assert" expr+=UtyExpr ass+=AssumeList? ";"
              | name+=QName ":" "assert" expr+=UtyExpr ass+=AssumeList? ";")+;


FixpointEqList : (("mu"| "nu") name+=QName "=" expr+=UtyExpr ";")*;

OptUtyExpr : "_" | tk=UtyExpr;

OptUtyExprList : (OptUtyExpr ("," exprs+=OptUtyExprList)*)?;

UtyExprSelectList : ("[" tk=UtyExpr "]")+;

UtyExpr : "instant"
          | "inside"
          | "terminate"
          | "true"
          | "false"
          | BVCONST
          | OCTCONST
          | HEXCONST
          | NATCONST
          | REALCONST
          | QName
        //  | UtyExpr EQU UtyExpr
         // | UtyExpr XOR UtyExpr
         // | UtyExpr IMP UtyExpr
        //  | UtyExpr OR UtyExpr
        //  | UtyExpr AND UtyExpr
          | op=NOT expr=UtyExpr
        //  | UtyExpr "<" UtyExpr
        //  | UtyExpr "<=" UtyExpr
        //  | UtyExpr ">" UtyExpr
        //  | UtyExpr ">=" UtyExpr
       //  | UtyExpr "==" UtyExpr
        //  | UtyExpr "!=" UtyExpr
        //  | UtyExpr "-" UtyExpr
        //  | UtyExpr "+" UtyExpr
       //   | UtyExpr "%" UtyExpr
       //   | UtyExpr "/" UtyExpr
       //   | UtyExpr "*" UtyExpr
          | "+" UtyExpr
          | "-" UtyExpr
          | "abs" "(" UtyExpr ")"
          | "sat" "{" UtyExpr "}" "(" t7=UtyExpr ")"
          | "der" "(" UtyExpr ")"
         // | UtyExpr "{" UtyExpr "}"
        // | UtyExpr "@" UtyExpr
        //  | UtyExpr "{" UtyExpr ":" UtyExpr "}"
        //  | UtyExpr "{" UtyExpr ":" "}"
        //  | UtyExpr "{" ":" UtyExpr "}"
          | "reverse" "(" UtyExpr ")"
          | "{" UtyExpr "::" expr=UtyExpr "}"
        //  | UtyExpr UtyExprSelectList
        //  | UtyExpr "." UtyExpr
         // | "(" OptUtyExpr "," tl=OptUtyExprList ")"
         // | "(" UtyExpr "?" tm=UtyExpr ":" s=UtyExpr ")"
          //| QName "(" OptUtyExprList ")"
          | "next" "(" UtyExpr ")"
          | "nat2bv" "(" UtyExpr ")"
          | "int2bv" "(" UtyExpr ")"
          | "arr2bv" "(" QName ")"
          | "tup2bv" "(" UtyExpr ")"
          | "bv2nat" "(" UtyExpr ")"
          | "bv2int" "(" UtyExpr ")"
          | "nat2real" "(" UtyExpr ")"
          | "int2real" "(" UtyExpr ")"
          | "sin" "(" UtyExpr ")"
          | "cos" "(" UtyExpr ")"
          | "exp" "(" UtyExpr "," expr=UtyExpr ")"
          | "log" "(" UtyExpr "," expr=UtyExpr ")"
          | "sizeOf" "(" UtyExpr ")"
          | "forall" Generic expr=UtyExpr
          | "exists" Generic expr=UtyExpr
          | "sum" Generic expr=UtyExpr
          | "[" UtyExpr "SU" expr=UtyExpr "]"
          | "[" UtyExpr "SB" expr=UtyExpr "]"
          | "[" UtyExpr "SW" expr=UtyExpr "]"
          | "[" UtyExpr "WU" expr=UtyExpr "]"
          | "[" UtyExpr "WB" expr=UtyExpr "]"
          | "[" UtyExpr "WW" expr=UtyExpr "]"
          | "[" UtyExpr "PSU" expr=UtyExpr "]"
          | "[" UtyExpr "PSB" expr=UtyExpr "]"
          | "[" UtyExpr "PSW" expr=UtyExpr "]"
          | "[" UtyExpr "PMU" expr=UtyExpr "]"
          | "[" UtyExpr "PMB" expr=UtyExpr "]"
          | "[" UtyExpr "PMW" expr=UtyExpr "]"
          | "X" UtyExpr
          | "G" UtyExpr
          | "F" UtyExpr
          | "PA" UtyExpr
          | "PF" UtyExpr
          | "PSX" UtyExpr
          | "PMX" UtyExpr
          | "E" UtyExpr
          | "A" UtyExpr
          | "[]" UtyExpr
          | "<>" UtyExpr
          | "[:]" UtyExpr
          | "<:>" UtyExpr
          | "mu" name=QName "." expr=UtyExpr
          | "nu" name=QName "." expr=UtyExpr
          | "fixpoints" FixpointEqList "in" expr2=UtyExpr
          | "forall" name=QName ":" type=QType "." expr=UtyExpr
          | "exists" name=QName ":" type=QType "." expr=UtyExpr
          | "(" UtyExpr ")"
;

UtyAction : "emit" "(" UtyExpr ")"
            | "emit" "next" "(" UtyExpr ")"
            //| UtyExpr "=" t1=UtyExpr
            | "next" "(" UtyExpr ")" "=" t2=UtyExpr
            //| UtyExpr "<-" t3=UtyExpr
            | "der" "(" UtyExpr ")" "<-" t4=UtyExpr
            | "assume" "(" UtyExpr ")"
            | "assert" "(" UtyExpr ")"
            //| RELEASECAN "(" UtyExpr ")"
            | "release" "(" UtyExpr ")"
            | "constrainS" "(" UtyExpr ")"
            | "constrainM" "(" UtyExpr ")"
            | "constrainE" "(" UtyExpr ")"
            | "constrainSM" "(" UtyExpr ")"
            | "constrainSE" "(" UtyExpr ")"
            | "constrainME" "(" UtyExpr ")"
            | "constrainSME" "(" UtyExpr ")"
            | QName ":" "assume" "(" expr=UtyExpr ")"
            | QName ":" "assert" "(" expr=UtyExpr ")";

case_list : (exp+=dUtyExpr "do" stmt+=Stmt)*;

  dUtyExpr : "(" UtyExpr ")";

  dUtyExprs : dUtyExpr ";";

Generic : "(" QName "=" t6=UtyExpr ".." t5=UtyExpr ")";

LocStmt : (locals+=InterfaceList ";")* stmt=SeqStmt;

SeqStmt : (s+=AtomicStmt)+;

Stmt : left=SeqStmt (("||" | "|||" | OR | "&&" | "&&&" | AND) right+=SeqStmt)*;

AtomicStmt: "nothing" ";"
     | UtyAction ";"
     | (QName ":")? "pause" ";"
     | (QName ":")? "halt" ";"
     | QName ":" name=QName "(" exprs=OptUtyExprList ")" ";"
     | QName "(" exprs=OptUtyExprList ")" ";"
     | (QName ":")? "immediate"? "await" expr=dUtyExprs
     | (QName ":")? "weak"? "immediate"? "suspend" stmt=Stmt "when" ts=dUtyExprs
     | "weak"? "immediate"? "abort" Stmt "when" expr=dUtyExprs
     | "immediate"? ("during" | "final") Stmt "do" t03=Stmt
     | "do" Stmt "while" t06=dUtyExprs
     | "while" dUtyExpr t07=Stmt
     | "loop" Stmt
     | (QName ":")? "each" expr=dUtyExpr t08=Stmt
     | (QName ":")? "immediate"? "always" stmt=Stmt
     | (QName "," name=QName ":")? "every" expr=dUtyExpr t10=Stmt
     | "if" dUtyExpr t13=Stmt ("else" t14=Stmt)?
     | "case" case_list "default" t15=Stmt
     | "choose" Stmt "else" t16=Stmt
     | "for" Generic ("do" ("||" | "&&" | "|||" | "&&&" | OR | AND) )? t=Stmt
     | "choose" Generic t23=Stmt
     | "abstract" Stmt
     | "let" "(" QName "=" expr=UtyExpr ")" t24=Stmt
     | "{" LocStmt "}";
       
       // tokens
        /*--------- comments and whitespaces --------------------- */
      /*      | [` ` `\t`  `\012`]  { Token lexbuf}         (* skip whitespace   *)
      | [`\n` `\r`]         { UtyExprs.ParsedLineNo := (!UtyExprs.ParsedLineNo)+1;
                              Token lexbuf}*/
      /* ---- boolean operators ------- */    
NOT: "!" | "not";
AND: "&"| "and";
XOR: "^" | "xor";             
OR: "|" | "or";
IMP: "->" | "imp";         
EQU: "<->" | "equ";

terminal BVCONST: '0b'; // ('0' | '1')+;

terminal OCTCONST: "0o" ('0'..'7')+;
terminal HEXCONST: "0x"('0'..'9' | 'A'..'F')+;
terminal NATCONST: ('0'..'9')*; 
terminal REALCONST: ('+'|'-')?('0'..'9')+'.'('0'..'9')+('e'('+'|'-')?('0'..'9')+)?;
terminal ID:  ('a'..'z'|'A'..'Z') ('_'? ('a'..'z'|'A'..'Z'|'0'..'9'))*; 

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS			: (' '|'\t'|'\r'|'\n')+;