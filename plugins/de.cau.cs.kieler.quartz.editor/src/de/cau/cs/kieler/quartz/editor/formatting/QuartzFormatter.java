/*
 * generated by Xtext
 */
package de.cau.cs.kieler.quartz.editor.formatting;

import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting on how and when to
 * use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class QuartzFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected void configureFormatting(FormattingConfig c) {
        de.cau.cs.kieler.quartz.editor.services.QuartzGrammarAccess f = (de.cau.cs.kieler.quartz.editor.services.QuartzGrammarAccess) getGrammarAccess();
        Iterable<Keyword> keywords = GrammarUtil.containedKeywords(f.getGrammar());

        c.setIndentationSpace("  ");
        for (Keyword keyword : keywords) {
            if ((";".equals(keyword.getValue()))) {
                c.setNoSpace().before(keyword);
                c.setLinewrap().after(keyword);
            } else if ("{".equals(keyword.getValue())) {
                c.setLinewrap().after(keyword);
                c.setNoSpace().after(keyword);
            } else if ("}".equals(keyword.getValue())) {
                c.setLinewrap().after(keyword);
                c.setNoSpace().before(keyword);
            } else if (",".equals(keyword.getValue())  || ")".equals(keyword.getValue())) {
                c.setNoSpace().before(keyword);
            }else if ("(".equals(keyword.getValue()) || "?".equals(keyword.getValue())
                    || "!".equals(keyword.getValue())){
                c.setNoSpace().after(keyword);
            }
        }
        c.setIndentation(f.getLocStmtAccess().getLeftCurlyBracketKeyword_0(), f.getLocStmtAccess().getRightCurlyBracketKeyword_3()
                );
        c.setLinewrap(2).before(f.getML_COMMENTRule());
        c.setLinewrap().before(f.getSL_COMMENTRule());

    }
}
