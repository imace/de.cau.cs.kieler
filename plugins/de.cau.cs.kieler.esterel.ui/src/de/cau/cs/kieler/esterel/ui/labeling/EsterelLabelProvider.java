/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.ui.labeling;

import java.lang.reflect.Method;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class EsterelLabelProvider extends DefaultEObjectLabelProvider {

    @Inject
    public EsterelLabelProvider(AdapterFactoryLabelProvider delegate) {
        super(delegate);
    }

    /**
     * Returns a canonical label. The class name is presented followed by an optional name in case
     * the current element possesses a name attribute.
     */
    String text(EObject obj) {
        String name = "";
        try {
            Method m = obj.getClass().getMethod("getName", new Class[] {});
            name = " " + (String) m.invoke(obj);
        } catch (Exception e) {
            // just ignore exceptions. there's probably no name in that case.
        }

        String clazzName = obj.getClass().getSimpleName().replace("Impl", "");
        return clazzName + name;
    }

    /*
     * //Labels and icons can be computed like this:
     * 
     * String text(MyModel ele) { return "my "+ele.getName(); }
     * 
     * String image(MyModel ele) { return "MyModel.gif"; }
     */
}
