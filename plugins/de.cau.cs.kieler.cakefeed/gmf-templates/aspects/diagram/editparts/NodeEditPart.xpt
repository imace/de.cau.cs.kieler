/*
 * Copyright (c) 2006, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE additions FOR gmfgen::GenNode-»
	«IF self.editPartClassName = "FunctionBlockEditPart"-»
	/**
	 * @generated NOT
	 *
	 * @author schm
	 *
	 * @param notification The notification
	 *
	 * If the type of an FB has been changed, the ports are updated to reflect
	 * the changes.
	 *
	 */
	@SuppressWarnings("unchecked")
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		if (notification != null) {
			Object feat = notification.getFeature();
			if ((feat != null) && (feat instanceof org.eclipse.emf.ecore.impl.EReferenceImpl)) {
				org.eclipse.emf.ecore.impl.EReferenceImpl ref = (org.eclipse.emf.ecore.impl.EReferenceImpl)feat;
				String name = ref.getName();
				if ((name != null) && (name.equals("type"))) {
					Object newValue = notification.getNewValue();
					if ((newValue != null)
						&& ((newValue instanceof de.cau.cs.kieler.cakefeed.impl.CompositeFunctionBlockTypeImpl) 
							|| (newValue instanceof de.cau.cs.kieler.cakefeed.impl.BasicFunctionBlockTypeImpl))) {
						
						java.util.List children = this.getChildren();
						
						org.eclipse.emf.common.util.EList inputEvents = null;
						org.eclipse.emf.common.util.EList outputEvents = null;
						org.eclipse.emf.common.util.EList inputVars = null;
						org.eclipse.emf.common.util.EList outputVars = null;
						
						de.cau.cs.kieler.cakefeed.impl.FunctionBlockTypeImpl t = (de.cau.cs.kieler.cakefeed.impl.FunctionBlockTypeImpl)newValue;
						
						org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel typeNameLabel = null;
						
						if (newValue instanceof de.cau.cs.kieler.cakefeed.impl.CompositeFunctionBlockTypeImpl) {
							de.cau.cs.kieler.cakefeed.impl.CompositeFunctionBlockTypeImpl type = (de.cau.cs.kieler.cakefeed.impl.CompositeFunctionBlockTypeImpl)newValue;
							inputEvents = type.getInputEvents();
							outputEvents = type.getOutputEvents();
							inputVars = type.getInputVars();
							outputVars = type.getOutputVars();
						}
						else {
							de.cau.cs.kieler.cakefeed.impl.BasicFunctionBlockTypeImpl type = (de.cau.cs.kieler.cakefeed.impl.BasicFunctionBlockTypeImpl)newValue;
							inputEvents = type.getInputEvents();
							outputEvents = type.getOutputEvents();
							inputVars = type.getInputVars();
							outputVars = type.getOutputVars();
						}
						
						de.cau.cs.kieler.cakefeed.FunctionBlock fB = (de.cau.cs.kieler.cakefeed.FunctionBlock)((org.eclipse.gmf.runtime.notation.View)this.getModel()).getElement();
						
						// Delete old Events and Vars			
						deleteEventsAndVars(fB);
						
						// Delete Connections connected to this FB
						clearConnections(fB);
						
						if ((inputEvents != null) 
							&& (outputEvents != null) 
							&& (inputVars != null) 
							&& (outputVars != null)) {
							org.eclipse.emf.common.util.EList[] lists = new org.eclipse.emf.common.util.EList[4];
							lists[0] = inputEvents;
							lists[1] = outputEvents;
							lists[2] = inputVars;
							lists[3] = outputVars;
							
							for (int i = 0; i < 4; i++) {
								org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EObject> list = lists[i];
								for (org.eclipse.emf.ecore.EObject o : list) {
									org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = null;
									if (o instanceof de.cau.cs.kieler.cakefeed.IFInputEvent) {
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.bfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBInputEvent_3045;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.cfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.cfbtype.diagram.providers.CakefeedElementTypes.FBInputEvent_3035;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.fbnetwork.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.fbnetwork.diagram.providers.CakefeedElementTypes.FBInputEvent_3005;
										«ENDIF-»
									}
									else if (o instanceof de.cau.cs.kieler.cakefeed.IFOutputEvent) {
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.bfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBOutputEvent_3046;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.cfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.cfbtype.diagram.providers.CakefeedElementTypes.FBOutputEvent_3036;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.fbnetwork.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.fbnetwork.diagram.providers.CakefeedElementTypes.FBOutputEvent_3006;
										«ENDIF-»
									}
									else if (o instanceof de.cau.cs.kieler.cakefeed.IFInputVar) {
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.bfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBInputVar_3047;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.cfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.cfbtype.diagram.providers.CakefeedElementTypes.FBInputVar_3037;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.fbnetwork.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.fbnetwork.diagram.providers.CakefeedElementTypes.FBInputVar_3007;
										«ENDIF-»
									}
									else if (o instanceof de.cau.cs.kieler.cakefeed.IFOutputVar) {
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.bfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBOutputVar_3048;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.cfbtype.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.cfbtype.diagram.providers.CakefeedElementTypes.FBOutputVar_3038;
										«ENDIF-»
										«IF self.getEditPartQualifiedClassName() = "de.cau.cs.kieler.cakefeed.fbnetwork.diagram.edit.parts.FunctionBlockEditPart"-»
										elementType = de.cau.cs.kieler.cakefeed.fbnetwork.diagram.providers.CakefeedElementTypes.FBOutputVar_3008;
										«ENDIF-»
									}
									if (elementType != null) {
										org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest createRequest = org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory.getCreateShapeRequest(elementType, this.getDiagramPreferencesHint());
										org.eclipse.gef.commands.Command createCmd = this.getCommand(createRequest);
										this.getDiagramEditDomain().getDiagramCommandStack().execute(createCmd);									
									}
								}
							}
							// Adapt Events and Variables
							this.getDiagramEditDomain().getDiagramCommandStack().execute(
									new FBAdaptEventsAndVarsCommand("adaptEventsAndVariables", fB, t));
						}
						
					} else {
						de.cau.cs.kieler.cakefeed.FunctionBlock fB = (de.cau.cs.kieler.cakefeed.FunctionBlock) ((org.eclipse.gmf.runtime.notation.View) this
								.getModel()).getElement();
						deleteEventsAndVars(fB);
						clearConnections(fB);
					}
				}
			}
		}
	}

	private void deleteEventsAndVars(de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
		this.getDiagramEditDomain().getDiagramCommandStack().execute(
							new FBDeleteEventsAndVarsCommand("deleteEventsAndVariables", fB));
	}

	private void clearConnections(de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
		this.getDiagramEditDomain()
		.getDiagramCommandStack().execute(new ClearConnectionsCommand("clearConnections", fB));
	}

	public class FBCommand extends org.eclipse.gef.commands.Command {

		protected de.cau.cs.kieler.cakefeed.FunctionBlock functionBlock;
		
		public FBCommand (String label, de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
			super(label);
			functionBlock = fB;
		}
	}

	public class ClearConnectionsCommand extends FBCommand {

		public ClearConnectionsCommand(String label, 
				de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
			super(label, fB);
		}	
			
		public void execute() {
			org.eclipse.emf.ecore.EObject container = functionBlock.eContainer();
			if (container instanceof de.cau.cs.kieler.cakefeed.FunctionBlockNetwork) {
				de.cau.cs.kieler.cakefeed.FunctionBlockNetwork fBNetwork = (de.cau.cs.kieler.cakefeed.FunctionBlockNetwork)container;
				fBNetwork.getEventConnections().clear();
				fBNetwork.getDataConnections().clear();				
			}
		}
		
	}
	
	public class FBDeleteEventsAndVarsCommand extends FBCommand {

		public FBDeleteEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
			super(label, fB);
		}
		
		public void execute() {
			if (!(functionBlock.getInputEvents().isEmpty())) {
				functionBlock.getInputEvents().clear();
			}
			if (!(functionBlock.getOutputEvents().isEmpty())) {
				functionBlock.getOutputEvents().clear();
			}
			if (!(functionBlock.getInputVars().isEmpty())) {
				functionBlock.getInputVars().clear();
			}
			if (!(functionBlock.getOutputVars().isEmpty())) {
				functionBlock.getOutputVars().clear();
			}
		}
	}

	public class FBAdaptEventsAndVarsCommand extends FBCommand {

		protected de.cau.cs.kieler.cakefeed.FunctionBlockType functionBlockType;
		
		public FBAdaptEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FunctionBlock fB) {
			super(label, fB);
		}

		public FBAdaptEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FunctionBlock fB, de.cau.cs.kieler.cakefeed.FunctionBlockType fBType) {
			super(label, fB);
			functionBlockType = fBType;
		}
		
		public void execute() {
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFInputEvent> fBTypeInputEvents = functionBlockType.getInputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFOutputEvent> fBTypeOutputEvents = functionBlockType.getOutputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFInputVar> fBTypeInputVars = functionBlockType.getInputVars();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFOutputVar> fBTypeOutputVars = functionBlockType.getOutputVars();
			
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBInputEvent> fBInputEvents = functionBlock.getInputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBOutputEvent> fBOutputEvents = functionBlock.getOutputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBInputVar> fBInputVars = functionBlock.getInputVars();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBOutputVar> fBOutputVars = functionBlock.getOutputVars();
			
			if ((fBTypeInputEvents.size() == fBInputEvents.size()) 
				&& (fBTypeOutputEvents.size() == fBOutputEvents.size()) 
				&& (fBTypeInputVars.size() == fBInputVars.size()) 
				&& (fBTypeOutputVars.size() == fBOutputVars.size())) {
				for (int i = 0; i < fBTypeInputEvents.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getComment());
				}
				for (int i = 0; i < fBTypeOutputEvents.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getComment());
				}
				for (int i = 0; i < fBTypeInputVars.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getComment());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setInitialValue(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getInitialValue());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setArraySize(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getArraySize());
				}
				for (int i = 0; i < fBTypeOutputVars.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getComment());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setInitialValue(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getInitialValue());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setArraySize(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getArraySize());
				}
			}
		}
	}
	«ENDIF-»
	«IF self.editPartClassName = "FunctionBlockEditPart"-»
	protected boolean getCtrl(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBOutputEventEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}
	
	protected boolean getInput(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBInputVarEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}
	«ELSEIF self.editPartClassName = "BasicFunctionBlockTypeEditPart"-»
	protected boolean getCtrl(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof IFInputEventEditPart)
			|| (editPart instanceof IFOutputEventEditPart)
			|| (editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBOutputEventEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}
	
	protected boolean getInput(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof IFInputEventEditPart)
			|| (editPart instanceof IFInputVarEditPart)
			|| (editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBInputVarEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}
	«ELSEIF self.editPartClassName = "CompositeFunctionBlockTypeEditPart"-»
	protected boolean getCtrl(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof IFInputEventEditPart)
			|| (editPart instanceof IFOutputEventEditPart)
			|| (editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBOutputEventEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}
	
	protected boolean getInput(org.eclipse.gef.EditPart editPart) {
		if ((editPart instanceof IFInputEventEditPart)
			|| (editPart instanceof IFInputVarEditPart)
			|| (editPart instanceof FBInputEventEditPart)
			|| (editPart instanceof FBInputVarEditPart)
			) {
			return true;
		} else {
			return false;
		}
	}	
	«ENDIF-»
«ENDDEFINE»
