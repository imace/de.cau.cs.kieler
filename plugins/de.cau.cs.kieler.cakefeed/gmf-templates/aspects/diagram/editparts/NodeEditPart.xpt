/*
 * Copyright (c) 2006, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE additions FOR gmfgen::GenNode-»
	«IF self.editPartClassName = "FBEditPart"-»
	/**
	 * @generated NOT
	 *
	 * @author schm
	 *
	 * @param notification The notification
	 *
	 * If the type of an FB has been changed, the ports are updated to reflect
	 * the changes.
	 *
	 */
	@SuppressWarnings("unchecked")
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		if (notification != null) {
			Object feat = notification.getFeature();
			if ((feat != null) && (feat instanceof org.eclipse.emf.ecore.impl.EReferenceImpl)) {
				org.eclipse.emf.ecore.impl.EReferenceImpl ref = (org.eclipse.emf.ecore.impl.EReferenceImpl)feat;
				String name = ref.getName();
				if ((name != null) && (name.equals("Type"))) {
					Object newValue = notification.getNewValue();
					if ((newValue != null)
						&& ((newValue instanceof de.cau.cs.kieler.cakefeed.impl.CFBTypeImpl) 
							|| (newValue instanceof de.cau.cs.kieler.cakefeed.impl.BFBTypeImpl))) {
						
						org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart compartment = null;
						java.util.List children = this.getChildren();
						for (Object c : children) {
							if (c instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart) {
								compartment = (org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart)c;
							}
						}
						
						if (compartment != null) {
							org.eclipse.emf.common.util.EList inputEvents = null;
							org.eclipse.emf.common.util.EList outputEvents = null;
							org.eclipse.emf.common.util.EList inputVars = null;
							org.eclipse.emf.common.util.EList outputVars = null;
							
							de.cau.cs.kieler.cakefeed.impl.FBTypeImpl t = (de.cau.cs.kieler.cakefeed.impl.FBTypeImpl)newValue;
							
							org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel typeNameLabel = null;
							for (Object o : compartment.getChildren()) {
								if (o instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
									typeNameLabel = (org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel)o;
									typeNameLabel.setText(t.getName());
								}
							}
							
							if (newValue instanceof de.cau.cs.kieler.cakefeed.impl.CFBTypeImpl) {
								de.cau.cs.kieler.cakefeed.impl.CFBTypeImpl type = (de.cau.cs.kieler.cakefeed.impl.CFBTypeImpl)newValue;
								inputEvents = type.getInputEvents();
								outputEvents = type.getOutputEvents();
								inputVars = type.getInputVars();
								outputVars = type.getOutputVars();
							}
							else {
								de.cau.cs.kieler.cakefeed.impl.BFBTypeImpl type = (de.cau.cs.kieler.cakefeed.impl.BFBTypeImpl)newValue;
								inputEvents = type.getInputEvents();
								outputEvents = type.getOutputEvents();
								inputVars = type.getInputVars();
								outputVars = type.getOutputVars();
							}
							
							// Delete old Events and Vars
							de.cau.cs.kieler.cakefeed.FB fB = (de.cau.cs.kieler.cakefeed.FB)((org.eclipse.gmf.runtime.notation.View)this.getModel()).getElement();
							
							
							compartment.getDiagramEditDomain().getDiagramCommandStack().execute(
								new FBDeleteEventsAndVarsCommand("deleteEventsAndVariables", fB));
							
							/*EList[] oldLists = new EList[4];
							oldLists[0] = fB.getInputEvents();
							oldLists[1] = fB.getOutputEvents();
							oldLists[2] = fB.getInputVars();
							oldLists[3] = fB.getOutputVars();*/
							
							//--------new try
							/*
							EList<FBInputEvent> emptyFBIEList = new BasicEList<FBInputEvent>();
							EList<FBOutputEvent> emptyFBOEList = new BasicEList<FBOutputEvent>();
							EList<FBInputVar> emptyFBIVList = new BasicEList<FBInputVar>();
							EList<FBOutputVar> emptyFBOVList = new BasicEList<FBOutputVar>();
							
							ChangeChildPropertyValueRequest deleteFBIERequest = new ChangeChildPropertyValueRequest("", "", emptyFBIEList, "");
							ChangeChildPropertyValueRequest deleteFBOERequest = new ChangeChildPropertyValueRequest("", "", emptyFBOEList, "");
							ChangeChildPropertyValueRequest deleteFBIVRequest = new ChangeChildPropertyValueRequest("", "", emptyFBIVList, "");
							ChangeChildPropertyValueRequest deleteFBOVRequest = new ChangeChildPropertyValueRequest("", "", emptyFBOVList, "");
							*/
							//--------end of new try
							
							/*for (int i = 0; i < 4; i++) {
								EList<EObject> l = oldLists[i];
								for (EObject o : l) {
									//Request deleteRequest = null;
									//Command deleteCmd = compartment.getCommand(deleteRequest);
									compartment.getDiagramEditDomain().getDiagramCommandStack().execute(
											new Command("deleteEventsAndVariables") {
												protected void doExecute() {
													// delete o
													
												}
											});
								}
							}*/
							// End of Delete old Events and Vars
							
							if ((inputEvents != null) 
								&& (outputEvents != null) 
								&& (inputVars != null) 
								&& (outputVars != null)) {
								org.eclipse.emf.common.util.EList[] lists = new org.eclipse.emf.common.util.EList[4];
								lists[0] = inputEvents;
								lists[1] = outputEvents;
								lists[2] = inputVars;
								lists[3] = outputVars;
								
								for (int i = 0; i < 4; i++) {
									org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EObject> list = lists[i];
									for (org.eclipse.emf.ecore.EObject o : list) {
										org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = null;
										if (o instanceof de.cau.cs.kieler.cakefeed.IFInputEvent) {
											elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBInputEvent_3020;
										}
										else if (o instanceof de.cau.cs.kieler.cakefeed.IFOutputEvent) {
											elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBOutputEvent_3021;
										}
										else if (o instanceof de.cau.cs.kieler.cakefeed.IFInputVar) {
											elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBInputVar_3022;
										}
										else if (o instanceof de.cau.cs.kieler.cakefeed.IFOutputVar) {
											elementType = de.cau.cs.kieler.cakefeed.bfbtype.diagram.providers.CakefeedElementTypes.FBOutputVar_3023;
										}
										if ((compartment != null) && (elementType != null)) {
											org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest createRequest = org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory.getCreateShapeRequest(elementType, this.getDiagramPreferencesHint());
											org.eclipse.gef.commands.Command createCmd = compartment.getCommand(createRequest);
											compartment.getDiagramEditDomain().getDiagramCommandStack().execute(createCmd);									
										}
									}
								}
								// Adapt Events and Variables
								compartment.getDiagramEditDomain().getDiagramCommandStack().execute(
										new FBAdaptEventsAndVarsCommand("adaptEventsAndVariables", fB, t));
							}
						}	
					}
				}
			}
		}
	}

	public class FBCommand extends org.eclipse.gef.commands.Command {

		protected de.cau.cs.kieler.cakefeed.FB functionBlock;
		
		public FBCommand (String label, de.cau.cs.kieler.cakefeed.FB fB) {
			super(label);
			functionBlock = fB;
		}
	}
	
	public class FBDeleteEventsAndVarsCommand extends FBCommand {

		public FBDeleteEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FB fB) {
			super(label, fB);
		}
		
		public void execute() {
			if (!(functionBlock.getInputEvents().isEmpty())) {
				functionBlock.getInputEvents().clear();
			}
			if (!(functionBlock.getOutputEvents().isEmpty())) {
				functionBlock.getOutputEvents().clear();
			}
			if (!(functionBlock.getInputVars().isEmpty())) {
				functionBlock.getInputVars().clear();
			}
			if (!(functionBlock.getOutputVars().isEmpty())) {
				functionBlock.getOutputVars().clear();
			}
		}
	}

	public class FBAdaptEventsAndVarsCommand extends FBCommand {

		protected de.cau.cs.kieler.cakefeed.FBType functionBlockType;
		
		public FBAdaptEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FB fB) {
			super(label, fB);
		}

		public FBAdaptEventsAndVarsCommand(String label, de.cau.cs.kieler.cakefeed.FB fB, de.cau.cs.kieler.cakefeed.FBType fBType) {
			super(label, fB);
			functionBlockType = fBType;
		}
		
		public void execute() {
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFInputEvent> fBTypeInputEvents = functionBlockType.getInputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFOutputEvent> fBTypeOutputEvents = functionBlockType.getOutputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFInputVar> fBTypeInputVars = functionBlockType.getInputVars();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.IFOutputVar> fBTypeOutputVars = functionBlockType.getOutputVars();
			
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBInputEvent> fBInputEvents = functionBlock.getInputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBOutputEvent> fBOutputEvents = functionBlock.getOutputEvents();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBInputVar> fBInputVars = functionBlock.getInputVars();
			org.eclipse.emf.common.util.EList<de.cau.cs.kieler.cakefeed.FBOutputVar> fBOutputVars = functionBlock.getOutputVars();
			
			if ((fBTypeInputEvents.size() == fBInputEvents.size()) 
				&& (fBTypeOutputEvents.size() == fBOutputEvents.size()) 
				&& (fBTypeInputVars.size() == fBInputVars.size()) 
				&& (fBTypeOutputVars.size() == fBOutputVars.size())) {
				for (int i = 0; i < fBTypeInputEvents.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBInputEvent)(fBInputEvents.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFInputEvent)(fBTypeInputEvents.get(i))).getComment());
				}
				for (int i = 0; i < fBTypeOutputEvents.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBOutputEvent)(fBOutputEvents.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFOutputEvent)(fBTypeOutputEvents.get(i))).getComment());
				}
				for (int i = 0; i < fBTypeInputVars.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getComment());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setInitialValue(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getInitialValue());
					((de.cau.cs.kieler.cakefeed.FBInputVar)(fBInputVars.get(i))).setArraySize(((de.cau.cs.kieler.cakefeed.IFInputVar)(fBTypeInputVars.get(i))).getArraySize());
				}
				for (int i = 0; i < fBTypeOutputVars.size(); i++) {
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setType(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getType());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setName(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getName());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setComment(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getComment());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setInitialValue(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getInitialValue());
					((de.cau.cs.kieler.cakefeed.FBOutputVar)(fBOutputVars.get(i))).setArraySize(((de.cau.cs.kieler.cakefeed.IFOutputVar)(fBTypeOutputVars.get(i))).getArraySize());
				}
			}
		}
	}
	«ENDIF-»
«ENDDEFINE»
