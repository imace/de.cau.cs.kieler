/*
 * Copyright (c) 2006, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE additions FOR gmfgen::GenCompartment»
	«IF self.editPartClassName != "FBDFBDCompartmentEditPart"-»
		/**
		 * 
		 * @author schm
		 * 
		 * A layout for FBCompartments. The three decoration figures are laid out
		 * at a certain size and the ports are arranged on the sides.
		 * In addition, FBNetworks and Algorithms are laid out in the middle of the
		 * decoration figures. 
		 *
		 */
		@SuppressWarnings("unchecked")
		public class FBCompartmentLayout extends org.eclipse.draw2d.XYLayout {
			
			protected int fBWidth = 0;
			protected int fBHeight = 0;
			protected Boolean rectAssigned = false;
			protected Boolean lineAssigned = false;
			protected org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel typeNameLabel = null;
			protected org.eclipse.draw2d.RoundedRectangle ctrlRect = null;
			protected org.eclipse.draw2d.RoundedRectangle dataRect = null;
			protected org.eclipse.draw2d.RectangleFigure typeRect = null;
			protected org.eclipse.draw2d.RectangleFigure lineRect1 = null;
			protected org.eclipse.draw2d.RectangleFigure lineRect2 = null;
			protected java.util.List<IFInputEventEditPart.IFInputEventFigureDescriptor> inputEvents = new java.util.LinkedList<IFInputEventEditPart.IFInputEventFigureDescriptor>();
			protected java.util.List<IFOutputEventEditPart.IFOutputEventFigureDescriptor> outputEvents = new java.util.LinkedList<IFOutputEventEditPart.IFOutputEventFigureDescriptor>();
			protected java.util.List<IFInputVarEditPart.IFInputVarFigureDescriptor> inputVars = new java.util.LinkedList<IFInputVarEditPart.IFInputVarFigureDescriptor>();
			protected java.util.List<IFOutputVarEditPart.IFOutputVarFigureDescriptor> outputVars = new java.util.LinkedList<IFOutputVarEditPart.IFOutputVarFigureDescriptor>();
		
			public void layout(final org.eclipse.draw2d.IFigure parent) {
		        if (!parent.isVisible()) {
		            return;
		        }
		
		        // Search children for specific figures and store their references
		        java.util.List<org.eclipse.draw2d.IFigure> children = parent.getChildren();
		        for (org.eclipse.draw2d.IFigure c : children) {
					if (c instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
						typeNameLabel = (org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel)c;
					}
					else if (c instanceof org.eclipse.draw2d.RoundedRectangle) {
						if (rectAssigned) {
							dataRect = (org.eclipse.draw2d.RoundedRectangle)c;
						}
						else {
							ctrlRect = (org.eclipse.draw2d.RoundedRectangle)c;
							rectAssigned = true;
						}
					}
					else if (c instanceof org.eclipse.draw2d.RectangleFigure) {
						if (((org.eclipse.draw2d.RectangleFigure)c).getForegroundColor().equals(org.eclipse.draw2d.ColorConstants.lightGray)) {
							typeRect = (org.eclipse.draw2d.RectangleFigure)c;
						}
						else if (lineAssigned) {
							lineRect2 = (org.eclipse.draw2d.RectangleFigure)c;
						}
						else {
							lineRect1 = (org.eclipse.draw2d.RectangleFigure)c;
							lineAssigned = true;
						}
					}
					else if (c instanceof IFInputEventEditPart.IFInputEventFigureDescriptor) {
						inputEvents.add((IFInputEventEditPart.IFInputEventFigureDescriptor)c);
					}
					else if (c instanceof IFOutputEventEditPart.IFOutputEventFigureDescriptor) {
						outputEvents.add((IFOutputEventEditPart.IFOutputEventFigureDescriptor)c);
					}
					else if (c instanceof IFInputVarEditPart.IFInputVarFigureDescriptor) {
						inputVars.add((IFInputVarEditPart.IFInputVarFigureDescriptor)c);
					}
					else if (c instanceof IFOutputVarEditPart.IFOutputVarFigureDescriptor) {
						outputVars.add((IFOutputVarEditPart.IFOutputVarFigureDescriptor)c);
					}
					/*else if (c instanceof FBDEditPart.FBDFigureDescriptor) {
						inputEvents.add((FBDEditPart.FBDFigureDescriptor)c);
					}
					else if (c instanceof STEditPart.STFigureDescriptor) {
						inputEvents.add((STEditPart.STFigureDescriptor)c);
					}
					else if (c instanceof LDEditPart.LDFigureDescriptor) {
						inputEvents.add((LDEditPart.LDFigureDescriptor)c);
					}
					else if (c instanceof OtherEditPart.OtherFigureDescriptor) {
						inputEvents.add((OtherEditPart.OtherFigureDescriptor)c);
					}*/
				}
		        // Retrieve the needed information for the layout
		        org.eclipse.draw2d.geometry.Rectangle clientArea = parent.getClientArea();
		        fBWidth = clientArea.width;
		        fBHeight = clientArea.height;
		        
		        // Lay out the figures
		        org.eclipse.draw2d.geometry.Rectangle newBounds = new org.eclipse.draw2d.geometry.Rectangle();
		        /*if (typeNameLabel != null) {
		        	int width = typeNameLabel.getPreferredSize().width;
		        	if (width > fBWidth) {
		        		newBounds.x = 0;
		        	}
		        	else {
		        		newBounds.x = (fBWidth - width)/2;
		        	}
		        	newBounds.y = 0;
		        	newBounds.width = width;
		        	newBounds.height = typeNameLabel.getPreferredSize().height;
		        	typeNameLabel.setBounds(newBounds);
		        }*/
		        if (ctrlRect != null) {
		        	newBounds.x = 0;
		        	newBounds.y = 0;
		        	newBounds.width = fBWidth;
		        	newBounds.height = calculateCtrlRectHeight();
		        	ctrlRect.setBounds(newBounds);
		        }
		        if (typeRect != null) {
		        	newBounds.x = 20;
		        	newBounds.y = ctrlRect.getBounds().height;
		        	newBounds.width = fBWidth - 40;
		        	newBounds.height = calculateTypeRectHeight();
		        	ctrlRect.setBounds(newBounds);
		        }
		        if (dataRect != null) {
		        	newBounds.x = 0;
		        	newBounds.y = ctrlRect.getBounds().height + typeRect.getBounds().height;
		        	newBounds.width = fBWidth;
		        	newBounds.height = calculateDataRectHeight();
		        	dataRect.setBounds(newBounds);
		        }
		        if (lineRect1 != null) {
		        	newBounds.x = typeRect.getBounds().x;
		        	newBounds.y = typeRect.getBounds().y;
		        	newBounds.width = 1;
		        	newBounds.height = typeRect.getBounds().height;
		        	lineRect1.setBounds(newBounds);
		        }
		        if (lineRect2 != null) {
		        	newBounds.x = typeRect.getBounds().x + typeRect.getBounds().width;
		        	newBounds.y = typeRect.getBounds().y;
		        	newBounds.width = 1;
		        	newBounds.height = typeRect.getBounds().height;
		        	lineRect2.setBounds(newBounds);
		        }
		        if (typeNameLabel != null) {
		        	int width = typeNameLabel.getPreferredSize().width;
		        	int typeRectHeight = typeRect.getBounds().height;
		        	if (width > fBWidth) {
		        		newBounds.x = typeRect.getBounds().x;
		        	}
		        	else {
		        		newBounds.x = (fBWidth - width) / 2;
		        	}
		        	int height = typeNameLabel.getPreferredSize().height;
		        	if (height > typeRectHeight) {
		        		newBounds.y = typeRect.getBounds().y;
		        	}
		        	else {
		        		newBounds.y = (typeRectHeight - height) / 2;
		        	}
		        	newBounds.width = width;
		        	newBounds.height = typeNameLabel.getPreferredSize().height;
		        	typeNameLabel.setBounds(newBounds);
		        }
		        int size = inputEvents.size();
		        newBounds.x = 0;
		        newBounds.y = 0;
		        for (org.eclipse.draw2d.Figure ie : inputEvents) {
		        	newBounds.width = ie.getPreferredSize().width;
		            newBounds.height = ie.getMinimumSize().height;
		        	ie.setBounds(newBounds);
					newBounds.y += ctrlRect.getBounds().width / size;
				}
		        size = outputEvents.size();
		        newBounds.y = 0;
		        for (org.eclipse.draw2d.Figure oe : outputEvents) {
		        	int width = oe.getPreferredSize().width;
		        	if (width > fBWidth) {
		        		newBounds.x = 0;
		        	}
		        	else {
		        		newBounds.x = fBWidth - width;
		        	}
		        	newBounds.width = oe.getPreferredSize().width;
		            newBounds.height = oe.getMinimumSize().height;
		        	oe.setBounds(newBounds);
					newBounds.y += ctrlRect.getBounds().width / size;
				}
		        size = inputVars.size();
		        newBounds.x = 0;
		        newBounds.y = dataRect.getBounds().y;
		        for (org.eclipse.draw2d.Figure iv : inputVars) {
		        	newBounds.width = iv.getPreferredSize().width;
		            newBounds.height = iv.getMinimumSize().height;
		        	iv.setBounds(newBounds);
					newBounds.y += dataRect.getBounds().width / size;
				}
		        size = outputVars.size();
		        newBounds.y = dataRect.getBounds().y;
		        for (org.eclipse.draw2d.Figure ov : outputVars) {
		        	int width = ov.getPreferredSize().width;
		        	if (width > fBWidth) {
		        		newBounds.x = 0;
		        	}
		        	else {
		        		newBounds.x = fBWidth - width;
		        	}
		        	newBounds.width = ov.getPreferredSize().width;
		            newBounds.height = ov.getMinimumSize().height;
		        	ov.setBounds(newBounds);
					newBounds.y += dataRect.getBounds().width / size;
				}
			}
		
			private int calculateDataRectHeight() {
				int numberCtrl = getNumberCtrl();
				int numberData = getNumberData();
				return (fBHeight / (numberCtrl + numberData + 1)) * numberData;
			}
		
			private int getNumberData() {
				int numberData = inputVars.size();
				if (outputVars.size() > numberData) {
					numberData = outputVars.size();
				}
				if (numberData == 0) {
					return 1;
				}
				return numberData;
			}
		
			private int getNumberCtrl() {
				int numberCtrl = inputEvents.size();
				if (outputEvents.size() > numberCtrl) {
					numberCtrl = outputEvents.size();
				}
				if (numberCtrl == 0) {
					return 1;
				}
				return numberCtrl;
			}
		
			private int calculateTypeRectHeight() {
				int numberCtrl = getNumberCtrl();
				int numberData = getNumberData();
				return fBHeight / (numberCtrl + numberData + 1);
			}
		
			private int calculateCtrlRectHeight() {
				int numberCtrl = getNumberCtrl();
				int numberData = getNumberData();
				return (fBHeight / (numberCtrl + numberData + 1)) * numberCtrl;
			}
			
		}
	«ENDIF-»
«ENDDEFINE»