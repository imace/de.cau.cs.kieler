/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2011 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.klighd.triggers;

import java.util.List;

import de.cau.cs.kieler.core.kivi.AbstractTrigger;
import de.cau.cs.kieler.core.kivi.AbstractTriggerState;
import de.cau.cs.kieler.core.kivi.ITrigger;
import de.cau.cs.kieler.klighd.IViewer;
import de.cau.cs.kieler.klighd.ViewContext;

/**
 * A KiVi trigger which listens on the selection of diagram elements in KLighD diagrams.
 * 
 * @author mri
 */
public class SelectionTrigger extends AbstractTrigger {

    /** the trigger instance. */
    private static SelectionTrigger instance = null;

    /**
     * Returns the trigger instance.
     * 
     * @return the instance of this trigger
     */
    public static SelectionTrigger getInstance() {
        return instance;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void register() {
        instance = this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void unregister() {
        instance = null;
    }

    /**
     * The state generated by a selection trigger. Contains information about the selected diagram
     * object and it's represented model object.
     */
    public static class SelectionState extends AbstractTriggerState {

        /** the id of the view associated with this selection. */
        private String viewId;
        /** the view context in which the selection occurred. */
        private ViewContext viewContext;
        /** the viewer in which the selection occurred. */
        private IViewer<?> viewer;
        /** the selection objects. */
        private List<SelectionObject> selections;
        /** whether this state represents a selection or an unselection. */
        private boolean selected;

        /**
         * Constructs a selection state with a given list of diagram objects and the represented
         * model objects which have been selected or unselected.
         * 
         * @param viewId
         *            the id of the view associated with the selection
         * @param viewContext
         *            the view context in which the selection occurred
         * @param viewer
         *            the viewer in which the selection occurred
         * @param selections
         *            a list of selection objects
         * @param selected
         *            true if this state represents a selection; false if it represents an
         *            unselection
         */
        public SelectionState(final String viewId, final ViewContext viewContext,
                final IViewer<?> viewer, final List<SelectionObject> selections,
                final boolean selected) {
            this.viewId = viewId;
            this.viewContext = viewContext;
            this.viewer = viewer;
            this.selections = selections;
            this.selected = selected;
        }

        /**
         * Returns the id of the view associated with this selection.
         * 
         * @return the id of view
         */
        public String getViewId() {
            return viewId;
        }

        /**
         * Returns the view context in which the selection occurred.
         * 
         * @return the view context
         */
        public ViewContext getViewContext() {
            return viewContext;
        }

        /**
         * Returns the viewer in which the selection occurred.
         * 
         * @return the viewer
         */
        public IViewer<?> getViewer() {
            return viewer;
        }

        /**
         * Returns the selection objects.
         * 
         * @return the selection objects
         */
        public List<SelectionObject> getSelections() {
            return selections;
        }

        /**
         * Returns whether this state represents a selection.
         * 
         * @return true if this state represents a selection; false if it represents an unselection
         */
        public boolean isSelection() {
            return selected;
        }

        /**
         * {@inheritDoc}
         */
        public Class<? extends ITrigger> getTriggerClass() {
            return SelectionTrigger.class;
        }

    }

    /**
     * A class for representing the pair of a diagram object and the model object it's representing.
     */
    public static class SelectionObject {

        /** the diagram object. */
        private Object diagramObject;
        /** the model object. */
        private Object modelObject;

        /**
         * Constructs a selection object.
         * 
         * @param diagramObject
         *            the diagram object
         * @param modelObject
         *            the model object
         */
        public SelectionObject(final Object diagramObject, final Object modelObject) {
            this.diagramObject = diagramObject;
            this.modelObject = modelObject;
        }

        /**
         * Returns the diagram object.
         * 
         * @return the diagram object
         */
        public Object getDiagramObject() {
            return diagramObject;
        }

        /**
         * Returns the model object.
         * 
         * @return the model object
         */
        public Object getModelObject() {
            return modelObject;
        }

    }

}
