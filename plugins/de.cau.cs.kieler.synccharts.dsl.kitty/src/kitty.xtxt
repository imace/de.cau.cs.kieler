// specify your DSL grammar rules here ...
// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation

/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2009 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
/***************************************************************/
// specify your DSL grammar rules here ...
// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 
//'overwrite.pluginresources=false' AFTER first generation
/***************************************************************/
// @schm: preventMMGeneration
//importMetamodel "http://www.informatik.uni-kiel.de/rtsys/ssm2" as ssm2;
/***************************************************************/
// A StateChart has an identifier(name) and a CState, which is mainly the State and Transition declarations
// It also references two lists: IODeclarations and optional Chart Arguments  
/***************************************************************/

// modified KIT grammar

Chart :
	"statechart" name=SableCCIdentifier // bla.bla is possible now
		 ("[" (chartArgs+=ChartArgument ";")* chartArgs+=ChartArgument ";"? "]")?
			"{" 
				(iodeclarations+=IoDeclaration)* 
				cstate=CState	
			"}" ";"
;
String StateChartIdentifier:
	("_"|"#"|"."|ID)+
;
String SableCCIdentifier:
	("_"|"#"|"."|ID|INT)*
;
/***************************************************************/
// Chart Arguments: (optional) model and version information
// SableCC_cargument:=[firstcarguments* lastcargument]
/***************************************************************/
ChartArgument:	
	  "model" "=" model=STRING  
	| "version" "=" version=STRING // 5.0 is possible now
;	
/***************************************************************/
// IO Declarations: input, output or variable
// SableCC_iodeclaration:= decl_typ declaration";"
/***************************************************************/
IoDeclaration:
	type=DeclarationType //decl_typ
	name=SableCCIdentifier (":" "=" initialValue=INT)? (":" varEventType=VarEventType)? //declaration
	";"
;	
Enum DeclarationType:	
	input="input" | output="output" | variable="var"
;	
Enum VarEventType: 		boolean="boolean"| double="double"| float="float" | integer="integer" 
                   | 	combPlus="combine integer with +" | combMal="combine integer with *"
;	
/***************************************************************/
// CState: State and TransitionsStateIdentifier
// SableCC_cstate:=sargument? "{" region? element* "}" ";"
/***************************************************************/
CState: 
	("[" (stateArgs+=StateArgument ";")* stateArgs+=StateArgument ";"? "]")? // sargument?
	
	"{" 
	(firstRegion=Region)? // region?
	//(elements+=Element)* // element*
	(states+=State | transitions+=Transition | "||" (innerRegions+=Region)?)*
	"}" ";"
;
/***************************************************************/
//sargument
/***************************************************************/
//StateFlag:
//normal = "normal" | intial= "initial" | final="final" 
//;
//StateKind: 
//normal="normal" | pseudo="pseudo" |  reference="reference" | textual="textual"
//;
StateArgument:
	  "label" "=" label=STRING //label
	| "type" "=" type=Pseudo //type
	| event=Event //new event
	| variable=Variable //new variable
	| "doActivity" "=" doAction=STRING //do action
	| "do" "=" doAction=STRING //do action
	| "entryActivity" "=" entryAction=STRING //entry action
	| "entry" "=" entryAction=STRING //entry action
	| "exitActivity" "=" exitAction=STRING //exit action
	| "exit" "=" exitAction=STRING //exit action
;
Enum Pseudo: 
final="final" | initial="initial" | history="history" | choice="choice" | dynamicchoice="dynamicchoice" | suspend="suspend"
;
Event:
"localEvent" "=" localEvent=STRING
;
Variable:
"localVariable" "=" localVariable=STRING
;	
/***************************************************************/
//regions
/***************************************************************/
Region:
"<" regionID=SableCCIdentifier ">" ("[" (regArgs+=RegionArgument ";")* stateArgs+=RegionArgument ";"? "]")?
;
RegionArgument:
  		"label" "=" label=STRING //label
	|	 event=Event //new event
	|	 variable=Variable //new variable
;

/***************************************************************/
//elements
/***************************************************************/

//Element:
//	 state=State //state
//	|transition=Transition //transition
//	| "||" (region=Region)? //region ;
State:
	  name=SableCCIdentifier ("[" (stateArgs+=StateArgument ";")* stateArgs+=StateArgument ";"? "]")? ";" // simple state
	| name=SableCCIdentifier cstate=CState // composite state
;
Transition:
	InitialTransition | NonInitialTransition
;
InitialTransition: //(sourceState=SableCCIdentifier)?
	 "->" (targetState=SableCCIdentifier) 
		("[" (transArgs+=TransArgument ";")* transArgs+=TransArgument ";"? "]")?";" 
;
NonInitialTransition: 
(sourceState=SableCCIdentifier)? "->" (targetState=SableCCIdentifier) 
		("[" (transArgs+=TransArgument ";")* transArgs+=TransArgument ";"? "]")?";" 
;
TransArgument:
	  "label" "=" label=STRING //label
	| "type" "=" type=TransitionType //type
	| "priority" "=" priority=STRING //SableCCInt // priority
;

Enum TransitionType:
	  weakabortion="weakAbortion"  
	| wa="wa"
	| strongabortion= "strongAbortion"  
	| sa= "sa"
	| normaltermination= "normalTermination"  
	| nt="nt"	
	| suspension= "suspension" 
	| sp= "sp"
	| conditional= "conditional" 
	| co="co"
	| internal= "internal" 
	| it="it"	
;	
