/*
* generated by Xtext
*/
grammar InternalInterfaces;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.text.interfaces.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.text.interfaces.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.synccharts.text.interfaces.services.InterfacesGrammarAccess;

}

@parser::members {
 
 	private InterfacesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InterfacesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleStateExtend
entryRuleStateExtend 
:
{ before(grammarAccess.getStateExtendRule()); }
	 ruleStateExtend
{ after(grammarAccess.getStateExtendRule()); } 
	 EOF 
;

// Rule StateExtend
ruleStateExtend
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getStateExtendAccess().getAlternatives()); }
(rule__StateExtend__Alternatives)
{ after(grammarAccess.getStateExtendAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getStateExtendAccess().getAlternatives()); }
(rule__StateExtend__Alternatives)*
{ after(grammarAccess.getStateExtendAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegionSignalDec
entryRuleRegionSignalDec 
:
{ before(grammarAccess.getRegionSignalDecRule()); }
	 ruleRegionSignalDec
{ after(grammarAccess.getRegionSignalDecRule()); } 
	 EOF 
;

// Rule RegionSignalDec
ruleRegionSignalDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup()); }
(rule__RegionSignalDec__Group__0)
{ after(grammarAccess.getRegionSignalDecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariables
entryRuleVariables 
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariablesAccess().getGroup()); }
(rule__Variables__Group__0)
{ after(grammarAccess.getVariablesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignals
entryRuleSignals 
:
{ before(grammarAccess.getSignalsRule()); }
	 ruleSignals
{ after(grammarAccess.getSignalsRule()); } 
	 EOF 
;

// Rule Signals
ruleSignals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalsAccess().getGroup()); }
(rule__Signals__Group__0)
{ after(grammarAccess.getSignalsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputSignals
entryRuleInputSignals 
:
{ before(grammarAccess.getInputSignalsRule()); }
	 ruleInputSignals
{ after(grammarAccess.getInputSignalsRule()); } 
	 EOF 
;

// Rule InputSignals
ruleInputSignals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputSignalsAccess().getGroup()); }
(rule__InputSignals__Group__0)
{ after(grammarAccess.getInputSignalsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputSignals
entryRuleOutputSignals 
:
{ before(grammarAccess.getOutputSignalsRule()); }
	 ruleOutputSignals
{ after(grammarAccess.getOutputSignalsRule()); } 
	 EOF 
;

// Rule OutputSignals
ruleOutputSignals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputSignalsAccess().getGroup()); }
(rule__OutputSignals__Group__0)
{ after(grammarAccess.getOutputSignalsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInOutputSignals
entryRuleInOutputSignals 
:
{ before(grammarAccess.getInOutputSignalsRule()); }
	 ruleInOutputSignals
{ after(grammarAccess.getInOutputSignalsRule()); } 
	 EOF 
;

// Rule InOutputSignals
ruleInOutputSignals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInOutputSignalsAccess().getGroup()); }
(rule__InOutputSignals__Group__0)
{ after(grammarAccess.getInOutputSignalsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignal
entryRuleSignal 
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalAccess().getAlternatives()); }
(rule__Signal__Alternatives)
{ after(grammarAccess.getSignalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleEffect
entryRuleEffect 
:
{ before(grammarAccess.getEffectRule()); }
	 ruleEffect
{ after(grammarAccess.getEffectRule()); } 
	 EOF 
;

// Rule Effect
ruleEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectAccess().getAlternatives()); }
(rule__Effect__Alternatives)
{ after(grammarAccess.getEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmission
entryRuleEmission 
:
{ before(grammarAccess.getEmissionRule()); }
	 ruleEmission
{ after(grammarAccess.getEmissionRule()); } 
	 EOF 
;

// Rule Emission
ruleEmission
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmissionAccess().getGroup()); }
(rule__Emission__Group__0)
{ after(grammarAccess.getEmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextEffect
entryRuleTextEffect 
:
{ before(grammarAccess.getTextEffectRule()); }
	 ruleTextEffect
{ after(grammarAccess.getTextEffectRule()); } 
	 EOF 
;

// Rule TextEffect
ruleTextEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextEffectAccess().getGroup()); }
(rule__TextEffect__Group__0)
{ after(grammarAccess.getTextEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getAlternatives()); }
(rule__CompareOperation__Alternatives)
{ after(grammarAccess.getCompareOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression 
:
{ before(grammarAccess.getNotOrValuedExpressionRule()); }
	 ruleNotOrValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionRule()); } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
(rule__NotOrValuedExpression__Alternatives)
{ after(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedExpression
entryRuleValuedExpression 
:
{ before(grammarAccess.getValuedExpressionRule()); }
	 ruleValuedExpression
{ after(grammarAccess.getValuedExpressionRule()); } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
	ruleAddExpression
{ after(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubExpression
entryRuleSubExpression 
:
{ before(grammarAccess.getSubExpressionRule()); }
	 ruleSubExpression
{ after(grammarAccess.getSubExpressionRule()); } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup()); }
(rule__SubExpression__Group__0)
{ after(grammarAccess.getSubExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModExpression
entryRuleModExpression 
:
{ before(grammarAccess.getModExpressionRule()); }
	 ruleModExpression
{ after(grammarAccess.getModExpressionRule()); } 
	 EOF 
;

// Rule ModExpression
ruleModExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModExpressionAccess().getGroup()); }
(rule__ModExpression__Group__0)
{ after(grammarAccess.getModExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
(rule__NotExpression__Alternatives)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression 
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
(rule__AtomicExpression__Alternatives)
{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression 
:
{ before(grammarAccess.getAtomicValuedExpressionRule()); }
	 ruleAtomicValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionRule()); } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
(rule__AtomicValuedExpression__Alternatives)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivExpression
entryRuleDivExpression 
:
{ before(grammarAccess.getDivExpressionRule()); }
	 ruleDivExpression
{ after(grammarAccess.getDivExpressionRule()); } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup()); }
(rule__DivExpression__Group__0)
{ after(grammarAccess.getDivExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression 
:
{ before(grammarAccess.getValuedObjectTestExpressionRule()); }
	 ruleValuedObjectTestExpression
{ after(grammarAccess.getValuedObjectTestExpressionRule()); } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
(rule__ValuedObjectTestExpression__Alternatives)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference 
:
{ before(grammarAccess.getValuedObjectReferenceRule()); }
	 ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectReferenceRule()); } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment()); }
(rule__ValuedObjectReference__ValuedObjectAssignment)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup()); }
(rule__TextExpression__Group__0)
{ after(grammarAccess.getTextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation 
:
{ before(grammarAccess.getCommentAnnotationRule()); }
	 ruleCommentAnnotation
{ after(grammarAccess.getCommentAnnotationRule()); } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
(rule__CommentAnnotation__ValueAssignment)
{ after(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyValueAnnotation
entryRuleKeyValueAnnotation 
:
{ before(grammarAccess.getKeyValueAnnotationRule()); }
	 ruleKeyValueAnnotation
{ after(grammarAccess.getKeyValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyValueAnnotation
ruleKeyValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getGroup()); }
(rule__KeyValueAnnotation__Group__0)
{ after(grammarAccess.getKeyValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PreOperator
rulePreOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddOperator
ruleAddOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
(	'+' 
)
{ after(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SubOperator
ruleSubOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
(	'-' 
)
{ after(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ModOperator
ruleModOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
(	'mod' 
)
{ after(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueTestOperator
ruleValueTestOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueType
ruleValueType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getAlternatives()); }
(rule__ValueType__Alternatives)
{ after(grammarAccess.getValueTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CombineOperator
ruleCombineOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
(rule__CombineOperator__Alternatives)
{ after(grammarAccess.getCombineOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StateExtend__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getRegionsAssignment_0()); }
(rule__StateExtend__RegionsAssignment_0)
{ after(grammarAccess.getStateExtendAccess().getRegionsAssignment_0()); }
)

    |(
{ before(grammarAccess.getStateExtendAccess().getGroup_1()); }
(rule__StateExtend__Group_1__0)
{ after(grammarAccess.getStateExtendAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getStateExtendAccess().getGroup_2()); }
(rule__StateExtend__Group_2__0)
{ after(grammarAccess.getStateExtendAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getStateExtendAccess().getGroup_3()); }
(rule__StateExtend__Group_3__0)
{ after(grammarAccess.getStateExtendAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getStateExtendAccess().getGroup_4()); }
(rule__StateExtend__Group_4__0)
{ after(grammarAccess.getStateExtendAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getStateExtendAccess().getGroup_5()); }
(rule__StateExtend__Group_5__0)
{ after(grammarAccess.getStateExtendAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_2_0()); }
(rule__RegionSignalDec__Group_2_0__0)
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_2_1()); }
(rule__RegionSignalDec__Group_2_1__0)
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_3_0()); }
(rule__RegionSignalDec__Group_3_0__0)
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_3_0()); }
)

    |(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_3_1()); }
(rule__RegionSignalDec__Group_3_1__0)
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_0()); }
(rule__Signal__NameAssignment_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_1()); }
(rule__Signal__Group_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_2()); }
(rule__Signal__Group_2__0)
{ after(grammarAccess.getSignalAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_3()); }
(rule__Signal__Group_3__0)
{ after(grammarAccess.getSignalAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_4()); }
(rule__Signal__Group_4__0)
{ after(grammarAccess.getSignalAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_5()); }
(rule__Signal__Group_5__0)
{ after(grammarAccess.getSignalAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_6()); }
(rule__Signal__Group_6__0)
{ after(grammarAccess.getSignalAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_7()); }
(rule__Signal__Group_7__0)
{ after(grammarAccess.getSignalAccess().getGroup_7()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_8()); }
(rule__Signal__Group_8__0)
{ after(grammarAccess.getSignalAccess().getGroup_8()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getGroup_9()); }
(rule__Signal__Group_9__0)
{ after(grammarAccess.getSignalAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
(rule__Variable__NameAssignment_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getGroup_1()); }
(rule__Variable__Group_1__0)
{ after(grammarAccess.getVariableAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getGroup_2()); }
(rule__Variable__Group_2__0)
{ after(grammarAccess.getVariableAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getGroup_3()); }
(rule__Variable__Group_3__0)
{ after(grammarAccess.getVariableAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getGroup_4()); }
(rule__Variable__Group_4__0)
{ after(grammarAccess.getVariableAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getGroup_5()); }
(rule__Variable__Group_5__0)
{ after(grammarAccess.getVariableAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Effect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
	ruleEmission
{ after(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getTextEffectParserRuleCall_2()); }
	ruleTextEffect
{ after(grammarAccess.getEffectAccess().getTextEffectParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); }
	ruleValuedExpression
{ after(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_0()); }
(rule__CompareOperation__Group_0__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup_0()); }
(rule__NotExpression__Group_0__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
	ruleAtomicExpression
{ after(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
	ruleValuedObjectTestExpression
{ after(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
(rule__AtomicExpression__Group_2__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3()); }
	ruleTextExpression
{ after(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_2()); }
(rule__AtomicValuedExpression__Group_2__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_3()); }
(rule__AtomicValuedExpression__Group_3__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_4()); }
	ruleAtomicExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
(rule__ValuedObjectTestExpression__Group_0__0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_1()); }
(rule__ValuedObjectTestExpression__Group_1__0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); }
	ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
(	'pure' 
)
{ after(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
(	'bool' 
)
{ after(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
(	'unsigned' 
)
{ after(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
(	'int' 
)
{ after(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
(	'float' 
)
{ after(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5()); }
(	'host' 
)
{ after(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CombineOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
(	'none' 
)
{ after(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
(	'+' 
)
{ after(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
(	'*' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
(	'max' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
(	'min' 
)
{ after(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
(	'or' 
)
{ after(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
(	'and' 
)
{ after(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
(	'host' 
)
{ after(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StateExtend__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_1__0__Impl
	rule__StateExtend__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInputKeyword_1_0()); }

	'input' 

{ after(grammarAccess.getStateExtendAccess().getInputKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_1__1__Impl
	rule__StateExtend__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getOutputKeyword_1_1()); }

	'output' 

{ after(grammarAccess.getStateExtendAccess().getOutputKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInOutputSignalsAssignment_1_2()); }
(rule__StateExtend__InOutputSignalsAssignment_1_2)
{ after(grammarAccess.getStateExtendAccess().getInOutputSignalsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StateExtend__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_2__0__Impl
	rule__StateExtend__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getOutputKeyword_2_0()); }

	'output' 

{ after(grammarAccess.getStateExtendAccess().getOutputKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getOutputSignalsAssignment_2_1()); }
(rule__StateExtend__OutputSignalsAssignment_2_1)
{ after(grammarAccess.getStateExtendAccess().getOutputSignalsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateExtend__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_3__0__Impl
	rule__StateExtend__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInputKeyword_3_0()); }

	'input' 

{ after(grammarAccess.getStateExtendAccess().getInputKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInputSignalsAssignment_3_1()); }
(rule__StateExtend__InputSignalsAssignment_3_1)
{ after(grammarAccess.getStateExtendAccess().getInputSignalsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateExtend__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_4__0__Impl
	rule__StateExtend__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getSignalKeyword_4_0()); }

	'signal' 

{ after(grammarAccess.getStateExtendAccess().getSignalKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getSignalsAssignment_4_1()); }
(rule__StateExtend__SignalsAssignment_4_1)
{ after(grammarAccess.getStateExtendAccess().getSignalsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateExtend__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_5__0__Impl
	rule__StateExtend__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getVariableKeyword_5_0()); }

	'variable' 

{ after(grammarAccess.getStateExtendAccess().getVariableKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateExtend__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateExtend__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getVariableAssignment_5_1()); }
(rule__StateExtend__VariableAssignment_5_1)
{ after(grammarAccess.getStateExtendAccess().getVariableAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegionSignalDec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group__0__Impl
	rule__RegionSignalDec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getRegionAssignment_0()); }
(rule__RegionSignalDec__RegionAssignment_0)
{ after(grammarAccess.getRegionSignalDecAccess().getRegionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group__1__Impl
	rule__RegionSignalDec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getRegionSignalDecAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group__2__Impl
	rule__RegionSignalDec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getAlternatives_2()); }
(rule__RegionSignalDec__Alternatives_2)
{ after(grammarAccess.getRegionSignalDecAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group__3__Impl
	rule__RegionSignalDec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getAlternatives_3()); }
(rule__RegionSignalDec__Alternatives_3)*
{ after(grammarAccess.getRegionSignalDecAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getRegionSignalDecAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RegionSignalDec__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_0__0__Impl
	rule__RegionSignalDec__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarKeyword_2_0_0()); }

	'var' 

{ after(grammarAccess.getRegionSignalDecAccess().getVarKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_0__1__Impl
	rule__RegionSignalDec__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_2_0_1()); }
(rule__RegionSignalDec__VarsAssignment_2_0_1)
{ after(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_2_0_2()); }
(rule__RegionSignalDec__Group_2_0_2__0)*
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RegionSignalDec__Group_2_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_0_2__0__Impl
	rule__RegionSignalDec__Group_2_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_2_0_2_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_2_0_2_1()); }
(rule__RegionSignalDec__VarsAssignment_2_0_2_1)
{ after(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_2_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegionSignalDec__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_1__0__Impl
	rule__RegionSignalDec__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_2_1_0()); }

	'signal' 

{ after(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_1__1__Impl
	rule__RegionSignalDec__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_2_1_1()); }
(rule__RegionSignalDec__SignalsAssignment_2_1_1)
{ after(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_2_1_2()); }
(rule__RegionSignalDec__Group_2_1_2__0)*
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RegionSignalDec__Group_2_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_1_2__0__Impl
	rule__RegionSignalDec__Group_2_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_2_1_2_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_2_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_2_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_2_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_2_1_2_1()); }
(rule__RegionSignalDec__SignalsAssignment_2_1_2_1)
{ after(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_2_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegionSignalDec__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0__0__Impl
	rule__RegionSignalDec__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_0_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0__1__Impl
	rule__RegionSignalDec__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarKeyword_3_0_1()); }

	'var' 

{ after(grammarAccess.getRegionSignalDecAccess().getVarKeyword_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0__2__Impl
	rule__RegionSignalDec__Group_3_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_3_0_2()); }
(rule__RegionSignalDec__VarsAssignment_3_0_2)
{ after(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_3_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_3_0_3()); }
(rule__RegionSignalDec__Group_3_0_3__0)*
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_3_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RegionSignalDec__Group_3_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0_3__0__Impl
	rule__RegionSignalDec__Group_3_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_0_3_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_3_0_3_1()); }
(rule__RegionSignalDec__VarsAssignment_3_0_3_1)
{ after(grammarAccess.getRegionSignalDecAccess().getVarsAssignment_3_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegionSignalDec__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1__0__Impl
	rule__RegionSignalDec__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1__1__Impl
	rule__RegionSignalDec__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_3_1_1()); }

	'signal' 

{ after(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1__2__Impl
	rule__RegionSignalDec__Group_3_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_3_1_2()); }
(rule__RegionSignalDec__SignalsAssignment_3_1_2)
{ after(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getGroup_3_1_3()); }
(rule__RegionSignalDec__Group_3_1_3__0)*
{ after(grammarAccess.getRegionSignalDecAccess().getGroup_3_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RegionSignalDec__Group_3_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1_3__0__Impl
	rule__RegionSignalDec__Group_3_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_1_3_0()); }

	',' 

{ after(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegionSignalDec__Group_3_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegionSignalDec__Group_3_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__Group_3_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_3_1_3_1()); }
(rule__RegionSignalDec__SignalsAssignment_3_1_3_1)
{ after(grammarAccess.getRegionSignalDecAccess().getSignalsAssignment_3_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variables__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group__0__Impl
	rule__Variables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getGroup_0()); }
(rule__Variables__Group_0__0)
{ after(grammarAccess.getVariablesAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getVariablesAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variables__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group_0__0__Impl
	rule__Variables__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getVarsAssignment_0_0()); }
(rule__Variables__VarsAssignment_0_0)
{ after(grammarAccess.getVariablesAccess().getVarsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getGroup_0_1()); }
(rule__Variables__Group_0_1__0)*
{ after(grammarAccess.getVariablesAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variables__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group_0_1__0__Impl
	rule__Variables__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getVariablesAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variables__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getVarsAssignment_0_1_1()); }
(rule__Variables__VarsAssignment_0_1_1)
{ after(grammarAccess.getVariablesAccess().getVarsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group__0__Impl
	rule__Signals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getGroup_0()); }
(rule__Signals__Group_0__0)
{ after(grammarAccess.getSignalsAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getSignalsAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signals__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group_0__0__Impl
	rule__Signals__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getSignalsAssignment_0_0()); }
(rule__Signals__SignalsAssignment_0_0)
{ after(grammarAccess.getSignalsAccess().getSignalsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signals__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getGroup_0_1()); }
(rule__Signals__Group_0_1__0)*
{ after(grammarAccess.getSignalsAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signals__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group_0_1__0__Impl
	rule__Signals__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getSignalsAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signals__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signals__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getSignalsAssignment_0_1_1()); }
(rule__Signals__SignalsAssignment_0_1_1)
{ after(grammarAccess.getSignalsAccess().getSignalsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InputSignals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group__0__Impl
	rule__InputSignals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getGroup_0()); }
(rule__InputSignals__Group_0__0)
{ after(grammarAccess.getInputSignalsAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputSignals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getInputSignalsAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InputSignals__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group_0__0__Impl
	rule__InputSignals__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getSignalsAssignment_0_0()); }
(rule__InputSignals__SignalsAssignment_0_0)
{ after(grammarAccess.getInputSignalsAccess().getSignalsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputSignals__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getGroup_0_1()); }
(rule__InputSignals__Group_0_1__0)*
{ after(grammarAccess.getInputSignalsAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InputSignals__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group_0_1__0__Impl
	rule__InputSignals__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getInputSignalsAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputSignals__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputSignals__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getSignalsAssignment_0_1_1()); }
(rule__InputSignals__SignalsAssignment_0_1_1)
{ after(grammarAccess.getInputSignalsAccess().getSignalsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutputSignals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group__0__Impl
	rule__OutputSignals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getGroup_0()); }
(rule__OutputSignals__Group_0__0)
{ after(grammarAccess.getOutputSignalsAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputSignals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getOutputSignalsAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutputSignals__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group_0__0__Impl
	rule__OutputSignals__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getSignalsAssignment_0_0()); }
(rule__OutputSignals__SignalsAssignment_0_0)
{ after(grammarAccess.getOutputSignalsAccess().getSignalsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputSignals__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getGroup_0_1()); }
(rule__OutputSignals__Group_0_1__0)*
{ after(grammarAccess.getOutputSignalsAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutputSignals__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group_0_1__0__Impl
	rule__OutputSignals__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getOutputSignalsAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputSignals__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputSignals__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getSignalsAssignment_0_1_1()); }
(rule__OutputSignals__SignalsAssignment_0_1_1)
{ after(grammarAccess.getOutputSignalsAccess().getSignalsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InOutputSignals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group__0__Impl
	rule__InOutputSignals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getGroup_0()); }
(rule__InOutputSignals__Group_0__0)
{ after(grammarAccess.getInOutputSignalsAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOutputSignals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getInOutputSignalsAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InOutputSignals__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group_0__0__Impl
	rule__InOutputSignals__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getSignalsAssignment_0_0()); }
(rule__InOutputSignals__SignalsAssignment_0_0)
{ after(grammarAccess.getInOutputSignalsAccess().getSignalsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOutputSignals__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getGroup_0_1()); }
(rule__InOutputSignals__Group_0_1__0)*
{ after(grammarAccess.getInOutputSignalsAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InOutputSignals__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group_0_1__0__Impl
	rule__InOutputSignals__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getInOutputSignalsAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOutputSignals__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOutputSignals__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getSignalsAssignment_0_1_1()); }
(rule__InOutputSignals__SignalsAssignment_0_1_1)
{ after(grammarAccess.getInOutputSignalsAccess().getSignalsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_1__0__Impl
	rule__Signal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_1_0()); }
(rule__Signal__NameAssignment_1_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_1__1__Impl
	rule__Signal__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_1_2()); }
(rule__Signal__TypeAssignment_1_2)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Signal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_2__0__Impl
	rule__Signal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_2_0()); }
(rule__Signal__NameAssignment_2_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_2_1()); }
(rule__Signal__Group_2_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_2_1__0__Impl
	rule__Signal__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_1_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_2_1_1()); }
(rule__Signal__InitialValueAssignment_2_1_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3__0__Impl
	rule__Signal__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_3_0()); }
(rule__Signal__NameAssignment_3_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3__1__Impl
	rule__Signal__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_3_1()); }
(rule__Signal__Group_3_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3__2__Impl
	rule__Signal__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_3_2()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_3_3()); }
(rule__Signal__TypeAssignment_3_3)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Signal__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3_1__0__Impl
	rule__Signal__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_3_1_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_3_1_1()); }
(rule__Signal__InitialValueAssignment_3_1_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__0__Impl
	rule__Signal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_4_0()); }
(rule__Signal__NameAssignment_4_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__1__Impl
	rule__Signal__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_4_1()); }
(rule__Signal__Group_4_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_4_2()); }
(rule__Signal__Group_4_2__0)
{ after(grammarAccess.getSignalAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Signal__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_1__0__Impl
	rule__Signal__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_1_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1_1()); }
(rule__Signal__InitialValueAssignment_4_1_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_2__0__Impl
	rule__Signal__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_4_2_0()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_2__1__Impl
	rule__Signal__Group_4_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_4_2_1()); }
(rule__Signal__TypeAssignment_4_2_1)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_2__2__Impl
	rule__Signal__Group_4_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_4_2_2()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_4_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_4_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_4_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_4_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorAssignment_4_2_3()); }
(rule__Signal__CombineOperatorAssignment_4_2_3)
{ after(grammarAccess.getSignalAccess().getCombineOperatorAssignment_4_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Signal__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5__0__Impl
	rule__Signal__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_5_0()); }
(rule__Signal__NameAssignment_5_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5__1__Impl
	rule__Signal__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_5_1()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeAssignment_5_2()); }
(rule__Signal__HostTypeAssignment_5_2)
{ after(grammarAccess.getSignalAccess().getHostTypeAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Signal__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6__0__Impl
	rule__Signal__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_6_0()); }
(rule__Signal__NameAssignment_6_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6__1__Impl
	rule__Signal__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_6_1()); }
(rule__Signal__Group_6_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6__2__Impl
	rule__Signal__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonKeyword_6_2()); }

	':' 

{ after(grammarAccess.getSignalAccess().getColonKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeAssignment_6_3()); }
(rule__Signal__HostTypeAssignment_6_3)
{ after(grammarAccess.getSignalAccess().getHostTypeAssignment_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Signal__Group_6_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6_1__0__Impl
	rule__Signal__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_6_1_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_6_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_6_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_6_1_1()); }
(rule__Signal__InitialValueAssignment_6_1_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7__0__Impl
	rule__Signal__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_7_0()); }
(rule__Signal__NameAssignment_7_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7__1__Impl
	rule__Signal__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_7_1()); }
(rule__Signal__Group_7_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_7_2()); }
(rule__Signal__Group_7_2__0)
{ after(grammarAccess.getSignalAccess().getGroup_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Signal__Group_7_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_1__0__Impl
	rule__Signal__Group_7_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_7_1_0()); }

	':=' 

{ after(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueAssignment_7_1_1()); }
(rule__Signal__InitialValueAssignment_7_1_1)
{ after(grammarAccess.getSignalAccess().getInitialValueAssignment_7_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_7_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_2__0__Impl
	rule__Signal__Group_7_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_7_2_0()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_2__1__Impl
	rule__Signal__Group_7_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeAssignment_7_2_1()); }
(rule__Signal__HostTypeAssignment_7_2_1)
{ after(grammarAccess.getSignalAccess().getHostTypeAssignment_7_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_2__2__Impl
	rule__Signal__Group_7_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_7_2_2()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_7_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_7_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_7_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_7_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_7_2_3()); }
(rule__Signal__HostCombineOperatorAssignment_7_2_3)
{ after(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_7_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Signal__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8__0__Impl
	rule__Signal__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_8_0()); }
(rule__Signal__NameAssignment_8_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_8_1()); }
(rule__Signal__Group_8_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_8_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8_1__0__Impl
	rule__Signal__Group_8_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_8_1_0()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_8_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8_1__1__Impl
	rule__Signal__Group_8_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeAssignment_8_1_1()); }
(rule__Signal__TypeAssignment_8_1_1)
{ after(grammarAccess.getSignalAccess().getTypeAssignment_8_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_8_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8_1__2__Impl
	rule__Signal__Group_8_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_8_1_2()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_8_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_8_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_8_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_8_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorAssignment_8_1_3()); }
(rule__Signal__CombineOperatorAssignment_8_1_3)
{ after(grammarAccess.getSignalAccess().getCombineOperatorAssignment_8_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Signal__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9__0__Impl
	rule__Signal__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_9_0()); }
(rule__Signal__NameAssignment_9_0)
{ after(grammarAccess.getSignalAccess().getNameAssignment_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getGroup_9_1()); }
(rule__Signal__Group_9_1__0)
{ after(grammarAccess.getSignalAccess().getGroup_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signal__Group_9_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9_1__0__Impl
	rule__Signal__Group_9_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineKeyword_9_1_0()); }

	'combine' 

{ after(grammarAccess.getSignalAccess().getCombineKeyword_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_9_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9_1__1__Impl
	rule__Signal__Group_9_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeAssignment_9_1_1()); }
(rule__Signal__HostTypeAssignment_9_1_1)
{ after(grammarAccess.getSignalAccess().getHostTypeAssignment_9_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_9_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9_1__2__Impl
	rule__Signal__Group_9_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getWithKeyword_9_1_2()); }

	'with' 

{ after(grammarAccess.getSignalAccess().getWithKeyword_9_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group_9_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signal__Group_9_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group_9_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_9_1_3()); }
(rule__Signal__HostCombineOperatorAssignment_9_1_3)
{ after(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_9_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Variable__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_1__0__Impl
	rule__Variable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_1_0()); }
(rule__Variable__NameAssignment_1_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_1__1__Impl
	rule__Variable__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getVariableAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeAssignment_1_2()); }
(rule__Variable__TypeAssignment_1_2)
{ after(grammarAccess.getVariableAccess().getTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Variable__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2__0__Impl
	rule__Variable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_2_0()); }
(rule__Variable__NameAssignment_2_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getGroup_2_1()); }
(rule__Variable__Group_2_1__0)
{ after(grammarAccess.getVariableAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2_1__0__Impl
	rule__Variable__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_2_1_0()); }

	':=' 

{ after(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueAssignment_2_1_1()); }
(rule__Variable__InitialValueAssignment_2_1_1)
{ after(grammarAccess.getVariableAccess().getInitialValueAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3__0__Impl
	rule__Variable__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_3_0()); }
(rule__Variable__NameAssignment_3_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3__1__Impl
	rule__Variable__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getGroup_3_1()); }
(rule__Variable__Group_3_1__0)
{ after(grammarAccess.getVariableAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3__2__Impl
	rule__Variable__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonKeyword_3_2()); }

	':' 

{ after(grammarAccess.getVariableAccess().getColonKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeAssignment_3_3()); }
(rule__Variable__TypeAssignment_3_3)
{ after(grammarAccess.getVariableAccess().getTypeAssignment_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Variable__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3_1__0__Impl
	rule__Variable__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_3_1_0()); }

	':=' 

{ after(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueAssignment_3_1_1()); }
(rule__Variable__InitialValueAssignment_3_1_1)
{ after(grammarAccess.getVariableAccess().getInitialValueAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_4__0__Impl
	rule__Variable__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_4_0()); }
(rule__Variable__NameAssignment_4_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_4__1__Impl
	rule__Variable__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonKeyword_4_1()); }

	':' 

{ after(grammarAccess.getVariableAccess().getColonKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getHostTypeAssignment_4_2()); }
(rule__Variable__HostTypeAssignment_4_2)
{ after(grammarAccess.getVariableAccess().getHostTypeAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Variable__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5__0__Impl
	rule__Variable__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_5_0()); }
(rule__Variable__NameAssignment_5_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5__1__Impl
	rule__Variable__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getGroup_5_1()); }
(rule__Variable__Group_5_1__0)
{ after(grammarAccess.getVariableAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5__2__Impl
	rule__Variable__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonKeyword_5_2()); }

	':' 

{ after(grammarAccess.getVariableAccess().getColonKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getHostTypeAssignment_5_3()); }
(rule__Variable__HostTypeAssignment_5_3)
{ after(grammarAccess.getVariableAccess().getHostTypeAssignment_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Variable__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5_1__0__Impl
	rule__Variable__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_5_1_0()); }

	':=' 

{ after(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueAssignment_5_1_1()); }
(rule__Variable__InitialValueAssignment_5_1_1)
{ after(grammarAccess.getVariableAccess().getInitialValueAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Emission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emission__Group__0__Impl
	rule__Emission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
(rule__Emission__SignalAssignment_0)
{ after(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emission__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getGroup_1()); }
(rule__Emission__Group_1__0)?
{ after(grammarAccess.getEmissionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emission__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emission__Group_1__0__Impl
	rule__Emission__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emission__Group_1__1__Impl
	rule__Emission__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1()); }
(rule__Emission__NewValueAssignment_1_1)
{ after(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Emission__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TextEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextEffect__Group__0__Impl
	rule__TextEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getCodeAssignment_0()); }
(rule__TextEffect__CodeAssignment_0)
{ after(grammarAccess.getTextEffectAccess().getCodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextEffect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getGroup_1()); }
(rule__TextEffect__Group_1__0)?
{ after(grammarAccess.getTextEffectAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextEffect__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextEffect__Group_1__0__Impl
	rule__TextEffect__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTextEffectAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextEffect__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextEffect__Group_1__1__Impl
	rule__TextEffect__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getTypeAssignment_1_1()); }
(rule__TextEffect__TypeAssignment_1_1)
{ after(grammarAccess.getTextEffectAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextEffect__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextEffect__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextEffectAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
	ruleCompareOperation
{ after(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0__0__Impl
	rule__CompareOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); }
	ruleNotOrValuedExpression
{ after(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_0_1()); }
(rule__CompareOperation__Group_0_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__0__Impl
	rule__CompareOperation__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__1__Impl
	rule__CompareOperation__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1()); }
(rule__CompareOperation__OperatorAssignment_0_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_0_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
	ruleSubExpression
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
	rule__AddExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AddExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__AddExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__0__Impl
	rule__SubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1()); }
(rule__SubExpression__Group_1__0)*
{ after(grammarAccess.getSubExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__0__Impl
	rule__SubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__1__Impl
	rule__SubExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
(rule__SubExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__SubExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getModExpressionParserRuleCall_0()); }
	ruleModExpression
{ after(grammarAccess.getMultExpressionAccess().getModExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
	rule__MultExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__MultExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__0__Impl
	rule__ModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getModExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1()); }
(rule__ModExpression__Group_1__0)?
{ after(grammarAccess.getModExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__0__Impl
	rule__ModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__1__Impl
	rule__ModExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ModExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__ModExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__0__Impl
	rule__NotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__1__Impl
	rule__NotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
(rule__NotExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__NotExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__1__Impl
	rule__AtomicExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__0__Impl
	rule__AtomicValuedExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__1__Impl
	rule__AtomicValuedExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getDivExpressionParserRuleCall_2_1()); }
	ruleDivExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getDivExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_3__0__Impl
	rule__AtomicValuedExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_3__1__Impl
	rule__AtomicValuedExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_3_1()); }
	ruleValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__0__Impl
	rule__DivExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getDivExpressionAccess().getAtomicValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__1__Impl
	rule__DivExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1()); }
(

)
{ after(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__2__Impl
	rule__DivExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorAssignment_2()); }
(rule__DivExpression__OperatorAssignment_2)
{ after(grammarAccess.getDivExpressionAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_3()); }
(rule__DivExpression__SubExpressionsAssignment_3)
{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ValuedObjectTestExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__0__Impl
	rule__ValuedObjectTestExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__1__Impl
	rule__ValuedObjectTestExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
(rule__ValuedObjectTestExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__2__Impl
	rule__ValuedObjectTestExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }

	'(' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__3__Impl
	rule__ValuedObjectTestExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
(rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ValuedObjectTestExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__0__Impl
	rule__ValuedObjectTestExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__1__Impl
	rule__ValuedObjectTestExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ValuedObjectTestExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__ValuedObjectTestExpression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__0__Impl
	rule__TextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
(rule__TextExpression__CodeAssignment_0)
{ after(grammarAccess.getTextExpressionAccess().getCodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getGroup_1()); }
(rule__TextExpression__Group_1__0)?
{ after(grammarAccess.getTextExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__0__Impl
	rule__TextExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__1__Impl
	rule__TextExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
(rule__TextExpression__TypeAssignment_1_1)
{ after(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KeyValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__0__Impl
	rule__KeyValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__1__Impl
	rule__KeyValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__StateExtend__RegionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getRegionsRegionSignalDecParserRuleCall_0_0()); }
	ruleRegionSignalDec{ after(grammarAccess.getStateExtendAccess().getRegionsRegionSignalDecParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__InOutputSignalsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInOutputSignalsInOutputSignalsParserRuleCall_1_2_0()); }
	ruleInOutputSignals{ after(grammarAccess.getStateExtendAccess().getInOutputSignalsInOutputSignalsParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__OutputSignalsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getOutputSignalsOutputSignalsParserRuleCall_2_1_0()); }
	ruleOutputSignals{ after(grammarAccess.getStateExtendAccess().getOutputSignalsOutputSignalsParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__InputSignalsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getInputSignalsInputSignalsParserRuleCall_3_1_0()); }
	ruleInputSignals{ after(grammarAccess.getStateExtendAccess().getInputSignalsInputSignalsParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__SignalsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getSignalsSignalsParserRuleCall_4_1_0()); }
	ruleSignals{ after(grammarAccess.getStateExtendAccess().getSignalsSignalsParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateExtend__VariableAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateExtendAccess().getVariableVariablesParserRuleCall_5_1_0()); }
	ruleVariables{ after(grammarAccess.getStateExtendAccess().getVariableVariablesParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__RegionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getRegionRegionCrossReference_0_0()); }
(
{ before(grammarAccess.getRegionSignalDecAccess().getRegionRegionIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getRegionSignalDecAccess().getRegionRegionIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getRegionSignalDecAccess().getRegionRegionCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__VarsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_2_0_1_0()); }
	ruleVariable{ after(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__VarsAssignment_2_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_2_0_2_1_0()); }
	ruleVariable{ after(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_2_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__SignalsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_2_1_1_0()); }
	ruleSignal{ after(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__SignalsAssignment_2_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_2_1_2_1_0()); }
	ruleSignal{ after(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_2_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__VarsAssignment_3_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_3_0_2_0()); }
	ruleVariable{ after(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_3_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__VarsAssignment_3_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_3_0_3_1_0()); }
	ruleVariable{ after(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_3_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__SignalsAssignment_3_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_3_1_2_0()); }
	ruleSignal{ after(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_3_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegionSignalDec__SignalsAssignment_3_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_3_1_3_1_0()); }
	ruleSignal{ after(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_3_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__VarsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0_0_0()); }
	ruleVariable{ after(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__VarsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0_1_1_0()); }
	ruleVariable{ after(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__SignalsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
	ruleSignal{ after(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signals__SignalsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
	ruleSignal{ after(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__SignalsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
	ruleSignal{ after(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputSignals__SignalsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
	ruleSignal{ after(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__SignalsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
	ruleSignal{ after(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputSignals__SignalsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
	ruleSignal{ after(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__SignalsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
	ruleSignal{ after(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOutputSignals__SignalsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
	ruleSignal{ after(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_1_2_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_2_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_2_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_3_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_3_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_3_3_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_4_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_4_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_4_2_1_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__CombineOperatorAssignment_4_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_4_2_3_0()); }
	ruleCombineOperator{ after(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_4_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_5_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostTypeAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_5_2_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_6_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_6_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_6_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_6_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostTypeAssignment_6_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_6_3_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_6_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_7_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_7_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_7_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__InitialValueAssignment_7_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_7_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getSignalAccess().getInitialValueSTRING_DTerminalRuleCall_7_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostTypeAssignment_7_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_7_2_1_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_7_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostCombineOperatorAssignment_7_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorSTRING_STerminalRuleCall_7_2_3_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostCombineOperatorSTRING_STerminalRuleCall_7_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_8_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__TypeAssignment_8_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_8_1_1_0()); }
	ruleValueType{ after(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_8_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__CombineOperatorAssignment_8_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_8_1_3_0()); }
	ruleCombineOperator{ after(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_8_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_9_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_9_0_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_9_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostTypeAssignment_9_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_9_1_1_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostTypeSTRING_STerminalRuleCall_9_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__HostCombineOperatorAssignment_9_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHostCombineOperatorSTRING_STerminalRuleCall_9_1_3_0()); }
	RULE_STRING_S{ after(grammarAccess.getSignalAccess().getHostCombineOperatorSTRING_STerminalRuleCall_9_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_1_2_0()); }
	ruleValueType{ after(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__InitialValueAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_2_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__InitialValueAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_3_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_3_3_0()); }
	ruleValueType{ after(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_4_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__HostTypeAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getHostTypeSTRING_STerminalRuleCall_4_2_0()); }
	RULE_STRING_S{ after(grammarAccess.getVariableAccess().getHostTypeSTRING_STerminalRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_5_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__InitialValueAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_5_1_1_0()); }
	RULE_STRING_D{ after(grammarAccess.getVariableAccess().getInitialValueSTRING_DTerminalRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__HostTypeAssignment_5_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getHostTypeSTRING_STerminalRuleCall_5_3_0()); }
	RULE_STRING_S{ after(grammarAccess.getVariableAccess().getHostTypeSTRING_STerminalRuleCall_5_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Emission__SignalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__NewValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getTextEffectAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextEffect__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextEffectAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTextEffectAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
	ruleOrOperator{ after(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); }
	ruleCompareOperation{ after(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); }
	ruleNotOrValuedExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
	ruleAddOperator{ after(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
	ruleSubExpression{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
	ruleSubOperator{ after(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
	ruleMultExpression{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
	ruleMultOperator{ after(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
	ruleModExpression{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
	ruleModOperator{ after(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
	ruleNotOperator{ after(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
	ruleNotExpression{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_2_0()); }
	ruleDivOperator{ after(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__SubExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_3_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); }
	rulePreOperator{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
	ruleValuedObjectTestExpression{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); }
	ruleValueTestOperator{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); }
	ruleValuedObjectReference{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__ValuedObjectAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); }
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommentAnnotation__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
	RULE_COMMENT_ANNOTATION{ after(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getKeyValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_STRING_D : ('"' '"'|'"' ('\\' '"'|~('"'))* ('\\' '"'|~(('\\'|'"'))) '"');

RULE_STRING_S : ('\'' '\''|'\'' ('\\' '\''|~('\''))* ('\\' '\''|~(('\\'|'\''))) '\'');

RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


