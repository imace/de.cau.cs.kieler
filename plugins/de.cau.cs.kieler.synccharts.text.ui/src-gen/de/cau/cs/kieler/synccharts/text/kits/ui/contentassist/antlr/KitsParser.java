/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.synccharts.text.kits.services.KitsGrammarAccess;

public class KitsParser extends AbstractContentAssistParser {
	
	@Inject
	private KitsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr.internal.InternalKitsParser createParser() {
		de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr.internal.InternalKitsParser result = new de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr.internal.InternalKitsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNestedRegionAccess().getAlternatives(), "rule__NestedRegion__Alternatives");
					put(grammarAccess.getNestedRegionAccess().getAlternatives_0_2(), "rule__NestedRegion__Alternatives_0_2");
					put(grammarAccess.getStateAccess().getAlternatives_0(), "rule__State__Alternatives_0");
					put(grammarAccess.getStateAccess().getAlternatives_5(), "rule__State__Alternatives_5");
					put(grammarAccess.getStateAccess().getAlternatives_5_1_1_0(), "rule__State__Alternatives_5_1_1_0");
					put(grammarAccess.getIntegerOrStringAccess().getAlternatives(), "rule__IntegerOrString__Alternatives");
					put(grammarAccess.getSignalAccess().getAlternatives_5(), "rule__Signal__Alternatives_5");
					put(grammarAccess.getSignalAccess().getAlternatives_5_1_4(), "rule__Signal__Alternatives_5_1_4");
					put(grammarAccess.getEffectAccess().getAlternatives(), "rule__Effect__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getCompareOperationAccess().getAlternatives(), "rule__CompareOperation__Alternatives");
					put(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives(), "rule__NotOrValuedExpression__Alternatives");
					put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
					put(grammarAccess.getAtomicExpressionAccess().getAlternatives(), "rule__AtomicExpression__Alternatives");
					put(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives(), "rule__AtomicValuedExpression__Alternatives");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives(), "rule__ValuedObjectTestExpression__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getStateTypeAccess().getAlternatives(), "rule__StateType__Alternatives");
					put(grammarAccess.getTransitionTypeAccess().getAlternatives(), "rule__TransitionType__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getValueTypeAccess().getAlternatives(), "rule__ValueType__Alternatives");
					put(grammarAccess.getCombineOperatorAccess().getAlternatives(), "rule__CombineOperator__Alternatives");
					put(grammarAccess.getRegionAccess().getGroup(), "rule__Region__Group__0");
					put(grammarAccess.getRegionAccess().getGroup_0(), "rule__Region__Group_0__0");
					put(grammarAccess.getNestedRegionAccess().getGroup_0(), "rule__NestedRegion__Group_0__0");
					put(grammarAccess.getStringAnnotationAccess().getGroup(), "rule__StringAnnotation__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_0_0(), "rule__State__Group_0_0__0");
					put(grammarAccess.getStateAccess().getGroup_0_1(), "rule__State__Group_0_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_0(), "rule__State__Group_5_0__0");
					put(grammarAccess.getStateAccess().getGroup_5_0_0(), "rule__State__Group_5_0_0__0");
					put(grammarAccess.getStateAccess().getGroup_5_0_0_1(), "rule__State__Group_5_0_0_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_1(), "rule__State__Group_5_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1(), "rule__State__Group_5_1_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_0_2(), "rule__State__Group_5_1_1_0_2__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_0_3(), "rule__State__Group_5_1_1_0_3__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_0_4(), "rule__State__Group_5_1_1_0_4__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_0_5(), "rule__State__Group_5_1_1_0_5__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_1(), "rule__State__Group_5_1_1_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_1_1_1(), "rule__State__Group_5_1_1_1_1__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_3(), "rule__State__Group_5_1_3__0");
					put(grammarAccess.getStateAccess().getGroup_5_1_3_1(), "rule__State__Group_5_1_3_1__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
					put(grammarAccess.getVariableAccess().getGroup_2_0(), "rule__Variable__Group_2_0__0");
					put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
					put(grammarAccess.getSignalAccess().getGroup_4(), "rule__Signal__Group_4__0");
					put(grammarAccess.getSignalAccess().getGroup_5_0(), "rule__Signal__Group_5_0__0");
					put(grammarAccess.getSignalAccess().getGroup_5_1(), "rule__Signal__Group_5_1__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_2(), "rule__Transition__Group_2__0");
					put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup_3_2(), "rule__Transition__Group_3_2__0");
					put(grammarAccess.getTransitionAccess().getGroup_3_4(), "rule__Transition__Group_3_4__0");
					put(grammarAccess.getTransitionAccess().getGroup_3_4_2(), "rule__Transition__Group_3_4_2__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_4(), "rule__Action__Group_4__0");
					put(grammarAccess.getActionAccess().getGroup_4_1(), "rule__Action__Group_4_1__0");
					put(grammarAccess.getEmissionAccess().getGroup(), "rule__Emission__Group__0");
					put(grammarAccess.getEmissionAccess().getGroup_1(), "rule__Emission__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getTextEffectAccess().getGroup(), "rule__TextEffect__Group__0");
					put(grammarAccess.getTextEffectAccess().getGroup_1(), "rule__TextEffect__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_0(), "rule__CompareOperation__Group_0__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_0_1(), "rule__CompareOperation__Group_0_1__0");
					put(grammarAccess.getAddExpressionAccess().getGroup(), "rule__AddExpression__Group__0");
					put(grammarAccess.getAddExpressionAccess().getGroup_1(), "rule__AddExpression__Group_1__0");
					put(grammarAccess.getSubExpressionAccess().getGroup(), "rule__SubExpression__Group__0");
					put(grammarAccess.getSubExpressionAccess().getGroup_1(), "rule__SubExpression__Group_1__0");
					put(grammarAccess.getMultExpressionAccess().getGroup(), "rule__MultExpression__Group__0");
					put(grammarAccess.getMultExpressionAccess().getGroup_1(), "rule__MultExpression__Group_1__0");
					put(grammarAccess.getModExpressionAccess().getGroup(), "rule__ModExpression__Group__0");
					put(grammarAccess.getModExpressionAccess().getGroup_1(), "rule__ModExpression__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup_0(), "rule__NotExpression__Group_0__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_2(), "rule__AtomicExpression__Group_2__0");
					put(grammarAccess.getAtomicValuedExpressionAccess().getGroup_2(), "rule__AtomicValuedExpression__Group_2__0");
					put(grammarAccess.getAtomicValuedExpressionAccess().getGroup_3(), "rule__AtomicValuedExpression__Group_3__0");
					put(grammarAccess.getDivExpressionAccess().getGroup(), "rule__DivExpression__Group__0");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0(), "rule__ValuedObjectTestExpression__Group_0__0");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_1(), "rule__ValuedObjectTestExpression__Group_1__0");
					put(grammarAccess.getTextExpressionAccess().getGroup(), "rule__TextExpression__Group__0");
					put(grammarAccess.getTextExpressionAccess().getGroup_1(), "rule__TextExpression__Group_1__0");
					put(grammarAccess.getRegionAccess().getLabelAssignment_0_1(), "rule__Region__LabelAssignment_0_1");
					put(grammarAccess.getRegionAccess().getStatesAssignment_1(), "rule__Region__StatesAssignment_1");
					put(grammarAccess.getNestedRegionAccess().getLabelAssignment_0_1(), "rule__NestedRegion__LabelAssignment_0_1");
					put(grammarAccess.getNestedRegionAccess().getVariablesAssignment_0_2_0(), "rule__NestedRegion__VariablesAssignment_0_2_0");
					put(grammarAccess.getNestedRegionAccess().getSignalsAssignment_0_2_1(), "rule__NestedRegion__SignalsAssignment_0_2_1");
					put(grammarAccess.getNestedRegionAccess().getStatesAssignment_0_3(), "rule__NestedRegion__StatesAssignment_0_3");
					put(grammarAccess.getSingleNestedRegionAccess().getStatesAssignment(), "rule__SingleNestedRegion__StatesAssignment");
					put(grammarAccess.getStringAnnotationAccess().getValueAssignment_1(), "rule__StringAnnotation__ValueAssignment_1");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_0_0_0(), "rule__State__IsInitialAssignment_0_0_0");
					put(grammarAccess.getStateAccess().getIsFinalAssignment_0_0_1(), "rule__State__IsFinalAssignment_0_0_1");
					put(grammarAccess.getStateAccess().getIsFinalAssignment_0_1_0(), "rule__State__IsFinalAssignment_0_1_0");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_0_1_1(), "rule__State__IsInitialAssignment_0_1_1");
					put(grammarAccess.getStateAccess().getTypeAssignment_1(), "rule__State__TypeAssignment_1");
					put(grammarAccess.getStateAccess().getIdAssignment_3(), "rule__State__IdAssignment_3");
					put(grammarAccess.getStateAccess().getLabelAssignment_4(), "rule__State__LabelAssignment_4");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5_0_0_0(), "rule__State__OutgoingTransitionsAssignment_5_0_0_0");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5_0_0_1_1(), "rule__State__OutgoingTransitionsAssignment_5_0_0_1_1");
					put(grammarAccess.getStateAccess().getSignalsAssignment_5_1_1_0_0(), "rule__State__SignalsAssignment_5_1_1_0_0");
					put(grammarAccess.getStateAccess().getVariablesAssignment_5_1_1_0_1(), "rule__State__VariablesAssignment_5_1_1_0_1");
					put(grammarAccess.getStateAccess().getEntryActionsAssignment_5_1_1_0_2_1(), "rule__State__EntryActionsAssignment_5_1_1_0_2_1");
					put(grammarAccess.getStateAccess().getInnerActionsAssignment_5_1_1_0_3_1(), "rule__State__InnerActionsAssignment_5_1_1_0_3_1");
					put(grammarAccess.getStateAccess().getExitActionsAssignment_5_1_1_0_4_1(), "rule__State__ExitActionsAssignment_5_1_1_0_4_1");
					put(grammarAccess.getStateAccess().getSuspensionTriggerAssignment_5_1_1_0_5_1(), "rule__State__SuspensionTriggerAssignment_5_1_1_0_5_1");
					put(grammarAccess.getStateAccess().getRegionsAssignment_5_1_1_1_0(), "rule__State__RegionsAssignment_5_1_1_1_0");
					put(grammarAccess.getStateAccess().getRegionsAssignment_5_1_1_1_1_1(), "rule__State__RegionsAssignment_5_1_1_1_1_1");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5_1_3_0(), "rule__State__OutgoingTransitionsAssignment_5_1_3_0");
					put(grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5_1_3_1_1(), "rule__State__OutgoingTransitionsAssignment_5_1_3_1_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getInitialValueAssignment_2_0_1(), "rule__Variable__InitialValueAssignment_2_0_1");
					put(grammarAccess.getVariableAccess().getTypeAssignment_2_2(), "rule__Variable__TypeAssignment_2_2");
					put(grammarAccess.getSignalAccess().getIsInputAssignment_0(), "rule__Signal__IsInputAssignment_0");
					put(grammarAccess.getSignalAccess().getIsOutputAssignment_1(), "rule__Signal__IsOutputAssignment_1");
					put(grammarAccess.getSignalAccess().getNameAssignment_3(), "rule__Signal__NameAssignment_3");
					put(grammarAccess.getSignalAccess().getInitialValueAssignment_4_1(), "rule__Signal__InitialValueAssignment_4_1");
					put(grammarAccess.getSignalAccess().getTypeAssignment_5_0_1(), "rule__Signal__TypeAssignment_5_0_1");
					put(grammarAccess.getSignalAccess().getTypeAssignment_5_1_2(), "rule__Signal__TypeAssignment_5_1_2");
					put(grammarAccess.getSignalAccess().getCombineOperatorAssignment_5_1_4_0(), "rule__Signal__CombineOperatorAssignment_5_1_4_0");
					put(grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_5_1_4_1(), "rule__Signal__HostCombineOperatorAssignment_5_1_4_1");
					put(grammarAccess.getTransitionAccess().getTypeAssignment_0(), "rule__Transition__TypeAssignment_0");
					put(grammarAccess.getTransitionAccess().getTargetStateAssignment_1(), "rule__Transition__TargetStateAssignment_1");
					put(grammarAccess.getTransitionAccess().getPriorityAssignment_2_1(), "rule__Transition__PriorityAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getIsImmediateAssignment_3_1(), "rule__Transition__IsImmediateAssignment_3_1");
					put(grammarAccess.getTransitionAccess().getDelayAssignment_3_2_1(), "rule__Transition__DelayAssignment_3_2_1");
					put(grammarAccess.getTransitionAccess().getTriggerAssignment_3_3(), "rule__Transition__TriggerAssignment_3_3");
					put(grammarAccess.getTransitionAccess().getEffectsAssignment_3_4_1(), "rule__Transition__EffectsAssignment_3_4_1");
					put(grammarAccess.getTransitionAccess().getEffectsAssignment_3_4_2_1(), "rule__Transition__EffectsAssignment_3_4_2_1");
					put(grammarAccess.getTransitionAccess().getIsHistoryAssignment_4(), "rule__Transition__IsHistoryAssignment_4");
					put(grammarAccess.getTransitionAccess().getLabelAssignment_5(), "rule__Transition__LabelAssignment_5");
					put(grammarAccess.getActionAccess().getIsImmediateAssignment_1(), "rule__Action__IsImmediateAssignment_1");
					put(grammarAccess.getActionAccess().getDelayAssignment_2(), "rule__Action__DelayAssignment_2");
					put(grammarAccess.getActionAccess().getTriggerAssignment_3(), "rule__Action__TriggerAssignment_3");
					put(grammarAccess.getActionAccess().getEffectsAssignment_4_1_0(), "rule__Action__EffectsAssignment_4_1_0");
					put(grammarAccess.getEmissionAccess().getSignalAssignment_0(), "rule__Emission__SignalAssignment_0");
					put(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1(), "rule__Emission__NewValueAssignment_1_1");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getTextEffectAccess().getCodeAssignment_0(), "rule__TextEffect__CodeAssignment_0");
					put(grammarAccess.getTextEffectAccess().getTypeAssignment_1_1(), "rule__TextEffect__TypeAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__OrExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__AndExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1(), "rule__CompareOperation__OperatorAssignment_0_1_1");
					put(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2(), "rule__CompareOperation__SubExpressionsAssignment_0_1_2");
					put(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1(), "rule__AddExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__AddExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1(), "rule__SubExpression__OperatorAssignment_1_1");
					put(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__SubExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1(), "rule__MultExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__MultExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1(), "rule__ModExpression__OperatorAssignment_1_1");
					put(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__ModExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1(), "rule__NotExpression__OperatorAssignment_0_1");
					put(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2(), "rule__NotExpression__SubExpressionsAssignment_0_2");
					put(grammarAccess.getDivExpressionAccess().getOperatorAssignment_2(), "rule__DivExpression__OperatorAssignment_2");
					put(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_3(), "rule__DivExpression__SubExpressionsAssignment_3");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1(), "rule__ValuedObjectTestExpression__OperatorAssignment_0_1");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3(), "rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_1_1(), "rule__ValuedObjectTestExpression__OperatorAssignment_1_1");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__ValuedObjectTestExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment(), "rule__ValuedObjectReference__ValuedObjectAssignment");
					put(grammarAccess.getTextExpressionAccess().getCodeAssignment_0(), "rule__TextExpression__CodeAssignment_0");
					put(grammarAccess.getTextExpressionAccess().getTypeAssignment_1_1(), "rule__TextExpression__TypeAssignment_1_1");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr.internal.InternalKitsParser typedParser = (de.cau.cs.kieler.synccharts.text.kits.ui.contentassist.antlr.internal.InternalKitsParser) parser;
			typedParser.entryRuleRegion();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public KitsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(KitsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
