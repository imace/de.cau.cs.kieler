import synccharts;
import utilities;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

/////////////////////////
// Copy, cut and Paste //
/////////////////////////

// Java escapes

// copy methods
Void copyObjectToClipboard(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
;

Void cutObject(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.cutObject(java.lang.Object)
;

// Cut
Void cut(Object obj):
 cutObject(obj)
;

// Copy
Void copy(Object obj):
 copyObjectToClipboard(obj)
;

// Paste

// paste methods
State getStateFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getStateFromClipboard()
;

Region getRegionFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getRegionFromClipboard()
;

Transition getTransitionFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getTransitionFromClipboard()
;

List[State] getStatesFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getStatesFromClipboard()
;

List[Region] getRegionsFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getRegionsFromClipboard()
;

// Paste into region
Void paste(Region target):
 tryPastingStateIntoRegion(target)
;

Void tryPastingStateIntoRegion(Region target):
 let state = getStateFromClipboard():
 (state != null ? pasteStateIntoRegion(state, target) : 
 tryPastingRegionIntoRegion(target))
;

Void tryPastingRegionIntoRegion(Region target):
 let region = getRegionFromClipboard():
 (region != null ? pasteRegionIntoRegion(region, target) : 
 tryPastingStatesIntoRegion(target))
;

Void tryPastingStatesIntoRegion(Region target):
 let states = getStatesFromClipboard():
 (states != null ? pasteStatesIntoRegion(states, target) : 
 tryPastingRegionsIntoRegion(target))
;

Void tryPastingRegionsIntoRegion(Region target):
 let regions = getRegionsFromClipboard():
 (regions != null ? pasteRegionsIntoRegion(regions, target) : null)
;

Void pasteStateIntoRegion(State state, Region target):
 target.innerStates.add(state) ->
 setSelection(state)
;

Void pasteRegionIntoRegion(Region region, Region target):
 addStatesToRegion(target, region.innerStates) ->
 setSelection(target)
;

Void pasteStatesIntoRegion(List[State] states, Region target):
 addStatesToRegion(target, states) ->
 setSelection(target)
;

Void pasteRegionsIntoRegion(List[Region] regions, Region target):
 pasteInternal(target, regions) ->
 setSelection(target)
;


Void pasteInternal(Region target, List[Region] regions): 
 let dummy = new State :
 (target.parentState != null) ?
 (target.parentState.regions.addAll(regions)) :
 (dummy.regions.addAll(regions) ->
  target.innerStates.add(dummy) ->
  dummy.setLabel(getFileNameOfActiveEditor()))
;

Void addStatesToRegion(Region target, List[State] states):
 let dummy = new State :
 let dummy2 = new Region :
 (target.parentState != null) ?
 target.innerStates.addAll(states) :
 (dummy.setLabel(getFileNameOfActiveEditor()) ->
 target.innerStates.add(dummy) ->
 dummy.regions.add(dummy2) ->
 dummy2.innerStates.addAll(states))
;

// paste into state
Void paste(State target):
 tryPastingStateIntoState(target)
;

Void tryPastingStateIntoState(State target):
 let state = getStateFromClipboard():
 (state != null ? pasteStateIntoState(state, target) : 
 tryPastingRegionIntoState(target))
;

Void tryPastingRegionIntoState(State target):
 let region = getRegionFromClipboard():
 (region != null ? pasteRegionIntoState(region, target) : 
 tryPastingStatesIntoState(target))
;

Void tryPastingStatesIntoState(State target):
 let states = getStatesFromClipboard():
 (states != null ? pasteStatesIntoState(states, target) : 
 tryPastingRegionsIntoState(target))
;

Void tryPastingRegionsIntoState(State target):
 let regions = getRegionsFromClipboard():
 (regions != null ? pasteRegionsIntoState(regions, target) : null)
;

Void pasteStateIntoState(State state, State target):
 let dummy = new Region:
 dummy.innerStates.add(state) ->
 target.regions.add(dummy) ->
 setSelection(state)
;

Void pasteRegionIntoState(Region region, State target):
 target.regions.add(region) ->
 setSelection(region)
;

Void pasteStatesIntoState(List[State] states, State target):
 let dummy = new Region:
 dummy.innerStates.addAll(states) ->
 target.regions.add(dummy) ->
 setSelection(target)
;

Void pasteRegionsIntoState(List[Region] regions, State target):
 target.regions.addAll(regions) ->
 setSelection(target)
;

// Paste transition
Void paste(State source, State target):
 let trans = getTransitionFromClipboard():
 ((trans != null && (source.parentRegion == target.parentRegion)) ?
 (source.outgoingTransitions.add(trans) ->
 trans.setTargetState(target)) :
 null) ->
 setSelection(trans)
;
