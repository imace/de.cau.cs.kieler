import synccharts;
import utilities;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

Void debug(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.debug(java.lang.Object)
;

/////////////////////////
// Copy, cut and Paste //
/////////////////////////

// Java escapes

// copy methods
Void copyObjectToClipboard(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
;

Void cutObject(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.cutObject(java.lang.Object)
;

// Cut
Void cut(Object obj):
 cutObject(obj)
;

// Copy
Void copy(Object obj):
 copyObjectToClipboard(obj)
;

// Paste

// paste methods
State getStateFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getStateFromClipboard()
;

Region getRegionFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getRegionFromClipboard()
;

Transition getTransitionFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getTransitionFromClipboard()
;

List[Transition] getTransitionsFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getTransitionsFromClipboard()
;

List[State] getStatesFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getStatesFromClipboard()
;

List[Region] getRegionsFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getRegionsFromClipboard()
;

// Paste into region
Void paste(Region target):
 tryPastingStateIntoRegion(target) ->
 setSelection(target)
;

// try state in region, if failed try region in region
Void tryPastingStateIntoRegion(Region target):
 let state = getStateFromClipboard():
 (state != null ? 
  target.innerStates.add(state)
 : 
  tryPastingRegionIntoRegion(target))
;


// try region in region, if failed try states in region
Void tryPastingRegionIntoRegion(Region target):
 let region = getRegionFromClipboard():
 (region != null ?
  pasteRegionIntoRegion(region, target)
 : 
  tryPastingStatesIntoRegion(target))
;

// root region: add root state and put region else replace region
Void pasteRegionIntoRegion(Region region, Region target):
 let dummy = new State :
 (target.parentState != null) ?
 (target.parentState.regions.add(region) ->
 target.parentState.regions.remove(target)) 
 :
 (dummy.setLabel(getFileNameOfActiveEditor()) ->
 target.innerStates.add(dummy) ->
 dummy.regions.add(region))
;

// states into region if fails try regions into region
Void tryPastingStatesIntoRegion(Region target):
 let states = getStatesFromClipboard():
 (states != null ? 
  target.innerStates.addAll(states)
 : 
  tryPastingRegionsIntoRegion(target))
;

// try regions into region if fails ... nothing can be done
Void tryPastingRegionsIntoRegion(Region target):
 let regions = getRegionsFromClipboard():
 (regions != null ?
  pasteRegionsIntoRegion(regions, target)
 : 
  null)
;

// if root region create new state and paste into else replace
Void pasteRegionsIntoRegion(List[Region] regions, Region target):
 let dummy = new State :
 (target.parentState != null) ?
  (target.parentState.regions.addAll(regions) ->
  target.parentState.regions.remove(target)) 
 :
 (dummy.regions.addAll(regions) ->
  target.innerStates.add(dummy) ->
  dummy.setLabel(getFileNameOfActiveEditor()))
;

// paste into state
Void paste(State target):
 tryPastingStateIntoState(target) ->
 setSelection(target.parentRegion)
;

// try state into state if fails try region into state
Void tryPastingStateIntoState(State target):
 let state = getStateFromClipboard():
 (state != null ? (state.outgoingTransitions.addAll(target.outgoingTransitions) ->
 target.parentRegion.innerStates.add(state) ->
 target.parentRegion.innerStates.remove(target))
 : 
 tryPastingRegionIntoState(target))
;

// try region into state if fails try states into state
Void tryPastingRegionIntoState(State target):
 let region = getRegionFromClipboard():
 (region != null ? 
 target.regions.add(region)
 : 
 tryPastingStatesIntoState(target))
;

// try states into state if fails try regions into state
Void tryPastingStatesIntoState(State target):
 let states = getStatesFromClipboard():
 (states != null ? (target.parentRegion.innerStates.addAll(states) ->
 target.parentRegion.innerStates.remove(target))
 : 
 tryPastingRegionsIntoState(target))
;

// try regions into state
Void tryPastingRegionsIntoState(State target):
 let regions = getRegionsFromClipboard():
 (regions != null ? target.regions.addAll(regions) 
 : 
 tryPastingTransitionIntoState(target))
;

// try transition as self transition on state
Void tryPastingTransitionIntoState(State target):
 let trans = getTransitionFromClipboard():
 (trans != null ? 
  (target.outgoingTransitions.add(trans) ->
  trans.setTargetState(target))
  :
  tryPastingTransitionsIntoState(target)
 )
;

// try transitions as self transitions on state
Void tryPastingTransitionsIntoState(State target):
 let trans = getTransitionsFromClipboard():
 (trans != null ? 
  (trans.addSelfloopToState(target))
  :
  null
 )
;

// add a transition to a state as self loop
Void addSelfloopToState(Transition trans, State target):
 trans.setTargetState(target) ->
 target.outgoingTransitions.add(trans)
;

// paste into a list of states
Void paste(List[State] states):
 tryPastingStateIntoStates(states) ->
 setSelection(states.get(0).parentRegion)
;

Void tryPastingStateIntoStates(List[State] states):
 let state = getStateFromClipboard():
 (state != null ?
  (states.get(0).parentRegion.innerStates.add(state) ->
  states.removeStateFromRegion())
 :
  tryPastingStatesIntoStates(states)
 )
;

Void tryPastingStatesIntoStates(List[State] targets):
 let states = getStatesFromClipboard():
 (states != null ?
  (targets.get(0).parentRegion.innerStates.addAll(states) ->
  targets.removeStateFromRegion())
 :
 tryPastingTransitionBetweenStates(targets)
 )
;

Void removeStateFromRegion(State state):
 state.parentRegion.innerStates.remove(state)
;

Void tryPastingTransitionBetweenStates(List[State] states):
 let trans = getTransitionFromClipboard():
 let source = states.get(0):
 let target = states.get(1):
 ((trans != null && states.size == 2 && (source.parentRegion == target.parentRegion)) ?
 (source.outgoingTransitions.add(trans) ->
 trans.setTargetState(target)) :
 tryPastingTransitionsBetweenStates(states)
 )
;

Void tryPastingTransitionsBetweenStates(List[State] states):
 let trans = getTransitionsFromClipboard():
 let source = states.get(0):
 let target = states.get(1):
 ((trans != null && states.size == 2 && (source.parentRegion == target.parentRegion)) ?
 trans.addTransitionBetweenStates(source, target)
 :
 null)
;

Void addTransitionBetweenStates(Transition trans, State source, State target):
 trans.setTargetState(target) ->
 source.outgoingTransitions.add(trans)
;

// replace the selected transition with the one in clipboard
Void paste(Transition target):
 tryPastingTransitionOnTransition(target)
;

Void tryPastingTransitionOnTransition(Transition target):
 let trans = getTransitionFromClipboard():
 let source = target.sourceState:
 let dest = target.targetState:
 (trans != null ?
  (trans.setSourceState(source) ->
  trans.setTargetState(dest) ->
  source.outgoingTransitions.remove(target) ->
  setSelection(trans))
  :
  tryPastingTransitionsOnTransition(target)
 )
;

Void tryPastingTransitionsOnTransition(Transition target):
 let trans = getTransitionsFromClipboard():
 let source = target.sourceState:
 let dest = target.targetState:
 (trans != null ?
  (source.outgoingTransitions.remove(target) ->
  trans.connectStates(source, dest))
  :
  null
 )
;

Void connectStates(Transition trans, State source, State target):
 source.outgoingTransitions.add(trans) ->
 trans.setTargetState(target)
;