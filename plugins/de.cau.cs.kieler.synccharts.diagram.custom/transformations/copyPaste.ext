import synccharts;
import utilities;

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

//Get the file name of the file loaded in the currently active editor
String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

// debug output to sysout
Void debug(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.debug(java.lang.Object)
;

/////////////////////////
// Copy, cut and Paste //
/////////////////////////

// Java escapes

// copy an object or a list of objects to clipboard
Object copyObjectToClipboard(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
;

// clone an eObject
Object ecoreCopy(Object object):
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.ecoreCopy(java.lang.Object)
;

// Cut
Void cut(Object obj):
 copyInternal(obj) ->
 cutInternal(obj)
;

// dummy method for matching
Void cutInternal(Object obj):
 null
;

// remove the state from its parent region
Void cutInternal(State state):
 state.parentRegion.innerStates.remove(state)
;

// remove the region from the parent state
Void cutInternal(Region region):
 let parent = region.parentState:
 if (parent != null) then parent.regions.remove(region)
;

// remove the transition from its source and target
Void cutInternal(Transition trans):
 trans.setSourceState(null) ->
 trans.setTargetState(null)
;

// entry point for lists, decide which method to call
Void cutInternal(List[Object] list):
 let states = list.select(e|e.metaType.name.matches("State")):
 let regions = list.select(e|e.metaType.name.matches("Region")):
 let trans = list.select(e|e.metaType.name.matches("Transition")):
 (if (!states.isEmpty) then (
    cutInternalStateList(states)
 ) else (
    (if (!regions.isEmpty) then (
       cutInternalRegionList(regions)
     ) else (
       cutInternalTransitionList(trans)
     )
    )
 ))
;

// remove each state
Void cutInternalStateList(List[State] states):
 states.cutInternal()
;

// remove each region
Void cutInternalRegionList(List[Region] regions):
 regions.cutInternal()
;

// remove each transition
Void cutInternalTransitionList(List[Transition] trans):
 trans.cutInternal()
;

// Copy
Void copy(Object obj):
 copyInternal(obj)
;

// special case for states, clone only self loop transitions
Void copyInternal(State state):
 let copy = (State) copyObjectToClipboard(state):
 cloneTransitions(state, copy)
;

// copy a region to clipboard
Void copyInternal(Region region):
 copyObjectToClipboard(region)
;

// copy a transition to clipboard
Void copyInternal(Transition trans):
 copyObjectToClipboard(trans)
;

// clone all selfloop transitions on a state
Void cloneTransitions(State original, State copy):
 let origOutgoing = original.outgoingTransitions:
 let copyOutgoing = copy.outgoingTransitions:
 copy.outgoingTransitions.removeAll(copyOutgoing) ->
 origOutgoing.select(e|e.targetState == original).addCopyTo(copy)
;

// copy a transition and add it to a state
Void addCopyTo(Transition trans, State state):
 let copy = (Transition) ecoreCopy(trans):
 copy.setTargetState(state) ->
 state.outgoingTransitions.add(copy)
;

// select which states to copy to clipboard to avoid having
// states more than once in the clipboard due to containment in macro
// state
Void copyInternalStateList(List[State] list):
 let toClone = list.select(e|e.parentRegion.parentState == null 
                || !list.contains(e.parentRegion.parentState)):
 copyObjectToClipboard(toClone)
;

// select which regions to copy, see copyInternalStateList
Void copyInternalRegionList(List[Region] list):
 let toClone = list.select(e|e.parentState == null 
                || !list.contains(e.parentState.parentRegion)):
 copyObjectToClipboard(toClone)
;

// copy all transitions to clipboard
Void copyInternalTransitionList(List[Transition] list):
 copyObjectToClipboard(list)
;

// entry point for list, decide which option to take
// on mixed the selections States have the highest priority,
// Regions after that, Transitions are only copied on pure lists
Void copyInternal(List[Object] list):
 let states = list.select(e|e.metaType == State):
 let regions = list.select(e|e.metaType == Region):
 let trans = list.select(e|e.metaType == Transition):
 (if (!states.isEmpty) then (copyInternalStateList(states)) else (
 (if (!regions.isEmpty) then (copyInternalRegionList(regions)) else (
 (if (!trans.isEmpty) then (copyInternalTransitionList(trans)) else (
 null
 ))
 ))
 ))
;

// dummy for matching
Void copyInternal(Object obj):
 null
;

// Paste

// get an object or a list of objects from clipboard
Object getObjectFromClipboard():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getObjectFromClipboard()
;

// determine whether or not the clipboard is empty
Boolean isClipboardEmpty():
 JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.isClipboardEmpty()
;

// check for the type of a list
Boolean isStateList(List[Object] list):
 let head = list.get(0):
 head.metaType == State
;
Boolean isRegionList(List[Object] list):
 let head = list.get(0):
 head.metaType == Region
;
Boolean isTransitionList(List[Object] list):
 let head = list.get(0):
 head.metaType == Transition
;

// delegator to the different list pastes
Void paste(List[Object] objects):
 (if (!isClipboardEmpty()) then 
  (if (isStateList(objects)) then
   (pasteStateList(objects))
   else
   (if (isRegionList(objects)) then
    (pasteRegionList(objects))
    else
    (if (isTransitionList(objects)) then pasteTransitionList(objects)
   )
  )
 )
 )
;

// dummy matcher
Void pasteInternal(Object noop0, Object noop1):
 null
;

////////////////////////////////
// Single Region is target    //
////////////////////////////////

// Paste into region
Void paste(Region target):
 if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
;

Void pasteInternal(Region target, State state):
 target.innerStates.add(state)
;

Void pasteInternal(Region target, Region region):
 pasteRegionIntoRegion(region, target)
;

// root region: add root state and put region else replace region
Void pasteRegionIntoRegion(Region region, Region target):
 let dummy = new State :
 (target.parentState != null) ?
 (target.parentState.regions.add(region) ->
 target.parentState.regions.remove(target)) 
 :
 (dummy.setLabel(getFileNameOfActiveEditor()) ->
 target.innerStates.add(dummy) ->
 dummy.regions.add(region))
;

Void pasteInternal(Region target, List[Object] list):
 (if (isStateList(list)) then pasteInternalStates(target, list) else 
 (if (isRegionList(list)) then pasteInternalRegions(target, list) else 
 (if (isTransitionList(list)) then pasteInternalTransitions(target, list)
 )
 )
 )
;

Void pasteInternalStates(Region target, List[State] states):
 target.innerStates.addAll(states)
;

Void pasteInternalRegions(Region target, List[Region] regions):
  pasteRegionsIntoRegion(regions, target)
;

// if root region create new state and paste into else replace
Void pasteRegionsIntoRegion(List[Region] regions, Region target):
 let dummy = new State :
 (target.parentState != null) ?
  (target.parentState.regions.addAll(regions) ->
  target.parentState.regions.remove(target)) 
 :
 (dummy.regions.addAll(regions) ->
  target.innerStates.add(dummy) ->
  dummy.setLabel(getFileNameOfActiveEditor()))
;

Void pasteInternal(Region target, Transition trans):
  pasteTransitionIntoRegion(target, trans)
;

// create two dummy states in region and connect with transition
Void pasteTransitionIntoRegion(Region target, Transition trans):
 let srcDummy = new State :
 let destDummy = new State :
 target.innerStates.add(srcDummy) ->
 target.innerStates.add(destDummy) ->
 trans.setSourceState(srcDummy) ->
 trans.setTargetState(destDummy)
;

// create two dummy states and paste all transitions between them
Void pasteInternalTransitions(Region target, List[Transition] transList):
   pasteTransitionsIntoRegion(target, transList)
;

// create two dummy states and paste all transitions between them
Void pasteTransitionsIntoRegion(Region target, List[Transition] transList):
 let srcDummy = new State :
 let destDummy = new State :
 target.innerStates.add(srcDummy) ->
 target.innerStates.add(destDummy) ->
 transList.setSourceState(srcDummy) ->
 transList.setTargetState(destDummy)
;

///////////////////////////////
// Single State is target    //
///////////////////////////////

// paste into state
Void paste(State target):
 if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
;

Void pasteInternal(State target, State state):
  replaceState(target, state)
;

// replace the old state with the new one
Void replaceState(State oldState, State replacement):
 let states = oldState.parentRegion.innerStates:
 states.outgoingTransitions.fixReference(oldState, replacement) ->
 states.add(replacement) ->
 states.remove(oldState)
;

// fix all transitions to and from the old state to reference the replacement instead
Void fixReference(Transition trans, State oldTarget, State newTarget):
 (trans.targetState == oldTarget ?
 trans.setTargetState(newTarget)
 :
 null
 ) ->
 (trans.sourceState == oldTarget ?
 trans.setSourceState(newTarget)
 :
 null
 )
;

Void pasteInternal(State target, Region region):
  target.regions.add(region)
;

Void pasteInternal(State target, List[Object] list):
 if (isStateList(list)) then pasteInternalStates(target, list)
 else (if (isRegionList(list)) then pasteInternalRegions(target, list)
 else (if (isTransitionList(list)) then pasteInternalTransitions(target, list)
 ))
;

Void pasteInternalStates(State target, List[State] states):
 let parent = target.parentRegion:
  target.incomingTransitions.removeAll(target.incomingTransitions) ->
  target.outgoingTransitions.removeAll(target.outgoingTransitions) ->
  parent.innerStates.remove(target) ->
  parent.innerStates.addAll(states)
;

Void pasteInternalRegions(State target, List[Region] regions):
 target.regions.addAll(regions)
;

Void pasteInternal(State target, Transition trans):
 trans.setSourceState(target) ->
 trans.setTargetState(target)
;

Void pasteInternalTransitions(State target, List[Transition] trans):
 trans.addSelfloopToState(target)
;

// add a transition to a state as self loop
Void addSelfloopToState(Transition trans, State target):
 trans.setTargetState(target) ->
 target.outgoingTransitions.add(trans)
;

////////////////////////////////////
// Multiple States are targets    //
////////////////////////////////////

// paste into a list of states
Void pasteStateList(List[State] states):
 let clipBoard = getObjectFromClipboard():
 pasteStateList(states, clipBoard)
;

Void pasteStateList(List[State] dummy, Object noop):
 null
;

// replace each state with the one in clipboard
Void pasteStateList(List[State] states, State state):
 states.replaceWithStateFromClipboard()
;

// replace each state with the one in clipboard
Void replaceWithStateFromClipboard(State target):
 let state = (State) getObjectFromClipboard():
 replaceState(target, state)
;

// replace each state from the selection with the ones in clipboard
Void pasteStateList(List[State] targets, List[Object] list):
 if (isStateList(list)) then pasteStateListStates(targets, list)
 else (if (isRegionList(list)) then pasteStateListRegions(targets, list)
 else (if (isTransitionList(list)) then pasteStateListTransitions(targets, list)
 ))
;

Void pasteStateListStates(List[State] targets, List[State] states):
 targets.replaceWithStatesFromClipboard()
;

// replace each state from the selection with the ones in clipboard
Void replaceWithStatesFromClipboard(State target):
 let states = (List[State]) getObjectFromClipboard():
 let targetRegion = target.parentRegion:
 target.removeStateFromRegion() ->
 targetRegion.innerStates.addAll(states)
;

// remove a state from the region
Void removeStateFromRegion(State state):
 state.outgoingTransitions.removeAll(state.outgoingTransitions) ->
 state.incomingTransitions.removeAll(state.incomingTransitions) ->
 state.parentRegion.innerStates.remove(state)
;

// connect two states with the transition in clipboard
Void pasteStateList(List[State] states, Transition trans):
 let source = states.get(0):
 let target = states.get(1):
 if (states.size == 2 && source.parentRegion == target.parentRegion) then
   (source.outgoingTransitions.add(trans) ->
    trans.setTargetState(target))
;

// connect two states with multiple transitions
Void pasteStateListTransitions(List[State] states, List[Transition] trans):
 let source = states.get(0):
 let target = states.get(1):
 if (states.size == 2 && source.parentRegion == target.parentRegion) then
   trans.connectStates(source, target)
;

Void pasteStateList(List[State] states, Region region):
  states.insertRegionFromClipboardIntoState()
;

// insert the region in clipboard into state
Void insertRegionFromClipboardIntoState(State target):
 let region = (Region) getObjectFromClipboard():
 target.regions.add(region)
;

// insert all regions into each state
Void pasteStateListRegions(List[State] states, List[Region] regions):
  states.insertRegionsFromClipboardIntoState()
;

// insert all regions from clipboard into target state
Void insertRegionsFromClipboardIntoState(State target):
 let regions = (List[Region]) getObjectFromClipboard():
 target.regions.addAll(regions)
;


/////////////////////////////////////
// Multiple Regions are targets    //
/////////////////////////////////////

// paste into a list of regions
Void pasteRegionList(List[Region] targets):
 let clipBoard = getObjectFromClipboard():
 pasteRegionList(targets, clipBoard)
;

Void pasteRegionList(List[Region] targets, Object noop):
 null
;

// add state in clipboard to each region
Void pasteRegionList(List[Region] targets, State state):
  targets.addStateInClipboardToRegion()
;

// add the state from clipboard to each region
Void addStateInClipboardToRegion(Region target):
 let state = (State) getObjectFromClipboard():
 target.innerStates.add(state)
;

Void pasteRegionList(List[Region] targets, Region region):
  targets.replaceWithRegionFromClipboard()
;

// replace the target with the region in clipboard
Void replaceWithRegionFromClipboard(Region target):
 let region = (Region) getObjectFromClipboard():
 let parent = target.parentState:
 (parent != null ?
  (parent.regions.remove(target) ->
  parent.regions.add(region))
  :
  null
 )
;

Void pasteRegionList(List[Region] targets, List[Object] list):
 if (isStateList(list)) then pasteRegionListStates(targets, list)
 else (if (isRegionList(list)) then pasteRegionListRegions(targets, list)
 else (if (isTransitionList(list)) then pasteRegionListTransitions(targets, list)
 ))
;

Void pasteRegionListStates(List[Region] targets, List[State] states):
 targets.addStatesFromClipboardToRegion()
;

// add all states in clipboard to target region
Void addStatesFromClipboardToRegion(Region target):
 let states = (List[State]) getObjectFromClipboard():
 target.innerStates.addAll(states)
;

// replace all each region with the all source regions
Void pasteRegionListRegions(List[Region] targets, List[Region] regions):
  targets.replaceWithRegionsFromClipboard()
;

// replace target region with regions from clipboard
Void replaceWithRegionsFromClipboard(Region target):
 let regions = (List[Region]) getObjectFromClipboard():
 let parent = target.parentState:
 (parent != null ?
  (parent.regions.remove(target) ->
  parent.regions.addAll(regions))
  :
  null
 )
;

// create dummy states with transition and paste into each target
Void pasteRegionList(List[Region] targets, Transition trans):
  targets.pasteTransitionFromClipboardIntoRegion()
;

// create dummy states with transition and add to region
Void pasteTransitionFromClipboardIntoRegion(Region target):
 let trans = (Transition) getObjectFromClipboard():
 let srcDummy = new State:
 let destDummy = new State:
 trans.setSourceState(srcDummy) ->
 trans.setTargetState(destDummy) ->
 target.innerStates.add(srcDummy) ->
 target.innerStates.add(destDummy)
;

// create two states in each region with all transitions
Void pasteRegionListTransitions(List[Region] targets, List[Transition] transList):
 targets.pasteTransitionsFromClipboardIntoRegion()
;

// create two states in region and connect with all transitions
Void pasteTransitionsFromClipboardIntoRegion(Region target):
 let transList = (List[Transition]) getObjectFromClipboard():
 let srcDummy = new State:
 let destDummy = new State:
 target.innerStates.add(srcDummy) ->
 target.innerStates.add(destDummy) ->
 srcDummy.outgoingTransitions.addAll(transList) ->
 transList.setTargetState(destDummy)
;

////////////////////////////////////
// Single Transition is target    //
////////////////////////////////////

// replace the selected transition with the one in clipboard
Void paste(Transition target):
 if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
;

// replace a transition with another one
Void pasteInternal(Transition target, Transition trans):
 let source = target.sourceState:
 let dest = target.targetState:
  trans.setSourceState(source) ->
  trans.setTargetState(dest) ->
  source.outgoingTransitions.remove(target) ->
  setSelection(trans)
;

Void pasteInternal(Transition target, List[Object] list):
 if (isStateList(list)) then pasteInternalStates(target, list)
 else (if (isRegionList(list)) then pasteInternalRegions(target, list)
 else (if (isTransitionList(list)) then pasteInternalTransitions(target, list)
 ))
;

// replace a transition with many others
Void pasteInternalTransitions(Transition target, List[Transition] trans):
 let source = target.sourceState:
 let dest = target.targetState:
 source.outgoingTransitions.remove(target) ->
 trans.connectStates(source, dest)
;

// connect two states with a transition
Void connectStates(Transition trans, State source, State target):
 source.outgoingTransitions.add(trans) ->
 trans.setTargetState(target)
;

// insert a state into a transition
Void pasteInternal(Transition target, State state):
  pasteStateOnTransition(target, state, target.sourceState)
;

// insert a state into a transition
Void pasteStateOnTransition(Transition target, State newState, State transKeeper):
 let source = target.sourceState:
 let dest = target.targetState:
 let dummyTrans = new Transition:
 (transKeeper == source ?
  (source.parentRegion.innerStates.add(newState) ->
   dummyTrans.setSourceState(newState) ->
   dummyTrans.setTargetState(dest) ->
   target.setTargetState(newState)
  )
  :
  (transKeeper == dest ?
   (source.parentRegion.innerStates.add(newState) ->
    dummyTrans.setSourceState(source) ->
    dummyTrans.setTargetState(newState) ->
    target.setSourceState(newState)
   )
   :
    null
   )
  )
;

// insert a region into a transition by encapsulating it
Void pasteInternal(Transition target, Region region):
 pasteRegionOnTransition(target, region, target.sourceState)
;

// encapsulate region in state and add to transition
Void pasteRegionOnTransition(Transition target, Region region, State transKeeper):
 let dummyState = new State:
 dummyState.regions.add(region) ->
 pasteStateOnTransition(target, dummyState, transKeeper)
;

Void pasteInternalStates(Transition target, List[State] states):
 pasteStatesOnTransition(target, states, target.sourceState)
;

// encapsulate states in region and paste on transition
Void pasteStatesOnTransition(Transition target, List[State] states, State transKeeper):
 let region = new Region:
 region.innerStates.addAll(states) ->
 pasteRegionOnTransition(target, region, transKeeper)
;

Void pasteInternalRegions(Transition target, List[Region] regions):
 pasteRegionsOnTransition(target, regions, target.sourceState)
;

// encapsulate regions in state and paste on transition
Void pasteRegionsOnTransition(Transition target, List[Region] regions, State transKeeper):
 let state = new State:
 state.regions.addAll(regions) ->
 pasteStateOnTransition(target, state, transKeeper)
;

/////////////////////////////////////////
// Multiple Transitions are targets    //
/////////////////////////////////////////

// paste into a list of transitions
Void pasteTransitionList(List[Transition] targets):
 let clipboard = getObjectFromClipboard():
 pasteTransitionList(targets, clipboard)
;

Void pasteTransitionList(List[Transition] targets, Object noop):
 null
;

Void pasteTransitionList(List[Transition] targets, Transition trans):
 targets.replaceWithTransition()
;

// replace a transition with the one in clipboard
Void replaceWithTransition(Transition target):
 let trans = (Transition) getObjectFromClipboard():
 let source = target.sourceState:
 let dest = target.targetState:
 source.outgoingTransitions.remove(target) ->
 trans.setTargetState(dest) ->
 trans.setSourceState(source)
;

Void pasteTransitionList(List[Transition] targets, List[Object] list):
 if (isStateList(list)) then pasteTransitionListStates(targets, list)
 else (if (isRegionList(list)) then pasteTransitionListRegions(targets, list)
 else (if (isTransitionList(list)) then pasteTransitionListTransitions(targets, list)
 ))
;

Void pasteTransitionListTransitions(List[Transition] targets, List[Transition] transList):
 targets.replaceWithTransitions()
;

// replace a transition with the one in clipboard
Void replaceWithTransitions(Transition target):
 let transList = (List[Transition]) getObjectFromClipboard():
 let source = target.sourceState:
 let dest = target.targetState:
 source.outgoingTransitions.remove(target) ->
 transList.setTargetState(dest) ->
 transList.setSourceState(source)
;

Void pasteTransitionList(List[Transition] targets, State state):
 targets.pasteStateInClipboardIntoTransition()
;

// insert the state into the transition
Void pasteStateInClipboardIntoTransition(Transition target):
 let state = (State) getObjectFromClipboard():
 pasteStateOnTransition(target, state, target.sourceState)
;

Void pasteTransitionList(List[Transition] targets, Region region):
 targets.pasteRegionInClipboardIntoTransition()
;

// encapsulate region into state and add to transition
Void pasteRegionInClipboardIntoTransition(Transition target):
 let region = (Region) getObjectFromClipboard():
 let dummyState = new State:
 dummyState.regions.add(region) ->
 pasteStateOnTransition(target, dummyState, target.sourceState)
;

Void pasteTransitionListStates(List[Transition] targets, List[State] states):
 targets.pasteStatesInClipboardIntoTransition()
;

// encapsulate states in state and region and insert into transition
Void pasteStatesInClipboardIntoTransition(Transition target):
 let states = (List[State]) getObjectFromClipboard():
 let dummyRegion = new Region:
 let dummyState = new State:
 dummyState.regions.add(dummyRegion) ->
 dummyRegion.innerStates.addAll(states) ->
 pasteStateOnTransition(target, dummyState, target.sourceState)
;

// encapsulate regions in state and add to each transition
Void pasteTransitionListRegions(List[Transition] targets, List[Region] regions):
  targets.pasteRegionsInClipboardIntoTransition()
;

// encapsulate regions in clipboard into state and add to transition
Void pasteRegionsInClipboardIntoTransition(Transition target):
 let regions = (List[Region]) getObjectFromClipboard():
 let dummyState = new State:
 dummyState.regions.addAll(regions) ->
 pasteStateOnTransition(target, dummyState, target.sourceState)
;

//////////////////////
// Mixed targets    //
//////////////////////

Void pasteInternal(Object noop0, Object noop1, Object noop2):
 null
;

// *** State and Transition selected ***

// a state and a transition selected in any order
Void paste(Transition trans, State state):
 paste(state, trans)
;

// a state and a transition selected in any order
Void paste(State state, Transition trans):
 let clipBoard = getObjectFromClipboard():
 if (!isClipboardEmpty()) then pasteInternal(state, trans, clipBoard)
;

// insert a state into the transition with the selected state as keeper
Void pasteInternal(State state, Transition trans, State clipboardState):
 pasteStateOnTransition(trans, clipboardState, state)
;

// insert a region into transition by encapsulating
Void pasteInternal(State state, Transition trans, Region region):
  pasteRegionOnTransition(trans, region, state)
;

Void pasteInternal(State state, Transition trans, List[Object] list):
 if (isStateList(list)) then pasteInternalStates(state, trans, list)
 else (if (isRegionList(list)) then pasteInternalRegions(state, trans, list)
 )
;

// insert states into a transition by encapsulating
Void pasteInternalStates(State state, Transition trans, List[State] states):
 pasteStatesOnTransition(trans, states, state)
;

// insert regions into a transition by encapsulating
Void pasteInternalRegions(State state, Transition trans, List[Region] regions):
  pasteRegionsOnTransition(trans, regions, state)
;
