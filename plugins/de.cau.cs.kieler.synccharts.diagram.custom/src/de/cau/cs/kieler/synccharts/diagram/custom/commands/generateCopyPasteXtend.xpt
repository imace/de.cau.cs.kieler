

«DEFINE main FOR List[String]-»
    «FILE "copyPaste.ext"-»
    «EXPAND init-»
    «EXPAND copy-»

    «ENDFILE-»
«ENDDEFINE»

«DEFINE init FOR List[String]-»
// Java escapes

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

//Get the file name of the file loaded in the currently active editor
String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

// copy an object or a list of objects to clipboard
Object copyObjectToClipboard(Object object):
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
;

// get an object or a list of objects from clipboard
Object getObjectFromClipboard():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getObjectFromClipboard()
;

Boolean isClipboardEmpty():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.isClipboardEmpty()
;

«ENDDEFINE»

«DEFINE copy FOR List[String]-»
// Copy
Void copy(Object obj):
 copyInternal(obj)
;

// dummy for matching
Void copyInternal(Object obj):
 null
;

Void copyInternal(List[Object] list):
«FOREACH this AS metaType-»
let «metaType»List = list.select(e|e.metaType == «metaType»):
«ENDFOREACH-»
«FOREACH this AS metaType-»
(if (!«metaType»List.isEmpty) then (copyInternal«metaType»List(«metaType»List)) else (
«ENDFOREACH-»
null
«FOREACH this AS metaType-»
))
«ENDFOREACH-»

«ENDDEFINE»