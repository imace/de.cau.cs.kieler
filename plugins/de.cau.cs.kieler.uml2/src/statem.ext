import uml;


/** Transformations for State Machine Diagrams **
 *----------------------------------------------*/

// create a composite state with initial content
Void statemCreateComposite(State originalState):
  let compState = new State:
  let initState = new Pseudostate:
  let simpleState = new State:
  let innerRegion = new Region:
  let oTrans = new Transition:
  let iTrans = new Transition:
  let parentRegion = originalState.container:
  parentRegion.subvertex.add(compState) ->
  parentRegion.transition.add(oTrans) ->
  oTrans.setSource(originalState) ->
  oTrans.setTarget(compState) ->
  compState.region.add(innerRegion) ->
  innerRegion.subvertex.add(initState) ->
  initState.setKind(PseudostateKind::initial) ->
  innerRegion.subvertex.add(simpleState) ->
  innerRegion.transition.add(iTrans) ->
  iTrans.setSource(initState) ->
  iTrans.setTarget(simpleState);
