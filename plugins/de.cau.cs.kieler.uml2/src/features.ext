import uml;

// utility method to set the name of a named element
Void setName(NamedElement element, String name):
  JAVA de.cau.cs.kieler.uml2.EditingUtil.setName(org.eclipse.uml2.uml.NamedElement, java.lang.String);


/**   Transformations for Activity Diagrams    **
 *----------------------------------------------*/

// create a successor action
Void activityCreateSuccessor(OpaqueAction action):
  let newAction = new OpaqueAction:
  newAction.setActivity(action.activity) ->
  newAction.setName("Action") ->
  activityControlFlow(action, newAction);

// connect two actions via control flow
Void activityControlFlow(OpaqueAction action1, OpaqueAction action2):
  let flow = new ControlFlow:
  flow.setActivity(action1.activity) ->
  action1.activity.edge.add(flow) ->
  flow.setSource(action1) ->
  flow.setTarget(action2);

// toggle an opaque action to a call behavior action
Void activityToggleAction(OpaqueAction action):
  let newAction = new CallBehaviorAction:
  action.copy(newAction) ->
  action.setActivity(null);

// copy the contents of the first action to the second action
Void copy(Action action1, Action action2):
  let incomings = action1.incoming:
  let outgoings = action1.outgoing:
  action2.setActivity(action1.activity) ->
  action2.setName(action1.name) ->
  incomings.setTarget(action2) ->
  outgoings.setSource(action2);


/** Transformations for State Machine Diagrams **
 *----------------------------------------------*/

// create a composite state with initial content
Void statemCreateComposite(State originalState):
  let compState = new State:
  let initState = new State:
  let simpleState = new State:
  let innerRegion = new Region:
  let oTrans = new Transition:
  let iTrans = new Transition:
  let parentRegion = originalState.container:
  parentRegion.transition.add(oTrans) ->
  oTrans.setSource(originalState) ->
  oTrans.setTarget(compState) ->
  compState.region.add(innerRegion) ->
  innerRegion.subvertex.add(initState) ->
  innerRegion.subvertex.add(simpleState) ->
  innerRegion.transition.add(iTrans) ->
  iTrans.setSource(initState) ->
  iTrans.setTarget(simpleState);
