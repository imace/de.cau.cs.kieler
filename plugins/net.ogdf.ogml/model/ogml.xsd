<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

<!-- Schema -->

<!-- ============== -->
<!-- =====ogml===== -->
<!-- ============== -->

<xsd:element name="ogml" type="ogml.type" />

<xsd:complexType name="ogml.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
	</xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="keys"  minOccurs="0" maxOccurs="1" />
	<xsd:element ref="graph" minOccurs="1" maxOccurs="1" />
  </xsd:sequence>
  <!--xsd:attribute name="" type="xsd:string" /-->
</xsd:complexType>


<!-- ============== -->
<!-- ====graph===== -->
<!-- ============== -->

<xsd:element name="graph" type="graph.type" />

<xsd:complexType name="graph.type">
  <xsd:annotation>
    <xsd:documentation>
      this is the main container for the described graph which is divided into structure and layout.
      structure: declarations of nodes (including compound-structure), edges, labels and application-data.
      layout:    appearance of nodes, edges, labels and templates. Also constraint-definitions.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="structure" minOccurs="1" maxOccurs="1" />
    <xsd:element ref="layout" minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <!-- xsd:attribute name="id" type="xsd:ID" /-->
  <!-- an id is required if an OGML-document contains more than one graph
       actually this is not provided -->
</xsd:complexType>


<!-- ============== -->
<!-- ==structure=== -->
<!-- ============== -->

<xsd:element name="structure" type="structure.type" />

<xsd:complexType name="structure.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded"> 
	  <xsd:element ref="data" />
      <xsd:element ref="node" />
      <xsd:element ref="edge" />
      <xsd:element ref="label" />
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>



<!-- node -->

<xsd:element name="node" type="node.type" />

<xsd:complexType name="node.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:choice minOccurs="0" maxOccurs="unbounded">    
      <xsd:element ref="label" />
      <xsd:element ref="node" /> 
    </xsd:choice>
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>



<!-- edge -->

<xsd:element name="edge" type="edge.type" />

<xsd:complexType name="edge.type">
  <xsd:annotation>
    <xsd:documentation>
      The edge.type-tag provides declarations for edges and hyperedges.
      An edge has an required identifier "id".
      It is possible to spcify an unbounded number of labels as children of the edge.
      Also it is possible to define an unbounded number of data-elements.
      An edge is defined by a non-empty set of sources and targets. The type of the described edge is implicit given by the number of these elements. One source and one target specify a directed edge. An edge that contains two sourced is an       undirected edge, and two target-elements specify a bidirectional edge.
      If there are other combinations of sources/targets the edge is mentioned to be an hyperedge.
      Sources and Targets are declared by their referenced id. Feasible references are node- and edge-ids.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="label" minOccurs="0" maxOccurs="unbounded" />
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="source" type="sourceTarget.type" />
      <xsd:element name="target" type="sourceTarget.type" />
    </xsd:choice>
    <xsd:element ref="label" minOccurs="0" maxOccurs="unbounded" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>



<!-- sourceTarget -->

<xsd:element name="sourceTarget" type="sourceTarget.type" />

<xsd:complexType name="sourceTarget.type">
  <xsd:annotation>
    <xsd:documentation>
	  the soruceTarget element is for edge-declaration
      id is the identificator for the source/target
      idref references a node or an edge - the source i.e. the target of the edge
      a sourceTarget can hold one label
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="label" minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="optional" />
  <xsd:attribute name="idRef" type="xsd:IDREF" use="required" />
</xsd:complexType>



<!-- old label - no data possible -->

<!-- 
<xsd:element name="label" type="label.type"/>

<xsd:complexType name="label.type">
  <xsd:annotation>
    <xsd:documentation>
      a label has an identificator - id
      content of the label-element is a string
    </xsd:documentation>
  </xsd:annotation>
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="id" type="xsd:ID" />
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>
-->

<!-- label -->

<xsd:element name="label" type="label.type"/>

<xsd:complexType name="label.type">
  <xsd:annotation>
    <xsd:documentation>
      a label has an identificator - id
      content of the label-element is a string
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
  	<xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element name="content" type="xsd:string" minOccurs="1" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" />
</xsd:complexType>


<!-- ============== -->
<!-- ====layout==== -->
<!-- ============== -->

<xsd:element name="layout" type="layout.type" />

<xsd:complexType name="layout.type">
  <xsd:annotation>
    <xsd:documentation>
      the layout-element is encapsulated into style-templates, styles and constraints
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="styleTemplates" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="styles"         minOccurs="0" maxOccurs="1" />
    <xsd:element ref="constraints"    minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
</xsd:complexType>


<!-- ============== -->
<!-- styleTemplates -->
<!-- ============== -->

<xsd:element name="styleTemplates" type="styleTemplates.type" />

<xsd:complexType name="styleTemplates.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
	  <xsd:element ref="data" />
      <xsd:element ref="nodeStyleTemplate" />
      <xsd:element ref="edgeStyleTemplate" />
      <xsd:element ref="labelStyleTemplate" />
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>



<!-- nodeStyleTemplate -->

<xsd:element name="nodeStyleTemplate" type="nodeStyleTemplate.type" />

<xsd:complexType name="nodeStyleTemplate.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"     minOccurs="0" maxOccurs="unbounded" />
	<xsd:element ref="template" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="shape"    minOccurs="0" maxOccurs="1" /> 
    <xsd:element ref="fill"     minOccurs="0" maxOccurs="1" />
    <xsd:element ref="line"     minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>



<!-- edgeStyleTemplate -->

<xsd:element name="edgeStyleTemplate" type="edgeStyleTemplate.type" />

<xsd:complexType name="edgeStyleTemplate.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"        minOccurs="0" maxOccurs="unbounded" />
	<xsd:element ref="template"    minOccurs="0" maxOccurs="1" />
    <xsd:element ref="line"        minOccurs="0" maxOccurs="1" />
	<xsd:element ref="sourceStyle" minOccurs="0" maxOccurs="1" />
	<xsd:element ref="targetStyle" minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>



<!-- labelStyleTemplate -->

<xsd:element name="labelStyleTemplate" type="labelStyleTemplate.type" />

<xsd:complexType name="labelStyleTemplate.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"     minOccurs="0" maxOccurs="unbounded" />
	<xsd:element ref="template" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="text"     minOccurs="1" maxOccurs="1" />
    <xsd:element ref="font"     minOccurs="1" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>



<!-- ============== -->
<!-- ====styles==== -->
<!-- ============== -->

<xsd:element name="styles" type="styles.type" />

<xsd:complexType name="styles.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="graphStyle" minOccurs="0" maxOccurs="1" />
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
	  <xsd:element ref="data" />
      <xsd:element name="nodeStyle"  type="node_layout.type" />
      <xsd:element name="edgeStyle"  type="edge_layout.type" />
      <xsd:element name="labelStyle" type="label_layout.type" />
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>



<!-- graphStyle -->

<xsd:element name="graphStyle" type="graphStyle.type" />

<xsd:complexType name="graphStyle.type">
  <xsd:annotation>
    <xsd:documentation>
      declaration of the default style-templates for nodes, edges and labels
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
  </xsd:sequence>
  <xsd:attribute name="defaultNodeTemplate"  type="xsd:IDREF" />
  <xsd:attribute name="defaultEdgeTemplate"  type="xsd:IDREF" />
  <xsd:attribute name="defaultLabelTemplate" type="xsd:IDREF" />
</xsd:complexType>



<!-- nodes -->

<xsd:element name="node_layout" type="node_layout.type" />

<xsd:complexType name="node_layout.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"       minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="template"   minOccurs="0" maxOccurs="1" />
    <xsd:element name="location"  type="location.type" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="shape" minOccurs="0" maxOccurs="1" /> 
    <xsd:element ref="fill"  minOccurs="0" maxOccurs="1" />
    <xsd:element ref="line"  minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="idRef" type="xsd:IDREF" />
</xsd:complexType>



<!-- edges -->

<xsd:element name="edge_layout" type="edge_layout.type" />

<xsd:complexType name="edge_layout.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"        minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="template"    minOccurs="0" maxOccurs="1" />
    <xsd:element ref="line"        minOccurs="0" maxOccurs="1" /> 
    <xsd:element ref="sourceStyle" minOccurs="0" maxOccurs="1" />
	<xsd:element ref="targetStyle" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="point"       minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="segment"     minOccurs="0" maxOccurs="unbounded" />
  </xsd:sequence>
  <xsd:attribute name="idRef" type="xsd:IDREF" />
</xsd:complexType>


<!-- segment -->

<xsd:element name="point" type="point.type" />

<xsd:complexType name="point.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" />
  <xsd:attribute name="x" type="xsd:double" use="required" />
  <xsd:attribute name="y" type="xsd:double" use="required" />
  <xsd:attribute name="z" type="xsd:double" use="optional" />
  <!-- extensible, for more than 3 coordinates -->
</xsd:complexType>


<xsd:element name="segment" type="segment.type" />

<xsd:complexType name="segment.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data" minOccurs="0" maxOccurs="unbounded" />
	<xsd:element ref="line" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="endpoint" minOccurs="2" maxOccurs="2" />
  </xsd:sequence>
</xsd:complexType>


<xsd:element name="endpoint" type="endpoint.type" />

<xsd:complexType name="endpoint.type">
  <xsd:annotation>
    <xsd:documentation>
      idRef references a source-, target or point - id ( => node or an endpoint of a segment)
	  the port is defined by an angle (ignorable if idRef references a point)
	  style is the decoration of the endpoints
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attribute name="idRef" type="xsd:IDREF" use="required" />
  <xsd:attribute name="port"  type="xsd:integer" use="optional" />
  <xsd:attribute name="style" type="endpointStyles.type" use="optional" />
  <xsd:attribute name="color" type="xsd:string" use="optional" />
  <xsd:attribute name="size"  type="xsd:double" use="optional" />
</xsd:complexType>



<!-- labels -->

<xsd:element name="label_layout" type="label_layout.type" />

<xsd:complexType name="label_layout.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="data"     minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="template" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="location" minOccurs="0" maxOccurs="1" />
    <xsd:element ref="text"     minOccurs="0" maxOccurs="1" />
    <xsd:element ref="font"     minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="idRef" type="xsd:IDREF" />
</xsd:complexType>


<!-- ============== -->
<!-- =constraints== -->
<!-- ============== -->

<xsd:element name="constraints" type="constraints.type" />

<xsd:complexType name="constraints.type">
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="number" />
      <xsd:element ref="int" />
      <xsd:element ref="boolean" />
      <xsd:element name="nodeRef"  type="node_constraint.type" />
      <xsd:element name="edgeRef"  type="edge_constraint.type" />
      <xsd:element name="labelRef" type="label_constraint.type" />
      <xsd:element ref="composed" />
	</xsd:choice>
  </xsd:sequence>
</xsd:complexType>


<!-- integer -->
<xsd:element name="int" type="int.type" />

<xsd:complexType name="int.type">
  <xsd:attribute name="name"  type="xsd:string" />
  <xsd:attribute name="value" type="xsd:integer" />
</xsd:complexType>

<!-- number -->
<xsd:element name="number" type="number.type" />

<xsd:complexType name="number.type">
  <xsd:attribute name="name"  type="xsd:string" />
  <xsd:attribute name="value" type="xsd:double" />
</xsd:complexType>

<!-- boolean-values -->
<xsd:element name="boolean" type="boolean.type" />

<xsd:complexType name="boolean.type">
  <xsd:attribute name="name"  type="xsd:string" />
  <xsd:attribute name="value" type="boolInt.type" />
</xsd:complexType>

<xsd:simpleType name="boolInt.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:nonNegativeInteger">
    <xsd:enumeration value="1" />
    <xsd:enumeration value="0" />
  </xsd:restriction>
</xsd:simpleType>


<xsd:element name="bool" type="bool.type" />

<xsd:complexType name="bool.type">
  <xsd:attribute name="name"  type="xsd:string" />
  <xsd:attribute name="value" type="boolTF.type" />
</xsd:complexType>

<xsd:simpleType name="boolTF.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="true" />
    <xsd:enumeration value="false" />
  </xsd:restriction>
</xsd:simpleType>

<!-- nodes -->
<xsd:element name="node_constraint" type="node_constraint.type" />

<xsd:complexType name="node_constraint.type">
  <xsd:attribute name="name" type="xsd:string" use="optional" />
  <xsd:attribute name="idRef" type="xsd:IDREF" use="required" />
</xsd:complexType>

<!-- edges -->
<xsd:element name="edge_constraint" type="edge_constraint.type" />

<xsd:complexType name="edge_constraint.type">
  <xsd:attribute name="name" type="xsd:string" use="optional" />
  <xsd:attribute name="idRef"   type="xsd:IDREF" use="required" />
</xsd:complexType>

<!-- labels -->
<xsd:element name="label_constraint" type="label_constraint.type" />

<xsd:complexType name="label_constraint.type">
  <xsd:attribute name="name" type="xsd:string" use="optional" />
  <xsd:attribute name="idRef"   type="xsd:IDREF" use="required" />
</xsd:complexType>

<!-- composition -->
<xsd:element name="composed" type="composed.type" />

<xsd:complexType name="composed.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="number" />
      <xsd:element ref="int" />
      <xsd:element ref="boolean" />
      <xsd:element name="node"      type="node_constraint.type" />
      <xsd:element name="edge"      type="edge_constraint.type" />
      <xsd:element name="label"     type="label_constraint.type" />
      <xsd:element ref="composed" />
    </xsd:choice>
  </xsd:sequence>
  <xsd:attribute name="name" type="xsd:string" />
</xsd:complexType>


<!-- ================== -->
<!-- =misc definitions= -->
<!-- ================== -->

<!-- location - coordinates of any elements -->

<xsd:element name="location" type="location.type" />

<xsd:complexType name="location.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attribute name="x" type="xsd:double" use="required" />
  <xsd:attribute name="y" type="xsd:double" use="required" />
  <xsd:attribute name="z" type="xsd:double" use="optional" />
</xsd:complexType>


<!-- uniform resource identifier -->

<xsd:element name="uri" type="uri.type" />

<xsd:complexType name="uri.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attribute name="uri" type="xsd:string" use="required" />
</xsd:complexType>


<!-- font-element for description of labels -->

<xsd:element name="font" type="font.type" />

<xsd:complexType name="font.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attribute name="family"  type="xsd:string" />
  <xsd:attribute name="style"   type="fontStyle.type" />
  <xsd:attribute name="variant" type="fontVariant.type" />
  <xsd:attribute name="weight"  type="fontWeight.type" />
  <xsd:attribute name="stretch" type="fontStretch.type" />
  <xsd:attribute name="size"    type="xsd:integer" />
  <xsd:attribute name="color"   type="xsd:string"  use="required" />
</xsd:complexType>


<xsd:element name="fontStyle" type="fontStyle.type" />

<xsd:simpleType name="fontStyle.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="normal" />
    <xsd:enumeration value="italic" />
    <xsd:enumeration value="oblique" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>

<xsd:element name="fontVariant" type="fontVariant.type" />

<xsd:simpleType name="fontVariant.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="normal" />
    <xsd:enumeration value="small-cpaps" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>

<xsd:element name="fontWeight" type="fontWeight.type" />

<xsd:simpleType name="fontWeight.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="normal" />
    <xsd:enumeration value="bold" />
    <xsd:enumeration value="bolder" />
    <xsd:enumeration value="100" />
    <xsd:enumeration value="200" />
    <xsd:enumeration value="300" />
    <xsd:enumeration value="400" />
    <xsd:enumeration value="500" />
    <xsd:enumeration value="600" />
    <xsd:enumeration value="700" />
    <xsd:enumeration value="800" />
    <xsd:enumeration value="900" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>

<xsd:element name="fontStretch" type="fontStretch.type" />

<xsd:simpleType name="fontStretch.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="normal" />
    <xsd:enumeration value="wider" />
    <xsd:enumeration value="narrower" />
    <xsd:enumeration value="ultra-condensed" />
    <xsd:enumeration value="extra-condensed" />
    <xsd:enumeration value="condensed" />
    <xsd:enumeration value="semi-condensed" />
    <xsd:enumeration value="semi-expanded" />
    <xsd:enumeration value="expanded" />
    <xsd:enumeration value="extra-expanded" />
    <xsd:enumeration value="ultra-expanded" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>



<!-- text-element for description of labels -->

<xsd:element name="text" type="text.type" />

<xsd:complexType name="text.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attribute name="alignment"  type="alignment.type" />
  <xsd:attribute name="decoration" type="decoration.type" />
  <xsd:attribute name="transform"  type="transform.type" />
  <xsd:attribute name="rotation"    type="xsd:integer" />
</xsd:complexType>


<xsd:simpleType name="alignment.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="left" />
    <xsd:enumeration value="center" />
    <xsd:enumeration value="right" />
    <xsd:enumeration value="justify" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="decoration.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="underline" />
    <xsd:enumeration value="overline" />
    <xsd:enumeration value="blink" />
    <xsd:enumeration value="line-through" />
    <xsd:enumeration value="none" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="transform.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="capitalize" />
    <xsd:enumeration value="uppercase" />
    <xsd:enumeration value="lowercase" />
    <xsd:enumeration value="none" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>



<!-- style-definition of endpoints of segments (edges) -->

<xsd:element name="sourceStyle">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="type" type="endpointStyles.type"/>
    <xsd:attribute name="color" type="xsd:string"/>
    <xsd:attribute name="width" type="xsd:integer"/>
    <xsd:attribute name="uri" type="xsd:anyURI"/>
  </xsd:complexType>
</xsd:element>

<xsd:element name="targetStyle">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="type" type="endpointStyles.type"/>
    <xsd:attribute name="color" type="xsd:string"/>
    <xsd:attribute name="width" type="xsd:integer"/>
    <xsd:attribute name="uri" type="xsd:anyURI"/>
  </xsd:complexType>
</xsd:element>

<xsd:simpleType name="endpointStyles.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="arrow" />
    <xsd:enumeration value="circle" />
    <xsd:enumeration value="halfCircle" />
    <xsd:enumeration value="filledCircle" />
    <xsd:enumeration value="filledHalfCircle" />
    <xsd:enumeration value="box" />
    <xsd:enumeration value="halfBox" />
    <xsd:enumeration value="filledBox" />
    <xsd:enumeration value="filledHalfBox" />
    <xsd:enumeration value="rhomb" />
    <xsd:enumeration value="halfRhomb" />
    <xsd:enumeration value="filledRhomb" />
    <xsd:enumeration value="filledHalfRhomb" />
    <xsd:enumeration value="diamond" />
    <xsd:enumeration value="halfDiamond" />
    <xsd:enumeration value="filledDiamond" />
    <xsd:enumeration value="filledHalfDiamond" />
    <xsd:enumeration value="slash" />
    <xsd:enumeration value="doubleSlash" />
    <xsd:enumeration value="solid" />
    <xsd:enumeration value="line" />
    <xsd:enumeration value="none" />
    <xsd:enumeration value="smurf" />
    <xsd:enumeration value="image" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>


<!-- style-definition of node-appearance -->

<xsd:element name="shape">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="type"   type="shape.type" />
    <xsd:attribute name="width"  type="xsd:integer" />
    <xsd:attribute name="height" type="xsd:integer" />
    <xsd:attribute name="uri"    type="xsd:anyURI" />
  </xsd:complexType>
</xsd:element>

<xsd:simpleType name="shape.type">
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="rect" />
    <xsd:enumeration value="triangle" />
    <xsd:enumeration value="circle" />
    <xsd:enumeration value="ellipse" />
    <xsd:enumeration value="hexagon" />
    <xsd:enumeration value="rhomb" />
    <xsd:enumeration value="trapeze" />
    <xsd:enumeration value="upTrapeze" />
    <xsd:enumeration value="lParallelogram" />
    <xsd:enumeration value="rParallelogram" />
    <xsd:enumeration value="pentagon" />
    <xsd:enumeration value="octagon" />
    <xsd:enumeration value="umlClass" />
    <xsd:enumeration value="image" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>


<!-- style-definition for lines (edges(segments) or node-border) -->

<xsd:element name="line">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="type"  type="lineStyleType.type" />
    <xsd:attribute name="width" type="xsd:integer" />
    <xsd:attribute name="color" type="xsd:string" />
  </xsd:complexType>
</xsd:element>


<xsd:element name="lineStyle">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="style" type="lineStyleType.type" />
    <xsd:attribute name="width" type="xsd:string" />
    <xsd:attribute name="color" type="xsd:string" />
  </xsd:complexType>
</xsd:element>


<xsd:element name="lineStyleType" type="lineStyleType.type" />

<xsd:simpleType name="lineStyleType.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="solid" />
    <xsd:enumeration value="dotted" />
    <xsd:enumeration value="dashed" />
    <xsd:enumeration value="double" />
    <xsd:enumeration value="triple" />
    <xsd:enumeration value="groove" />
    <xsd:enumeration value="ridge" />
    <xsd:enumeration value="inset" />
    <xsd:enumeration value="outset" />
    <xsd:enumeration value="none" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>


<!-- definition for node-filling -->

<xsd:element name="fill">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
    <xsd:attribute name="color"        type="xsd:string" />
    <xsd:attribute name="pattern"      type="pattern.type" />
    <xsd:attribute name="patternColor" type="xsd:string" />
  </xsd:complexType>
</xsd:element>


<!-- node-patterns -->

<xsd:element name="pattern" type="pattern.type" />

<xsd:simpleType name="pattern.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:NMTOKEN">
    <xsd:enumeration value="solid" />
    <xsd:enumeration value="striped" />
    <xsd:enumeration value="checked" />
    <xsd:enumeration value="dotted" />
    <xsd:enumeration value="none" />
    <!-- extensible -->
  </xsd:restriction>
</xsd:simpleType>


<!-- template-reference in node-, edge- and label-styles and ~templates -->

<xsd:element name="template" type="template.type" />

<xsd:complexType name="template.type">
  <xsd:attribute name="idRef" type="xsd:IDREF" />
</xsd:complexType>



<!-- ======================== -->
<!-- ==key-data-definitions== -->
<!-- ======================== -->
<xsd:element name="keys" type="keys.type" />

<xsd:complexType name="keys.type">
  <xsd:sequence>
    <xsd:element ref="key" minOccurs="0" maxOccurs="unbounded" />
  </xsd:sequence>
</xsd:complexType>


<xsd:element name="key" type="key.type" />

<xsd:complexType name="key.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element ref="keyValue" minOccurs="1" maxOccurs="unbounded" />
  </xsd:sequence>
  <xsd:attribute name="id" type="xsd:ID" use="required" />
</xsd:complexType>


<xsd:element name="keyValue" type="keyValue.type" />

<xsd:complexType name="keyValue.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence>
    <xsd:element name="dafault" type="xsd:string" minOccurs="0" maxOccurs="1" />
  </xsd:sequence>
  <xsd:attribute name="name" type="xsd:string" use="required" />
  <xsd:attribute name="type" type="xsd:string" use="required" />
</xsd:complexType>


<xsd:element name="data" type="data.type" />

<xsd:complexType name="data.type">
  <xsd:annotation>
    <xsd:documentation>
<!-- something missing -->
    </xsd:documentation>
  </xsd:annotation>
  <xsd:simpleContent>
    <xsd:extension base="xsd:string">
      <xsd:attribute name="idRef" type="xsd:IDREF" />
    </xsd:extension>
  </xsd:simpleContent>
</xsd:complexType>



<!-- ======================= -->
<!-- ==== End of Schema ==== -->
<!-- ======================= -->

</xsd:schema>