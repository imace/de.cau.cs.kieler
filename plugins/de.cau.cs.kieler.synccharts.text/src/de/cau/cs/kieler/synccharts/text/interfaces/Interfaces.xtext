/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2010 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 * 
 *****************************************************************************/
grammar de.cau.cs.kieler.synccharts.text.interfaces.Interfaces with de.cau.cs.kieler.synccharts.text.actions.Actions
 
// haf: ecore import results in NullPointerException during mwe execution
// import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts
import "platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.ecore" as expressions

generate interfaces "http://kieler.cs.cau.de/synccharts/interfaces" 
 
//==============================================================================
// "Buckets" containing the Signals / Regions with Signals
//==============================================================================

StateExtend:
	(
	(regions+=RegionSignalDec) |	
	("input" "output" (inOutputSignals+=InOutputSignals))  |
	("output" (outputSignals+=OutputSignals)) |
	("input" (inputSignals+=InputSignals)) |
	("signal" (signals+=Signals)) 	|
	("variable" (variable+=Variables)) 	
	)+
	;

RegionSignalDec:
	region = [synccharts::Region|ID] ":" (
	("var" vars+=Variable ("," (vars+=Variable))*) |
	("signal" signals+=Signal ("," (signals+=Signal))*) 	
	)
	(
	("," "var" vars+=Variable ("," (vars+=Variable))*) |
	("," "signal" signals+=Signal ("," (signals+=Signal))*) 	
	)* 
	";"
	;
	
Variables:
    (vars+=Variable ("," (vars+=Variable))*) ";"
    ;

Signals:
	(signals+=Signal ("," (signals+=Signal))*) ";"
	;
	
InputSignals:
	(signals+=Signal ("," (signals+=Signal))*) ";"
	;

OutputSignals: 
	(signals+=Signal ("," (signals+=Signal))*) ";"
	;

InOutputSignals:
	(signals+=Signal ("," (signals+=Signal))*) ";"
	;

//==============================================================================
// synccharts elements as needed
//==============================================================================

Signal returns expressions::Signal:
 
	(
	name=ID |
	name=ID ":" (type=ValueType) |
	name=ID (":=" initialValue=STRING_D) |
	name=ID (":=" initialValue=STRING_D) ":" (type=ValueType) |
	name=ID (":=" initialValue=STRING_D) ("combine" (type=ValueType) "with" (combineOperator=CombineOperator)) |
	name=ID ":" (hostType=STRING_S) |
	name=ID (":=" initialValue=STRING_D) ":" (hostType=STRING_S) |
	name=ID (":=" initialValue=STRING_D) ("combine" (hostType=STRING_S) "with" (hostCombineOperator=STRING_S)) | 
	name=ID ("combine" (type=ValueType) "with" (combineOperator=CombineOperator)) |
	name=ID ("combine" (hostType=STRING_S) "with" (hostCombineOperator=STRING_S))	
	)
	;
		
	
Variable returns expressions::Variable:

    (
    name=ID |
    name=ID ":" (type=ValueType) |
    name=ID (":=" initialValue=STRING_D) |
    name=ID (":=" initialValue=STRING_D) ":" (type=ValueType) |
    name=ID ":" (hostType=STRING_S) |
    name=ID (":=" initialValue=STRING_D) ":" (hostType=STRING_S)
    )
;

terminal STRING_D: '"' '"' | ('"' ('\\' '"' | !'"')* ('\\' '"' | !('\\' | '"')) '"');
terminal STRING_S: "'" "'" | ("'" ('\\' "'" | !"'")* ('\\' "'" | !('\\' | "'")) "'");



