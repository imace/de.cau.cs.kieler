module de.cau.cs.kieler.synccharts.text.kitsState.Kits

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/cau/cs/kieler/synccharts/text/kitsState/KitsState.xtext"
var file.extensions = "kitsState"
var projectName = "de.cau.cs.kieler.synccharts.text"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		uriMap = Mapping {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "http://www.eclipse.org/emf/2002/Ecore"
		}
		platformUri = "${runtimeProject}/.."

		registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"		
		registerGeneratedEPackage = "de.cau.cs.kieler.core.annotations.AnnotationsPackage"		
		registerGeneratedEPackage = "de.cau.cs.kieler.core.expressions.ExpressionsPackage"		
		registerGeneratedEPackage = "de.cau.cs.kieler.synccharts.SyncchartsPackage"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen/de/cau/cs/kieler/synccharts/text/kitsState"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen/de/cau/cs/kieler/synccharts/text/kitsState"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			
			// generates Java API for the generated EPackages
			/* 
			fragment = ecore.EcoreGeneratorFragment {
			 	referencedGenModels = "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.genmodel"
			}
			*/
			
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			// the Antlr parser
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true
					backtrack = true
				}
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {

                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
                
            }
            
			// scoping and exporting API
			fragment = scoping.ImportURIScopingFragment {}
			fragment = exporting.SimpleNamesFragment {}
			
			// scoping and exporting API 
			/*
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			*/
			
			// formatter API 
			fragment = ecore2xtext.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// the following fragment tries to use the Antlr based content assist 
			//     fragment which can be downloaded from http://www.itemis.com 
			//     and will be ignored if it's not available. 
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrUiGeneratorFragment { 
				options = {
					classSplitting = true
					backtrack = true
				}
			}

//			fragment = builder.BuilderIntegrationFragment {}

			// project wizard (optional) 
			/*
			fragment = projectWizard.SimpleProjectWizardFragment {
				generatorProjectName = "${projectName}.generator" 
				modelFileExtension = file.extensions
			}
			*/
			
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}			

//			fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
//				lexerGrammar = "de.cau.cs.kieler.synccharts.text.kits.ui.KitsHighlighting"
//				highlighting = true
//			}
		}
	}
}
