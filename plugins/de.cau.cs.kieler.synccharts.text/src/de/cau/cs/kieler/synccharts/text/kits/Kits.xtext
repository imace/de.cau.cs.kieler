grammar de.cau.cs.kieler.synccharts.text.kits.Kits with de.cau.cs.kieler.synccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.ecore" as annotations
import "platform:/resource/de.cau.cs.kieler.core.kexpressions/model/kexpressions.ecore" as kexpressions 
import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts


RootRegion returns synccharts::Region:
	{synccharts::Region}
    (annotations+=ImportAnnotation)*
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (variables+=Variable|signals+=Signal)*
      (bodyText+=TextualCode)* 
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

SingleRegion returns synccharts::Region:
	{synccharts::Region}
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (variables+=Variable|signals+=Signal)*
      (bodyText+=TextualCode)*
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

Region returns synccharts::Region:
	{synccharts::Region}
    (annotations += Annotation)*
    'region' (id=ID)? (label=STRING)? ':'
    (variables+=Variable|signals+=Signal)*
    (bodyText+=TextualCode)* 
    (states+=State)+;

// ---------------------------------------------------------------------------------------------------

State returns synccharts::State:
    (annotations += Annotation)*
    (
      ((isInitial?='init') (isFinal?='final')?)
     |
      ((isFinal?='final') (isInitial?='init')?)
     )?
  
    (type=StateType)? ('state') (id=ID) (label=STRING)?
  
    (
      ('@' bodyReference = [synccharts::State|ID]
        ('[' renamings+= Substitution (',' renamings+= Substitution)* ']')?
       )
     | 
      ('{'
          (
            (signals+=Signal                |
             variables+=Variable            |
             'onentry' entryActions+=Action |
             'oninner' innerActions+=Action |
             'onexit'  exitActions+=Action  |
             'suspension' suspensionTrigger=Action)*
            (bodyText += TextualCode)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
    (outgoingTransitions+=Transition)* ';';

// ---------------------------------------------------------------------------------------------------

Transition returns synccharts::Transition:
    (annotations += Annotation)*
	type=TransitionType (priority=INT)? targetState=[synccharts::State|ID] 
	( 'with'
	 (
	   ( (isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ('/' effects+=Effect (','effects+=Effect)*)? )
	  |
	   ( label=STRING )
	  )
	 )? 	
	(isHistory?='history')?;

// ---------------------------------------------------------------------------------------------------

Signal returns kexpressions::Signal:
    aSignal
    | ISignal;

aSignal returns kexpressions::Signal:
    (annotations+=Annotation)*
    (isInput?='input')?
	(isOutput?='output')?
	'signal' name=ID (':=' initialValue=AnyType)?
    ((':' (type = ValueType | hostType = STRING))
      |
     (':' 'combine' (type = ValueType | hostType = STRING) 'with'
        (combineOperator = CombineOperator | hostCombineOperator = STRING))
    )?;

ISignal returns kexpressions::ISignal:
    (annotations+=Annotation)*
    (isInput?='input')?
	(isOutput?='output')?
	'signal' name=ID (':=' initialValue=AnyType)?
    ((':' (type = ValueType | hostType = STRING))
      |
     (':' 'combine' (type = ValueType | hostType = STRING) 'with'
        (combineOperator = CombineOperator | hostCombineOperator = STRING))
    )?;

// ---------------------------------------------------------------------------------------------------

Variable returns kexpressions::Variable:
    aVariable
    | IVariable;
    
aVariable returns kexpressions::Variable:
    (annotations += Annotation)*
    'var' name=ID (':=' initialValue=AnyType)? ':' (type = ValueType | hostType = STRING);

IVariable returns kexpressions::IVariable:
    (annotations += Annotation)*
    'var' name=ID (':=' initialValue=AnyType)? ':' (type = ValueType | hostType = STRING);

// ---------------------------------------------------------------------------------------------------

TextualCode returns kexpressions::TextualCode:
    'textual' 'code' ( '(' type = ID ')')? ':' code = STRING;

// ---------------------------------------------------------------------------------------------------

Substitution returns synccharts::Substitution:
	actual = ID '/' formal = ID;

// ---------------------------------------------------------------------------------------------------

enum StateType returns synccharts::StateType:
	NORMAL = 'normal' | CONDITIONAL = 'conditional' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns synccharts::TransitionType:
	WEAKABORT = '-->' | STRONGABORT = 'o->' | NORMALTERMINATION = '>->';
