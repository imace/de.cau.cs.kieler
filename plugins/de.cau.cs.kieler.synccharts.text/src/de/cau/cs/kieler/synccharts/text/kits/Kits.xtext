grammar de.cau.cs.kieler.synccharts.text.kits.Kits with de.cau.cs.kieler.synccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.ecore" as expressions 
import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts

Region returns synccharts::Region:
  ( 
    ('Region' (label=ID))? // region ID's are introduced by the keyword "region".       
//     (variables+=Variable|signals+=Signal)* 
     (states+=State) 
  );

// ---------------------------------------------------------------------------------------------------
  
NestedRegion returns synccharts::Region:
  ('Region' (label=ID) (variables+=Variable|signals+=Signal)* (states+=State)*)
  | SingleNestedRegion
  ;

// ---------------------------------------------------------------------------------------------------

SingleNestedRegion returns synccharts::Region:
	(states+=State)+;

// ---------------------------------------------------------------------------------------------------

State returns synccharts::State:
  (
    ((isInitial?='init') (isFinal?='final')?)
   |
    ((isFinal?='final') (isInitial?='init')?)
   )?
  
  (type=StateType)? ('State' | 'States') (id=ID)? (label=EString)
  
  (
    ( (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* )? ';')
   | 
    ('{'
        (
          (signals+=Signal                |
           variables+=Variable            |
           'onentry' entryActions+=Action |
           'oninner' innerActions+=Action |
           'onexit'  exitActions+=Action  |
           'suspension' suspensionTrigger=Action)*
           
          (regions+=NestedRegion ('||' regions+=NestedRegion)*) )
           
        '}' (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ';')?
     ) 
   );

// ---------------------------------------------------------------------------------------------------

Variable returns expressions::Variable:
  'Var' name=ID ((':=' initialValue=IntegerOrString)? ':' type=ValueType) ";";

// ---------------------------------------------------------------------------------------------------

IntegerOrString :
   INT | EString;

// ---------------------------------------------------------------------------------------------------

Signal returns expressions::Signal:
(isInput?='input')?
	(isOutput?='output')?
	'Signal'
	(name=EString)
	(':=' initialValue=EString)?
    ((':' type=ValueType)
      |
     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=EString) )
    )? ";";

// ---------------------------------------------------------------------------------------------------

Transition returns synccharts::Transition:
	type=TransitionType 
	targetState=[synccharts::State|EString]
	('<'priority=INT'>')? 
	('with' (isImmediate?='#')? ("delay:=" delay=INT)? 
	  ( trigger=BooleanExpression)?
      ('/' effects+=Effect (','effects+=Effect)*)?
	)? 
	(isHistory?=' history')?;

enum StateType returns synccharts::StateType:
	NORMAL = 'NORMAL' | CONDITIONAL = 'CONDITIONAL' | REFERENCE = 'REFERENCE' | TEXTUAL = 'TEXTUAL';

enum TransitionType returns synccharts::TransitionType:
	WEAKABORT = '-->' | STRONGABORT = 'o->' | NORMALTERMINATION = '>->';

