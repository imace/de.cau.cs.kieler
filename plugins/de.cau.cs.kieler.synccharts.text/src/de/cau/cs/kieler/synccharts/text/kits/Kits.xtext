grammar de.cau.cs.kieler.synccharts.text.kits.Kits with de.cau.cs.kieler.synccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.ecore" as annotations
import "platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.ecore" as expressions 
import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts


Region returns synccharts::Region:
  (
    (annotations += StringAnnotation)*
    'region' (id=ID)? (label=EString)
    (variables+=Variable|signals+=Signal)* (states+=State)*
   )
  | (states+=State)+
  ;

terminal TRANSITION_LABEL returns ecore::EString: 
    "%" -> "%";

terminal COMMENT_ANNOTATION returns ecore::EString: 
    "/+" -> "+/";
    
terminal ANNOTATION_KEY returns ecore::EString:
    '@' ID;

StringAnnotation returns annotations::Annotation:
	CommentAnnotation
	| KeyValueAnnotation
	;

CommentAnnotation returns annotations::StringAnnotation:
	value=COMMENT_ANNOTATION;
    
KeyValueAnnotation returns annotations::StringAnnotation:
	name=ANNOTATION_KEY value=EString;

State returns synccharts::State:
  (annotations += StringAnnotation)*
  (
    ((isInitial?='init') (isFinal?='final')?)
   |
    ((isFinal?='final') (isInitial?='init')?)
   )?
  
  (type=StateType)? ('state')? (id=ID)? (label=EString)
  
  (
    ( (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* )? ';')
   | 
    ('{'
        (
          (signals+=Signal                |
           variables+=Variable            |
           'onentry' entryActions+=Action |
           'oninner' innerActions+=Action |
           'onexit'  exitActions+=Action  |
           'suspension' suspensionTrigger=Action)*
           
          (regions+=Region ('||' regions+=Region)*) )
           
        '}' (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ';')?
     ) 
   );

// ---------------------------------------------------------------------------------------------------

Transition returns synccharts::Transition:
    (annotations += StringAnnotation)*
	type=TransitionType 
	targetState=[synccharts::State|EString]
	('<'priority=INT'>')? 
	('with' (isImmediate?='#')? ("delay:=" delay=INT)? 
	  ( trigger=BooleanExpression)?
      ('/' effects+=Effect (','effects+=Effect)*)?
	)? 
	(isHistory?='history')? (label=TRANSITION_LABEL)?;

// ---------------------------------------------------------------------------------------------------

Signal returns expressions::Signal:
    (annotations += StringAnnotation)*
    (isInput?='input')?
	(isOutput?='output')?
	'signal'
	(name=ID)
	(':=' initialValue=EString)?
    ((':' type=ValueType)
      |
     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator|hostCombineOperator=EString) )
    )? ";";

// ---------------------------------------------------------------------------------------------------

Variable returns expressions::Variable:
    (annotations += StringAnnotation)*
    'var' name=ID ((':=' initialValue=IntegerOrString)? ':' type=ValueType) ";";

// ---------------------------------------------------------------------------------------------------

IntegerOrString returns ecore::EString:
    INT | EString;

enum StateType returns synccharts::StateType:
	NORMAL = 'normal' | CONDITIONAL = 'conditional' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns synccharts::TransitionType:
	WEAKABORT = '-->' | STRONGABORT = 'o->' | NORMALTERMINATION = '>->';

