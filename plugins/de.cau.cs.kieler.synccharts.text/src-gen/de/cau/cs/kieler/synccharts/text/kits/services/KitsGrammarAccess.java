/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.text.kits.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.synccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.expressions.services.ExpressionsGrammarAccess;

@Singleton
public class KitsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRegionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Assignment cInnerStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerStatesStateParserRuleCall_1_0 = (RuleCall)cInnerStatesAssignment_1.eContents().get(0);
		
		//Region returns synccharts::Region:
		//	("Region" label=ID)? // region ID's are introduced by the keyword "region".       
		//	//     (variables+=Variable|signals+=Signal)* 
		//	innerStates+=State;
		public ParserRule getRule() { return rule; }

		//("Region" label=ID)? // region ID's are introduced by the keyword "region".       
		////     (variables+=Variable|signals+=Signal)* 
		//innerStates+=State
		public Group getGroup() { return cGroup; }

		//("Region" label=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"Region"
		public Keyword getRegionKeyword_0_0() { return cRegionKeyword_0_0; }

		//label=ID
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_1_0() { return cLabelIDTerminalRuleCall_0_1_0; }

		//innerStates+=State
		public Assignment getInnerStatesAssignment_1() { return cInnerStatesAssignment_1; }

		//State
		public RuleCall getInnerStatesStateParserRuleCall_1_0() { return cInnerStatesStateParserRuleCall_1_0; }
	}

	public class NestedRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cRegionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cVariablesAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_0_2_0_0 = (RuleCall)cVariablesAssignment_0_2_0.eContents().get(0);
		private final Assignment cSignalsAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_2_1_0 = (RuleCall)cSignalsAssignment_0_2_1.eContents().get(0);
		private final Assignment cInnerStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerStatesStateParserRuleCall_1_0 = (RuleCall)cInnerStatesAssignment_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//NestedRegion returns synccharts::Region:
		//	("Region" label=ID (variables+=Variable | signals+=Signal)*)? innerStates+=State*;
		public ParserRule getRule() { return rule; }

		//("Region" label=ID (variables+=Variable | signals+=Signal)*)? innerStates+=State*
		public Group getGroup() { return cGroup; }

		//("Region" label=ID (variables+=Variable | signals+=Signal)*)?
		public Group getGroup_0() { return cGroup_0; }

		//"Region"
		public Keyword getRegionKeyword_0_0() { return cRegionKeyword_0_0; }

		//label=ID
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_1_0() { return cLabelIDTerminalRuleCall_0_1_0; }

		//(variables+=Variable | signals+=Signal)*
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//variables+=Variable
		public Assignment getVariablesAssignment_0_2_0() { return cVariablesAssignment_0_2_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0_2_0_0() { return cVariablesVariableParserRuleCall_0_2_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_2_1() { return cSignalsAssignment_0_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_2_1_0() { return cSignalsSignalParserRuleCall_0_2_1_0; }

		//innerStates+=State*
		public Assignment getInnerStatesAssignment_1() { return cInnerStatesAssignment_1; }

		//State
		public RuleCall getInnerStatesStateParserRuleCall_1_0() { return cInnerStatesStateParserRuleCall_1_0; }
	}

	public class SingleNestedRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleNestedRegion");
		private final Assignment cInnerStatesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInnerStatesStateParserRuleCall_0 = (RuleCall)cInnerStatesAssignment.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//SingleNestedRegion returns synccharts::Region:
		//	innerStates+=State+;
		public ParserRule getRule() { return rule; }

		//innerStates+=State+
		public Assignment getInnerStatesAssignment() { return cInnerStatesAssignment; }

		//State
		public RuleCall getInnerStatesStateParserRuleCall_0() { return cInnerStatesStateParserRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_0_0_0_0_0 = (Keyword)cIsInitialAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_0_0_0_1_0 = (Keyword)cIsFinalAssignment_0_0_0_1.eContents().get(0);
		private final Keyword cStateKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIdAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_0_0_2_0 = (RuleCall)cIdAssignment_0_0_2.eContents().get(0);
		private final Assignment cLabelAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_0_3_0 = (RuleCall)cLabelAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Assignment cIsFinalAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_0_1_0_0_0 = (Keyword)cIsFinalAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_0_1_0_1_0 = (Keyword)cIsInitialAssignment_0_1_0_1.eContents().get(0);
		private final Keyword cStateKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cIdAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_0_1_2_0 = (RuleCall)cIdAssignment_0_1_2.eContents().get(0);
		private final Assignment cLabelAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_1_3_0 = (RuleCall)cLabelAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_2_0_0 = (RuleCall)cTypeAssignment_0_2_0.eContents().get(0);
		private final Keyword cStateKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cIdAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_0_2_2_0 = (RuleCall)cIdAssignment_0_2_2.eContents().get(0);
		private final Assignment cLabelAssignment_0_2_3 = (Assignment)cGroup_0_2.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_2_3_0 = (RuleCall)cLabelAssignment_0_2_3.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_1_0_0_0_0 = (RuleCall)cOutgoingTransitionsAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_1_0_0_1_1_0 = (RuleCall)cOutgoingTransitionsAssignment_1_0_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cRegionsAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cRegionsSingleNestedRegionParserRuleCall_1_1_1_0_0 = (RuleCall)cRegionsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cRegionsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cRegionsNestedRegionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cRegionsAssignment_1_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1_2 = (Group)cGroup_1_1_1_1.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_1_1_2_0 = (Keyword)cGroup_1_1_1_1_2.eContents().get(0);
		private final Assignment cRegionsAssignment_1_1_1_1_2_1 = (Assignment)cGroup_1_1_1_1_2.eContents().get(1);
		private final RuleCall cRegionsNestedRegionParserRuleCall_1_1_1_1_2_1_0 = (RuleCall)cRegionsAssignment_1_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_1_3 = (Keyword)cGroup_1_1_1_1.eContents().get(3);
		private final Group cGroup_1_1_1_2 = (Group)cAlternatives_1_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_1_2_0 = (Alternatives)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cSignalsAssignment_1_1_1_2_0_0 = (Assignment)cAlternatives_1_1_1_2_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_1_1_1_2_0_0_0 = (RuleCall)cSignalsAssignment_1_1_1_2_0_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_1_2_0_1 = (Assignment)cAlternatives_1_1_1_2_0.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_1_1_2_0_1_0 = (RuleCall)cVariablesAssignment_1_1_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_0_2 = (Group)cAlternatives_1_1_1_2_0.eContents().get(2);
		private final Keyword cOnentryKeyword_1_1_1_2_0_2_0 = (Keyword)cGroup_1_1_1_2_0_2.eContents().get(0);
		private final Assignment cEntryActionsAssignment_1_1_1_2_0_2_1 = (Assignment)cGroup_1_1_1_2_0_2.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_1_1_1_2_0_2_1_0 = (RuleCall)cEntryActionsAssignment_1_1_1_2_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_0_3 = (Group)cAlternatives_1_1_1_2_0.eContents().get(3);
		private final Keyword cOninnerKeyword_1_1_1_2_0_3_0 = (Keyword)cGroup_1_1_1_2_0_3.eContents().get(0);
		private final Assignment cInnerActionsAssignment_1_1_1_2_0_3_1 = (Assignment)cGroup_1_1_1_2_0_3.eContents().get(1);
		private final RuleCall cInnerActionsActionParserRuleCall_1_1_1_2_0_3_1_0 = (RuleCall)cInnerActionsAssignment_1_1_1_2_0_3_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_0_4 = (Group)cAlternatives_1_1_1_2_0.eContents().get(4);
		private final Keyword cOnexitKeyword_1_1_1_2_0_4_0 = (Keyword)cGroup_1_1_1_2_0_4.eContents().get(0);
		private final Assignment cExitActionsAssignment_1_1_1_2_0_4_1 = (Assignment)cGroup_1_1_1_2_0_4.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_1_1_1_2_0_4_1_0 = (RuleCall)cExitActionsAssignment_1_1_1_2_0_4_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_0_5 = (Group)cAlternatives_1_1_1_2_0.eContents().get(5);
		private final Keyword cSuspensionKeyword_1_1_1_2_0_5_0 = (Keyword)cGroup_1_1_1_2_0_5.eContents().get(0);
		private final Assignment cSuspensionTriggerAssignment_1_1_1_2_0_5_1 = (Assignment)cGroup_1_1_1_2_0_5.eContents().get(1);
		private final RuleCall cSuspensionTriggerActionParserRuleCall_1_1_1_2_0_5_1_0 = (RuleCall)cSuspensionTriggerAssignment_1_1_1_2_0_5_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_2_1 = (Alternatives)cGroup_1_1_1_2.eContents().get(1);
		private final Assignment cSignalsAssignment_1_1_1_2_1_0 = (Assignment)cAlternatives_1_1_1_2_1.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_1_1_1_2_1_0_0 = (RuleCall)cSignalsAssignment_1_1_1_2_1_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_1_2_1_1 = (Assignment)cAlternatives_1_1_1_2_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_1_1_2_1_1_0 = (RuleCall)cVariablesAssignment_1_1_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_1_2 = (Group)cAlternatives_1_1_1_2_1.eContents().get(2);
		private final Keyword cOnentryKeyword_1_1_1_2_1_2_0 = (Keyword)cGroup_1_1_1_2_1_2.eContents().get(0);
		private final Assignment cEntryActionsAssignment_1_1_1_2_1_2_1 = (Assignment)cGroup_1_1_1_2_1_2.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_1_1_1_2_1_2_1_0 = (RuleCall)cEntryActionsAssignment_1_1_1_2_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_1_3 = (Group)cAlternatives_1_1_1_2_1.eContents().get(3);
		private final Keyword cOninnerKeyword_1_1_1_2_1_3_0 = (Keyword)cGroup_1_1_1_2_1_3.eContents().get(0);
		private final Assignment cInnerActionsAssignment_1_1_1_2_1_3_1 = (Assignment)cGroup_1_1_1_2_1_3.eContents().get(1);
		private final RuleCall cInnerActionsActionParserRuleCall_1_1_1_2_1_3_1_0 = (RuleCall)cInnerActionsAssignment_1_1_1_2_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_1_4 = (Group)cAlternatives_1_1_1_2_1.eContents().get(4);
		private final Keyword cOnexitKeyword_1_1_1_2_1_4_0 = (Keyword)cGroup_1_1_1_2_1_4.eContents().get(0);
		private final Assignment cExitActionsAssignment_1_1_1_2_1_4_1 = (Assignment)cGroup_1_1_1_2_1_4.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_1_1_1_2_1_4_1_0 = (RuleCall)cExitActionsAssignment_1_1_1_2_1_4_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_1_5 = (Group)cAlternatives_1_1_1_2_1.eContents().get(5);
		private final Keyword cSuspensionKeyword_1_1_1_2_1_5_0 = (Keyword)cGroup_1_1_1_2_1_5.eContents().get(0);
		private final Assignment cSuspensionTriggerAssignment_1_1_1_2_1_5_1 = (Assignment)cGroup_1_1_1_2_1_5.eContents().get(1);
		private final RuleCall cSuspensionTriggerActionParserRuleCall_1_1_1_2_1_5_1_0 = (RuleCall)cSuspensionTriggerAssignment_1_1_1_2_1_5_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_2_2 = (Alternatives)cGroup_1_1_1_2.eContents().get(2);
		private final Assignment cRegionsAssignment_1_1_1_2_2_0 = (Assignment)cAlternatives_1_1_1_2_2.eContents().get(0);
		private final RuleCall cRegionsSingleNestedRegionParserRuleCall_1_1_1_2_2_0_0 = (RuleCall)cRegionsAssignment_1_1_1_2_2_0.eContents().get(0);
		private final Group cGroup_1_1_1_2_2_1 = (Group)cAlternatives_1_1_1_2_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_2_2_1_0 = (Keyword)cGroup_1_1_1_2_2_1.eContents().get(0);
		private final Assignment cRegionsAssignment_1_1_1_2_2_1_1 = (Assignment)cGroup_1_1_1_2_2_1.eContents().get(1);
		private final RuleCall cRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_1_0 = (RuleCall)cRegionsAssignment_1_1_1_2_2_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2_2_1_2 = (Group)cGroup_1_1_1_2_2_1.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_1_2_2_1_2_0 = (Keyword)cGroup_1_1_1_2_2_1_2.eContents().get(0);
		private final Assignment cRegionsAssignment_1_1_1_2_2_1_2_1 = (Assignment)cGroup_1_1_1_2_2_1_2.eContents().get(1);
		private final RuleCall cRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_2_1_0 = (RuleCall)cRegionsAssignment_1_1_1_2_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_2_2_1_3 = (Keyword)cGroup_1_1_1_2_2_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cOutgoingTransitionsAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_1_1_3_0_0 = (RuleCall)cOutgoingTransitionsAssignment_1_1_3_0.eContents().get(0);
		private final Group cGroup_1_1_3_1 = (Group)cGroup_1_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_0 = (Keyword)cGroup_1_1_3_1.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_1_1_3_1_1 = (Assignment)cGroup_1_1_3_1.eContents().get(1);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_1_1_3_1_1_0 = (RuleCall)cOutgoingTransitionsAssignment_1_1_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		
		//// ---------------------------------------------------------------------------------------------------
		//State returns synccharts::State:
		//	((isInitial?="init" isFinal?="final"?) "State"? id=ID? label=STRING | (isFinal?="final" isInitial?="init"?) "State"?
		//	id=ID? label=STRING | type=StateType? "State"? id=ID? label=STRING) ((outgoingTransitions+=Transition (","
		//	outgoingTransitions+=Transition)*)? ";" | "{" (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
		//	regions+=NestedRegion)* "]" | (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner"
		//	innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action) (signals+=Signal |
		//	variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action |
		//	"suspension" suspensionTrigger=Action)* (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
		//	regions+=NestedRegion)* "]")?) "}" (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?);
		public ParserRule getRule() { return rule; }

		//((isInitial?="init" isFinal?="final"?) "State"? id=ID? label=STRING | (isFinal?="final" isInitial?="init"?) "State"?
		//id=ID? label=STRING | type=StateType? "State"? id=ID? label=STRING) ((outgoingTransitions+=Transition (","
		//outgoingTransitions+=Transition)*)? ";" | "{" (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
		//regions+=NestedRegion)* "]" | (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner"
		//innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action) (signals+=Signal |
		//variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action |
		//"suspension" suspensionTrigger=Action)* (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
		//regions+=NestedRegion)* "]")?) "}" (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?)
		public Group getGroup() { return cGroup; }

		//(isInitial?="init" isFinal?="final"?) "State"? id=ID? label=STRING | (isFinal?="final" isInitial?="init"?) "State"?
		//id=ID? label=STRING | type=StateType? "State"? id=ID? label=STRING
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//(isInitial?="init" isFinal?="final"?) "State"? id=ID? label=STRING
		public Group getGroup_0_0() { return cGroup_0_0; }

		//isInitial?="init" isFinal?="final"?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_0_0_0_0() { return cIsInitialAssignment_0_0_0_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_0_0_0_0() { return cIsInitialInitKeyword_0_0_0_0_0; }

		//isFinal?="final"?
		public Assignment getIsFinalAssignment_0_0_0_1() { return cIsFinalAssignment_0_0_0_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_0_0_1_0() { return cIsFinalFinalKeyword_0_0_0_1_0; }

		//"State"?
		public Keyword getStateKeyword_0_0_1() { return cStateKeyword_0_0_1; }

		//id=ID?
		public Assignment getIdAssignment_0_0_2() { return cIdAssignment_0_0_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_2_0() { return cIdIDTerminalRuleCall_0_0_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_0_0_3() { return cLabelAssignment_0_0_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_0_3_0() { return cLabelSTRINGTerminalRuleCall_0_0_3_0; }

		//(isFinal?="final" isInitial?="init"?) "State"? id=ID? label=STRING
		public Group getGroup_0_1() { return cGroup_0_1; }

		//isFinal?="final" isInitial?="init"?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_0_1_0_0() { return cIsFinalAssignment_0_1_0_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_0_1_0_0_0() { return cIsFinalFinalKeyword_0_1_0_0_0; }

		//isInitial?="init"?
		public Assignment getIsInitialAssignment_0_1_0_1() { return cIsInitialAssignment_0_1_0_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_0_1_0_1_0() { return cIsInitialInitKeyword_0_1_0_1_0; }

		//"State"?
		public Keyword getStateKeyword_0_1_1() { return cStateKeyword_0_1_1; }

		//id=ID?
		public Assignment getIdAssignment_0_1_2() { return cIdAssignment_0_1_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_1_2_0() { return cIdIDTerminalRuleCall_0_1_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_0_1_3() { return cLabelAssignment_0_1_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_1_3_0() { return cLabelSTRINGTerminalRuleCall_0_1_3_0; }

		//type=StateType? "State"? id=ID? label=STRING
		public Group getGroup_0_2() { return cGroup_0_2; }

		//type=StateType?
		public Assignment getTypeAssignment_0_2_0() { return cTypeAssignment_0_2_0; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_2_0_0() { return cTypeStateTypeEnumRuleCall_0_2_0_0; }

		//"State"?
		public Keyword getStateKeyword_0_2_1() { return cStateKeyword_0_2_1; }

		//id=ID?
		public Assignment getIdAssignment_0_2_2() { return cIdAssignment_0_2_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_2_2_0() { return cIdIDTerminalRuleCall_0_2_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_0_2_3() { return cLabelAssignment_0_2_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_2_3_0() { return cLabelSTRINGTerminalRuleCall_0_2_3_0; }

		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)*)? ";" | "{" (regions+=SingleNestedRegion | "["
		//regions+=NestedRegion ("||" regions+=NestedRegion)* "]" | (signals+=Signal | variables+=Variable | "onentry"
		//entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension"
		//suspensionTrigger=Action) (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner"
		//innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
		//(regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]")?) "}"
		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)*)? ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)*)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//outgoingTransitions+=Transition
		public Assignment getOutgoingTransitionsAssignment_1_0_0_0() { return cOutgoingTransitionsAssignment_1_0_0_0; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_1_0_0_0_0() { return cOutgoingTransitionsTransitionParserRuleCall_1_0_0_0_0; }

		//("," outgoingTransitions+=Transition)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }

		//outgoingTransitions+=Transition
		public Assignment getOutgoingTransitionsAssignment_1_0_0_1_1() { return cOutgoingTransitionsAssignment_1_0_0_1_1; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_1_0_0_1_1_0() { return cOutgoingTransitionsTransitionParserRuleCall_1_0_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//"{" (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]" | (signals+=Signal |
		//variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action |
		//"suspension" suspensionTrigger=Action) (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action |
		//"oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
		//(regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]")?) "}"
		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]" | (signals+=Signal |
		//variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action |
		//"suspension" suspensionTrigger=Action) (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action |
		//"oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
		//(regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]")?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//regions+=SingleNestedRegion
		public Assignment getRegionsAssignment_1_1_1_0() { return cRegionsAssignment_1_1_1_0; }

		//SingleNestedRegion
		public RuleCall getRegionsSingleNestedRegionParserRuleCall_1_1_1_0_0() { return cRegionsSingleNestedRegionParserRuleCall_1_1_1_0_0; }

		//"[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]"
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_1_0() { return cLeftSquareBracketKeyword_1_1_1_1_0; }

		//regions+=NestedRegion
		public Assignment getRegionsAssignment_1_1_1_1_1() { return cRegionsAssignment_1_1_1_1_1; }

		//NestedRegion
		public RuleCall getRegionsNestedRegionParserRuleCall_1_1_1_1_1_0() { return cRegionsNestedRegionParserRuleCall_1_1_1_1_1_0; }

		//("||" regions+=NestedRegion)*
		public Group getGroup_1_1_1_1_2() { return cGroup_1_1_1_1_2; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_1_1_2_0() { return cVerticalLineVerticalLineKeyword_1_1_1_1_2_0; }

		//regions+=NestedRegion
		public Assignment getRegionsAssignment_1_1_1_1_2_1() { return cRegionsAssignment_1_1_1_1_2_1; }

		//NestedRegion
		public RuleCall getRegionsNestedRegionParserRuleCall_1_1_1_1_2_1_0() { return cRegionsNestedRegionParserRuleCall_1_1_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_1_3() { return cRightSquareBracketKeyword_1_1_1_1_3; }

		//(signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action) (signals+=Signal | variables+=Variable | "onentry"
		//entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension"
		//suspensionTrigger=Action)* (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]")?
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action
		public Alternatives getAlternatives_1_1_1_2_0() { return cAlternatives_1_1_1_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_1_1_1_2_0_0() { return cSignalsAssignment_1_1_1_2_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_1_1_1_2_0_0_0() { return cSignalsSignalParserRuleCall_1_1_1_2_0_0_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_1_1_1_2_0_1() { return cVariablesAssignment_1_1_1_2_0_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_1_1_2_0_1_0() { return cVariablesVariableParserRuleCall_1_1_1_2_0_1_0; }

		//"onentry" entryActions+=Action
		public Group getGroup_1_1_1_2_0_2() { return cGroup_1_1_1_2_0_2; }

		//"onentry"
		public Keyword getOnentryKeyword_1_1_1_2_0_2_0() { return cOnentryKeyword_1_1_1_2_0_2_0; }

		//entryActions+=Action
		public Assignment getEntryActionsAssignment_1_1_1_2_0_2_1() { return cEntryActionsAssignment_1_1_1_2_0_2_1; }

		//Action
		public RuleCall getEntryActionsActionParserRuleCall_1_1_1_2_0_2_1_0() { return cEntryActionsActionParserRuleCall_1_1_1_2_0_2_1_0; }

		//"oninner" innerActions+=Action
		public Group getGroup_1_1_1_2_0_3() { return cGroup_1_1_1_2_0_3; }

		//"oninner"
		public Keyword getOninnerKeyword_1_1_1_2_0_3_0() { return cOninnerKeyword_1_1_1_2_0_3_0; }

		//innerActions+=Action
		public Assignment getInnerActionsAssignment_1_1_1_2_0_3_1() { return cInnerActionsAssignment_1_1_1_2_0_3_1; }

		//Action
		public RuleCall getInnerActionsActionParserRuleCall_1_1_1_2_0_3_1_0() { return cInnerActionsActionParserRuleCall_1_1_1_2_0_3_1_0; }

		//"onexit" exitActions+=Action
		public Group getGroup_1_1_1_2_0_4() { return cGroup_1_1_1_2_0_4; }

		//"onexit"
		public Keyword getOnexitKeyword_1_1_1_2_0_4_0() { return cOnexitKeyword_1_1_1_2_0_4_0; }

		//exitActions+=Action
		public Assignment getExitActionsAssignment_1_1_1_2_0_4_1() { return cExitActionsAssignment_1_1_1_2_0_4_1; }

		//Action
		public RuleCall getExitActionsActionParserRuleCall_1_1_1_2_0_4_1_0() { return cExitActionsActionParserRuleCall_1_1_1_2_0_4_1_0; }

		//"suspension" suspensionTrigger=Action
		public Group getGroup_1_1_1_2_0_5() { return cGroup_1_1_1_2_0_5; }

		//"suspension"
		public Keyword getSuspensionKeyword_1_1_1_2_0_5_0() { return cSuspensionKeyword_1_1_1_2_0_5_0; }

		//suspensionTrigger=Action
		public Assignment getSuspensionTriggerAssignment_1_1_1_2_0_5_1() { return cSuspensionTriggerAssignment_1_1_1_2_0_5_1; }

		//Action
		public RuleCall getSuspensionTriggerActionParserRuleCall_1_1_1_2_0_5_1_0() { return cSuspensionTriggerActionParserRuleCall_1_1_1_2_0_5_1_0; }

		//(signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action)*
		public Alternatives getAlternatives_1_1_1_2_1() { return cAlternatives_1_1_1_2_1; }

		//signals+=Signal
		public Assignment getSignalsAssignment_1_1_1_2_1_0() { return cSignalsAssignment_1_1_1_2_1_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_1_1_1_2_1_0_0() { return cSignalsSignalParserRuleCall_1_1_1_2_1_0_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_1_1_1_2_1_1() { return cVariablesAssignment_1_1_1_2_1_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_1_1_2_1_1_0() { return cVariablesVariableParserRuleCall_1_1_1_2_1_1_0; }

		//"onentry" entryActions+=Action
		public Group getGroup_1_1_1_2_1_2() { return cGroup_1_1_1_2_1_2; }

		//"onentry"
		public Keyword getOnentryKeyword_1_1_1_2_1_2_0() { return cOnentryKeyword_1_1_1_2_1_2_0; }

		//entryActions+=Action
		public Assignment getEntryActionsAssignment_1_1_1_2_1_2_1() { return cEntryActionsAssignment_1_1_1_2_1_2_1; }

		//Action
		public RuleCall getEntryActionsActionParserRuleCall_1_1_1_2_1_2_1_0() { return cEntryActionsActionParserRuleCall_1_1_1_2_1_2_1_0; }

		//"oninner" innerActions+=Action
		public Group getGroup_1_1_1_2_1_3() { return cGroup_1_1_1_2_1_3; }

		//"oninner"
		public Keyword getOninnerKeyword_1_1_1_2_1_3_0() { return cOninnerKeyword_1_1_1_2_1_3_0; }

		//innerActions+=Action
		public Assignment getInnerActionsAssignment_1_1_1_2_1_3_1() { return cInnerActionsAssignment_1_1_1_2_1_3_1; }

		//Action
		public RuleCall getInnerActionsActionParserRuleCall_1_1_1_2_1_3_1_0() { return cInnerActionsActionParserRuleCall_1_1_1_2_1_3_1_0; }

		//"onexit" exitActions+=Action
		public Group getGroup_1_1_1_2_1_4() { return cGroup_1_1_1_2_1_4; }

		//"onexit"
		public Keyword getOnexitKeyword_1_1_1_2_1_4_0() { return cOnexitKeyword_1_1_1_2_1_4_0; }

		//exitActions+=Action
		public Assignment getExitActionsAssignment_1_1_1_2_1_4_1() { return cExitActionsAssignment_1_1_1_2_1_4_1; }

		//Action
		public RuleCall getExitActionsActionParserRuleCall_1_1_1_2_1_4_1_0() { return cExitActionsActionParserRuleCall_1_1_1_2_1_4_1_0; }

		//"suspension" suspensionTrigger=Action
		public Group getGroup_1_1_1_2_1_5() { return cGroup_1_1_1_2_1_5; }

		//"suspension"
		public Keyword getSuspensionKeyword_1_1_1_2_1_5_0() { return cSuspensionKeyword_1_1_1_2_1_5_0; }

		//suspensionTrigger=Action
		public Assignment getSuspensionTriggerAssignment_1_1_1_2_1_5_1() { return cSuspensionTriggerAssignment_1_1_1_2_1_5_1; }

		//Action
		public RuleCall getSuspensionTriggerActionParserRuleCall_1_1_1_2_1_5_1_0() { return cSuspensionTriggerActionParserRuleCall_1_1_1_2_1_5_1_0; }

		//(regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]")?
		public Alternatives getAlternatives_1_1_1_2_2() { return cAlternatives_1_1_1_2_2; }

		//regions+=SingleNestedRegion
		public Assignment getRegionsAssignment_1_1_1_2_2_0() { return cRegionsAssignment_1_1_1_2_2_0; }

		//SingleNestedRegion
		public RuleCall getRegionsSingleNestedRegionParserRuleCall_1_1_1_2_2_0_0() { return cRegionsSingleNestedRegionParserRuleCall_1_1_1_2_2_0_0; }

		//"[" regions+=NestedRegion ("||" regions+=NestedRegion)* "]"
		public Group getGroup_1_1_1_2_2_1() { return cGroup_1_1_1_2_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_2_2_1_0() { return cLeftSquareBracketKeyword_1_1_1_2_2_1_0; }

		//regions+=NestedRegion
		public Assignment getRegionsAssignment_1_1_1_2_2_1_1() { return cRegionsAssignment_1_1_1_2_2_1_1; }

		//NestedRegion
		public RuleCall getRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_1_0() { return cRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_1_0; }

		//("||" regions+=NestedRegion)*
		public Group getGroup_1_1_1_2_2_1_2() { return cGroup_1_1_1_2_2_1_2; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_1_2_2_1_2_0() { return cVerticalLineVerticalLineKeyword_1_1_1_2_2_1_2_0; }

		//regions+=NestedRegion
		public Assignment getRegionsAssignment_1_1_1_2_2_1_2_1() { return cRegionsAssignment_1_1_1_2_2_1_2_1; }

		//NestedRegion
		public RuleCall getRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_2_1_0() { return cRegionsNestedRegionParserRuleCall_1_1_1_2_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_2_2_1_3() { return cRightSquareBracketKeyword_1_1_1_2_2_1_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//(outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//outgoingTransitions+=Transition
		public Assignment getOutgoingTransitionsAssignment_1_1_3_0() { return cOutgoingTransitionsAssignment_1_1_3_0; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_1_1_3_0_0() { return cOutgoingTransitionsTransitionParserRuleCall_1_1_3_0_0; }

		//("," outgoingTransitions+=Transition)*
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_0() { return cCommaKeyword_1_1_3_1_0; }

		//outgoingTransitions+=Transition
		public Assignment getOutgoingTransitionsAssignment_1_1_3_1_1() { return cOutgoingTransitionsAssignment_1_1_3_1_1; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_1_1_3_1_1_0() { return cOutgoingTransitionsTransitionParserRuleCall_1_1_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_3_2() { return cSemicolonKeyword_1_1_3_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cInitialValueAssignment_2_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypeValueTypeEnumRuleCall_2_2_0 = (RuleCall)cTypeAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ---------------------------------------------------------------------------------------------------
		//Variable returns expressions::Variable:
		//	"var" name=ID ((":=" initialValue=STRING)? ":" type=ValueType) ";";
		public ParserRule getRule() { return rule; }

		//"var" name=ID ((":=" initialValue=STRING)? ":" type=ValueType) ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":=" initialValue=STRING)? ":" type=ValueType
		public Group getGroup_2() { return cGroup_2; }

		//(":=" initialValue=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0_0() { return cColonEqualsSignKeyword_2_0_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_2_0_1() { return cInitialValueAssignment_2_0_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_2_0_1_0() { return cInitialValueSTRINGTerminalRuleCall_2_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//type=ValueType
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_2_2_0() { return cTypeValueTypeEnumRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsInputInputKeyword_0_0 = (Keyword)cIsInputAssignment_0.eContents().get(0);
		private final Assignment cIsOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsOutputOutputKeyword_1_0 = (Keyword)cIsOutputAssignment_1.eContents().get(0);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cColonKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTypeAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_5_0_1_0 = (RuleCall)cTypeAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cColonKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cCombineKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cTypeAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cTypeValueTypeEnumRuleCall_5_1_2_0 = (RuleCall)cTypeAssignment_5_1_2.eContents().get(0);
		private final Keyword cWithKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		private final Alternatives cAlternatives_5_1_4 = (Alternatives)cGroup_5_1.eContents().get(4);
		private final Assignment cCombineOperatorAssignment_5_1_4_0 = (Assignment)cAlternatives_5_1_4.eContents().get(0);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0 = (RuleCall)cCombineOperatorAssignment_5_1_4_0.eContents().get(0);
		private final Assignment cHostCombineOperatorAssignment_5_1_4_1 = (Assignment)cAlternatives_5_1_4.eContents().get(1);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_5_1_4_1_0 = (RuleCall)cHostCombineOperatorAssignment_5_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ---------------------------------------------------------------------------------------------------
		//Signal returns expressions::Signal:
		//	isInput?="input"? isOutput?="output"? "signal" name=STRING (":=" initialValue=STRING)? (":" type=ValueType | ":"
		//	"combine" type=ValueType "with" (combineOperator=CombineOperator | hostCombineOperator=STRING))? ";";
		public ParserRule getRule() { return rule; }

		//isInput?="input"? isOutput?="output"? "signal" name=STRING (":=" initialValue=STRING)? (":" type=ValueType | ":"
		//"combine" type=ValueType "with" (combineOperator=CombineOperator | hostCombineOperator=STRING))? ";"
		public Group getGroup() { return cGroup; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_0() { return cIsInputAssignment_0; }

		//"input"
		public Keyword getIsInputInputKeyword_0_0() { return cIsInputInputKeyword_0_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_1() { return cIsOutputAssignment_1; }

		//"output"
		public Keyword getIsOutputOutputKeyword_1_0() { return cIsOutputOutputKeyword_1_0; }

		//"signal"
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }

		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }

		//(":=" initialValue=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//":="
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_4_1_0() { return cInitialValueSTRINGTerminalRuleCall_4_1_0; }

		//(":" type=ValueType | ":" "combine" type=ValueType "with" (combineOperator=CombineOperator |
		//hostCombineOperator=STRING))?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//":" type=ValueType
		public Group getGroup_5_0() { return cGroup_5_0; }

		//":"
		public Keyword getColonKeyword_5_0_0() { return cColonKeyword_5_0_0; }

		//type=ValueType
		public Assignment getTypeAssignment_5_0_1() { return cTypeAssignment_5_0_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_5_0_1_0() { return cTypeValueTypeEnumRuleCall_5_0_1_0; }

		//":" "combine" type=ValueType "with" (combineOperator=CombineOperator | hostCombineOperator=STRING)
		public Group getGroup_5_1() { return cGroup_5_1; }

		//":"
		public Keyword getColonKeyword_5_1_0() { return cColonKeyword_5_1_0; }

		//"combine"
		public Keyword getCombineKeyword_5_1_1() { return cCombineKeyword_5_1_1; }

		//type=ValueType
		public Assignment getTypeAssignment_5_1_2() { return cTypeAssignment_5_1_2; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_5_1_2_0() { return cTypeValueTypeEnumRuleCall_5_1_2_0; }

		//"with"
		public Keyword getWithKeyword_5_1_3() { return cWithKeyword_5_1_3; }

		//combineOperator=CombineOperator | hostCombineOperator=STRING
		public Alternatives getAlternatives_5_1_4() { return cAlternatives_5_1_4; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_5_1_4_0() { return cCombineOperatorAssignment_5_1_4_0; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0() { return cCombineOperatorCombineOperatorEnumRuleCall_5_1_4_0_0; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_5_1_4_1() { return cHostCombineOperatorAssignment_5_1_4_1; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_5_1_4_1_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_5_1_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTargetStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateStateCrossReference_1_0 = (CrossReference)cTargetStateAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateStateSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cTargetStateStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPriorityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_2_1_0 = (RuleCall)cPriorityAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsImmediateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cIsImmediateNumberSignKeyword_3_1_0 = (Keyword)cIsImmediateAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cDelayKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDelayAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_3_2_1_0 = (RuleCall)cDelayAssignment_3_2_1.eContents().get(0);
		private final Assignment cTriggerAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTriggerExpressionParserRuleCall_3_3_0 = (RuleCall)cTriggerAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cSolidusKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cEffectsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_4_1_0 = (RuleCall)cEffectsAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_4_2 = (Group)cGroup_3_4.eContents().get(2);
		private final Keyword cCommaKeyword_3_4_2_0 = (Keyword)cGroup_3_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_4_2_1 = (Assignment)cGroup_3_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_4_2_1_0 = (RuleCall)cEffectsAssignment_3_4_2_1.eContents().get(0);
		private final Assignment cIsHistoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsHistoryHistoryKeyword_4_0 = (Keyword)cIsHistoryAssignment_4.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Transition returns synccharts::Transition:
		//	type=TransitionType targetState=[synccharts::State|STRING] ("<" priority=INT ">")? ("with" isImmediate?="#"?
		//	("delay:=" delay=INT)? trigger=Expression? ("/" effects+=Effect ("," effects+=Effect)*)?)? isHistory?=" history"?;
		public ParserRule getRule() { return rule; }

		//type=TransitionType targetState=[synccharts::State|STRING] ("<" priority=INT ">")? ("with" isImmediate?="#"? ("delay:="
		//delay=INT)? trigger=Expression? ("/" effects+=Effect ("," effects+=Effect)*)?)? isHistory?=" history"?
		public Group getGroup() { return cGroup; }

		//type=TransitionType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_0_0() { return cTypeTransitionTypeEnumRuleCall_0_0; }

		//targetState=[synccharts::State|STRING]
		public Assignment getTargetStateAssignment_1() { return cTargetStateAssignment_1; }

		//[synccharts::State|STRING]
		public CrossReference getTargetStateStateCrossReference_1_0() { return cTargetStateStateCrossReference_1_0; }

		//STRING
		public RuleCall getTargetStateStateSTRINGTerminalRuleCall_1_0_1() { return cTargetStateStateSTRINGTerminalRuleCall_1_0_1; }

		//("<" priority=INT ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//priority=INT
		public Assignment getPriorityAssignment_2_1() { return cPriorityAssignment_2_1; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_1_0() { return cPriorityINTTerminalRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }

		//("with" isImmediate?="#"? ("delay:=" delay=INT)? trigger=Expression? ("/" effects+=Effect ("," effects+=Effect)*)?)?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_3_1() { return cIsImmediateAssignment_3_1; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_3_1_0() { return cIsImmediateNumberSignKeyword_3_1_0; }

		//("delay:=" delay=INT)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"delay:="
		public Keyword getDelayKeyword_3_2_0() { return cDelayKeyword_3_2_0; }

		//delay=INT
		public Assignment getDelayAssignment_3_2_1() { return cDelayAssignment_3_2_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_3_2_1_0() { return cDelayINTTerminalRuleCall_3_2_1_0; }

		//trigger=Expression?
		public Assignment getTriggerAssignment_3_3() { return cTriggerAssignment_3_3; }

		//Expression
		public RuleCall getTriggerExpressionParserRuleCall_3_3_0() { return cTriggerExpressionParserRuleCall_3_3_0; }

		//("/" effects+=Effect ("," effects+=Effect)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"/"
		public Keyword getSolidusKeyword_3_4_0() { return cSolidusKeyword_3_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_4_1() { return cEffectsAssignment_3_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_4_1_0() { return cEffectsEffectParserRuleCall_3_4_1_0; }

		//("," effects+=Effect)*
		public Group getGroup_3_4_2() { return cGroup_3_4_2; }

		//","
		public Keyword getCommaKeyword_3_4_2_0() { return cCommaKeyword_3_4_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_4_2_1() { return cEffectsAssignment_3_4_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_4_2_1_0() { return cEffectsEffectParserRuleCall_3_4_2_1_0; }

		//isHistory?=" history"?
		public Assignment getIsHistoryAssignment_4() { return cIsHistoryAssignment_4; }

		//" history"
		public Keyword getIsHistoryHistoryKeyword_4_0() { return cIsHistoryHistoryKeyword_4_0; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNORMALKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONDITIONALCONDITIONALKeyword_1_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEREFERENCEKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTEXTUALKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StateType returns synccharts::StateType:
		//	NORMAL | CONDITIONAL | REFERENCE | TEXTUAL;
		public EnumRule getRule() { return rule; }

		//NORMAL | CONDITIONAL | REFERENCE | TEXTUAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"NORMAL"
		public Keyword getNORMALNORMALKeyword_0_0() { return cNORMALNORMALKeyword_0_0; }

		//CONDITIONAL
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration_1() { return cCONDITIONALEnumLiteralDeclaration_1; }

		//"CONDITIONAL"
		public Keyword getCONDITIONALCONDITIONALKeyword_1_0() { return cCONDITIONALCONDITIONALKeyword_1_0; }

		//REFERENCE
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"REFERENCE"
		public Keyword getREFERENCEREFERENCEKeyword_2_0() { return cREFERENCEREFERENCEKeyword_2_0; }

		//TEXTUAL
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"TEXTUAL"
		public Keyword getTEXTUALTEXTUALKeyword_3_0() { return cTEXTUALTEXTUALKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTOKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNORMALTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cNORMALTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns synccharts::TransitionType:
		//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
		public EnumRule getRule() { return rule; }

		//WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT="-->"
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//"-->"
		public Keyword getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//STRONGABORT="o->"
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//"o->"
		public Keyword getSTRONGABORTOKeyword_1_0() { return cSTRONGABORTOKeyword_1_0; }

		//NORMALTERMINATION=">->"
		public EnumLiteralDeclaration getNORMALTERMINATIONEnumLiteralDeclaration_2() { return cNORMALTERMINATIONEnumLiteralDeclaration_2; }

		//">->"
		public Keyword getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private RegionElements pRegion;
	private NestedRegionElements pNestedRegion;
	private SingleNestedRegionElements pSingleNestedRegion;
	private StateElements pState;
	private VariableElements pVariable;
	private SignalElements pSignal;
	private TransitionElements pTransition;
	private StateTypeElements unknownRuleStateType;
	private TransitionTypeElements unknownRuleTransitionType;
	
	private final GrammarProvider grammarProvider;

	private ActionsGrammarAccess gaActions;

	@Inject
	public KitsGrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions) {
		this.grammarProvider = grammarProvider;
		this.gaActions = gaActions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	
	//Region returns synccharts::Region:
	//	("Region" label=ID)? // region ID's are introduced by the keyword "region".       
	//	//     (variables+=Variable|signals+=Signal)* 
	//	innerStates+=State;
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//NestedRegion returns synccharts::Region:
	//	("Region" label=ID (variables+=Variable | signals+=Signal)*)? innerStates+=State*;
	public NestedRegionElements getNestedRegionAccess() {
		return (pNestedRegion != null) ? pNestedRegion : (pNestedRegion = new NestedRegionElements());
	}
	
	public ParserRule getNestedRegionRule() {
		return getNestedRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SingleNestedRegion returns synccharts::Region:
	//	innerStates+=State+;
	public SingleNestedRegionElements getSingleNestedRegionAccess() {
		return (pSingleNestedRegion != null) ? pSingleNestedRegion : (pSingleNestedRegion = new SingleNestedRegionElements());
	}
	
	public ParserRule getSingleNestedRegionRule() {
		return getSingleNestedRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//State returns synccharts::State:
	//	((isInitial?="init" isFinal?="final"?) "State"? id=ID? label=STRING | (isFinal?="final" isInitial?="init"?) "State"?
	//	id=ID? label=STRING | type=StateType? "State"? id=ID? label=STRING) ((outgoingTransitions+=Transition (","
	//	outgoingTransitions+=Transition)*)? ";" | "{" (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
	//	regions+=NestedRegion)* "]" | (signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner"
	//	innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action) (signals+=Signal |
	//	variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit" exitActions+=Action |
	//	"suspension" suspensionTrigger=Action)* (regions+=SingleNestedRegion | "[" regions+=NestedRegion ("||"
	//	regions+=NestedRegion)* "]")?) "}" (outgoingTransitions+=Transition ("," outgoingTransitions+=Transition)* ";")?);
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Variable returns expressions::Variable:
	//	"var" name=ID ((":=" initialValue=STRING)? ":" type=ValueType) ";";
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Signal returns expressions::Signal:
	//	isInput?="input"? isOutput?="output"? "signal" name=STRING (":=" initialValue=STRING)? (":" type=ValueType | ":"
	//	"combine" type=ValueType "with" (combineOperator=CombineOperator | hostCombineOperator=STRING))? ";";
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Transition returns synccharts::Transition:
	//	type=TransitionType targetState=[synccharts::State|STRING] ("<" priority=INT ">")? ("with" isImmediate?="#"?
	//	("delay:=" delay=INT)? trigger=Expression? ("/" effects+=Effect ("," effects+=Effect)*)?)? isHistory?=" history"?;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//enum StateType returns synccharts::StateType:
	//	NORMAL | CONDITIONAL | REFERENCE | TEXTUAL;
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns synccharts::TransitionType:
	//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
	public TransitionTypeElements getTransitionTypeAccess() {
		return (unknownRuleTransitionType != null) ? unknownRuleTransitionType : (unknownRuleTransitionType = new TransitionTypeElements());
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//Action returns synccharts::Action:
	//	{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?;
	public ActionsGrammarAccess.ActionElements getActionAccess() {
		return gaActions.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//	Emission | Assignment | TextEffect;
	public ActionsGrammarAccess.EffectElements getEffectAccess() {
		return gaActions.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//	signal=[expressions::Signal] ("(" newValue=ValuedExpression ")" | "(" newValue=BooleanExpression ")")?;
	public ActionsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActions.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//	variable=[expressions::Variable] ":=" (expression=ValuedExpression | expression=BooleanExpression);
	public ActionsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActions.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TextEffect returns synccharts::TextEffect:
	//	code=STRING ("(" type=ID ")")?;
	public ActionsGrammarAccess.TextEffectElements getTextEffectAccess() {
		return gaActions.getTextEffectAccess();
	}
	
	public ParserRule getTextEffectRule() {
		return getTextEffectAccess().getRule();
	}

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//SignalReference returns expressions::SignalReference:
	//	signal=[expressions::Signal] ("(" (subExpressions+=Expression ","?)* ")")?;
	public ExpressionsGrammarAccess.SignalReferenceElements getSignalReferenceAccess() {
		return gaActions.getSignalReferenceAccess();
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}

	//VariableReference returns expressions::VariableReference:
	//	variable=[expressions::Variable] ("(" (subExpressions+=Expression ","?)* ")")?;
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaActions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	////==============================================================================
	//// Values
	////==============================================================================
	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaActions.getINTRule();
	} 

	//IntValue returns expressions::IntValue:
	//	value=INT;
	public ExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue returns expressions::FloatValue:
	//	value=Float;
	public ExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue returns expressions::BooleanValue:
	//	value=Boolean;
	public ExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaActions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Value returns expressions::Value:
	//	IntValue | FloatValue | BooleanValue;
	public ExpressionsGrammarAccess.ValueElements getValueAccess() {
		return gaActions.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//// make sure the Float rule does not shadow the INT rule
	//terminal Float returns ecore::EFloatObject:
	//	(INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return gaActions.getFloatRule();
	} 

	//terminal Boolean returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return gaActions.getBooleanRule();
	} 

	////==============================================================================
	//// Arithmetic Expressions
	////==============================================================================
	//// Example: ?A	
	//ValOperation returns expressions::OperatorExpression:
	//	operator=ValOperator subExpressions+=SignalReference;
	public ExpressionsGrammarAccess.ValOperationElements getValOperationAccess() {
		return gaActions.getValOperationAccess();
	}
	
	public ParserRule getValOperationRule() {
		return getValOperationAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns expressions::Expression:
	//	PlusOperation;
	public ExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaActions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 42, 42.2, ?A, var1, (1+2*3)
	//ParanthesedValuedExpression returns expressions::Expression:
	//	IntValue | FloatValue | ValOperation | VariableReference | TextExpression | "(" PlusOperation ")" | "(" DivOperation
	//	")";
	public ExpressionsGrammarAccess.ParanthesedValuedExpressionElements getParanthesedValuedExpressionAccess() {
		return gaActions.getParanthesedValuedExpressionAccess();
	}
	
	public ParserRule getParanthesedValuedExpressionRule() {
		return getParanthesedValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2, varA - ?B
	//PlusOperation returns expressions::Expression:
	//	MultOrDivOperation ({expressions::OperatorExpression.subExpressions+=current} operator=PlusOperator
	//	subExpressions+=MultOrDivOperation)*;
	public ExpressionsGrammarAccess.PlusOperationElements getPlusOperationAccess() {
		return gaActions.getPlusOperationAccess();
	}
	
	public ParserRule getPlusOperationRule() {
		return getPlusOperationAccess().getRule();
	}

	//MultOrDivOperation returns expressions::Expression:
	//	MultOperation | "(" DivOperation ")";
	public ExpressionsGrammarAccess.MultOrDivOperationElements getMultOrDivOperationAccess() {
		return gaActions.getMultOrDivOperationAccess();
	}
	
	public ParserRule getMultOrDivOperationRule() {
		return getMultOrDivOperationAccess().getRule();
	}

	//// Example: 2 * 4, varA mod ?B
	//MultOperation returns expressions::Expression:
	//	PreOrNormalValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=MultOperator
	//	subExpressions+=PreOrNormalValuedExpression)*;
	public ExpressionsGrammarAccess.MultOperationElements getMultOperationAccess() {
		return gaActions.getMultOperationAccess();
	}
	
	public ParserRule getMultOperationRule() {
		return getMultOperationAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division has to have always parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivOperation returns expressions::Expression:
	//	PreOrNormalValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=PreOrNormalValuedExpression)*;
	public ExpressionsGrammarAccess.DivOperationElements getDivOperationAccess() {
		return gaActions.getDivOperationAccess();
	}
	
	public ParserRule getDivOperationRule() {
		return getDivOperationAccess().getRule();
	}

	//// Example: pre (? A)
	//PreArithmOperation returns expressions::OperatorExpression:
	//	operator=UnaryParanthesedOperator "(" subExpressions+=ValOperation ")";
	public ExpressionsGrammarAccess.PreArithmOperationElements getPreArithmOperationAccess() {
		return gaActions.getPreArithmOperationAccess();
	}
	
	public ParserRule getPreArithmOperationRule() {
		return getPreArithmOperationAccess().getRule();
	}

	//PreOrNormalValuedExpression returns expressions::Expression:
	//	PreArithmOperation | ParanthesedValuedExpression;
	public ExpressionsGrammarAccess.PreOrNormalValuedExpressionElements getPreOrNormalValuedExpressionAccess() {
		return gaActions.getPreOrNormalValuedExpressionAccess();
	}
	
	public ParserRule getPreOrNormalValuedExpressionRule() {
		return getPreOrNormalValuedExpressionAccess().getRule();
	}

	////==============================================================================
	//// Boolean Expressions
	////==============================================================================
	//// Example: 42 <= ?A
	//CompareOperation returns expressions::Expression:
	//	ValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=ValuedExpression);
	public ExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//UnaryOperation returns expressions::OperatorExpression:
	//	operator=UnaryOperator subExpressions+=(ParanthesedBooleanExpression | UnaryParanthesedOperation);
	public ExpressionsGrammarAccess.UnaryOperationElements getUnaryOperationAccess() {
		return gaActions.getUnaryOperationAccess();
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//UnaryParanthesedOperation returns expressions::OperatorExpression:
	//	operator=UnaryParanthesedOperator "(" subExpressions+=BooleanExpression ")";
	public ExpressionsGrammarAccess.UnaryParanthesedOperationElements getUnaryParanthesedOperationAccess() {
		return gaActions.getUnaryParanthesedOperationAccess();
	}
	
	public ParserRule getUnaryParanthesedOperationRule() {
		return getUnaryParanthesedOperationAccess().getRule();
	}

	//// Example: either negated or normal expression (with parantheses) 
	//UnaryOrNormalExpression returns expressions::Expression:
	//	UnaryOperation | UnaryParanthesedOperation | ParanthesedBooleanExpression;
	public ExpressionsGrammarAccess.UnaryOrNormalExpressionElements getUnaryOrNormalExpressionAccess() {
		return gaActions.getUnaryOrNormalExpressionAccess();
	}
	
	public ParserRule getUnaryOrNormalExpressionRule() {
		return getUnaryOrNormalExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//AndOperation returns expressions::Expression:
	//	UnaryOrNormalExpression ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorAnd
	//	subExpressions+=UnaryOrNormalExpression)*;
	public ExpressionsGrammarAccess.AndOperationElements getAndOperationAccess() {
		return gaActions.getAndOperationAccess();
	}
	
	public ParserRule getAndOperationRule() {
		return getAndOperationAccess().getRule();
	}

	//// Example: A or B, C and B or D and not E 
	//OrOperation returns expressions::Expression:
	//	AndOperation ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorOr
	//	subExpressions+=AndOperation)*;
	public ExpressionsGrammarAccess.OrOperationElements getOrOperationAccess() {
		return gaActions.getOrOperationAccess();
	}
	
	public ParserRule getOrOperationRule() {
		return getOrOperationAccess().getRule();
	}

	//// Example: true, A, 42>var1, (A or B), (not D and C or ?E = 42)
	//// note that the order of CompareOperation and SignalReference is important. This might be an Xtext bug...
	//ParanthesedBooleanExpression returns expressions::Expression:
	//	BooleanValue | CompareOperation | SignalReference | ValOperation | TextExpression | "(" OrOperation ")";
	public ExpressionsGrammarAccess.ParanthesedBooleanExpressionElements getParanthesedBooleanExpressionAccess() {
		return gaActions.getParanthesedBooleanExpressionAccess();
	}
	
	public ParserRule getParanthesedBooleanExpressionRule() {
		return getParanthesedBooleanExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns expressions::Expression:
	//	OrOperation;
	public ExpressionsGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaActions.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	////==============================================================================
	//// Operators
	////==============================================================================
	//enum OperatorType returns expressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | NE="<>" | AND="and" | OR="or" | ADD="+" | SUB="-" |
	//	MULT="*" | DIV="/" | MOD="mod" | VAL="?" | PRE="pre";
	public ExpressionsGrammarAccess.OperatorTypeElements getOperatorTypeAccess() {
		return gaActions.getOperatorTypeAccess();
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}

	//enum ValOperator returns expressions::OperatorType:
	//	VAL="?";
	public ExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaActions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum CompareOperator returns expressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public ExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//// not A	
	//enum UnaryOperator returns expressions::OperatorType:
	//	NOT="not";
	public ExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaActions.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//// pre(A)
	//enum UnaryParanthesedOperator returns expressions::OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.UnaryParanthesedOperatorElements getUnaryParanthesedOperatorAccess() {
		return gaActions.getUnaryParanthesedOperatorAccess();
	}
	
	public EnumRule getUnaryParanthesedOperatorRule() {
		return getUnaryParanthesedOperatorAccess().getRule();
	}

	//enum OperatorOr returns expressions::OperatorType:
	//	OR="or";
	public ExpressionsGrammarAccess.OperatorOrElements getOperatorOrAccess() {
		return gaActions.getOperatorOrAccess();
	}
	
	public EnumRule getOperatorOrRule() {
		return getOperatorOrAccess().getRule();
	}

	//enum OperatorAnd returns expressions::OperatorType:
	//	AND="and";
	public ExpressionsGrammarAccess.OperatorAndElements getOperatorAndAccess() {
		return gaActions.getOperatorAndAccess();
	}
	
	public EnumRule getOperatorAndRule() {
		return getOperatorAndAccess().getRule();
	}

	//enum OperatorPre returns expressions::OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.OperatorPreElements getOperatorPreAccess() {
		return gaActions.getOperatorPreAccess();
	}
	
	public EnumRule getOperatorPreRule() {
		return getOperatorPreAccess().getRule();
	}

	//enum PlusOperator returns expressions::OperatorType:
	//	ADD="+" | SUB="-";
	public ExpressionsGrammarAccess.PlusOperatorElements getPlusOperatorAccess() {
		return gaActions.getPlusOperatorAccess();
	}
	
	public EnumRule getPlusOperatorRule() {
		return getPlusOperatorAccess().getRule();
	}

	//enum MultOperator returns expressions::OperatorType:
	//	MULT="*" | MOD="mod";
	public ExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum DivOperator returns expressions::OperatorType:
	//	DIV="/";
	public ExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	////==============================================================================
	//// Misc
	////==============================================================================
	//TextExpression returns expressions::TextExpression:
	//	code=STRING ("(" type=ID ")")?;
	public ExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaActions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//Expression returns expressions::Expression:
	//	ValuedExpression | BooleanExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Interface.xtext, Kits.xtext 
	// * /enum ValueType returns expressions::ValueType:
	//	PURE | BOOL | UNSIGNED | INT | FLOAT | HOST;
	public ExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaActions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator returns expressions::CombineOperator:
	//	NONE | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public ExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaActions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActions.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaActions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActions.getANY_OTHERRule();
	} 
}
