/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.text.kits.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.synccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.expressions.services.ExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.services.AnnotationsGrammarAccess;

@Singleton
public class KitsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsImportAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRegionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		private final Assignment cLabelAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cLabelAssignment_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_3_0_0 = (RuleCall)cVariablesAssignment_3_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_4_0 = (RuleCall)cBodyTextAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		
		//RootRegion returns synccharts::Region:
		//	annotations+=ImportAnnotation* annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":")?
		//	(variables+=Variable | signals+=Signal)* bodyText+=TextualCode* states+=State*;
		public ParserRule getRule() { return rule; }

		//annotations+=ImportAnnotation* annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":")? (variables+=Variable
		//| signals+=Signal)* bodyText+=TextualCode* states+=State*
		public Group getGroup() { return cGroup; }

		//annotations+=ImportAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//ImportAnnotation
		public RuleCall getAnnotationsImportAnnotationParserRuleCall_0_0() { return cAnnotationsImportAnnotationParserRuleCall_0_0; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_1_0() { return cAnnotationsStringAnnotationParserRuleCall_1_0; }

		//("region" id=ID? label=STRING? ":")?
		public Group getGroup_2() { return cGroup_2; }

		//"region"
		public Keyword getRegionKeyword_2_0() { return cRegionKeyword_2_0; }

		//id=ID?
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0() { return cIdIDTerminalRuleCall_2_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2_2() { return cLabelAssignment_2_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_2_0() { return cLabelSTRINGTerminalRuleCall_2_2_0; }

		//":"
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }

		//(variables+=Variable | signals+=Signal)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//variables+=Variable
		public Assignment getVariablesAssignment_3_0() { return cVariablesAssignment_3_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0_0() { return cVariablesVariableParserRuleCall_3_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_0() { return cSignalsSignalParserRuleCall_3_1_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_4() { return cBodyTextAssignment_4; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_4_0() { return cBodyTextTextualCodeParserRuleCall_4_0; }

		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
	}

	public class SingleRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRegionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		private final Assignment cLabelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cLabelAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cVariablesAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_1_4_0_0 = (RuleCall)cVariablesAssignment_1_4_0.eContents().get(0);
		private final Assignment cSignalsAssignment_1_4_1 = (Assignment)cAlternatives_1_4.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_1_4_1_0 = (RuleCall)cSignalsAssignment_1_4_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_2_0 = (RuleCall)cBodyTextAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//SingleRegion returns synccharts::Region:
		//	annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*)?
		//	bodyText+=TextualCode* states+=State*;
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*)?
		//bodyText+=TextualCode* states+=State*
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//("region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*)?
		public Group getGroup_1() { return cGroup_1; }

		//"region"
		public Keyword getRegionKeyword_1_0() { return cRegionKeyword_1_0; }

		//id=ID?
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_0() { return cIdIDTerminalRuleCall_1_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_1_2() { return cLabelAssignment_1_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_2_0() { return cLabelSTRINGTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//(variables+=Variable | signals+=Signal)*
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//variables+=Variable
		public Assignment getVariablesAssignment_1_4_0() { return cVariablesAssignment_1_4_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_4_0_0() { return cVariablesVariableParserRuleCall_1_4_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_1_4_1() { return cSignalsAssignment_1_4_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_1_4_1_0() { return cSignalsSignalParserRuleCall_1_4_1_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_2() { return cBodyTextAssignment_2; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_2_0() { return cBodyTextTextualCodeParserRuleCall_2_0; }

		//states+=State*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }
	}

	public class TextualCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextualCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeSTRINGTerminalRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//TextualCode returns expressions::TextualCode:
		//	"textual" "code" ("(" type=ID ")")? ":" code=STRING;
		public ParserRule getRule() { return rule; }

		//"textual" "code" ("(" type=ID ")")? ":" code=STRING
		public Group getGroup() { return cGroup; }

		//"textual"
		public Keyword getTextualKeyword_0() { return cTextualKeyword_0; }

		//"code"
		public Keyword getCodeKeyword_1() { return cCodeKeyword_1; }

		//("(" type=ID ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//type=ID
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_1_0() { return cTypeIDTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//code=STRING
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_4_0() { return cCodeSTRINGTerminalRuleCall_4_0; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cRegionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cVariablesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_5_0_0 = (RuleCall)cVariablesAssignment_5_0.eContents().get(0);
		private final Assignment cSignalsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_5_1_0 = (RuleCall)cSignalsAssignment_5_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_6_0 = (RuleCall)cBodyTextAssignment_6.eContents().get(0);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		
		//Region returns synccharts::Region:
		//	annotations+=StringAnnotation* "region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*
		//	bodyText+=TextualCode* states+=State+;
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* "region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*
		//bodyText+=TextualCode* states+=State+
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//"region"
		public Keyword getRegionKeyword_1() { return cRegionKeyword_1; }

		//id=ID?
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//(variables+=Variable | signals+=Signal)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//variables+=Variable
		public Assignment getVariablesAssignment_5_0() { return cVariablesAssignment_5_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_5_0_0() { return cVariablesVariableParserRuleCall_5_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_5_1() { return cSignalsAssignment_5_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_5_1_0() { return cSignalsSignalParserRuleCall_5_1_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_6() { return cBodyTextAssignment_6; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_6_0() { return cBodyTextTextualCodeParserRuleCall_6_0; }

		//states+=State+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }

		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIsInitialAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cIsInitialInitKeyword_1_0_0_0 = (Keyword)cIsInitialAssignment_1_0_0.eContents().get(0);
		private final Assignment cIsFinalAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cIsFinalFinalKeyword_1_0_1_0 = (Keyword)cIsFinalAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIsFinalAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIsFinalFinalKeyword_1_1_0_0 = (Keyword)cIsFinalAssignment_1_1_0.eContents().get(0);
		private final Assignment cIsInitialAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_1_1_1_0 = (Keyword)cIsInitialAssignment_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cCommercialAtKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cBodyReferenceAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cBodyReferenceStateCrossReference_6_0_1_0 = (CrossReference)cBodyReferenceAssignment_6_0_1.eContents().get(0);
		private final RuleCall cBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1 = (RuleCall)cBodyReferenceStateCrossReference_6_0_1_0.eContents().get(1);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_6_0_2_1_0 = (RuleCall)cRenamingsAssignment_6_0_2_1.eContents().get(0);
		private final Group cGroup_6_0_2_2 = (Group)cGroup_6_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_2_0 = (Keyword)cGroup_6_0_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_6_0_2_2_1 = (Assignment)cGroup_6_0_2_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0 = (RuleCall)cRenamingsAssignment_6_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_0_2_3 = (Keyword)cGroup_6_0_2.eContents().get(3);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Alternatives cAlternatives_6_1_1_0 = (Alternatives)cGroup_6_1_1.eContents().get(0);
		private final Assignment cSignalsAssignment_6_1_1_0_0 = (Assignment)cAlternatives_6_1_1_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_6_1_1_0_0_0 = (RuleCall)cSignalsAssignment_6_1_1_0_0.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1_1_0_1 = (Assignment)cAlternatives_6_1_1_0.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_6_1_1_0_1_0 = (RuleCall)cVariablesAssignment_6_1_1_0_1.eContents().get(0);
		private final Group cGroup_6_1_1_0_2 = (Group)cAlternatives_6_1_1_0.eContents().get(2);
		private final Keyword cOnentryKeyword_6_1_1_0_2_0 = (Keyword)cGroup_6_1_1_0_2.eContents().get(0);
		private final Assignment cEntryActionsAssignment_6_1_1_0_2_1 = (Assignment)cGroup_6_1_1_0_2.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_6_1_1_0_2_1_0 = (RuleCall)cEntryActionsAssignment_6_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_6_1_1_0_3 = (Group)cAlternatives_6_1_1_0.eContents().get(3);
		private final Keyword cOninnerKeyword_6_1_1_0_3_0 = (Keyword)cGroup_6_1_1_0_3.eContents().get(0);
		private final Assignment cInnerActionsAssignment_6_1_1_0_3_1 = (Assignment)cGroup_6_1_1_0_3.eContents().get(1);
		private final RuleCall cInnerActionsActionParserRuleCall_6_1_1_0_3_1_0 = (RuleCall)cInnerActionsAssignment_6_1_1_0_3_1.eContents().get(0);
		private final Group cGroup_6_1_1_0_4 = (Group)cAlternatives_6_1_1_0.eContents().get(4);
		private final Keyword cOnexitKeyword_6_1_1_0_4_0 = (Keyword)cGroup_6_1_1_0_4.eContents().get(0);
		private final Assignment cExitActionsAssignment_6_1_1_0_4_1 = (Assignment)cGroup_6_1_1_0_4.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_6_1_1_0_4_1_0 = (RuleCall)cExitActionsAssignment_6_1_1_0_4_1.eContents().get(0);
		private final Group cGroup_6_1_1_0_5 = (Group)cAlternatives_6_1_1_0.eContents().get(5);
		private final Keyword cSuspensionKeyword_6_1_1_0_5_0 = (Keyword)cGroup_6_1_1_0_5.eContents().get(0);
		private final Assignment cSuspensionTriggerAssignment_6_1_1_0_5_1 = (Assignment)cGroup_6_1_1_0_5.eContents().get(1);
		private final RuleCall cSuspensionTriggerActionParserRuleCall_6_1_1_0_5_1_0 = (RuleCall)cSuspensionTriggerAssignment_6_1_1_0_5_1.eContents().get(0);
		private final Group cGroup_6_1_1_1 = (Group)cGroup_6_1_1.eContents().get(1);
		private final Assignment cRegionsAssignment_6_1_1_1_0 = (Assignment)cGroup_6_1_1_1.eContents().get(0);
		private final RuleCall cRegionsSingleRegionParserRuleCall_6_1_1_1_0_0 = (RuleCall)cRegionsAssignment_6_1_1_1_0.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_1_1_1 = (Assignment)cGroup_6_1_1_1.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_6_1_1_1_1_0 = (RuleCall)cRegionsAssignment_6_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Assignment cOutgoingTransitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_7_0 = (RuleCall)cOutgoingTransitionsAssignment_7.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//State returns synccharts::State:
		//	annotations+=StringAnnotation* (isInitial?="init" isFinal?="final"? | isFinal?="final" isInitial?="init"?)?
		//	type=StateType? "state" id=ID label=STRING? ("@" bodyReference=[synccharts::State] ("[" renamings+=Substitution (","
		//	renamings+=Substitution)* "]")? | "{" ((signals+=Signal | variables+=Variable | "onentry" entryActions+=Action |
		//	"oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
		//	(regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition*;
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* (isInitial?="init" isFinal?="final"? | isFinal?="final" isInitial?="init"?)?
		//type=StateType? "state" id=ID label=STRING? ("@" bodyReference=[synccharts::State] ("[" renamings+=Substitution (","
		//renamings+=Substitution)* "]")? | "{" ((signals+=Signal | variables+=Variable | "onentry" entryActions+=Action |
		//"oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
		//(regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition*
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//(isInitial?="init" isFinal?="final"? | isFinal?="final" isInitial?="init"?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isInitial?="init" isFinal?="final"?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_1_0_0() { return cIsInitialAssignment_1_0_0; }

		//"init"
		public Keyword getIsInitialInitKeyword_1_0_0_0() { return cIsInitialInitKeyword_1_0_0_0; }

		//isFinal?="final"?
		public Assignment getIsFinalAssignment_1_0_1() { return cIsFinalAssignment_1_0_1; }

		//"final"
		public Keyword getIsFinalFinalKeyword_1_0_1_0() { return cIsFinalFinalKeyword_1_0_1_0; }

		//isFinal?="final" isInitial?="init"?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_1_1_0() { return cIsFinalAssignment_1_1_0; }

		//"final"
		public Keyword getIsFinalFinalKeyword_1_1_0_0() { return cIsFinalFinalKeyword_1_1_0_0; }

		//isInitial?="init"?
		public Assignment getIsInitialAssignment_1_1_1() { return cIsInitialAssignment_1_1_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_1_1_1_0() { return cIsInitialInitKeyword_1_1_1_0; }

		//type=StateType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_2_0() { return cTypeStateTypeEnumRuleCall_2_0; }

		//"state"
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }

		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }

		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }

		//("@" bodyReference=[synccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{"
		//((signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action)* (regions+=SingleRegion regions+=Region*)?) "}")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"@" bodyReference=[synccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"@"
		public Keyword getCommercialAtKeyword_6_0_0() { return cCommercialAtKeyword_6_0_0; }

		//bodyReference=[synccharts::State]
		public Assignment getBodyReferenceAssignment_6_0_1() { return cBodyReferenceAssignment_6_0_1; }

		//[synccharts::State]
		public CrossReference getBodyReferenceStateCrossReference_6_0_1_0() { return cBodyReferenceStateCrossReference_6_0_1_0; }

		//ID
		public RuleCall getBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1() { return cBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1; }

		//("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0_2_0() { return cLeftSquareBracketKeyword_6_0_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_6_0_2_1() { return cRenamingsAssignment_6_0_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_6_0_2_1_0() { return cRenamingsSubstitutionParserRuleCall_6_0_2_1_0; }

		//("," renamings+=Substitution)*
		public Group getGroup_6_0_2_2() { return cGroup_6_0_2_2; }

		//","
		public Keyword getCommaKeyword_6_0_2_2_0() { return cCommaKeyword_6_0_2_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_6_0_2_2_1() { return cRenamingsAssignment_6_0_2_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0() { return cRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_0_2_3() { return cRightSquareBracketKeyword_6_0_2_3; }

		//"{" ((signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action)* (regions+=SingleRegion regions+=Region*)?) "}"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1_0() { return cLeftCurlyBracketKeyword_6_1_0; }

		//(signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action)* (regions+=SingleRegion regions+=Region*)?
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//(signals+=Signal | variables+=Variable | "onentry" entryActions+=Action | "oninner" innerActions+=Action | "onexit"
		//exitActions+=Action | "suspension" suspensionTrigger=Action)*
		public Alternatives getAlternatives_6_1_1_0() { return cAlternatives_6_1_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_6_1_1_0_0() { return cSignalsAssignment_6_1_1_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_6_1_1_0_0_0() { return cSignalsSignalParserRuleCall_6_1_1_0_0_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_6_1_1_0_1() { return cVariablesAssignment_6_1_1_0_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_1_1_0_1_0() { return cVariablesVariableParserRuleCall_6_1_1_0_1_0; }

		//"onentry" entryActions+=Action
		public Group getGroup_6_1_1_0_2() { return cGroup_6_1_1_0_2; }

		//"onentry"
		public Keyword getOnentryKeyword_6_1_1_0_2_0() { return cOnentryKeyword_6_1_1_0_2_0; }

		//entryActions+=Action
		public Assignment getEntryActionsAssignment_6_1_1_0_2_1() { return cEntryActionsAssignment_6_1_1_0_2_1; }

		//Action
		public RuleCall getEntryActionsActionParserRuleCall_6_1_1_0_2_1_0() { return cEntryActionsActionParserRuleCall_6_1_1_0_2_1_0; }

		//"oninner" innerActions+=Action
		public Group getGroup_6_1_1_0_3() { return cGroup_6_1_1_0_3; }

		//"oninner"
		public Keyword getOninnerKeyword_6_1_1_0_3_0() { return cOninnerKeyword_6_1_1_0_3_0; }

		//innerActions+=Action
		public Assignment getInnerActionsAssignment_6_1_1_0_3_1() { return cInnerActionsAssignment_6_1_1_0_3_1; }

		//Action
		public RuleCall getInnerActionsActionParserRuleCall_6_1_1_0_3_1_0() { return cInnerActionsActionParserRuleCall_6_1_1_0_3_1_0; }

		//"onexit" exitActions+=Action
		public Group getGroup_6_1_1_0_4() { return cGroup_6_1_1_0_4; }

		//"onexit"
		public Keyword getOnexitKeyword_6_1_1_0_4_0() { return cOnexitKeyword_6_1_1_0_4_0; }

		//exitActions+=Action
		public Assignment getExitActionsAssignment_6_1_1_0_4_1() { return cExitActionsAssignment_6_1_1_0_4_1; }

		//Action
		public RuleCall getExitActionsActionParserRuleCall_6_1_1_0_4_1_0() { return cExitActionsActionParserRuleCall_6_1_1_0_4_1_0; }

		//"suspension" suspensionTrigger=Action
		public Group getGroup_6_1_1_0_5() { return cGroup_6_1_1_0_5; }

		//"suspension"
		public Keyword getSuspensionKeyword_6_1_1_0_5_0() { return cSuspensionKeyword_6_1_1_0_5_0; }

		//suspensionTrigger=Action
		public Assignment getSuspensionTriggerAssignment_6_1_1_0_5_1() { return cSuspensionTriggerAssignment_6_1_1_0_5_1; }

		//Action
		public RuleCall getSuspensionTriggerActionParserRuleCall_6_1_1_0_5_1_0() { return cSuspensionTriggerActionParserRuleCall_6_1_1_0_5_1_0; }

		//(regions+=SingleRegion regions+=Region*)?
		public Group getGroup_6_1_1_1() { return cGroup_6_1_1_1; }

		//regions+=SingleRegion
		public Assignment getRegionsAssignment_6_1_1_1_0() { return cRegionsAssignment_6_1_1_1_0; }

		//SingleRegion
		public RuleCall getRegionsSingleRegionParserRuleCall_6_1_1_1_0_0() { return cRegionsSingleRegionParserRuleCall_6_1_1_1_0_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_6_1_1_1_1() { return cRegionsAssignment_6_1_1_1_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_6_1_1_1_1_0() { return cRegionsRegionParserRuleCall_6_1_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_1_2() { return cRightCurlyBracketKeyword_6_1_2; }

		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_7() { return cOutgoingTransitionsAssignment_7; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_7_0() { return cOutgoingTransitionsTransitionParserRuleCall_7_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Assignment cIsImmediateAssignment_4_1_0_0 = (Assignment)cGroup_4_1_0.eContents().get(0);
		private final Keyword cIsImmediateNumberSignKeyword_4_1_0_0_0 = (Keyword)cIsImmediateAssignment_4_1_0_0.eContents().get(0);
		private final Assignment cDelayAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_4_1_0_1_0 = (RuleCall)cDelayAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_4_1_0_2 = (Assignment)cGroup_4_1_0.eContents().get(2);
		private final RuleCall cTriggerBooleanExpressionParserRuleCall_4_1_0_2_0 = (RuleCall)cTriggerAssignment_4_1_0_2.eContents().get(0);
		private final Group cGroup_4_1_0_3 = (Group)cGroup_4_1_0.eContents().get(3);
		private final Keyword cSolidusKeyword_4_1_0_3_0 = (Keyword)cGroup_4_1_0_3.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1_0_3_1 = (Assignment)cGroup_4_1_0_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0_3_1_0 = (RuleCall)cEffectsAssignment_4_1_0_3_1.eContents().get(0);
		private final Group cGroup_4_1_0_3_2 = (Group)cGroup_4_1_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_0_3_2_0 = (Keyword)cGroup_4_1_0_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1_0_3_2_1 = (Assignment)cGroup_4_1_0_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0_3_2_1_0 = (RuleCall)cEffectsAssignment_4_1_0_3_2_1.eContents().get(0);
		private final Assignment cLabelAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cLabelAssignment_4_1_1.eContents().get(0);
		private final Assignment cIsHistoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cIsHistoryHistoryKeyword_5_0 = (Keyword)cIsHistoryAssignment_5.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Transition returns synccharts::Transition:
		//	annotations+=StringAnnotation* type=TransitionType priority=INT? targetState=[synccharts::State] ("with"
		//	(isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)? |
		//	label=STRING))? isHistory?="history"?;
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* type=TransitionType priority=INT? targetState=[synccharts::State] ("with"
		//(isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)? |
		//label=STRING))? isHistory?="history"?
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//type=TransitionType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_1_0() { return cTypeTransitionTypeEnumRuleCall_1_0; }

		//priority=INT?
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }

		//targetState=[synccharts::State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }

		//[synccharts::State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }

		//("with" (isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)? |
		//label=STRING))?
		public Group getGroup_4() { return cGroup_4; }

		//"with"
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }

		//isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)? | label=STRING
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)?
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_4_1_0_0() { return cIsImmediateAssignment_4_1_0_0; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_4_1_0_0_0() { return cIsImmediateNumberSignKeyword_4_1_0_0_0; }

		//delay=INT?
		public Assignment getDelayAssignment_4_1_0_1() { return cDelayAssignment_4_1_0_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_4_1_0_1_0() { return cDelayINTTerminalRuleCall_4_1_0_1_0; }

		//trigger=BooleanExpression?
		public Assignment getTriggerAssignment_4_1_0_2() { return cTriggerAssignment_4_1_0_2; }

		//BooleanExpression
		public RuleCall getTriggerBooleanExpressionParserRuleCall_4_1_0_2_0() { return cTriggerBooleanExpressionParserRuleCall_4_1_0_2_0; }

		//("/" effects+=Effect ("," effects+=Effect)*)?
		public Group getGroup_4_1_0_3() { return cGroup_4_1_0_3; }

		//"/"
		public Keyword getSolidusKeyword_4_1_0_3_0() { return cSolidusKeyword_4_1_0_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1_0_3_1() { return cEffectsAssignment_4_1_0_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0_3_1_0() { return cEffectsEffectParserRuleCall_4_1_0_3_1_0; }

		//("," effects+=Effect)*
		public Group getGroup_4_1_0_3_2() { return cGroup_4_1_0_3_2; }

		//","
		public Keyword getCommaKeyword_4_1_0_3_2_0() { return cCommaKeyword_4_1_0_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1_0_3_2_1() { return cEffectsAssignment_4_1_0_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0_3_2_1_0() { return cEffectsEffectParserRuleCall_4_1_0_3_2_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_4_1_1() { return cLabelAssignment_4_1_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_1_0; }

		//isHistory?="history"?
		public Assignment getIsHistoryAssignment_5() { return cIsHistoryAssignment_5; }

		//"history"
		public Keyword getIsHistoryHistoryKeyword_5_0() { return cIsHistoryHistoryKeyword_5_0; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cIsInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInputInputKeyword_1_0 = (Keyword)cIsInputAssignment_1.eContents().get(0);
		private final Assignment cIsOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOutputOutputKeyword_2_0 = (Keyword)cIsOutputAssignment_2.eContents().get(0);
		private final Keyword cSignalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitialValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitialValueAnyTypeParserRuleCall_5_1_0 = (RuleCall)cInitialValueAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cColonKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Alternatives cAlternatives_6_0_1 = (Alternatives)cGroup_6_0.eContents().get(1);
		private final Assignment cTypeAssignment_6_0_1_0 = (Assignment)cAlternatives_6_0_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_6_0_1_0_0 = (RuleCall)cTypeAssignment_6_0_1_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_6_0_1_1 = (Assignment)cAlternatives_6_0_1.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_6_0_1_1_0 = (RuleCall)cHostTypeAssignment_6_0_1_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cColonKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cCombineKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Alternatives cAlternatives_6_1_2 = (Alternatives)cGroup_6_1.eContents().get(2);
		private final Assignment cTypeAssignment_6_1_2_0 = (Assignment)cAlternatives_6_1_2.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_6_1_2_0_0 = (RuleCall)cTypeAssignment_6_1_2_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_6_1_2_1 = (Assignment)cAlternatives_6_1_2.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_6_1_2_1_0 = (RuleCall)cHostTypeAssignment_6_1_2_1.eContents().get(0);
		private final Keyword cWithKeyword_6_1_3 = (Keyword)cGroup_6_1.eContents().get(3);
		private final Alternatives cAlternatives_6_1_4 = (Alternatives)cGroup_6_1.eContents().get(4);
		private final Assignment cCombineOperatorAssignment_6_1_4_0 = (Assignment)cAlternatives_6_1_4.eContents().get(0);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0 = (RuleCall)cCombineOperatorAssignment_6_1_4_0.eContents().get(0);
		private final Assignment cHostCombineOperatorAssignment_6_1_4_1 = (Assignment)cAlternatives_6_1_4.eContents().get(1);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_6_1_4_1_0 = (RuleCall)cHostCombineOperatorAssignment_6_1_4_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Signal returns expressions::Signal:
		//	annotations+=StringAnnotation* isInput?="input"? isOutput?="output"? "signal" name=ID (":=" initialValue=AnyType)?
		//	(":" (type=ValueType | hostType=STRING) | ":" "combine" (type=ValueType | hostType=STRING) "with"
		//	(combineOperator=CombineOperator | hostCombineOperator=STRING))?;
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* isInput?="input"? isOutput?="output"? "signal" name=ID (":=" initialValue=AnyType)? (":"
		//(type=ValueType | hostType=STRING) | ":" "combine" (type=ValueType | hostType=STRING) "with"
		//(combineOperator=CombineOperator | hostCombineOperator=STRING))?
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_1() { return cIsInputAssignment_1; }

		//"input"
		public Keyword getIsInputInputKeyword_1_0() { return cIsInputInputKeyword_1_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_2() { return cIsOutputAssignment_2; }

		//"output"
		public Keyword getIsOutputOutputKeyword_2_0() { return cIsOutputOutputKeyword_2_0; }

		//"signal"
		public Keyword getSignalKeyword_3() { return cSignalKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(":=" initialValue=AnyType)?
		public Group getGroup_5() { return cGroup_5; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }

		//initialValue=AnyType
		public Assignment getInitialValueAssignment_5_1() { return cInitialValueAssignment_5_1; }

		//AnyType
		public RuleCall getInitialValueAnyTypeParserRuleCall_5_1_0() { return cInitialValueAnyTypeParserRuleCall_5_1_0; }

		//(":" (type=ValueType | hostType=STRING) | ":" "combine" (type=ValueType | hostType=STRING) "with"
		//(combineOperator=CombineOperator | hostCombineOperator=STRING))?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//":" (type=ValueType | hostType=STRING)
		public Group getGroup_6_0() { return cGroup_6_0; }

		//":"
		public Keyword getColonKeyword_6_0_0() { return cColonKeyword_6_0_0; }

		//type=ValueType | hostType=STRING
		public Alternatives getAlternatives_6_0_1() { return cAlternatives_6_0_1; }

		//type=ValueType
		public Assignment getTypeAssignment_6_0_1_0() { return cTypeAssignment_6_0_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_6_0_1_0_0() { return cTypeValueTypeEnumRuleCall_6_0_1_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_6_0_1_1() { return cHostTypeAssignment_6_0_1_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_6_0_1_1_0() { return cHostTypeSTRINGTerminalRuleCall_6_0_1_1_0; }

		//":" "combine" (type=ValueType | hostType=STRING) "with" (combineOperator=CombineOperator | hostCombineOperator=STRING)
		public Group getGroup_6_1() { return cGroup_6_1; }

		//":"
		public Keyword getColonKeyword_6_1_0() { return cColonKeyword_6_1_0; }

		//"combine"
		public Keyword getCombineKeyword_6_1_1() { return cCombineKeyword_6_1_1; }

		//type=ValueType | hostType=STRING
		public Alternatives getAlternatives_6_1_2() { return cAlternatives_6_1_2; }

		//type=ValueType
		public Assignment getTypeAssignment_6_1_2_0() { return cTypeAssignment_6_1_2_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_6_1_2_0_0() { return cTypeValueTypeEnumRuleCall_6_1_2_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_6_1_2_1() { return cHostTypeAssignment_6_1_2_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_6_1_2_1_0() { return cHostTypeSTRINGTerminalRuleCall_6_1_2_1_0; }

		//"with"
		public Keyword getWithKeyword_6_1_3() { return cWithKeyword_6_1_3; }

		//combineOperator=CombineOperator | hostCombineOperator=STRING
		public Alternatives getAlternatives_6_1_4() { return cAlternatives_6_1_4; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_6_1_4_0() { return cCombineOperatorAssignment_6_1_4_0; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0() { return cCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_6_1_4_1() { return cHostCombineOperatorAssignment_6_1_4_1; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_6_1_4_1_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_6_1_4_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueAnyTypeParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_5_0_0 = (RuleCall)cTypeAssignment_5_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cHostTypeAssignment_5_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Variable returns expressions::Variable:
		//	annotations+=StringAnnotation* "var" name=ID (":=" initialValue=AnyType)? ":" (type=ValueType | hostType=STRING);
		public ParserRule getRule() { return rule; }

		//annotations+=StringAnnotation* "var" name=ID (":=" initialValue=AnyType)? ":" (type=ValueType | hostType=STRING)
		public Group getGroup() { return cGroup; }

		//annotations+=StringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//StringAnnotation
		public RuleCall getAnnotationsStringAnnotationParserRuleCall_0_0() { return cAnnotationsStringAnnotationParserRuleCall_0_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":=" initialValue=AnyType)?
		public Group getGroup_3() { return cGroup_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_3_0() { return cColonEqualsSignKeyword_3_0; }

		//initialValue=AnyType
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }

		//AnyType
		public RuleCall getInitialValueAnyTypeParserRuleCall_3_1_0() { return cInitialValueAnyTypeParserRuleCall_3_1_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=ValueType | hostType=STRING
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//type=ValueType
		public Assignment getTypeAssignment_5_0() { return cTypeAssignment_5_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_5_0_0() { return cTypeValueTypeEnumRuleCall_5_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_5_1() { return cHostTypeAssignment_5_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_5_1_0() { return cHostTypeSTRINGTerminalRuleCall_5_1_0; }
	}

	public class SubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Substitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActualIDTerminalRuleCall_0_0 = (RuleCall)cActualAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalIDTerminalRuleCall_2_0 = (RuleCall)cFormalAssignment_2.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Substitution returns synccharts::Substitution:
		//	actual=ID "/" formal=ID;
		public ParserRule getRule() { return rule; }

		//actual=ID "/" formal=ID
		public Group getGroup() { return cGroup; }

		//actual=ID
		public Assignment getActualAssignment_0() { return cActualAssignment_0; }

		//ID
		public RuleCall getActualIDTerminalRuleCall_0_0() { return cActualIDTerminalRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//formal=ID
		public Assignment getFormalAssignment_2() { return cFormalAssignment_2; }

		//ID
		public RuleCall getFormalIDTerminalRuleCall_2_0() { return cFormalIDTerminalRuleCall_2_0; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONDITIONALConditionalKeyword_1_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEReferenceKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//enum StateType returns synccharts::StateType:
		//	NORMAL="normal" | CONDITIONAL="conditional" | REFERENCE="reference" | TEXTUAL="textual";
		public EnumRule getRule() { return rule; }

		//NORMAL="normal" | CONDITIONAL="conditional" | REFERENCE="reference" | TEXTUAL="textual"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL="normal"
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"normal"
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }

		//CONDITIONAL="conditional"
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration_1() { return cCONDITIONALEnumLiteralDeclaration_1; }

		//"conditional"
		public Keyword getCONDITIONALConditionalKeyword_1_0() { return cCONDITIONALConditionalKeyword_1_0; }

		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"reference"
		public Keyword getREFERENCEReferenceKeyword_2_0() { return cREFERENCEReferenceKeyword_2_0; }

		//TEXTUAL="textual"
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"textual"
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTOKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNORMALTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cNORMALTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns synccharts::TransitionType:
		//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
		public EnumRule getRule() { return rule; }

		//WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT="-->"
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//"-->"
		public Keyword getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//STRONGABORT="o->"
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//"o->"
		public Keyword getSTRONGABORTOKeyword_1_0() { return cSTRONGABORTOKeyword_1_0; }

		//NORMALTERMINATION=">->"
		public EnumLiteralDeclaration getNORMALTERMINATIONEnumLiteralDeclaration_2() { return cNORMALTERMINATIONEnumLiteralDeclaration_2; }

		//">->"
		public Keyword getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private RootRegionElements pRootRegion;
	private SingleRegionElements pSingleRegion;
	private TextualCodeElements pTextualCode;
	private RegionElements pRegion;
	private StateElements pState;
	private TransitionElements pTransition;
	private SignalElements pSignal;
	private VariableElements pVariable;
	private SubstitutionElements pSubstitution;
	private StateTypeElements unknownRuleStateType;
	private TransitionTypeElements unknownRuleTransitionType;
	
	private final GrammarProvider grammarProvider;

	private ActionsGrammarAccess gaActions;

	@Inject
	public KitsGrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions) {
		this.grammarProvider = grammarProvider;
		this.gaActions = gaActions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	
	//RootRegion returns synccharts::Region:
	//	annotations+=ImportAnnotation* annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":")?
	//	(variables+=Variable | signals+=Signal)* bodyText+=TextualCode* states+=State*;
	public RootRegionElements getRootRegionAccess() {
		return (pRootRegion != null) ? pRootRegion : (pRootRegion = new RootRegionElements());
	}
	
	public ParserRule getRootRegionRule() {
		return getRootRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SingleRegion returns synccharts::Region:
	//	annotations+=StringAnnotation* ("region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*)?
	//	bodyText+=TextualCode* states+=State*;
	public SingleRegionElements getSingleRegionAccess() {
		return (pSingleRegion != null) ? pSingleRegion : (pSingleRegion = new SingleRegionElements());
	}
	
	public ParserRule getSingleRegionRule() {
		return getSingleRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//TextualCode returns expressions::TextualCode:
	//	"textual" "code" ("(" type=ID ")")? ":" code=STRING;
	public TextualCodeElements getTextualCodeAccess() {
		return (pTextualCode != null) ? pTextualCode : (pTextualCode = new TextualCodeElements());
	}
	
	public ParserRule getTextualCodeRule() {
		return getTextualCodeAccess().getRule();
	}

	//Region returns synccharts::Region:
	//	annotations+=StringAnnotation* "region" id=ID? label=STRING? ":" (variables+=Variable | signals+=Signal)*
	//	bodyText+=TextualCode* states+=State+;
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//State returns synccharts::State:
	//	annotations+=StringAnnotation* (isInitial?="init" isFinal?="final"? | isFinal?="final" isInitial?="init"?)?
	//	type=StateType? "state" id=ID label=STRING? ("@" bodyReference=[synccharts::State] ("[" renamings+=Substitution (","
	//	renamings+=Substitution)* "]")? | "{" ((signals+=Signal | variables+=Variable | "onentry" entryActions+=Action |
	//	"oninner" innerActions+=Action | "onexit" exitActions+=Action | "suspension" suspensionTrigger=Action)*
	//	(regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition*;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Transition returns synccharts::Transition:
	//	annotations+=StringAnnotation* type=TransitionType priority=INT? targetState=[synccharts::State] ("with"
	//	(isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect ("," effects+=Effect)*)? |
	//	label=STRING))? isHistory?="history"?;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Signal returns expressions::Signal:
	//	annotations+=StringAnnotation* isInput?="input"? isOutput?="output"? "signal" name=ID (":=" initialValue=AnyType)?
	//	(":" (type=ValueType | hostType=STRING) | ":" "combine" (type=ValueType | hostType=STRING) "with"
	//	(combineOperator=CombineOperator | hostCombineOperator=STRING))?;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Variable returns expressions::Variable:
	//	annotations+=StringAnnotation* "var" name=ID (":=" initialValue=AnyType)? ":" (type=ValueType | hostType=STRING);
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Substitution returns synccharts::Substitution:
	//	actual=ID "/" formal=ID;
	public SubstitutionElements getSubstitutionAccess() {
		return (pSubstitution != null) ? pSubstitution : (pSubstitution = new SubstitutionElements());
	}
	
	public ParserRule getSubstitutionRule() {
		return getSubstitutionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//enum StateType returns synccharts::StateType:
	//	NORMAL="normal" | CONDITIONAL="conditional" | REFERENCE="reference" | TEXTUAL="textual";
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns synccharts::TransitionType:
	//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
	public TransitionTypeElements getTransitionTypeAccess() {
		return (unknownRuleTransitionType != null) ? unknownRuleTransitionType : (unknownRuleTransitionType = new TransitionTypeElements());
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//// chsch: The action rule is used in Kits.xtext for entry-, inner-, exitActions, suspensionTrigger 
	//Action returns synccharts::Action:
	//	{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?;
	public ActionsGrammarAccess.ActionElements getActionAccess() {
		return gaActions.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//	Emission | Assignment | TextEffect;
	public ActionsGrammarAccess.EffectElements getEffectAccess() {
		return gaActions.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//	signal=[expressions::Signal] ("(" newValue=Expression ")")?;
	public ActionsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActions.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//	variable=[expressions::Variable] ":=" expression=Expression;
	public ActionsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActions.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TextEffect returns synccharts::TextEffect:
	//	code=HOSTCODE ("(" type=ID ")")?;
	public ActionsGrammarAccess.TextEffectElements getTextEffectAccess() {
		return gaActions.getTextEffectAccess();
	}
	
	public ParserRule getTextEffectRule() {
		return getTextEffectAccess().getRule();
	}

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//Expression:
	//	BooleanExpression | ValuedExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns Expression:
	//	OrExpression;
	public ExpressionsGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaActions.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//OrExpression returns Expression:
	//	AndExpression ({OperatorExpression.subExpressions+=current} operator=OrOperator subExpressions+=AndExpression)*;
	public ExpressionsGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaActions.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//AndExpression returns Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} operator=AndOperator
	//	subExpressions+=CompareOperation)*;
	public ExpressionsGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaActions.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= ?A
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression;
	public ExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public ExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaActions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns Expression:
	//	AddExpression;
	public ExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaActions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=SubExpression)*;
	public ExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaActions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=MultExpression)*;
	public ExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaActions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=ModExpression)*;
	public ExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaActions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression returns Expression:
	//	AtomicValuedExpression ({OperatorExpression.subExpressions+=current} operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)?;
	public ExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaActions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public ExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaActions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//AtomicExpression returns Expression:
	//	BooleanValue | ValuedObjectTestExpression | "(" BooleanExpression ")" | TextExpression;
	public ExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaActions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | "(" DivExpression ")" | "(" ValuedExpression ")" | AtomicExpression;
	public ExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaActions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression returns Expression:
	//	AtomicValuedExpression {OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=AtomicValuedExpression;
	public ExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaActions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=PreOperator "(" subExpressions+=ValuedObjectTestExpression ")" | {OperatorExpression}
	//	operator=ValueTestOperator subExpressions+=ValuedObjectReference | ValuedObjectReference;
	public ExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaActions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject];
	public ExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaActions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Example: 'printf(...)'(C)
	//TextExpression:
	//	code=HOSTCODE ("(" type=ID ")")?;
	public ExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaActions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public ExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=Float;
	public ExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//	value=Boolean;
	public ExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaActions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType returns ecore::EString:
	//	Boolean | INT | Float | ID | STRING;
	public ExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaActions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public ExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaActions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum OrOperator returns OperatorType:
	//	OR="or";
	public ExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaActions.getOrOperatorAccess();
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns OperatorType:
	//	AND="and";
	public ExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaActions.getAndOperatorAccess();
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="not";
	public ExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaActions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public ExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaActions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public ExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaActions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public ExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="mod";
	public ExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaActions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public ExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValueTestOperator returns OperatorType:
	//	VAL="?";
	public ExpressionsGrammarAccess.ValueTestOperatorElements getValueTestOperatorAccess() {
		return gaActions.getValueTestOperatorAccess();
	}
	
	public EnumRule getValueTestOperatorRule() {
		return getValueTestOperatorAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext 
	// * /enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | HOST="host";
	public ExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaActions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public ExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaActions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaActions.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal Float returns ecore::EFloatObject:
	//	(INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return gaActions.getFloatRule();
	} 

	//// introduce boolean values
	//terminal Boolean returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return gaActions.getBooleanRule();
	} 

	//// custom terminal rule allowing to save transition label string as they are
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaActions.getSTRINGRule();
	} 

	//// custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaActions.getHOSTCODERule();
	} 

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//// introduction of parsing rules for annotations
	//StringAnnotation returns Annotation:
	//	CommentAnnotation | KeyValueAnnotation;
	public AnnotationsGrammarAccess.StringAnnotationElements getStringAnnotationAccess() {
		return gaActions.getStringAnnotationAccess();
	}
	
	public ParserRule getStringAnnotationRule() {
		return getStringAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	//CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaActions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot; @layoutOptions "margin 5, dir top-down";    
	//KeyValueAnnotation returns StringAnnotation:
	//	"@" name=ID value=EString;
	public AnnotationsGrammarAccess.KeyValueAnnotationElements getKeyValueAnnotationAccess() {
		return gaActions.getKeyValueAnnotationAccess();
	}
	
	public ParserRule getKeyValueAnnotationRule() {
		return getKeyValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	//ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaActions.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	//EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaActions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//// custom terminal rule introducing semantic comments
	//terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaActions.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActions.getML_COMMENTRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActions.getANY_OTHERRule();
	} 
}
