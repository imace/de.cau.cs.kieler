/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.text.actions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.expressions.services.ExpressionsGrammarAccess;

@Singleton
public class ActionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsImmediateNumberSignKeyword_1_0 = (Keyword)cIsImmediateAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayINTTerminalRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerBooleanExpressionParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cEffectsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0_0 = (RuleCall)cEffectsAssignment_4_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		
		//Action returns synccharts::Action:
		//	{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?;
		public ParserRule getRule() { return rule; }

		//{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?
		public Group getGroup() { return cGroup; }

		//{synccharts::Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_1() { return cIsImmediateAssignment_1; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_1_0() { return cIsImmediateNumberSignKeyword_1_0; }

		//delay=INT?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_2_0() { return cDelayINTTerminalRuleCall_2_0; }

		//trigger=BooleanExpression?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//BooleanExpression
		public RuleCall getTriggerBooleanExpressionParserRuleCall_3_0() { return cTriggerBooleanExpressionParserRuleCall_3_0; }

		//("/" (effects+=Effect ","?)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//(effects+=Effect ","?)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1_0() { return cEffectsAssignment_4_1_0; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0_0() { return cEffectsEffectParserRuleCall_4_1_0_0; }

		//","?
		public Keyword getCommaKeyword_4_1_1() { return cCommaKeyword_4_1_1; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmissionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect returns synccharts::Effect:
		//	Emission | Assignment | TextEffect;
		public ParserRule getRule() { return rule; }

		//Emission | Assignment | TextEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//Emission
		public RuleCall getEmissionParserRuleCall_0() { return cEmissionParserRuleCall_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }

		//TextEffect
		public RuleCall getTextEffectParserRuleCall_2() { return cTextEffectParserRuleCall_2; }
	}

	public class EmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSignalSignalCrossReference_0_0 = (CrossReference)cSignalAssignment_0.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cSignalSignalCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNewValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNewValueValuedExpressionParserRuleCall_1_0_1_0 = (RuleCall)cNewValueAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNewValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNewValueBooleanExpressionParserRuleCall_1_1_1_0 = (RuleCall)cNewValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Emission returns synccharts::Emission:
		//	signal=[expressions::Signal] ("(" newValue=ValuedExpression ")" | "(" newValue=BooleanExpression ")")?;
		public ParserRule getRule() { return rule; }

		//signal=[expressions::Signal] ("(" newValue=ValuedExpression ")" | "(" newValue=BooleanExpression ")")?
		public Group getGroup() { return cGroup; }

		//signal=[expressions::Signal]
		public Assignment getSignalAssignment_0() { return cSignalAssignment_0; }

		//[expressions::Signal]
		public CrossReference getSignalSignalCrossReference_0_0() { return cSignalSignalCrossReference_0_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_0_1() { return cSignalSignalIDTerminalRuleCall_0_0_1; }

		//("(" newValue=ValuedExpression ")" | "(" newValue=BooleanExpression ")")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" newValue=ValuedExpression ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//newValue=ValuedExpression
		public Assignment getNewValueAssignment_1_0_1() { return cNewValueAssignment_1_0_1; }

		//ValuedExpression
		public RuleCall getNewValueValuedExpressionParserRuleCall_1_0_1_0() { return cNewValueValuedExpressionParserRuleCall_1_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//"(" newValue=BooleanExpression ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//newValue=BooleanExpression
		public Assignment getNewValueAssignment_1_1_1() { return cNewValueAssignment_1_1_1; }

		//BooleanExpression
		public RuleCall getNewValueBooleanExpressionParserRuleCall_1_1_1_0() { return cNewValueBooleanExpressionParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionValuedExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExpressionBooleanExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Assignment returns synccharts::Assignment:
		//	variable=[expressions::Variable] ":=" (expression=ValuedExpression | expression=BooleanExpression);
		public ParserRule getRule() { return rule; }

		//variable=[expressions::Variable] ":=" (expression=ValuedExpression | expression=BooleanExpression)
		public Group getGroup() { return cGroup; }

		//variable=[expressions::Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[expressions::Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=ValuedExpression | expression=BooleanExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expression=ValuedExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//ValuedExpression
		public RuleCall getExpressionValuedExpressionParserRuleCall_2_0_0() { return cExpressionValuedExpressionParserRuleCall_2_0_0; }

		//expression=BooleanExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//BooleanExpression
		public RuleCall getExpressionBooleanExpressionParserRuleCall_2_1_0() { return cExpressionBooleanExpressionParserRuleCall_2_1_0; }
	}

	public class TextEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCodeSTRINGTerminalRuleCall_0_0 = (RuleCall)cCodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TextEffect returns synccharts::TextEffect:
		//	code=STRING ("(" type=ID ")")?;
		public ParserRule getRule() { return rule; }

		//code=STRING ("(" type=ID ")")?
		public Group getGroup() { return cGroup; }

		//code=STRING
		public Assignment getCodeAssignment_0() { return cCodeAssignment_0; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_0_0() { return cCodeSTRINGTerminalRuleCall_0_0; }

		//("(" type=ID ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//type=ID
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0() { return cTypeIDTerminalRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private ActionElements pAction;
	private EffectElements pEffect;
	private EmissionElements pEmission;
	private AssignmentElements pAssignment;
	private TextEffectElements pTextEffect;
	
	private final GrammarProvider grammarProvider;

	private ExpressionsGrammarAccess gaExpressions;

	@Inject
	public ActionsGrammarAccess(GrammarProvider grammarProvider,
		ExpressionsGrammarAccess gaExpressions) {
		this.grammarProvider = grammarProvider;
		this.gaExpressions = gaExpressions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}

	
	//Action returns synccharts::Action:
	//	{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//	Emission | Assignment | TextEffect;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//	signal=[expressions::Signal] ("(" newValue=ValuedExpression ")" | "(" newValue=BooleanExpression ")")?;
	public EmissionElements getEmissionAccess() {
		return (pEmission != null) ? pEmission : (pEmission = new EmissionElements());
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//	variable=[expressions::Variable] ":=" (expression=ValuedExpression | expression=BooleanExpression);
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TextEffect returns synccharts::TextEffect:
	//	code=STRING ("(" type=ID ")")?;
	public TextEffectElements getTextEffectAccess() {
		return (pTextEffect != null) ? pTextEffect : (pTextEffect = new TextEffectElements());
	}
	
	public ParserRule getTextEffectRule() {
		return getTextEffectAccess().getRule();
	}

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//SignalReference returns expressions::SignalReference:
	//	signal=[expressions::Signal] ("(" (subExpressions+=Expression ","?)* ")")?;
	public ExpressionsGrammarAccess.SignalReferenceElements getSignalReferenceAccess() {
		return gaExpressions.getSignalReferenceAccess();
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}

	//VariableReference returns expressions::VariableReference:
	//	variable=[expressions::Variable] ("(" (subExpressions+=Expression ","?)* ")")?;
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaExpressions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//Signal returns expressions::Signal:
	//	name=ID;
	public ExpressionsGrammarAccess.SignalElements getSignalAccess() {
		return gaExpressions.getSignalAccess();
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Variable returns expressions::Variable:
	//	name=ID;
	public ExpressionsGrammarAccess.VariableElements getVariableAccess() {
		return gaExpressions.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	////==============================================================================
	//// Values
	////==============================================================================
	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaExpressions.getINTRule();
	} 

	//IntValue returns expressions::IntValue:
	//	value=INT;
	public ExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue returns expressions::FloatValue:
	//	value=Float;
	public ExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue returns expressions::BooleanValue:
	//	value=Boolean;
	public ExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaExpressions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Value returns expressions::Value:
	//	IntValue | FloatValue | BooleanValue;
	public ExpressionsGrammarAccess.ValueElements getValueAccess() {
		return gaExpressions.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//// make sure the Float rule does not shadow the INT rule
	//terminal Float returns ecore::EFloatObject:
	//	(INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return gaExpressions.getFloatRule();
	} 

	//terminal Boolean returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return gaExpressions.getBooleanRule();
	} 

	////==============================================================================
	//// Arithmetic Expressions
	////==============================================================================
	//// Example: ?A	
	//ValOperation returns expressions::OperatorExpression:
	//	operator=ValOperator subExpressions+=SignalReference;
	public ExpressionsGrammarAccess.ValOperationElements getValOperationAccess() {
		return gaExpressions.getValOperationAccess();
	}
	
	public ParserRule getValOperationRule() {
		return getValOperationAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns expressions::Expression:
	//	PlusOperation;
	public ExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 42, 42.2, ?A, var1, (1+2*3)
	//ParanthesedValuedExpression returns expressions::Expression:
	//	IntValue | FloatValue | ValOperation | VariableReference | TextExpression | "(" PlusOperation ")" | "(" DivOperation
	//	")";
	public ExpressionsGrammarAccess.ParanthesedValuedExpressionElements getParanthesedValuedExpressionAccess() {
		return gaExpressions.getParanthesedValuedExpressionAccess();
	}
	
	public ParserRule getParanthesedValuedExpressionRule() {
		return getParanthesedValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2, varA - ?B
	//PlusOperation returns expressions::Expression:
	//	MultOrDivOperation ({expressions::OperatorExpression.subExpressions+=current} operator=PlusOperator
	//	subExpressions+=MultOrDivOperation)*;
	public ExpressionsGrammarAccess.PlusOperationElements getPlusOperationAccess() {
		return gaExpressions.getPlusOperationAccess();
	}
	
	public ParserRule getPlusOperationRule() {
		return getPlusOperationAccess().getRule();
	}

	//MultOrDivOperation returns expressions::Expression:
	//	MultOperation | "(" DivOperation ")";
	public ExpressionsGrammarAccess.MultOrDivOperationElements getMultOrDivOperationAccess() {
		return gaExpressions.getMultOrDivOperationAccess();
	}
	
	public ParserRule getMultOrDivOperationRule() {
		return getMultOrDivOperationAccess().getRule();
	}

	//// Example: 2 * 4, varA mod ?B
	//MultOperation returns expressions::Expression:
	//	PreOrNormalValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=MultOperator
	//	subExpressions+=PreOrNormalValuedExpression)*;
	public ExpressionsGrammarAccess.MultOperationElements getMultOperationAccess() {
		return gaExpressions.getMultOperationAccess();
	}
	
	public ParserRule getMultOperationRule() {
		return getMultOperationAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division has to have always parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivOperation returns expressions::Expression:
	//	PreOrNormalValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=PreOrNormalValuedExpression)*;
	public ExpressionsGrammarAccess.DivOperationElements getDivOperationAccess() {
		return gaExpressions.getDivOperationAccess();
	}
	
	public ParserRule getDivOperationRule() {
		return getDivOperationAccess().getRule();
	}

	//// Example: pre (? A)
	//PreArithmOperation returns expressions::OperatorExpression:
	//	operator=UnaryParanthesedOperator "(" subExpressions+=ValOperation ")";
	public ExpressionsGrammarAccess.PreArithmOperationElements getPreArithmOperationAccess() {
		return gaExpressions.getPreArithmOperationAccess();
	}
	
	public ParserRule getPreArithmOperationRule() {
		return getPreArithmOperationAccess().getRule();
	}

	//PreOrNormalValuedExpression returns expressions::Expression:
	//	PreArithmOperation | ParanthesedValuedExpression;
	public ExpressionsGrammarAccess.PreOrNormalValuedExpressionElements getPreOrNormalValuedExpressionAccess() {
		return gaExpressions.getPreOrNormalValuedExpressionAccess();
	}
	
	public ParserRule getPreOrNormalValuedExpressionRule() {
		return getPreOrNormalValuedExpressionAccess().getRule();
	}

	////==============================================================================
	//// Boolean Expressions
	////==============================================================================
	//// Example: 42 <= ?A
	//CompareOperation returns expressions::Expression:
	//	ValuedExpression ({expressions::OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=ValuedExpression);
	public ExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//UnaryOperation returns expressions::OperatorExpression:
	//	operator=UnaryOperator subExpressions+=(ParanthesedBooleanExpression | UnaryParanthesedOperation);
	public ExpressionsGrammarAccess.UnaryOperationElements getUnaryOperationAccess() {
		return gaExpressions.getUnaryOperationAccess();
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//UnaryParanthesedOperation returns expressions::OperatorExpression:
	//	operator=UnaryParanthesedOperator "(" subExpressions+=BooleanExpression ")";
	public ExpressionsGrammarAccess.UnaryParanthesedOperationElements getUnaryParanthesedOperationAccess() {
		return gaExpressions.getUnaryParanthesedOperationAccess();
	}
	
	public ParserRule getUnaryParanthesedOperationRule() {
		return getUnaryParanthesedOperationAccess().getRule();
	}

	//// Example: either negated or normal expression (with parantheses) 
	//UnaryOrNormalExpression returns expressions::Expression:
	//	UnaryOperation | UnaryParanthesedOperation | ParanthesedBooleanExpression;
	public ExpressionsGrammarAccess.UnaryOrNormalExpressionElements getUnaryOrNormalExpressionAccess() {
		return gaExpressions.getUnaryOrNormalExpressionAccess();
	}
	
	public ParserRule getUnaryOrNormalExpressionRule() {
		return getUnaryOrNormalExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//AndOperation returns expressions::Expression:
	//	UnaryOrNormalExpression ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorAnd
	//	subExpressions+=UnaryOrNormalExpression)*;
	public ExpressionsGrammarAccess.AndOperationElements getAndOperationAccess() {
		return gaExpressions.getAndOperationAccess();
	}
	
	public ParserRule getAndOperationRule() {
		return getAndOperationAccess().getRule();
	}

	//// Example: A or B, C and B or D and not E 
	//OrOperation returns expressions::Expression:
	//	AndOperation ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorOr
	//	subExpressions+=AndOperation)*;
	public ExpressionsGrammarAccess.OrOperationElements getOrOperationAccess() {
		return gaExpressions.getOrOperationAccess();
	}
	
	public ParserRule getOrOperationRule() {
		return getOrOperationAccess().getRule();
	}

	//// Example: true, A, 42>var1, (A or B), (not D and C or ?E = 42)
	//// note that the order of CompareOperation and SignalReference is important. This might be an Xtext bug...
	//ParanthesedBooleanExpression returns expressions::Expression:
	//	BooleanValue | CompareOperation | SignalReference | ValOperation | TextExpression | "(" OrOperation ")";
	public ExpressionsGrammarAccess.ParanthesedBooleanExpressionElements getParanthesedBooleanExpressionAccess() {
		return gaExpressions.getParanthesedBooleanExpressionAccess();
	}
	
	public ParserRule getParanthesedBooleanExpressionRule() {
		return getParanthesedBooleanExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns expressions::Expression:
	//	OrOperation;
	public ExpressionsGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaExpressions.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	////==============================================================================
	//// Operators
	////==============================================================================
	//enum OperatorType returns expressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | NE="<>" | AND="and" | OR="or" | ADD="+" | SUB="-" |
	//	MULT="*" | DIV="/" | MOD="mod" | VAL="?" | PRE="pre";
	public ExpressionsGrammarAccess.OperatorTypeElements getOperatorTypeAccess() {
		return gaExpressions.getOperatorTypeAccess();
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}

	//enum ValOperator returns expressions::OperatorType:
	//	VAL="?";
	public ExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum CompareOperator returns expressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public ExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//// not A	
	//enum UnaryOperator returns expressions::OperatorType:
	//	NOT="not";
	public ExpressionsGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressions.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//// pre(A)
	//enum UnaryParanthesedOperator returns expressions::OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.UnaryParanthesedOperatorElements getUnaryParanthesedOperatorAccess() {
		return gaExpressions.getUnaryParanthesedOperatorAccess();
	}
	
	public EnumRule getUnaryParanthesedOperatorRule() {
		return getUnaryParanthesedOperatorAccess().getRule();
	}

	//enum OperatorOr returns expressions::OperatorType:
	//	OR="or";
	public ExpressionsGrammarAccess.OperatorOrElements getOperatorOrAccess() {
		return gaExpressions.getOperatorOrAccess();
	}
	
	public EnumRule getOperatorOrRule() {
		return getOperatorOrAccess().getRule();
	}

	//enum OperatorAnd returns expressions::OperatorType:
	//	AND="and";
	public ExpressionsGrammarAccess.OperatorAndElements getOperatorAndAccess() {
		return gaExpressions.getOperatorAndAccess();
	}
	
	public EnumRule getOperatorAndRule() {
		return getOperatorAndAccess().getRule();
	}

	//enum OperatorPre returns expressions::OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.OperatorPreElements getOperatorPreAccess() {
		return gaExpressions.getOperatorPreAccess();
	}
	
	public EnumRule getOperatorPreRule() {
		return getOperatorPreAccess().getRule();
	}

	//enum PlusOperator returns expressions::OperatorType:
	//	ADD="+" | SUB="-";
	public ExpressionsGrammarAccess.PlusOperatorElements getPlusOperatorAccess() {
		return gaExpressions.getPlusOperatorAccess();
	}
	
	public EnumRule getPlusOperatorRule() {
		return getPlusOperatorAccess().getRule();
	}

	//enum MultOperator returns expressions::OperatorType:
	//	MULT="*" | MOD="mod";
	public ExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum DivOperator returns expressions::OperatorType:
	//	DIV="/";
	public ExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	////==============================================================================
	//// Misc
	////==============================================================================
	//TextExpression returns expressions::TextExpression:
	//	code=STRING ("(" type=ID ")")?;
	public ExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//Expression returns expressions::Expression:
	//	ValuedExpression | BooleanExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Interface.xtext, Kits.xtext 
	// * /enum ValueType returns expressions::ValueType:
	//	PURE | BOOL | UNSIGNED | INT | FLOAT | HOST;
	public ExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator returns expressions::CombineOperator:
	//	NONE | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public ExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressions.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressions.getANY_OTHERRule();
	} 
}
