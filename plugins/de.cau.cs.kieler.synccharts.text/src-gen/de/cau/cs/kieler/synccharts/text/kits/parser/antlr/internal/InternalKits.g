/*
* generated by Xtext
*/
grammar InternalKits;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.text.kits.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.text.kits.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.synccharts.text.kits.services.KitsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private KitsGrammarAccess grammarAccess;
 	
    public InternalKitsParser(TokenStream input, IAstFactory factory, KitsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/synccharts/text/kits/parser/antlr/internal/InternalKits.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Region";	
   	}
   	
   	@Override
   	protected KitsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRegion
entryRuleRegion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegionRule(), currentNode); }
	 iv_ruleRegion=ruleRegion 
	 { $current=$iv_ruleRegion.current; } 
	 EOF 
;

// Rule Region
ruleRegion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getAnnotationsStringAnnotationParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleStringAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"StringAnnotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'region' 
    {
        createLeafNode(grammarAccess.getRegionAccess().getRegionKeyword_0_1(), null); 
    }
(
(
		lv_id_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRegionAccess().getIdIDTerminalRuleCall_0_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getLabelEStringParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_label_3_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_3_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getVariablesVariableParserRuleCall_0_4_0_0(), currentNode); 
	    }
		lv_variables_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getSignalsSignalParserRuleCall_0_4_1_0(), currentNode); 
	    }
		lv_signals_5_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_5_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getStatesStateParserRuleCall_0_5_0(), currentNode); 
	    }
		lv_states_6_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_6_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionAccess().getStatesStateParserRuleCall_1_0(), currentNode); 
	    }
		lv_states_7_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_7_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleStringAnnotation
entryRuleStringAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringAnnotationRule(), currentNode); }
	 iv_ruleStringAnnotation=ruleStringAnnotation 
	 { $current=$iv_ruleStringAnnotation.current; } 
	 EOF 
;

// Rule StringAnnotation
ruleStringAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStringAnnotationAccess().getCommentAnnotationParserRuleCall_0(), currentNode); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStringAnnotationAccess().getKeyValueAnnotationParserRuleCall_1(), currentNode); 
    }
    this_KeyValueAnnotation_1=ruleKeyValueAnnotation
    { 
        $current = $this_KeyValueAnnotation_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommentAnnotationRule(), currentNode); }
	 iv_ruleCommentAnnotation=ruleCommentAnnotation 
	 { $current=$iv_ruleCommentAnnotation.current; } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_COMMENT_ANNOTATION
		{
			createLeafNode(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommentAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"COMMENT_ANNOTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleKeyValueAnnotation
entryRuleKeyValueAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeyValueAnnotationRule(), currentNode); }
	 iv_ruleKeyValueAnnotation=ruleKeyValueAnnotation 
	 { $current=$iv_ruleKeyValueAnnotation.current; } 
	 EOF 
;

// Rule KeyValueAnnotation
ruleKeyValueAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ANNOTATION_KEY
		{
			createLeafNode(grammarAccess.getKeyValueAnnotationAccess().getNameANNOTATION_KEYTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyValueAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ANNOTATION_KEY", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getKeyValueAnnotationAccess().getValueEStringParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyValueAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getAnnotationsStringAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleStringAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"StringAnnotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(((
(
		lv_isInitial_1_0=	'init' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsInitialInitKeyword_1_0_0_0(), "isInitial"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInitial", true, "init", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_isFinal_2_0=	'final' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_0_1_0(), "isFinal"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFinal", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
    |((
(
		lv_isFinal_3_0=	'final' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_1_0_0(), "isFinal"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isFinal", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_isInitial_4_0=	'init' 
    {
        createLeafNode(grammarAccess.getStateAccess().getIsInitialInitKeyword_1_1_1_0(), "isInitial"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInitial", true, "init", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_type_5_0=ruleStateType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_5_0, 
	        		"StateType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'state' 
    {
        createLeafNode(grammarAccess.getStateAccess().getStateKeyword_3(), null); 
    }
)?(
(
		lv_id_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateAccess().getIdIDTerminalRuleCall_4_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getLabelEStringParserRuleCall_5_0(), currentNode); 
	    }
		lv_label_8_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_8_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_6_0_0_0_0(), currentNode); 
	    }
		lv_outgoingTransitions_9_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outgoingTransitions",
	        		lv_outgoingTransitions_9_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getStateAccess().getCommaKeyword_6_0_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_6_0_0_1_1_0(), currentNode); 
	    }
		lv_outgoingTransitions_11_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outgoingTransitions",
	        		lv_outgoingTransitions_11_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_6_0_1(), null); 
    }
)
    |(	'{' 
    {
        createLeafNode(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_6_1_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_6_1_1_0_0_0(), currentNode); 
	    }
		lv_signals_14_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_14_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getVariablesVariableParserRuleCall_6_1_1_0_1_0(), currentNode); 
	    }
		lv_variables_15_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_15_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'onentry' 
    {
        createLeafNode(grammarAccess.getStateAccess().getOnentryKeyword_6_1_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getEntryActionsActionParserRuleCall_6_1_1_0_2_1_0(), currentNode); 
	    }
		lv_entryActions_17_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entryActions",
	        		lv_entryActions_17_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'oninner' 
    {
        createLeafNode(grammarAccess.getStateAccess().getOninnerKeyword_6_1_1_0_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getInnerActionsActionParserRuleCall_6_1_1_0_3_1_0(), currentNode); 
	    }
		lv_innerActions_19_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"innerActions",
	        		lv_innerActions_19_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'onexit' 
    {
        createLeafNode(grammarAccess.getStateAccess().getOnexitKeyword_6_1_1_0_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getExitActionsActionParserRuleCall_6_1_1_0_4_1_0(), currentNode); 
	    }
		lv_exitActions_21_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exitActions",
	        		lv_exitActions_21_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'suspension' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSuspensionKeyword_6_1_1_0_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getSuspensionTriggerActionParserRuleCall_6_1_1_0_5_1_0(), currentNode); 
	    }
		lv_suspensionTrigger_23_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suspensionTrigger",
	        		lv_suspensionTrigger_23_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_6_1_1_1_0_0(), currentNode); 
	    }
		lv_regions_24_0=ruleRegion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"regions",
	        		lv_regions_24_0, 
	        		"Region", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'||' 
    {
        createLeafNode(grammarAccess.getStateAccess().getVerticalLineVerticalLineKeyword_6_1_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_6_1_1_1_1_1_0(), currentNode); 
	    }
		lv_regions_26_0=ruleRegion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"regions",
	        		lv_regions_26_0, 
	        		"Region", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*))	'}' 
    {
        createLeafNode(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_6_1_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_6_1_3_0_0(), currentNode); 
	    }
		lv_outgoingTransitions_28_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outgoingTransitions",
	        		lv_outgoingTransitions_28_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getStateAccess().getCommaKeyword_6_1_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_6_1_3_1_1_0(), currentNode); 
	    }
		lv_outgoingTransitions_30_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outgoingTransitions",
	        		lv_outgoingTransitions_30_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_6_1_3_2(), null); 
    }
)?)))
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getAnnotationsStringAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleStringAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"StringAnnotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTypeTransitionTypeEnumRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleTransitionType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TransitionType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTargetStateStateCrossReference_2_0(), currentNode); 
	    }
		ruleEString		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getLessThanSignKeyword_3_0(), null); 
    }
(
(
		lv_priority_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTransitionAccess().getPriorityINTTerminalRuleCall_3_1_0(), "priority"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getGreaterThanSignKeyword_3_2(), null); 
    }
)?(	'with' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getWithKeyword_4_0(), null); 
    }
(
(
		lv_isImmediate_7_0=	'#' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getIsImmediateNumberSignKeyword_4_1_0(), "isImmediate"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isImmediate", true, "#", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'delay:=' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getDelayKeyword_4_2_0(), null); 
    }
(
(
		lv_delay_9_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTransitionAccess().getDelayINTTerminalRuleCall_4_2_1_0(), "delay"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_9_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTriggerBooleanExpressionParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_trigger_10_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trigger",
	        		lv_trigger_10_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'/' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSolidusKeyword_4_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_4_4_1_0(), currentNode); 
	    }
		lv_effects_12_0=ruleEffect		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"effects",
	        		lv_effects_12_0, 
	        		"Effect", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getCommaKeyword_4_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_4_4_2_1_0(), currentNode); 
	    }
		lv_effects_14_0=ruleEffect		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"effects",
	        		lv_effects_14_0, 
	        		"Effect", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?)?(
(
		lv_isHistory_15_0=	'history' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getIsHistoryHistoryKeyword_5_0(), "isHistory"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isHistory", true, "history", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_label_16_0=RULE_TRANSITION_LABEL
		{
			createLeafNode(grammarAccess.getTransitionAccess().getLabelTRANSITION_LABELTerminalRuleCall_6_0(), "label"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_16_0, 
	        		"TRANSITION_LABEL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getAnnotationsStringAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleStringAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"StringAnnotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		lv_isInput_1_0=	'input' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getIsInputInputKeyword_1_0(), "isInput"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isInput", true, "input", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_isOutput_2_0=	'output' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getIsOutputOutputKeyword_2_0(), "isOutput"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOutput", true, "output", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'signal' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getSignalKeyword_3(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getInitialValueEStringParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_initialValue_6_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_6_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((	':' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonKeyword_6_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_6_0_1_0(), currentNode); 
	    }
		lv_type_8_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	':' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonKeyword_6_1_0(), null); 
    }
	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_6_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_6_1_2_0(), currentNode); 
	    }
		lv_type_11_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_11_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_6_1_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0(), currentNode); 
	    }
		lv_combineOperator_13_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"combineOperator",
	        		lv_combineOperator_13_0, 
	        		"CombineOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getHostCombineOperatorEStringParserRuleCall_6_1_4_1_0(), currentNode); 
	    }
		lv_hostCombineOperator_14_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostCombineOperator",
	        		lv_hostCombineOperator_14_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))?	';' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getSemicolonKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getAnnotationsStringAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleStringAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"StringAnnotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	':=' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getInitialValueIntegerOrStringParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_initialValue_4_0=ruleIntegerOrString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_4_0, 
	        		"IntegerOrString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	':' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getColonKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_3_2_0(), currentNode); 
	    }
		lv_type_6_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_6_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	';' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleIntegerOrString
entryRuleIntegerOrString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerOrStringRule(), currentNode); } 
	 iv_ruleIntegerOrString=ruleIntegerOrString 
	 { $current=$iv_ruleIntegerOrString.current.getText(); }  
	 EOF 
;

// Rule IntegerOrString
ruleIntegerOrString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getIntegerOrStringAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntegerOrStringAccess().getEStringParserRuleCall_1(), currentNode); 
    }
    this_EString_1=ruleEString    {
		$current.merge(this_EString_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getActionAccess().getActionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getActionAccess().getActionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_isImmediate_1_0=	'#' 
    {
        createLeafNode(grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_1_0(), "isImmediate"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isImmediate", true, "#", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_delay_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_2_0(), "delay"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getTriggerBooleanExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_trigger_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trigger",
	        		lv_trigger_3_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'/' 
    {
        createLeafNode(grammarAccess.getActionAccess().getSolidusKeyword_4_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_effects_5_0=ruleEffect		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"effects",
	        		lv_effects_5_0, 
	        		"Effect", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getActionAccess().getCommaKeyword_4_1_1(), null); 
    }
)?)*)?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEffectRule(), currentNode); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0(), currentNode); 
    }
    this_Emission_0=ruleEmission
    { 
        $current = $this_Emission_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1(), currentNode); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getTextEffectParserRuleCall_2(), currentNode); 
    }
    this_TextEffect_2=ruleTextEffect
    { 
        $current = $this_TextEffect_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEmission
entryRuleEmission returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmissionRule(), currentNode); }
	 iv_ruleEmission=ruleEmission 
	 { $current=$iv_ruleEmission.current; } 
	 EOF 
;

// Rule Emission
ruleEmission returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmissionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0(), "signal"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_newValue_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmissionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newValue",
	        		lv_newValue_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0(), "variable"); 
	}

)
)	':=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTextEffect
entryRuleTextEffect returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextEffectRule(), currentNode); }
	 iv_ruleTextEffect=ruleTextEffect 
	 { $current=$iv_ruleTextEffect.current; } 
	 EOF 
;

// Rule TextEffect
ruleTextEffect returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_code_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTextEffectAccess().getCodeSTRINGTerminalRuleCall_0_0(), "code"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextEffectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getTextEffectAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		lv_type_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTextEffectAccess().getTypeIDTerminalRuleCall_1_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextEffectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getTextEffectAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0(), currentNode); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1(), currentNode); 
    }
    this_ValuedExpression_1=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall(), currentNode); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleOrOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"OrOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0(), currentNode); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"AndOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"CompareOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompareOperationRule(), currentNode); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0(), currentNode); 
    }
    this_NotOrValuedExpression_0=ruleNotOrValuedExpression
    { 
        $current = $this_NotOrValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"CompareOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleNotOrValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"NotOrValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1(), currentNode); 
    }
    this_NotExpression_4=ruleNotExpression
    { 
        $current = $this_NotExpression_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotOrValuedExpressionRule(), currentNode); }
	 iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression 
	 { $current=$iv_ruleNotOrValuedExpression.current; } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1(), currentNode); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValuedExpressionRule(), currentNode); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall(), currentNode); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddExpressionRule(), currentNode); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0(), currentNode); 
    }
    this_SubExpression_0=ruleSubExpression
    { 
        $current = $this_SubExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleAddOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"AddOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"SubExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubExpressionRule(), currentNode); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0(), currentNode); 
    }
    this_MultExpression_0=ruleMultExpression
    { 
        $current = $this_MultExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"SubOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleMultExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"MultExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultExpressionRule(), currentNode); }
	 iv_ruleMultExpression=ruleMultExpression 
	 { $current=$iv_ruleMultExpression.current; } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultExpressionAccess().getModExpressionParserRuleCall_0(), currentNode); 
    }
    this_ModExpression_0=ruleModExpression
    { 
        $current = $this_ModExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleMultOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"MultOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleModExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"ModExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModExpressionRule(), currentNode); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModExpressionAccess().getAtomicValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_AtomicValuedExpression_0=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleModOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"ModOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"AtomicValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotExpressionRule(), currentNode); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0(), currentNode); 
	    }
		lv_operator_1_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_1_0, 
	        		"NotOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_subExpressions_2_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_2_0, 
	        		"NotExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1(), currentNode); 
    }
    this_AtomicExpression_3=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomicExpressionRule(), currentNode); }
	 iv_ruleAtomicExpression=ruleAtomicExpression 
	 { $current=$iv_ruleAtomicExpression.current; } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0(), currentNode); 
    }
    this_BooleanValue_0=ruleBooleanValue
    { 
        $current = $this_BooleanValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1(), currentNode); 
    }
    this_ValuedObjectTestExpression_1=ruleValuedObjectTestExpression
    { 
        $current = $this_ValuedObjectTestExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1(), currentNode); 
    }
    this_BooleanExpression_3=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_3.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3(), currentNode); 
    }
    this_TextExpression_5=ruleTextExpression
    { 
        $current = $this_TextExpression_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomicValuedExpressionRule(), currentNode); }
	 iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression 
	 { $current=$iv_ruleAtomicValuedExpression.current; } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0(), currentNode); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1(), currentNode); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getDivExpressionParserRuleCall_2_1(), currentNode); 
    }
    this_DivExpression_3=ruleDivExpression
    { 
        $current = $this_DivExpression_3.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_3_1(), currentNode); 
    }
    this_ValuedExpression_6=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_6.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_4(), currentNode); 
    }
    this_AtomicExpression_8=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDivExpression
entryRuleDivExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDivExpressionRule(), currentNode); }
	 iv_ruleDivExpression=ruleDivExpression 
	 { $current=$iv_ruleDivExpression.current; } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDivExpressionAccess().getAtomicValuedExpressionParserRuleCall_0(), currentNode); 
    }
    this_AtomicValuedExpression_0=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1().getType().getClassifier());
        try {
        	factory.add(temp, "subExpressions", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_2_0(), currentNode); 
	    }
		lv_operator_2_0=ruleDivOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"DivOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDivExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDivExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"AtomicValuedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValuedObjectTestExpressionRule(), currentNode); }
	 iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression 
	 { $current=$iv_ruleValuedObjectTestExpression.current; } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0(), currentNode); 
	    }
		lv_operator_1_0=rulePreOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValuedObjectTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_1_0, 
	        		"PreOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_subExpressions_3_0=ruleValuedObjectTestExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValuedObjectTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_3_0, 
	        		"ValuedObjectTestExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_6_0=ruleValueTestOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValuedObjectTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_6_0, 
	        		"ValueTestOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_subExpressions_7_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValuedObjectTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subExpressions",
	        		lv_subExpressions_7_0, 
	        		"ValuedObjectReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2(), currentNode); 
    }
    this_ValuedObjectReference_8=ruleValuedObjectReference
    { 
        $current = $this_ValuedObjectReference_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValuedObjectReferenceRule(), currentNode); }
	 iv_ruleValuedObjectReference=ruleValuedObjectReference 
	 { $current=$iv_ruleValuedObjectReference.current; } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getValuedObjectReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0(), "valuedObject"); 
	}

)
)
;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextExpressionRule(), currentNode); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_code_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTextExpressionAccess().getCodeSTRINGTerminalRuleCall_0_0(), "code"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"code",
	        		lv_code_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		lv_type_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFloatValueRule(), currentNode); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			createLeafNode(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFloatValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Float", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanValueRule(), currentNode); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Boolean", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





// Rule StateType
ruleStateType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'normal' 
	{
        $current = grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'conditional' 
	{
        $current = grammarAccess.getStateTypeAccess().getCONDITIONALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getCONDITIONALEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'reference' 
	{
        $current = grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'textual' 
	{
        $current = grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3(), null); 
    }
));



// Rule TransitionType
ruleTransitionType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'-->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'o->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'>->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2(), null); 
    }
));



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'<>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5(), null); 
    }
));



// Rule PreOperator
rulePreOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'pre' 
	{
        $current = grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration(), null); 
    }
);



// Rule OrOperator
ruleOrOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'or' 
	{
        $current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration(), null); 
    }
);



// Rule AndOperator
ruleAndOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'and' 
	{
        $current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration(), null); 
    }
);



// Rule NotOperator
ruleNotOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'not' 
	{
        $current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration(), null); 
    }
);



// Rule AddOperator
ruleAddOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'+' 
	{
        $current = grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration(), null); 
    }
);



// Rule SubOperator
ruleSubOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'-' 
	{
        $current = grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration(), null); 
    }
);



// Rule MultOperator
ruleMultOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'*' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration(), null); 
    }
);



// Rule ModOperator
ruleModOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'mod' 
	{
        $current = grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration(), null); 
    }
);



// Rule DivOperator
ruleDivOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/' 
	{
        $current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration(), null); 
    }
);



// Rule ValueTestOperator
ruleValueTestOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'?' 
	{
        $current = grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration(), null); 
    }
);



// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'PURE' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'BOOL' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'UNSIGNED' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'INT' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'FLOAT' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'HOST' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5(), null); 
    }
));



// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'NONE' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7(), null); 
    }
));



RULE_TRANSITION_LABEL : '%' ( options {greedy=false;} : . )*'%';

RULE_COMMENT_ANNOTATION : '/+' ( options {greedy=false;} : . )*'+/';

RULE_ANNOTATION_KEY : '@' RULE_ID;

RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


