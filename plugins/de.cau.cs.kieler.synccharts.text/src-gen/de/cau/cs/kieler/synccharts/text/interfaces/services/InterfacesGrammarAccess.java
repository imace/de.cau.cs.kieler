/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.text.interfaces.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.synccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.expressions.services.ExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.services.AnnotationsGrammarAccess;

@Singleton
public class InterfacesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateExtend");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRegionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRegionsRegionSignalDecParserRuleCall_0_0 = (RuleCall)cRegionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cInputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOutputKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInOutputSignalsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInOutputSignalsInOutputSignalsParserRuleCall_1_2_0 = (RuleCall)cInOutputSignalsAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cOutputKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutputSignalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutputSignalsOutputSignalsParserRuleCall_2_1_0 = (RuleCall)cOutputSignalsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInputKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputSignalsInputSignalsParserRuleCall_3_1_0 = (RuleCall)cInputSignalsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSignalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSignalsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSignalsSignalsParserRuleCall_4_1_0 = (RuleCall)cSignalsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cVariableKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariableVariablesParserRuleCall_5_1_0 = (RuleCall)cVariableAssignment_5_1.eContents().get(0);
		
		////==============================================================================
		//// "Buckets" containing the Signals / Regions with Signals
		////==============================================================================
		//StateExtend:
		//	(regions+=RegionSignalDec | "input" "output" inOutputSignals+=InOutputSignals | "output" outputSignals+=OutputSignals
		//	| "input" inputSignals+=InputSignals | "signal" signals+=Signals | "variable" variable+=Variables)+;
		public ParserRule getRule() { return rule; }

		//(regions+=RegionSignalDec | "input" "output" inOutputSignals+=InOutputSignals | "output" outputSignals+=OutputSignals |
		//"input" inputSignals+=InputSignals | "signal" signals+=Signals | "variable" variable+=Variables)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//regions+=RegionSignalDec
		public Assignment getRegionsAssignment_0() { return cRegionsAssignment_0; }

		//RegionSignalDec
		public RuleCall getRegionsRegionSignalDecParserRuleCall_0_0() { return cRegionsRegionSignalDecParserRuleCall_0_0; }

		//"input" "output" inOutputSignals+=InOutputSignals
		public Group getGroup_1() { return cGroup_1; }

		//"input"
		public Keyword getInputKeyword_1_0() { return cInputKeyword_1_0; }

		//"output"
		public Keyword getOutputKeyword_1_1() { return cOutputKeyword_1_1; }

		//inOutputSignals+=InOutputSignals
		public Assignment getInOutputSignalsAssignment_1_2() { return cInOutputSignalsAssignment_1_2; }

		//InOutputSignals
		public RuleCall getInOutputSignalsInOutputSignalsParserRuleCall_1_2_0() { return cInOutputSignalsInOutputSignalsParserRuleCall_1_2_0; }

		//"output" outputSignals+=OutputSignals
		public Group getGroup_2() { return cGroup_2; }

		//"output"
		public Keyword getOutputKeyword_2_0() { return cOutputKeyword_2_0; }

		//outputSignals+=OutputSignals
		public Assignment getOutputSignalsAssignment_2_1() { return cOutputSignalsAssignment_2_1; }

		//OutputSignals
		public RuleCall getOutputSignalsOutputSignalsParserRuleCall_2_1_0() { return cOutputSignalsOutputSignalsParserRuleCall_2_1_0; }

		//"input" inputSignals+=InputSignals
		public Group getGroup_3() { return cGroup_3; }

		//"input"
		public Keyword getInputKeyword_3_0() { return cInputKeyword_3_0; }

		//inputSignals+=InputSignals
		public Assignment getInputSignalsAssignment_3_1() { return cInputSignalsAssignment_3_1; }

		//InputSignals
		public RuleCall getInputSignalsInputSignalsParserRuleCall_3_1_0() { return cInputSignalsInputSignalsParserRuleCall_3_1_0; }

		//"signal" signals+=Signals
		public Group getGroup_4() { return cGroup_4; }

		//"signal"
		public Keyword getSignalKeyword_4_0() { return cSignalKeyword_4_0; }

		//signals+=Signals
		public Assignment getSignalsAssignment_4_1() { return cSignalsAssignment_4_1; }

		//Signals
		public RuleCall getSignalsSignalsParserRuleCall_4_1_0() { return cSignalsSignalsParserRuleCall_4_1_0; }

		//"variable" variable+=Variables
		public Group getGroup_5() { return cGroup_5; }

		//"variable"
		public Keyword getVariableKeyword_5_0() { return cVariableKeyword_5_0; }

		//variable+=Variables
		public Assignment getVariableAssignment_5_1() { return cVariableAssignment_5_1; }

		//Variables
		public RuleCall getVariableVariablesParserRuleCall_5_1_0() { return cVariableVariablesParserRuleCall_5_1_0; }
	}

	public class RegionSignalDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegionSignalDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRegionRegionCrossReference_0_0 = (CrossReference)cRegionAssignment_0.eContents().get(0);
		private final RuleCall cRegionRegionIDTerminalRuleCall_0_0_1 = (RuleCall)cRegionRegionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cVarKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cVarsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_2_0_1_0 = (RuleCall)cVarsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_2_0_2_1_0 = (RuleCall)cVarsAssignment_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSignalKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSignalsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_2_1_1_0 = (RuleCall)cSignalsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cSignalsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_2_1_2_1_0 = (RuleCall)cSignalsAssignment_2_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cVarKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cVarsAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cVarsVariableParserRuleCall_3_0_2_0 = (RuleCall)cVarsAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_0_3 = (Group)cGroup_3_0.eContents().get(3);
		private final Keyword cCommaKeyword_3_0_3_0 = (Keyword)cGroup_3_0_3.eContents().get(0);
		private final Assignment cVarsAssignment_3_0_3_1 = (Assignment)cGroup_3_0_3.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_3_0_3_1_0 = (RuleCall)cVarsAssignment_3_0_3_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cSignalKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSignalsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_2_0 = (RuleCall)cSignalsAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_3_1_0 = (RuleCall)cSignalsAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegionSignalDec:
		//	region=[synccharts::Region] ":" ("var" vars+=Variable ("," vars+=Variable)* | "signal" signals+=Signal (","
		//	signals+=Signal)*) ("," "var" vars+=Variable ("," vars+=Variable)* | "," "signal" signals+=Signal (","
		//	signals+=Signal)*)* ";";
		public ParserRule getRule() { return rule; }

		//region=[synccharts::Region] ":" ("var" vars+=Variable ("," vars+=Variable)* | "signal" signals+=Signal (","
		//signals+=Signal)*) ("," "var" vars+=Variable ("," vars+=Variable)* | "," "signal" signals+=Signal (","
		//signals+=Signal)*)* ";"
		public Group getGroup() { return cGroup; }

		//region=[synccharts::Region]
		public Assignment getRegionAssignment_0() { return cRegionAssignment_0; }

		//[synccharts::Region]
		public CrossReference getRegionRegionCrossReference_0_0() { return cRegionRegionCrossReference_0_0; }

		//ID
		public RuleCall getRegionRegionIDTerminalRuleCall_0_0_1() { return cRegionRegionIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"var" vars+=Variable ("," vars+=Variable)* | "signal" signals+=Signal ("," signals+=Signal)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"var" vars+=Variable ("," vars+=Variable)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"var"
		public Keyword getVarKeyword_2_0_0() { return cVarKeyword_2_0_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_2_0_1() { return cVarsAssignment_2_0_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_2_0_1_0() { return cVarsVariableParserRuleCall_2_0_1_0; }

		//("," vars+=Variable)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//","
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_2_0_2_1() { return cVarsAssignment_2_0_2_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_2_0_2_1_0() { return cVarsVariableParserRuleCall_2_0_2_1_0; }

		//"signal" signals+=Signal ("," signals+=Signal)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"signal"
		public Keyword getSignalKeyword_2_1_0() { return cSignalKeyword_2_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_2_1_1() { return cSignalsAssignment_2_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_2_1_1_0() { return cSignalsSignalParserRuleCall_2_1_1_0; }

		//("," signals+=Signal)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_2_1_2_1() { return cSignalsAssignment_2_1_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_2_1_2_1_0() { return cSignalsSignalParserRuleCall_2_1_2_1_0; }

		//("," "var" vars+=Variable ("," vars+=Variable)* | "," "signal" signals+=Signal ("," signals+=Signal)*)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"," "var" vars+=Variable ("," vars+=Variable)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//","
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//"var"
		public Keyword getVarKeyword_3_0_1() { return cVarKeyword_3_0_1; }

		//vars+=Variable
		public Assignment getVarsAssignment_3_0_2() { return cVarsAssignment_3_0_2; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_3_0_2_0() { return cVarsVariableParserRuleCall_3_0_2_0; }

		//("," vars+=Variable)*
		public Group getGroup_3_0_3() { return cGroup_3_0_3; }

		//","
		public Keyword getCommaKeyword_3_0_3_0() { return cCommaKeyword_3_0_3_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_3_0_3_1() { return cVarsAssignment_3_0_3_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_3_0_3_1_0() { return cVarsVariableParserRuleCall_3_0_3_1_0; }

		//"," "signal" signals+=Signal ("," signals+=Signal)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//"signal"
		public Keyword getSignalKeyword_3_1_1() { return cSignalKeyword_3_1_1; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1_2() { return cSignalsAssignment_3_1_2; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_2_0() { return cSignalsSignalParserRuleCall_3_1_2_0; }

		//("," signals+=Signal)*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1_3_1() { return cSignalsAssignment_3_1_3_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_3_1_0() { return cSignalsSignalParserRuleCall_3_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarsVariableParserRuleCall_0_0_0 = (RuleCall)cVarsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVarsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_0_1_1_0 = (RuleCall)cVarsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Variables:
		//	(vars+=Variable ("," vars+=Variable)*) ";";
		public ParserRule getRule() { return rule; }

		//(vars+=Variable ("," vars+=Variable)*) ";"
		public Group getGroup() { return cGroup; }

		//vars+=Variable ("," vars+=Variable)*
		public Group getGroup_0() { return cGroup_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_0_0() { return cVarsAssignment_0_0; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_0_0_0() { return cVarsVariableParserRuleCall_0_0_0; }

		//("," vars+=Variable)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_0_1_1() { return cVarsAssignment_0_1_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_0_1_1_0() { return cVarsVariableParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class SignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Signals:
		//	(signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class InputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InputSignals:
		//	(signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class OutputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OutputSignals:
		//	(signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class InOutputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InOutputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InOutputSignals:
		//	(signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeValueTypeEnumRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_2_1_1_0 = (RuleCall)cInitialValueAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_3_1_1_0 = (RuleCall)cInitialValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_3_0 = (RuleCall)cTypeAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_4_1_1_0 = (RuleCall)cInitialValueAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCombineKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTypeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_4_2_1_0 = (RuleCall)cTypeAssignment_4_2_1.eContents().get(0);
		private final Keyword cWithKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		private final Assignment cCombineOperatorAssignment_4_2_3 = (Assignment)cGroup_4_2.eContents().get(3);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_4_2_3_0 = (RuleCall)cCombineOperatorAssignment_4_2_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_5_0_0 = (RuleCall)cNameAssignment_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cHostTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_5_2_0 = (RuleCall)cHostTypeAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNameAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_6_0_0 = (RuleCall)cNameAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_6_1_1_0 = (RuleCall)cInitialValueAssignment_6_1_1.eContents().get(0);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cHostTypeAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_6_3_0 = (RuleCall)cHostTypeAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cNameAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_7_0_0 = (RuleCall)cNameAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_7_1_1_0 = (RuleCall)cInitialValueAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCombineKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cHostTypeAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_7_2_1_0 = (RuleCall)cHostTypeAssignment_7_2_1.eContents().get(0);
		private final Keyword cWithKeyword_7_2_2 = (Keyword)cGroup_7_2.eContents().get(2);
		private final Assignment cHostCombineOperatorAssignment_7_2_3 = (Assignment)cGroup_7_2.eContents().get(3);
		private final RuleCall cHostCombineOperatorSTRING_STerminalRuleCall_7_2_3_0 = (RuleCall)cHostCombineOperatorAssignment_7_2_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cNameAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_8_0_0 = (RuleCall)cNameAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCombineKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cTypeAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_8_1_1_0 = (RuleCall)cTypeAssignment_8_1_1.eContents().get(0);
		private final Keyword cWithKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Assignment cCombineOperatorAssignment_8_1_3 = (Assignment)cGroup_8_1.eContents().get(3);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_8_1_3_0 = (RuleCall)cCombineOperatorAssignment_8_1_3.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cNameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_9_0_0 = (RuleCall)cNameAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCombineKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cHostTypeAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_9_1_1_0 = (RuleCall)cHostTypeAssignment_9_1_1.eContents().get(0);
		private final Keyword cWithKeyword_9_1_2 = (Keyword)cGroup_9_1.eContents().get(2);
		private final Assignment cHostCombineOperatorAssignment_9_1_3 = (Assignment)cGroup_9_1.eContents().get(3);
		private final RuleCall cHostCombineOperatorSTRING_STerminalRuleCall_9_1_3_0 = (RuleCall)cHostCombineOperatorAssignment_9_1_3.eContents().get(0);
		
		////==============================================================================
		//// synccharts elements as needed
		////==============================================================================
		//Signal returns expressions::Signal:
		//	name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
		//	type=ValueType | name=ID (":=" initialValue=STRING_D) ("combine" type=ValueType "with"
		//	combineOperator=CombineOperator) | name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":"
		//	hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ("combine" hostType=STRING_S "with"
		//	hostCombineOperator=STRING_S) | name=ID ("combine" type=ValueType "with" combineOperator=CombineOperator) | name=ID
		//	("combine" hostType=STRING_S "with" hostCombineOperator=STRING_S);
		public ParserRule getRule() { return rule; }

		//name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
		//type=ValueType | name=ID (":=" initialValue=STRING_D) ("combine" type=ValueType "with" combineOperator=CombineOperator)
		//| name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S | name=ID (":="
		//initialValue=STRING_D) ("combine" hostType=STRING_S "with" hostCombineOperator=STRING_S) | name=ID ("combine"
		//type=ValueType "with" combineOperator=CombineOperator) | name=ID ("combine" hostType=STRING_S "with"
		//hostCombineOperator=STRING_S)
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//name=ID ":" type=ValueType
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=ValueType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_1_2_0() { return cTypeValueTypeEnumRuleCall_1_2_0; }

		//name=ID (":=" initialValue=STRING_D)
		public Group getGroup_2() { return cGroup_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_1_0() { return cColonEqualsSignKeyword_2_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_2_1_1() { return cInitialValueAssignment_2_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_2_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_2_1_1_0; }

		//name=ID (":=" initialValue=STRING_D) ":" type=ValueType
		public Group getGroup_3() { return cGroup_3; }

		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_3_1() { return cGroup_3_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_3_1_0() { return cColonEqualsSignKeyword_3_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_3_1_1() { return cInitialValueAssignment_3_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_3_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_3_1_1_0; }

		//":"
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//type=ValueType
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_3_0() { return cTypeValueTypeEnumRuleCall_3_3_0; }

		//name=ID (":=" initialValue=STRING_D) ("combine" type=ValueType "with" combineOperator=CombineOperator)
		public Group getGroup_4() { return cGroup_4; }

		//name=ID
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_4_1() { return cGroup_4_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_4_1_0() { return cColonEqualsSignKeyword_4_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_4_1_1() { return cInitialValueAssignment_4_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_4_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_4_1_1_0; }

		//"combine" type=ValueType "with" combineOperator=CombineOperator
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"combine"
		public Keyword getCombineKeyword_4_2_0() { return cCombineKeyword_4_2_0; }

		//type=ValueType
		public Assignment getTypeAssignment_4_2_1() { return cTypeAssignment_4_2_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_4_2_1_0() { return cTypeValueTypeEnumRuleCall_4_2_1_0; }

		//"with"
		public Keyword getWithKeyword_4_2_2() { return cWithKeyword_4_2_2; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_4_2_3() { return cCombineOperatorAssignment_4_2_3; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_4_2_3_0() { return cCombineOperatorCombineOperatorEnumRuleCall_4_2_3_0; }

		//name=ID ":" hostType=STRING_S
		public Group getGroup_5() { return cGroup_5; }

		//name=ID
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0_0() { return cNameIDTerminalRuleCall_5_0_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_5_2() { return cHostTypeAssignment_5_2; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_5_2_0() { return cHostTypeSTRING_STerminalRuleCall_5_2_0; }

		//name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S
		public Group getGroup_6() { return cGroup_6; }

		//name=ID
		public Assignment getNameAssignment_6_0() { return cNameAssignment_6_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0_0() { return cNameIDTerminalRuleCall_6_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_6_1() { return cGroup_6_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_6_1_0() { return cColonEqualsSignKeyword_6_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_6_1_1() { return cInitialValueAssignment_6_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_6_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_6_1_1_0; }

		//":"
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_6_3() { return cHostTypeAssignment_6_3; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_6_3_0() { return cHostTypeSTRING_STerminalRuleCall_6_3_0; }

		//name=ID (":=" initialValue=STRING_D) ("combine" hostType=STRING_S "with" hostCombineOperator=STRING_S)
		public Group getGroup_7() { return cGroup_7; }

		//name=ID
		public Assignment getNameAssignment_7_0() { return cNameAssignment_7_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0_0() { return cNameIDTerminalRuleCall_7_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_7_1() { return cGroup_7_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_7_1_0() { return cColonEqualsSignKeyword_7_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_7_1_1() { return cInitialValueAssignment_7_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_7_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_7_1_1_0; }

		//"combine" hostType=STRING_S "with" hostCombineOperator=STRING_S
		public Group getGroup_7_2() { return cGroup_7_2; }

		//"combine"
		public Keyword getCombineKeyword_7_2_0() { return cCombineKeyword_7_2_0; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_7_2_1() { return cHostTypeAssignment_7_2_1; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_7_2_1_0() { return cHostTypeSTRING_STerminalRuleCall_7_2_1_0; }

		//"with"
		public Keyword getWithKeyword_7_2_2() { return cWithKeyword_7_2_2; }

		//hostCombineOperator=STRING_S
		public Assignment getHostCombineOperatorAssignment_7_2_3() { return cHostCombineOperatorAssignment_7_2_3; }

		//STRING_S
		public RuleCall getHostCombineOperatorSTRING_STerminalRuleCall_7_2_3_0() { return cHostCombineOperatorSTRING_STerminalRuleCall_7_2_3_0; }

		//name=ID ("combine" type=ValueType "with" combineOperator=CombineOperator)
		public Group getGroup_8() { return cGroup_8; }

		//name=ID
		public Assignment getNameAssignment_8_0() { return cNameAssignment_8_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_8_0_0() { return cNameIDTerminalRuleCall_8_0_0; }

		//"combine" type=ValueType "with" combineOperator=CombineOperator
		public Group getGroup_8_1() { return cGroup_8_1; }

		//"combine"
		public Keyword getCombineKeyword_8_1_0() { return cCombineKeyword_8_1_0; }

		//type=ValueType
		public Assignment getTypeAssignment_8_1_1() { return cTypeAssignment_8_1_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_8_1_1_0() { return cTypeValueTypeEnumRuleCall_8_1_1_0; }

		//"with"
		public Keyword getWithKeyword_8_1_2() { return cWithKeyword_8_1_2; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_8_1_3() { return cCombineOperatorAssignment_8_1_3; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_8_1_3_0() { return cCombineOperatorCombineOperatorEnumRuleCall_8_1_3_0; }

		//name=ID ("combine" hostType=STRING_S "with" hostCombineOperator=STRING_S)
		public Group getGroup_9() { return cGroup_9; }

		//name=ID
		public Assignment getNameAssignment_9_0() { return cNameAssignment_9_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_9_0_0() { return cNameIDTerminalRuleCall_9_0_0; }

		//"combine" hostType=STRING_S "with" hostCombineOperator=STRING_S
		public Group getGroup_9_1() { return cGroup_9_1; }

		//"combine"
		public Keyword getCombineKeyword_9_1_0() { return cCombineKeyword_9_1_0; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_9_1_1() { return cHostTypeAssignment_9_1_1; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_9_1_1_0() { return cHostTypeSTRING_STerminalRuleCall_9_1_1_0; }

		//"with"
		public Keyword getWithKeyword_9_1_2() { return cWithKeyword_9_1_2; }

		//hostCombineOperator=STRING_S
		public Assignment getHostCombineOperatorAssignment_9_1_3() { return cHostCombineOperatorAssignment_9_1_3; }

		//STRING_S
		public RuleCall getHostCombineOperatorSTRING_STerminalRuleCall_9_1_3_0() { return cHostCombineOperatorSTRING_STerminalRuleCall_9_1_3_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeValueTypeEnumRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_2_1_1_0 = (RuleCall)cInitialValueAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_3_1_1_0 = (RuleCall)cInitialValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_3_0 = (RuleCall)cTypeAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cHostTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_4_2_0 = (RuleCall)cHostTypeAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_5_0_0 = (RuleCall)cNameAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cInitialValueSTRING_DTerminalRuleCall_5_1_1_0 = (RuleCall)cInitialValueAssignment_5_1_1.eContents().get(0);
		private final Keyword cColonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cHostTypeAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cHostTypeSTRING_STerminalRuleCall_5_3_0 = (RuleCall)cHostTypeAssignment_5_3.eContents().get(0);
		
		//Variable returns expressions::Variable:
		//	name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
		//	type=ValueType | name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S;
		public ParserRule getRule() { return rule; }

		//name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
		//type=ValueType | name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//name=ID ":" type=ValueType
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=ValueType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_1_2_0() { return cTypeValueTypeEnumRuleCall_1_2_0; }

		//name=ID (":=" initialValue=STRING_D)
		public Group getGroup_2() { return cGroup_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_1_0() { return cColonEqualsSignKeyword_2_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_2_1_1() { return cInitialValueAssignment_2_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_2_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_2_1_1_0; }

		//name=ID (":=" initialValue=STRING_D) ":" type=ValueType
		public Group getGroup_3() { return cGroup_3; }

		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_3_1() { return cGroup_3_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_3_1_0() { return cColonEqualsSignKeyword_3_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_3_1_1() { return cInitialValueAssignment_3_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_3_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_3_1_1_0; }

		//":"
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//type=ValueType
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_3_0() { return cTypeValueTypeEnumRuleCall_3_3_0; }

		//name=ID ":" hostType=STRING_S
		public Group getGroup_4() { return cGroup_4; }

		//name=ID
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_4_2() { return cHostTypeAssignment_4_2; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_4_2_0() { return cHostTypeSTRING_STerminalRuleCall_4_2_0; }

		//name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S
		public Group getGroup_5() { return cGroup_5; }

		//name=ID
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0_0() { return cNameIDTerminalRuleCall_5_0_0; }

		//":=" initialValue=STRING_D
		public Group getGroup_5_1() { return cGroup_5_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_1_0() { return cColonEqualsSignKeyword_5_1_0; }

		//initialValue=STRING_D
		public Assignment getInitialValueAssignment_5_1_1() { return cInitialValueAssignment_5_1_1; }

		//STRING_D
		public RuleCall getInitialValueSTRING_DTerminalRuleCall_5_1_1_0() { return cInitialValueSTRING_DTerminalRuleCall_5_1_1_0; }

		//":"
		public Keyword getColonKeyword_5_2() { return cColonKeyword_5_2; }

		//hostType=STRING_S
		public Assignment getHostTypeAssignment_5_3() { return cHostTypeAssignment_5_3; }

		//STRING_S
		public RuleCall getHostTypeSTRING_STerminalRuleCall_5_3_0() { return cHostTypeSTRING_STerminalRuleCall_5_3_0; }
	}
	
	
	private StateExtendElements pStateExtend;
	private RegionSignalDecElements pRegionSignalDec;
	private VariablesElements pVariables;
	private SignalsElements pSignals;
	private InputSignalsElements pInputSignals;
	private OutputSignalsElements pOutputSignals;
	private InOutputSignalsElements pInOutputSignals;
	private SignalElements pSignal;
	private VariableElements pVariable;
	private TerminalRule tSTRING_D;
	private TerminalRule tSTRING_S;
	
	private final GrammarProvider grammarProvider;

	private ActionsGrammarAccess gaActions;

	@Inject
	public InterfacesGrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions) {
		this.grammarProvider = grammarProvider;
		this.gaActions = gaActions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	
	////==============================================================================
	//// "Buckets" containing the Signals / Regions with Signals
	////==============================================================================
	//StateExtend:
	//	(regions+=RegionSignalDec | "input" "output" inOutputSignals+=InOutputSignals | "output" outputSignals+=OutputSignals
	//	| "input" inputSignals+=InputSignals | "signal" signals+=Signals | "variable" variable+=Variables)+;
	public StateExtendElements getStateExtendAccess() {
		return (pStateExtend != null) ? pStateExtend : (pStateExtend = new StateExtendElements());
	}
	
	public ParserRule getStateExtendRule() {
		return getStateExtendAccess().getRule();
	}

	//RegionSignalDec:
	//	region=[synccharts::Region] ":" ("var" vars+=Variable ("," vars+=Variable)* | "signal" signals+=Signal (","
	//	signals+=Signal)*) ("," "var" vars+=Variable ("," vars+=Variable)* | "," "signal" signals+=Signal (","
	//	signals+=Signal)*)* ";";
	public RegionSignalDecElements getRegionSignalDecAccess() {
		return (pRegionSignalDec != null) ? pRegionSignalDec : (pRegionSignalDec = new RegionSignalDecElements());
	}
	
	public ParserRule getRegionSignalDecRule() {
		return getRegionSignalDecAccess().getRule();
	}

	//Variables:
	//	(vars+=Variable ("," vars+=Variable)*) ";";
	public VariablesElements getVariablesAccess() {
		return (pVariables != null) ? pVariables : (pVariables = new VariablesElements());
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}

	//Signals:
	//	(signals+=Signal ("," signals+=Signal)*) ";";
	public SignalsElements getSignalsAccess() {
		return (pSignals != null) ? pSignals : (pSignals = new SignalsElements());
	}
	
	public ParserRule getSignalsRule() {
		return getSignalsAccess().getRule();
	}

	//InputSignals:
	//	(signals+=Signal ("," signals+=Signal)*) ";";
	public InputSignalsElements getInputSignalsAccess() {
		return (pInputSignals != null) ? pInputSignals : (pInputSignals = new InputSignalsElements());
	}
	
	public ParserRule getInputSignalsRule() {
		return getInputSignalsAccess().getRule();
	}

	//OutputSignals:
	//	(signals+=Signal ("," signals+=Signal)*) ";";
	public OutputSignalsElements getOutputSignalsAccess() {
		return (pOutputSignals != null) ? pOutputSignals : (pOutputSignals = new OutputSignalsElements());
	}
	
	public ParserRule getOutputSignalsRule() {
		return getOutputSignalsAccess().getRule();
	}

	//InOutputSignals:
	//	(signals+=Signal ("," signals+=Signal)*) ";";
	public InOutputSignalsElements getInOutputSignalsAccess() {
		return (pInOutputSignals != null) ? pInOutputSignals : (pInOutputSignals = new InOutputSignalsElements());
	}
	
	public ParserRule getInOutputSignalsRule() {
		return getInOutputSignalsAccess().getRule();
	}

	////==============================================================================
	//// synccharts elements as needed
	////==============================================================================
	//Signal returns expressions::Signal:
	//	name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
	//	type=ValueType | name=ID (":=" initialValue=STRING_D) ("combine" type=ValueType "with"
	//	combineOperator=CombineOperator) | name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":"
	//	hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ("combine" hostType=STRING_S "with"
	//	hostCombineOperator=STRING_S) | name=ID ("combine" type=ValueType "with" combineOperator=CombineOperator) | name=ID
	//	("combine" hostType=STRING_S "with" hostCombineOperator=STRING_S);
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Variable returns expressions::Variable:
	//	name=ID | name=ID ":" type=ValueType | name=ID (":=" initialValue=STRING_D) | name=ID (":=" initialValue=STRING_D) ":"
	//	type=ValueType | name=ID ":" hostType=STRING_S | name=ID (":=" initialValue=STRING_D) ":" hostType=STRING_S;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//terminal STRING_D:
	//	"\"" "\"" | "\"" ("\\" "\"" | !"\"")* ("\\" "\"" | !("\\" | "\"")) "\"";
	public TerminalRule getSTRING_DRule() {
		return (tSTRING_D != null) ? tSTRING_D : (tSTRING_D = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_D"));
	} 

	//terminal STRING_S:
	//	"\'" "\'" | "\'" ("\\" "\'" | !"\'")* ("\\" "\'" | !("\\" | "\'")) "\'";
	public TerminalRule getSTRING_SRule() {
		return (tSTRING_S != null) ? tSTRING_S : (tSTRING_S = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_S"));
	} 

	//// haf: We need a Rule for transitions in order to serialize them
	//// here we only want to have the features isImmediate, delay, trigger and effects
	//// the features type, targetState, priority, isHistory are ignored and set as transient
	//// you need to override the rule to support transitions properly
	//Transition returns synccharts::Transition:
	//	{synccharts::Transition} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect (","
	//	effects+=Effect)*)?;
	public ActionsGrammarAccess.TransitionElements getTransitionAccess() {
		return gaActions.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// chsch: The action rule is used in Kits.xtext for entry-, inner-, exitActions, suspensionTrigger 
	//Action returns synccharts::Action:
	//	{synccharts::Action} isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" effects+=Effect (","
	//	effects+=Effect)*)?;
	public ActionsGrammarAccess.ActionElements getActionAccess() {
		return gaActions.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//	Emission | Assignment | TextEffect;
	public ActionsGrammarAccess.EffectElements getEffectAccess() {
		return gaActions.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//	signal=[expressions::Signal] ("(" newValue=Expression ")")?;
	public ActionsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActions.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//	variable=[expressions::Variable] ":=" expression=Expression;
	public ActionsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActions.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TextEffect returns synccharts::TextEffect:
	//	code=HOSTCODE ("(" type=ID ")")?;
	public ActionsGrammarAccess.TextEffectElements getTextEffectAccess() {
		return gaActions.getTextEffectAccess();
	}
	
	public ParserRule getTextEffectRule() {
		return getTextEffectAccess().getRule();
	}

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//Expression:
	//	BooleanExpression | ValuedExpression;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns Expression:
	//	OrExpression;
	public ExpressionsGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaActions.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//OrExpression returns Expression:
	//	AndExpression ({OperatorExpression.subExpressions+=current} operator=OrOperator subExpressions+=AndExpression)*;
	public ExpressionsGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaActions.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//AndExpression returns Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} operator=AndOperator
	//	subExpressions+=CompareOperation)*;
	public ExpressionsGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaActions.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= ?A
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression;
	public ExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public ExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaActions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns Expression:
	//	AddExpression;
	public ExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaActions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=SubExpression)*;
	public ExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaActions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=MultExpression)*;
	public ExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaActions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=ModExpression)*;
	public ExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaActions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression returns Expression:
	//	AtomicValuedExpression ({OperatorExpression.subExpressions+=current} operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)?;
	public ExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaActions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public ExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaActions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//AtomicExpression returns Expression:
	//	BooleanValue | ValuedObjectTestExpression | "(" BooleanExpression ")" | TextExpression;
	public ExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaActions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | "(" DivExpression ")" | "(" ValuedExpression ")" | AtomicExpression;
	public ExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaActions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression returns Expression:
	//	AtomicValuedExpression {OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=AtomicValuedExpression;
	public ExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaActions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=PreOperator "(" subExpressions+=ValuedObjectTestExpression ")" | {OperatorExpression}
	//	operator=ValueTestOperator subExpressions+=ValuedObjectReference | ValuedObjectReference;
	public ExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaActions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject];
	public ExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaActions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Example: 'printf(...)'(C)
	//TextExpression:
	//	code=HOSTCODE ("(" type=ID ")")?;
	public ExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaActions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public ExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=Float;
	public ExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//	value=Boolean;
	public ExpressionsGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaActions.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType returns ecore::EString:
	//	Boolean | INT | Float | ID | STRING;
	public ExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaActions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public ExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public ExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaActions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum OrOperator returns OperatorType:
	//	OR="or";
	public ExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaActions.getOrOperatorAccess();
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns OperatorType:
	//	AND="and";
	public ExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaActions.getAndOperatorAccess();
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="not";
	public ExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaActions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public ExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaActions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public ExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaActions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public ExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="mod";
	public ExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaActions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public ExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValueTestOperator returns OperatorType:
	//	VAL="?";
	public ExpressionsGrammarAccess.ValueTestOperatorElements getValueTestOperatorAccess() {
		return gaActions.getValueTestOperatorAccess();
	}
	
	public EnumRule getValueTestOperatorRule() {
		return getValueTestOperatorAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext 
	// * /enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | HOST="host";
	public ExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaActions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public ExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaActions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaActions.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal Float returns ecore::EFloatObject:
	//	(INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return gaActions.getFloatRule();
	} 

	//// introduce boolean values
	//terminal Boolean returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return gaActions.getBooleanRule();
	} 

	//// custom terminal rule allowing to save transition label string as they are
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaActions.getSTRINGRule();
	} 

	//// custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaActions.getHOSTCODERule();
	} 

	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//// introduction of parsing rules for annotations
	//StringAnnotation returns Annotation:
	//	CommentAnnotation | KeyValueAnnotation;
	public AnnotationsGrammarAccess.StringAnnotationElements getStringAnnotationAccess() {
		return gaActions.getStringAnnotationAccess();
	}
	
	public ParserRule getStringAnnotationRule() {
		return getStringAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	//CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaActions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot; @layoutOptions "margin 5, dir top-down";    
	//KeyValueAnnotation returns StringAnnotation:
	//	"@" name=ID value=EString;
	public AnnotationsGrammarAccess.KeyValueAnnotationElements getKeyValueAnnotationAccess() {
		return gaActions.getKeyValueAnnotationAccess();
	}
	
	public ParserRule getKeyValueAnnotationRule() {
		return getKeyValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	//ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaActions.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	//EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaActions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//// custom terminal rule introducing semantic comments
	//terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaActions.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActions.getML_COMMENTRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActions.getANY_OTHERRule();
	} 
}
