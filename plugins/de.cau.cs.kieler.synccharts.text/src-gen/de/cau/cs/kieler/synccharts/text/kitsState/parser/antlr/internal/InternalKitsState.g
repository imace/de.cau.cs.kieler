/*
* generated by Xtext
*/
grammar InternalKitsState;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.text.kitsState.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.text.kitsState.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.synccharts.text.kitsState.services.KitsStateGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private KitsStateGrammarAccess grammarAccess;
 	
    public InternalKitsStateParser(TokenStream input, KitsStateGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RootState";	
   	}
   	
   	@Override
   	protected KitsStateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRootState
entryRuleRootState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootStateRule()); }
	 iv_ruleRootState=ruleRootState 
	 { $current=$iv_ruleRootState.current; } 
	 EOF 
;

// Rule RootState
ruleRootState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRootStateAccess().getStateParserRuleCall()); 
    }
    this_State_0=ruleState
    { 
        $current = $this_State_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleSingleRegion
entryRuleSingleRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleRegionRule()); }
	 iv_ruleSingleRegion=ruleSingleRegion 
	 { $current=$iv_ruleSingleRegion.current; } 
	 EOF 
;

// Rule SingleRegion
ruleSingleRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleRegionAccess().getRegionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='region' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleRegionAccess().getRegionKeyword_1_1());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getSingleRegionAccess().getIdIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getSingleRegionAccess().getLabelSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleRegionAccess().getColonKeyword_1_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleRegionAccess().getVariablesVariableParserRuleCall_1_5_0_0()); 
	    }
		lv_variables_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleRegionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleRegionAccess().getSignalsSignalParserRuleCall_1_5_1_0()); 
	    }
		lv_signals_7_0=ruleSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleRegionRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_7_0, 
        		"Signal");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleRegionAccess().getBodyTextTextualCodeParserRuleCall_1_6_0()); 
	    }
		lv_bodyText_8_0=ruleTextualCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleRegionRule());
	        }
       		add(
       			$current, 
       			"bodyText",
        		lv_bodyText_8_0, 
        		"TextualCode");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleRegionAccess().getStatesStateParserRuleCall_2_0()); 
	    }
		lv_states_9_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleRegionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_9_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRegion
entryRuleRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegionRule()); }
	 iv_ruleRegion=ruleRegion 
	 { $current=$iv_ruleRegion.current; } 
	 EOF 
;

// Rule Region
ruleRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegionAccess().getRegionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='region' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRegionAccess().getRegionKeyword_2());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getRegionAccess().getIdIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getRegionAccess().getLabelSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRegionAccess().getColonKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getVariablesVariableParserRuleCall_6_0_0()); 
	    }
		lv_variables_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getSignalsSignalParserRuleCall_6_1_0()); 
	    }
		lv_signals_7_0=ruleSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_7_0, 
        		"Signal");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getBodyTextTextualCodeParserRuleCall_7_0()); 
	    }
		lv_bodyText_8_0=ruleTextualCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"bodyText",
        		lv_bodyText_8_0, 
        		"TextualCode");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getStatesStateParserRuleCall_8_0()); 
	    }
		lv_states_9_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_9_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((
(
		lv_isInitial_1_0=	'init' 
    {
        newLeafNode(lv_isInitial_1_0, grammarAccess.getStateAccess().getIsInitialInitKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "isInitial", true, "init");
	    }

)
)(
(
		lv_isFinal_2_0=	'final' 
    {
        newLeafNode(lv_isFinal_2_0, grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "isFinal", true, "final");
	    }

)
)?)
    |((
(
		lv_isFinal_3_0=	'final' 
    {
        newLeafNode(lv_isFinal_3_0, grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "isFinal", true, "final");
	    }

)
)(
(
		lv_isInitial_4_0=	'init' 
    {
        newLeafNode(lv_isInitial_4_0, grammarAccess.getStateAccess().getIsInitialInitKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "isInitial", true, "init");
	    }

)
)?))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_2_0()); 
	    }
		lv_type_5_0=ruleStateType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"StateType");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='state' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateAccess().getStateKeyword_3());
    }
(
(
		lv_id_7_0=RULE_ID
		{
			newLeafNode(lv_id_7_0, grammarAccess.getStateAccess().getIdIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_7_0, 
        		"ID");
	    }

)
)(
(
		lv_label_8_0=RULE_STRING
		{
			newLeafNode(lv_label_8_0, grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_8_0, 
        		"STRING");
	    }

)
)?((	otherlv_9='@' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStateAccess().getCommercialAtKeyword_6_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getStateAccess().getBodyReferenceStateCrossReference_6_0_1_0()); 
	}

)
)(	otherlv_11='[' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStateAccess().getLeftSquareBracketKeyword_6_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRenamingsSubstitutionParserRuleCall_6_0_2_1_0()); 
	    }
		lv_renamings_12_0=ruleSubstitution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_12_0, 
        		"Substitution");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStateAccess().getCommaKeyword_6_0_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0()); 
	    }
		lv_renamings_14_0=ruleSubstitution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_14_0, 
        		"Substitution");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15=']' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStateAccess().getRightSquareBracketKeyword_6_0_2_3());
    }
)?)
    |(	otherlv_16='{' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_6_1_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_6_1_1_0_0_0()); 
	    }
		lv_signals_17_0=ruleSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_17_0, 
        		"Signal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getVariablesVariableParserRuleCall_6_1_1_0_1_0()); 
	    }
		lv_variables_18_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_18_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_19='onentry' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStateAccess().getOnentryKeyword_6_1_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getEntryActionsActionParserRuleCall_6_1_1_0_2_1_0()); 
	    }
		lv_entryActions_20_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"entryActions",
        		lv_entryActions_20_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_21='oninner' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStateAccess().getOninnerKeyword_6_1_1_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getInnerActionsActionParserRuleCall_6_1_1_0_3_1_0()); 
	    }
		lv_innerActions_22_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"innerActions",
        		lv_innerActions_22_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_23='onexit' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStateAccess().getOnexitKeyword_6_1_1_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getExitActionsActionParserRuleCall_6_1_1_0_4_1_0()); 
	    }
		lv_exitActions_24_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"exitActions",
        		lv_exitActions_24_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_25='suspension' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getStateAccess().getSuspensionKeyword_6_1_1_0_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getSuspensionTriggerActionParserRuleCall_6_1_1_0_5_1_0()); 
	    }
		lv_suspensionTrigger_26_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"suspensionTrigger",
        		lv_suspensionTrigger_26_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)))*(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getBodyTextTextualCodeParserRuleCall_6_1_1_1_0()); 
	    }
		lv_bodyText_27_0=ruleTextualCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"bodyText",
        		lv_bodyText_27_0, 
        		"TextualCode");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRegionsSingleRegionParserRuleCall_6_1_1_2_0_0()); 
	    }
		lv_regions_28_0=ruleSingleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_28_0, 
        		"SingleRegion");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_6_1_1_2_1_0()); 
	    }
		lv_regions_29_0=ruleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_29_0, 
        		"Region");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)	otherlv_30='}' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_6_1_2());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_7_0()); 
	    }
		lv_outgoingTransitions_31_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"outgoingTransitions",
        		lv_outgoingTransitions_31_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_32=';' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getStateAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTypeTransitionTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTransitionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TransitionType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_priority_2_0=RULE_INT
		{
			newLeafNode(lv_priority_2_0, grammarAccess.getTransitionAccess().getPriorityINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"priority",
        		lv_priority_2_0, 
        		"INT");
	    }

)
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getTargetStateStateCrossReference_3_0()); 
	}

)
)(	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getWithKeyword_4_0());
    }
(((
(
		lv_isImmediate_5_0=	'#' 
    {
        newLeafNode(lv_isImmediate_5_0, grammarAccess.getTransitionAccess().getIsImmediateNumberSignKeyword_4_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed($current, "isImmediate", true, "#");
	    }

)
)?(
(
		lv_delay_6_0=RULE_INT
		{
			newLeafNode(lv_delay_6_0, grammarAccess.getTransitionAccess().getDelayINTTerminalRuleCall_4_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"delay",
        		lv_delay_6_0, 
        		"INT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTriggerBooleanExpressionParserRuleCall_4_1_0_2_0()); 
	    }
		lv_trigger_7_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_7_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_8='/' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getSolidusKeyword_4_1_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_4_1_0_3_1_0()); 
	    }
		lv_effects_9_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_9_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getCommaKeyword_4_1_0_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_4_1_0_3_2_1_0()); 
	    }
		lv_effects_11_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_11_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
    |(
(
		lv_label_12_0=RULE_STRING
		{
			newLeafNode(lv_label_12_0, grammarAccess.getTransitionAccess().getLabelSTRINGTerminalRuleCall_4_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_12_0, 
        		"STRING");
	    }

)
)))?(
(
		lv_isHistory_13_0=	'history' 
    {
        newLeafNode(lv_isHistory_13_0, grammarAccess.getTransitionAccess().getIsHistoryHistoryKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed($current, "isHistory", true, "history");
	    }

)
)?)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAccess().getASignalParserRuleCall_0()); 
    }
    this_aSignal_0=ruleaSignal
    { 
        $current = $this_aSignal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAccess().getISignalParserRuleCall_1()); 
    }
    this_ISignal_1=ruleISignal
    { 
        $current = $this_ISignal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleaSignal
entryRuleaSignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASignalRule()); }
	 iv_ruleaSignal=ruleaSignal 
	 { $current=$iv_ruleaSignal.current; } 
	 EOF 
;

// Rule aSignal
ruleaSignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getASignalAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASignalRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_isInput_1_0=	'input' 
    {
        newLeafNode(lv_isInput_1_0, grammarAccess.getASignalAccess().getIsInputInputKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed($current, "isInput", true, "input");
	    }

)
)?(
(
		lv_isOutput_2_0=	'output' 
    {
        newLeafNode(lv_isOutput_2_0, grammarAccess.getASignalAccess().getIsOutputOutputKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed($current, "isOutput", true, "output");
	    }

)
)?	otherlv_3='signal' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASignalAccess().getSignalKeyword_3());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getASignalAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getASignalAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASignalAccess().getInitialValueAnyTypeParserRuleCall_5_1_0()); 
	    }
		lv_initialValue_6_0=ruleAnyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASignalRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_6_0, 
        		"AnyType");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getASignalAccess().getColonKeyword_6_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getASignalAccess().getTypeValueTypeEnumRuleCall_6_0_1_0_0()); 
	    }
		lv_type_8_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_9_0=RULE_STRING
		{
			newLeafNode(lv_hostType_9_0, grammarAccess.getASignalAccess().getHostTypeSTRINGTerminalRuleCall_6_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_9_0, 
        		"STRING");
	    }

)
)))
    |(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getASignalAccess().getColonKeyword_6_1_0());
    }
	otherlv_11='combine' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getASignalAccess().getCombineKeyword_6_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getASignalAccess().getTypeValueTypeEnumRuleCall_6_1_2_0_0()); 
	    }
		lv_type_12_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_12_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_13_0=RULE_STRING
		{
			newLeafNode(lv_hostType_13_0, grammarAccess.getASignalAccess().getHostTypeSTRINGTerminalRuleCall_6_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_13_0, 
        		"STRING");
	    }

)
))	otherlv_14='with' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getASignalAccess().getWithKeyword_6_1_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getASignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0()); 
	    }
		lv_combineOperator_15_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASignalRule());
	        }
       		set(
       			$current, 
       			"combineOperator",
        		lv_combineOperator_15_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostCombineOperator_16_0=RULE_STRING
		{
			newLeafNode(lv_hostCombineOperator_16_0, grammarAccess.getASignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_6_1_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostCombineOperator",
        		lv_hostCombineOperator_16_0, 
        		"STRING");
	    }

)
))))?)
;





// Entry rule entryRuleISignal
entryRuleISignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getISignalRule()); }
	 iv_ruleISignal=ruleISignal 
	 { $current=$iv_ruleISignal.current; } 
	 EOF 
;

// Rule ISignal
ruleISignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_isInput_1_0=	'input' 
    {
        newLeafNode(lv_isInput_1_0, grammarAccess.getISignalAccess().getIsInputInputKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed($current, "isInput", true, "input");
	    }

)
)?(
(
		lv_isOutput_2_0=	'output' 
    {
        newLeafNode(lv_isOutput_2_0, grammarAccess.getISignalAccess().getIsOutputOutputKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed($current, "isOutput", true, "output");
	    }

)
)?	otherlv_3='signal' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getISignalAccess().getSignalKeyword_3());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getISignalAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getISignalAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getInitialValueAnyTypeParserRuleCall_5_1_0()); 
	    }
		lv_initialValue_6_0=ruleAnyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_6_0, 
        		"AnyType");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getISignalAccess().getColonKeyword_6_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeValueTypeEnumRuleCall_6_0_1_0_0()); 
	    }
		lv_type_8_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_9_0=RULE_STRING
		{
			newLeafNode(lv_hostType_9_0, grammarAccess.getISignalAccess().getHostTypeSTRINGTerminalRuleCall_6_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_9_0, 
        		"STRING");
	    }

)
)))
    |(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getISignalAccess().getColonKeyword_6_1_0());
    }
	otherlv_11='combine' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getISignalAccess().getCombineKeyword_6_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeValueTypeEnumRuleCall_6_1_2_0_0()); 
	    }
		lv_type_12_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_12_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_13_0=RULE_STRING
		{
			newLeafNode(lv_hostType_13_0, grammarAccess.getISignalAccess().getHostTypeSTRINGTerminalRuleCall_6_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_13_0, 
        		"STRING");
	    }

)
))	otherlv_14='with' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getISignalAccess().getWithKeyword_6_1_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_6_1_4_0_0()); 
	    }
		lv_combineOperator_15_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"combineOperator",
        		lv_combineOperator_15_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostCombineOperator_16_0=RULE_STRING
		{
			newLeafNode(lv_hostCombineOperator_16_0, grammarAccess.getISignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_6_1_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostCombineOperator",
        		lv_hostCombineOperator_16_0, 
        		"STRING");
	    }

)
))))?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getAVariableParserRuleCall_0()); 
    }
    this_aVariable_0=ruleaVariable
    { 
        $current = $this_aVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getIVariableParserRuleCall_1()); 
    }
    this_IVariable_1=ruleIVariable
    { 
        $current = $this_IVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleaVariable
entryRuleaVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAVariableRule()); }
	 iv_ruleaVariable=ruleaVariable 
	 { $current=$iv_ruleaVariable.current; } 
	 EOF 
;

// Rule aVariable
ruleaVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAVariableRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAVariableAccess().getVarKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAVariableAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAVariableAccess().getColonEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAVariableAccess().getInitialValueAnyTypeParserRuleCall_3_1_0()); 
	    }
		lv_initialValue_4_0=ruleAnyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAVariableRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_4_0, 
        		"AnyType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAVariableAccess().getColonKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAVariableAccess().getTypeValueTypeEnumRuleCall_5_0_0()); 
	    }
		lv_type_6_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_7_0=RULE_STRING
		{
			newLeafNode(lv_hostType_7_0, grammarAccess.getAVariableAccess().getHostTypeSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_7_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleIVariable
entryRuleIVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIVariableRule()); }
	 iv_ruleIVariable=ruleIVariable 
	 { $current=$iv_ruleIVariable.current; } 
	 EOF 
;

// Rule IVariable
ruleIVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIVariableAccess().getVarKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getIVariableAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIVariableAccess().getColonEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableAccess().getInitialValueAnyTypeParserRuleCall_3_1_0()); 
	    }
		lv_initialValue_4_0=ruleAnyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_4_0, 
        		"AnyType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIVariableAccess().getColonKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableAccess().getTypeValueTypeEnumRuleCall_5_0_0()); 
	    }
		lv_type_6_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_hostType_7_0=RULE_STRING
		{
			newLeafNode(lv_hostType_7_0, grammarAccess.getIVariableAccess().getHostTypeSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostType",
        		lv_hostType_7_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleTextualCode
entryRuleTextualCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextualCodeRule()); }
	 iv_ruleTextualCode=ruleTextualCode 
	 { $current=$iv_ruleTextualCode.current; } 
	 EOF 
;

// Rule TextualCode
ruleTextualCode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='textual' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextualCodeAccess().getTextualKeyword_0());
    }
	otherlv_1='code' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextualCodeAccess().getCodeKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTextualCodeAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		lv_type_3_0=RULE_ID
		{
			newLeafNode(lv_type_3_0, grammarAccess.getTextualCodeAccess().getTypeIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextualCodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ID");
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTextualCodeAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTextualCodeAccess().getColonKeyword_3());
    }
(
(
		lv_code_6_0=RULE_STRING
		{
			newLeafNode(lv_code_6_0, grammarAccess.getTextualCodeAccess().getCodeSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextualCodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_6_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSubstitution
entryRuleSubstitution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubstitutionRule()); }
	 iv_ruleSubstitution=ruleSubstitution 
	 { $current=$iv_ruleSubstitution.current; } 
	 EOF 
;

// Rule Substitution
ruleSubstitution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_actual_0_0=RULE_ID
		{
			newLeafNode(lv_actual_0_0, grammarAccess.getSubstitutionAccess().getActualIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubstitutionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"actual",
        		lv_actual_0_0, 
        		"ID");
	    }

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubstitutionAccess().getSolidusKeyword_1());
    }
(
(
		lv_formal_2_0=RULE_ID
		{
			newLeafNode(lv_formal_2_0, grammarAccess.getSubstitutionAccess().getFormalIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubstitutionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"formal",
        		lv_formal_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getActionAction_0(),
            $current);
    }
)(
(
		lv_isImmediate_1_0=	'#' 
    {
        newLeafNode(lv_isImmediate_1_0, grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "isImmediate", true, "#");
	    }

)
)?(
(
		lv_delay_2_0=RULE_INT
		{
			newLeafNode(lv_delay_2_0, grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"delay",
        		lv_delay_2_0, 
        		"INT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getTriggerBooleanExpressionParserRuleCall_3_0()); 
	    }
		lv_trigger_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_3_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionAccess().getSolidusKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_4_1_0()); 
	    }
		lv_effects_5_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_5_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getActionAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_4_2_1_0()); 
	    }
		lv_effects_7_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_7_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); 
    }
    this_Emission_0=ruleEmission
    { 
        $current = $this_Emission_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getTextEffectParserRuleCall_2()); 
    }
    this_TextEffect_2=ruleTextEffect
    { 
        $current = $this_TextEffect_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEmission
entryRuleEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmissionRule()); }
	 iv_ruleEmission=ruleEmission 
	 { $current=$iv_ruleEmission.current; } 
	 EOF 
;

// Rule Emission
ruleEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmissionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); 
	}

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_newValue_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmissionRule());
	        }
       		set(
       			$current, 
       			"newValue",
        		lv_newValue_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); 
	}

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTextEffect
entryRuleTextEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextEffectRule()); }
	 iv_ruleTextEffect=ruleTextEffect 
	 { $current=$iv_ruleTextEffect.current; } 
	 EOF 
;

// Rule TextEffect
ruleTextEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_code_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_code_0_0, grammarAccess.getTextEffectAccess().getCodeHOSTCODETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_0_0, 
        		"HOSTCODE");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextEffectAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getTextEffectAccess().getTypeIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextEffectAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); 
    }
    this_ValuedExpression_1=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); 
    }
    this_NotOrValuedExpression_0=ruleNotOrValuedExpression
    { 
        $current = $this_NotOrValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleNotOrValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"NotOrValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_4=ruleNotExpression
    { 
        $current = $this_NotExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOrValuedExpressionRule()); }
	 iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression 
	 { $current=$iv_ruleNotOrValuedExpression.current; } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); 
    }
    this_AtomicExpression_3=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedExpressionRule()); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); 
    }
    this_SubExpression_0=ruleSubExpression
    { 
        $current = $this_SubExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAddOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AddOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); 
    }
    this_MultExpression_0=ruleMultExpression
    { 
        $current = $this_MultExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleMultExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"MultExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	 iv_ruleMultExpression=ruleMultExpression 
	 { $current=$iv_ruleMultExpression.current; } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); 
    }
    this_DivExpression_0=ruleDivExpression
    { 
        $current = $this_DivExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleDivExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"DivExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivExpression
entryRuleDivExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivExpressionRule()); }
	 iv_ruleDivExpression=ruleDivExpression 
	 { $current=$iv_ruleDivExpression.current; } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); 
    }
    this_ModExpression_0=ruleModExpression
    { 
        $current = $this_ModExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleDivOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"DivOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleModExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ModExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModExpressionRule()); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); 
    }
    this_NegExpression_0=ruleNegExpression
    { 
        $current = $this_NegExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleModOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ModOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"AtomicValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegExpression
entryRuleNegExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegExpressionRule()); }
	 iv_ruleNegExpression=ruleNegExpression 
	 { $current=$iv_ruleNegExpression.current; } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNegExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NegExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); 
    }
    this_AtomicValuedExpression_3=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	 iv_ruleAtomicExpression=ruleAtomicExpression 
	 { $current=$iv_ruleAtomicExpression.current; } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_0()); 
    }
    this_BooleanValue_0=ruleBooleanValue
    { 
        $current = $this_BooleanValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); 
    }
    this_ValuedObjectTestExpression_1=ruleValuedObjectTestExpression
    { 
        $current = $this_ValuedObjectTestExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_2_1()); 
    }
    this_BooleanExpression_3=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_3()); 
    }
    this_TextExpression_5=ruleTextExpression
    { 
        $current = $this_TextExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicValuedExpressionRule()); }
	 iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression 
	 { $current=$iv_ruleAtomicValuedExpression.current; } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_2_1()); 
    }
    this_ValuedExpression_3=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_3()); 
    }
    this_AtomicExpression_5=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectTestExpressionRule()); }
	 iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression 
	 { $current=$iv_ruleValuedObjectTestExpression.current; } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=rulePreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"PreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); 
	    }
		lv_subExpressions_3_0=ruleValuedObjectTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ValuedObjectTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_6_0=ruleValueTestOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"ValueTestOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_7_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_7_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); 
    }
    this_ValuedObjectReference_8=ruleValuedObjectReference
    { 
        $current = $this_ValuedObjectReference_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectReferenceRule()); }
	 iv_ruleValuedObjectReference=ruleValuedObjectReference 
	 { $current=$iv_ruleValuedObjectReference.current; } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_code_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_code_0_0, grammarAccess.getTextExpressionAccess().getCodeHOSTCODETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_0_0, 
        		"HOSTCODE");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Float");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Boolean");
	    }

)
)
;





// Entry rule entryRuleAnyType
entryRuleAnyType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyTypeRule()); } 
	 iv_ruleAnyType=ruleAnyType 
	 { $current=$iv_ruleAnyType.current.getText(); }  
	 EOF 
;

// Rule AnyType
ruleAnyType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_Boolean_0=RULE_BOOLEAN    {
		$current.merge(this_Boolean_0);
    }

    { 
    newLeafNode(this_Boolean_0, grammarAccess.getAnyTypeAccess().getBooleanTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getAnyTypeAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_Float_2=RULE_FLOAT    {
		$current.merge(this_Float_2);
    }

    { 
    newLeafNode(this_Float_2, grammarAccess.getAnyTypeAccess().getFloatTerminalRuleCall_2()); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getAnyTypeAccess().getIDTerminalRuleCall_3()); 
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getAnyTypeAccess().getSTRINGTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	 iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration 
	 { $current=$iv_ruleInterfaceDeclaration.current; } 
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getInterfaceSignalDeclParserRuleCall_0()); 
    }
    this_InterfaceSignalDecl_0=ruleInterfaceSignalDecl
    { 
        $current = $this_InterfaceSignalDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getInterfaceVariableDeclParserRuleCall_1()); 
    }
    this_InterfaceVariableDecl_1=ruleInterfaceVariableDecl
    { 
        $current = $this_InterfaceVariableDecl_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInterfaceSignalDecl
entryRuleInterfaceSignalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceSignalDeclRule()); }
	 iv_ruleInterfaceSignalDecl=ruleInterfaceSignalDecl 
	 { $current=$iv_ruleInterfaceSignalDecl.current; } 
	 EOF 
;

// Rule InterfaceSignalDecl
ruleInterfaceSignalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputAction_0_0(),
            $current);
    }
)	otherlv_1='input' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceSignalDeclAccess().getInputKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_2_0()); 
	    }
		lv_signals_2_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_2_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_3_1_0()); 
	    }
		lv_signals_4_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_4_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getOutputAction_1_0(),
            $current);
    }
)	otherlv_7='output' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceSignalDeclAccess().getOutputKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_2_0()); 
	    }
		lv_signals_8_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_8_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_3_1_0()); 
	    }
		lv_signals_10_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_10_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_1_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputOutputAction_2_0(),
            $current);
    }
)	otherlv_13='inputoutput' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInterfaceSignalDeclAccess().getInputoutputKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_2_0()); 
	    }
		lv_signals_14_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_14_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_3_1_0()); 
	    }
		lv_signals_16_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_16_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_2_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getReturnAction_3_0(),
            $current);
    }
)	otherlv_19='return' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getInterfaceSignalDeclAccess().getReturnKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_2_0()); 
	    }
		lv_signals_20_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_20_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_3_1_0()); 
	    }
		lv_signals_22_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_22_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_3_4());
    }
))
;







// Entry rule entryRuleInterfaceVariableDecl
entryRuleInterfaceVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceVariableDeclRule()); }
	 iv_ruleInterfaceVariableDecl=ruleInterfaceVariableDecl 
	 { $current=$iv_ruleInterfaceVariableDecl.current; } 
	 EOF 
;

// Rule InterfaceVariableDecl
ruleInterfaceVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceVariableDeclAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_1_0()); 
	    }
		lv_varDecls_1_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_1_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceVariableDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_2_1_0()); 
	    }
		lv_varDecls_3_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_3_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getTypeTypeIdentifierParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeIdentifier
entryRuleTypeIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdentifierRule()); }
	 iv_ruleTypeIdentifier=ruleTypeIdentifier 
	 { $current=$iv_ruleTypeIdentifier.current; } 
	 EOF 
;

// Rule TypeIdentifier
ruleTypeIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_1_0=RULE_ID
		{
			newLeafNode(lv_typeID_1_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_1_0, 
        		"ID");
	    }

)
)
    |(	otherlv_2='combine' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeIdentifierAccess().getCombineKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_2_1_0_0()); 
	    }
		lv_type_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_4_0=RULE_ID
		{
			newLeafNode(lv_typeID_4_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_4_0, 
        		"ID");
	    }

)
))	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeIdentifierAccess().getWithKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getOperatorCombineOperatorEnumRuleCall_2_3_0()); 
	    }
		lv_operator_6_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_1()); 
    }
    this_TagAnnotation_1=ruleTagAnnotation
    { 
        $current = $this_TagAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); 
    }
    this_KeyStringValueAnnotation_2=ruleKeyStringValueAnnotation
    { 
        $current = $this_KeyStringValueAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); 
    }
    this_TypedKeyStringValueAnnotation_3=ruleTypedKeyStringValueAnnotation
    { 
        $current = $this_TypedKeyStringValueAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_4()); 
    }
    this_KeyBooleanValueAnnotation_4=ruleKeyBooleanValueAnnotation
    { 
        $current = $this_KeyBooleanValueAnnotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_5()); 
    }
    this_KeyIntValueAnnotation_5=ruleKeyIntValueAnnotation
    { 
        $current = $this_KeyIntValueAnnotation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_6()); 
    }
    this_KeyFloatValueAnnotation_6=ruleKeyFloatValueAnnotation
    { 
        $current = $this_KeyFloatValueAnnotation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentAnnotationRule()); }
	 iv_ruleCommentAnnotation=ruleCommentAnnotation 
	 { $current=$iv_ruleCommentAnnotation.current; } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_COMMENT_ANNOTATION
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"COMMENT_ANNOTATION");
	    }

)
)
;





// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagAnnotationRule()); }
	 iv_ruleTagAnnotation=ruleTagAnnotation 
	 { $current=$iv_ruleTagAnnotation.current; } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTagAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_3_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTagAnnotationAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyStringValueAnnotationRule()); }
	 iv_ruleKeyStringValueAnnotation=ruleKeyStringValueAnnotation 
	 { $current=$iv_ruleKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyStringValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 iv_ruleTypedKeyStringValueAnnotation=ruleTypedKeyStringValueAnnotation 
	 { $current=$iv_ruleTypedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_6_1_0()); 
	    }
		lv_annotations_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_7_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightParenthesisKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleKeyBooleanValueAnnotation
entryRuleKeyBooleanValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationRule()); }
	 iv_ruleKeyBooleanValueAnnotation=ruleKeyBooleanValueAnnotation 
	 { $current=$iv_ruleKeyBooleanValueAnnotation.current; } 
	 EOF 
;

// Rule KeyBooleanValueAnnotation
ruleKeyBooleanValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBooleanTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Boolean");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyBooleanValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyBooleanValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyIntValueAnnotation
entryRuleKeyIntValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyIntValueAnnotationRule()); }
	 iv_ruleKeyIntValueAnnotation=ruleKeyIntValueAnnotation 
	 { $current=$iv_ruleKeyIntValueAnnotation.current; } 
	 EOF 
;

// Rule KeyIntValueAnnotation
ruleKeyIntValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyIntValueAnnotationAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyIntValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyIntValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyFloatValueAnnotation
entryRuleKeyFloatValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyFloatValueAnnotationRule()); }
	 iv_ruleKeyFloatValueAnnotation=ruleKeyFloatValueAnnotation 
	 { $current=$iv_ruleKeyFloatValueAnnotation.current; } 
	 EOF 
;

// Rule KeyFloatValueAnnotation
ruleKeyFloatValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_FLOAT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyFloatValueAnnotationAccess().getValueFloatTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Float");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyFloatValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyFloatValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleImportAnnotation
entryRuleImportAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportAnnotationRule()); }
	 iv_ruleImportAnnotation=ruleImportAnnotation 
	 { $current=$iv_ruleImportAnnotation.current; } 
	 EOF 
;

// Rule ImportAnnotation
ruleImportAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAnnotationAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAnnotationAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule StateType
ruleStateType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='normal' 
	{
        $current = grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='conditional' 
	{
        $current = grammarAccess.getStateTypeAccess().getCONDITIONALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStateTypeAccess().getCONDITIONALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='reference' 
	{
        $current = grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='textual' 
	{
        $current = grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3()); 
    }
));



// Rule TransitionType
ruleTransitionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='o->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>->' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTransitionTypeAccess().getNORMALTERMINATIONEnumLiteralDeclaration_2()); 
    }
));



// Rule DivOperator
ruleDivOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0=':' 
	{
        $current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); 
    }
);



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule PreOperator
rulePreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='pre' 
	{
        $current = grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); 
    }
);



// Rule OrOperator
ruleOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule AndOperator
ruleAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule NotOperator
ruleNotOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not' 
	{
        $current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); 
    }
);



// Rule AddOperator
ruleAddOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); 
    }
);



// Rule SubOperator
ruleSubOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='-' 
	{
        $current = grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); 
    }
);



// Rule MultOperator
ruleMultOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); 
    }
);



// Rule ModOperator
ruleModOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='mod' 
	{
        $current = grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); 
    }
);



// Rule ValueTestOperator
ruleValueTestOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='?' 
	{
        $current = grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); 
    }
);



// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='boolean' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='unsigned' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='integer' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='double' 
	{
        $current = grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='string' 
	{
        $current = grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='or' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='and' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



RULE_HOSTCODE : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ('-'? ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? 'f'?|'-'? ('0'..'9')+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


