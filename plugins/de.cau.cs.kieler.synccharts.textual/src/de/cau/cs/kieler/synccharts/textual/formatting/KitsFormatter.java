/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.textual.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 * ======================================================================
 * ========== Also note that when you change your grammar, the numbering of
 * keywords, groups etc will change causing you having to re-implement this
 * formatter
 */
public class KitsFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected void configureFormatting(FormattingConfig config) {
        de.cau.cs.kieler.synccharts.textual.services.KitsGrammarAccess f = (de.cau.cs.kieler.synccharts.textual.services.KitsGrammarAccess) getGrammarAccess();

        /** REGIONS **/
        config.setLinewrap().after(f.getRegionRule());
        // System.out.println("Formatter: Region info?: "
        // + f.getRegionRule().eGet(
        // SyncchartsPackage.eINSTANCE.getRegion_Id()).toString());
        // config.setLinewrap().after(
        // f.getRegionAccess().getRegionKeyword_0_1_0_0_0());
        // config.setLinewrap().after(
        // f.getRegionAccess().getRegionKeyword_0_1_0_1());
        // config.setLinewrap().after(f.getRegionAccess().getIdAssignment_1_1());

        /** STATES **/
        config.setLinewrap().before(
                f.getStateAccess().getIsInitialAssignment_1_0_0());
        config.setLinewrap().before(
                f.getStateAccess().getIsInitialAssignment_1_1_1());
        config.setLinewrap().before(
                f.getStateAccess().getIsInitialAssignment_1_5_0());
        config.setLinewrap().before(
                f.getStateAccess().getIsFinalAssignment_1_0_1());
        config.setLinewrap().before(
                f.getStateAccess().getIsFinalAssignment_1_1_0());
        config.setLinewrap().before(
                f.getStateAccess().getIsFinalAssignment_1_5_1());
        config.setLinewrap().before(
                f.getStateAccess().getEntryActionsAssignment_4_1());
        config.setLinewrap().before(
                f.getStateAccess().getInnerActionsAssignment_5_1());
        config.setLinewrap().before(
                f.getStateAccess().getExitActionsAssignment_6_1());
        config.setLinewrap().before(f.getStateRule());
        config.setLinewrap().before(
                f.getStateAccess().getRightCurlyBracketKeyword_8_1_0_3());
        config.setLinewrap().after(
                f.getStateAccess().getRightCurlyBracketKeyword_8_1_1_2());
        config.setLinewrap().after(
                f.getStateAccess().getLeftCurlyBracketKeyword_8_1_0_0());
        config.setLinewrap().after(
                f.getStateAccess().getLeftCurlyBracketKeyword_8_1_1_0());
        // parallel regions
        config.setLinewrap().after(
                f.getStateAccess()
                        .getVerticalLineVerticalLineKeyword_8_1_0_2_0());
        config.setLinewrap().before(
                f.getStateAccess()
                        .getVerticalLineVerticalLineKeyword_8_1_0_2_0());
        // indent "{" --- "}"
        config.setIndentation(f.getStateAccess()
                .getLeftCurlyBracketKeyword_8_1_0_0(), f.getStateAccess()
                .getRightCurlyBracketKeyword_8_1_1_2());
        config.setIndentation(f.getStateAccess()
                .getLeftCurlyBracketKeyword_8_1_1_0(), f.getStateAccess()
                .getRightCurlyBracketKeyword_8_1_0_3());
        config.setIndentation(f.getRegionAccess()
                .getInnerStatesAssignment_0_1_2(), f.getRegionAccess()
                .getInnerStatesAssignment_0_1_2());

        // indent init --- "}"
        config
                .setIndentation(f.getStateAccess()
                        .getIsInitialAssignment_1_0_0(), f.getStateAccess()
                        .getRightCurlyBracketKeyword_8_1_0_3());
        config
                .setIndentation(f.getStateAccess()
                        .getIsInitialAssignment_1_1_1(), f.getStateAccess()
                        .getRightCurlyBracketKeyword_8_1_0_3());
        config
                .setIndentation(f.getStateAccess()
                        .getIsInitialAssignment_1_5_0(), f.getStateAccess()
                        .getRightCurlyBracketKeyword_8_1_0_3());
        // indent final --- "}"
        config.setIndentation(f.getStateAccess().getIsFinalAssignment_1_0_1(),
                f.getStateAccess().getRightCurlyBracketKeyword_8_1_0_3());
        config.setIndentation(f.getStateAccess().getIsFinalAssignment_1_1_0(),
                f.getStateAccess().getRightCurlyBracketKeyword_8_1_0_3());
        config.setIndentation(f.getStateAccess().getIsFinalAssignment_1_5_1(),
                f.getStateAccess().getRightCurlyBracketKeyword_8_1_0_3());

        /** SIGNALS **/
        config.setLinewrap().before(
                f.getSignalAccess().getIsInputInputKeyword_0_0_0());
        config.setLinewrap().before(
                f.getSignalAccess().getIsOutputOutputKeyword_0_1_0());
        // variable
        config.setLinewrap().before(f.getVariableAccess().getVarKeyword_0());

        /** TRANSITIONS **/
        // indent transitionType --- ";"
        // config.setNoSpace().before(f.getTransitionAccess().getSemicolonKeyword_5());
        // config.setIndentation(f.getTransitionAccess().getTypeAssignment_0(),
        // f
        // .getTransitionAccess().getSemicolonKeyword_5());
        config.setLinewrap().before(
                f.getTransitionTypeAccess()
                        .getWEAKABORTEnumLiteralDeclaration_0());
        config
                .setLinewrap()
                .before(
                        f
                                .getTransitionTypeAccess()
                                .getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0());
        config.setLinewrap().before(
                f.getTransitionTypeAccess().getSTRONGABORTOKeyword_1_0());
        config
                .setLinewrap()
                .before(
                        f
                                .getTransitionTypeAccess()
                                .getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0());
        config.setLinewrap().after(
                f.getTransitionAccess().getSemicolonKeyword_4());

        /** COMMENTS **/
        config.setLinewrap().before(f.getSL_COMMENTRule());
        config.setLinewrap().after(f.getSL_COMMENTRule());
        config.setLinewrap().after(f.getML_COMMENTRule());

    }
}
