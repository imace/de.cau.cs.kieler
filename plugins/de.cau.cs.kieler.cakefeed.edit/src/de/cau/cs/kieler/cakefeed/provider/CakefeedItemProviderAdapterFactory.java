/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.cau.cs.kieler.cakefeed.provider;

import de.cau.cs.kieler.cakefeed.util.CakefeedAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CakefeedItemProviderAdapterFactory extends CakefeedAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CakefeedItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Identification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentificationItemProvider identificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Identification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentificationAdapter() {
		if (identificationItemProvider == null) {
			identificationItemProvider = new IdentificationItemProvider(this);
		}

		return identificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.VersionInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionInfoItemProvider versionInfoItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.VersionInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionInfoAdapter() {
		if (versionInfoItemProvider == null) {
			versionInfoItemProvider = new VersionInfoItemProvider(this);
		}

		return versionInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBNetworkItemProvider fbNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBNetworkAdapter() {
		if (fbNetworkItemProvider == null) {
			fbNetworkItemProvider = new FBNetworkItemProvider(this);
		}

		return fbNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Device} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceItemProvider deviceItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Device}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceAdapter() {
		if (deviceItemProvider == null) {
			deviceItemProvider = new DeviceItemProvider(this);
		}

		return deviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Segment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SegmentItemProvider segmentItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Segment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSegmentAdapter() {
		if (segmentItemProvider == null) {
			segmentItemProvider = new SegmentItemProvider(this);
		}

		return segmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBItemProvider fbItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBAdapter() {
		if (fbItemProvider == null) {
			fbItemProvider = new FBItemProvider(this);
		}

		return fbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.CompilerInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompilerInfoItemProvider compilerInfoItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.CompilerInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompilerInfoAdapter() {
		if (compilerInfoItemProvider == null) {
			compilerInfoItemProvider = new CompilerInfoItemProvider(this);
		}

		return compilerInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFIFEventConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFIFEventConnectionItemProvider ififEventConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFIFEventConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFIFEventConnectionAdapter() {
		if (ififEventConnectionItemProvider == null) {
			ififEventConnectionItemProvider = new IFIFEventConnectionItemProvider(this);
		}

		return ififEventConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFIFDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFIFDataConnectionItemProvider ififDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFIFDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFIFDataConnectionAdapter() {
		if (ififDataConnectionItemProvider == null) {
			ififDataConnectionItemProvider = new IFIFDataConnectionItemProvider(this);
		}

		return ififDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFFBEventConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFFBEventConnectionItemProvider iffbEventConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFFBEventConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFFBEventConnectionAdapter() {
		if (iffbEventConnectionItemProvider == null) {
			iffbEventConnectionItemProvider = new IFFBEventConnectionItemProvider(this);
		}

		return iffbEventConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFFBDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFFBDataConnectionItemProvider iffbDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFFBDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFFBDataConnectionAdapter() {
		if (iffbDataConnectionItemProvider == null) {
			iffbDataConnectionItemProvider = new IFFBDataConnectionItemProvider(this);
		}

		return iffbDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBIFEventConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBIFEventConnectionItemProvider fbifEventConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBIFEventConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBIFEventConnectionAdapter() {
		if (fbifEventConnectionItemProvider == null) {
			fbifEventConnectionItemProvider = new FBIFEventConnectionItemProvider(this);
		}

		return fbifEventConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBIFDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBIFDataConnectionItemProvider fbifDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBIFDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBIFDataConnectionAdapter() {
		if (fbifDataConnectionItemProvider == null) {
			fbifDataConnectionItemProvider = new FBIFDataConnectionItemProvider(this);
		}

		return fbifDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBFBEventConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBFBEventConnectionItemProvider fbfbEventConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBFBEventConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBFBEventConnectionAdapter() {
		if (fbfbEventConnectionItemProvider == null) {
			fbfbEventConnectionItemProvider = new FBFBEventConnectionItemProvider(this);
		}

		return fbfbEventConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBFBDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBFBDataConnectionItemProvider fbfbDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBFBDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBFBDataConnectionAdapter() {
		if (fbfbDataConnectionItemProvider == null) {
			fbfbDataConnectionItemProvider = new FBFBDataConnectionItemProvider(this);
		}

		return fbfbDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFIVDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFIVDataConnectionItemProvider ifivDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFIVDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFIVDataConnectionAdapter() {
		if (ifivDataConnectionItemProvider == null) {
			ifivDataConnectionItemProvider = new IFIVDataConnectionItemProvider(this);
		}

		return ifivDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IVIFDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IVIFDataConnectionItemProvider ivifDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IVIFDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIVIFDataConnectionAdapter() {
		if (ivifDataConnectionItemProvider == null) {
			ivifDataConnectionItemProvider = new IVIFDataConnectionItemProvider(this);
		}

		return ivifDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBIVDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBIVDataConnectionItemProvider fbivDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBIVDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBIVDataConnectionAdapter() {
		if (fbivDataConnectionItemProvider == null) {
			fbivDataConnectionItemProvider = new FBIVDataConnectionItemProvider(this);
		}

		return fbivDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IVFBDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IVFBDataConnectionItemProvider ivfbDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IVFBDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIVFBDataConnectionAdapter() {
		if (ivfbDataConnectionItemProvider == null) {
			ivfbDataConnectionItemProvider = new IVFBDataConnectionItemProvider(this);
		}

		return ivfbDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IVIVDataConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IVIVDataConnectionItemProvider ivivDataConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IVIVDataConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIVIVDataConnectionAdapter() {
		if (ivivDataConnectionItemProvider == null) {
			ivivDataConnectionItemProvider = new IVIVDataConnectionItemProvider(this);
		}

		return ivivDataConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.AdapterConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdapterConnectionItemProvider adapterConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.AdapterConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdapterConnectionAdapter() {
		if (adapterConnectionItemProvider == null) {
			adapterConnectionItemProvider = new AdapterConnectionItemProvider(this);
		}

		return adapterConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFInputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFInputEventItemProvider ifInputEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFInputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFInputEventAdapter() {
		if (ifInputEventItemProvider == null) {
			ifInputEventItemProvider = new IFInputEventItemProvider(this);
		}

		return ifInputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBInputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBInputEventItemProvider fbInputEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBInputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBInputEventAdapter() {
		if (fbInputEventItemProvider == null) {
			fbInputEventItemProvider = new FBInputEventItemProvider(this);
		}

		return fbInputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFOutputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFOutputEventItemProvider ifOutputEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFOutputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFOutputEventAdapter() {
		if (ifOutputEventItemProvider == null) {
			ifOutputEventItemProvider = new IFOutputEventItemProvider(this);
		}

		return ifOutputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBOutputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBOutputEventItemProvider fbOutputEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBOutputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBOutputEventAdapter() {
		if (fbOutputEventItemProvider == null) {
			fbOutputEventItemProvider = new FBOutputEventItemProvider(this);
		}

		return fbOutputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFInputVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFInputVarItemProvider ifInputVarItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFInputVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFInputVarAdapter() {
		if (ifInputVarItemProvider == null) {
			ifInputVarItemProvider = new IFInputVarItemProvider(this);
		}

		return ifInputVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBInputVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBInputVarItemProvider fbInputVarItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBInputVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBInputVarAdapter() {
		if (fbInputVarItemProvider == null) {
			fbInputVarItemProvider = new FBInputVarItemProvider(this);
		}

		return fbInputVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.IFOutputVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFOutputVarItemProvider ifOutputVarItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.IFOutputVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFOutputVarAdapter() {
		if (ifOutputVarItemProvider == null) {
			ifOutputVarItemProvider = new IFOutputVarItemProvider(this);
		}

		return ifOutputVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBOutputVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBOutputVarItemProvider fbOutputVarItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBOutputVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBOutputVarAdapter() {
		if (fbOutputVarItemProvider == null) {
			fbOutputVarItemProvider = new FBOutputVarItemProvider(this);
		}

		return fbOutputVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.InternalVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalVarItemProvider internalVarItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.InternalVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalVarAdapter() {
		if (internalVarItemProvider == null) {
			internalVarItemProvider = new InternalVarItemProvider(this);
		}

		return internalVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Compiler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompilerItemProvider compilerItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Compiler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompilerAdapter() {
		if (compilerItemProvider == null) {
			compilerItemProvider = new CompilerItemProvider(this);
		}

		return compilerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.InputWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputWithItemProvider inputWithItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.InputWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputWithAdapter() {
		if (inputWithItemProvider == null) {
			inputWithItemProvider = new InputWithItemProvider(this);
		}

		return inputWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.OutputWith} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputWithItemProvider outputWithItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.OutputWith}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputWithAdapter() {
		if (outputWithItemProvider == null) {
			outputWithItemProvider = new OutputWithItemProvider(this);
		}

		return outputWithItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Socket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocketItemProvider socketItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Socket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocketAdapter() {
		if (socketItemProvider == null) {
			socketItemProvider = new SocketItemProvider(this);
		}

		return socketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Plug} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlugItemProvider plugItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Plug}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlugAdapter() {
		if (plugItemProvider == null) {
			plugItemProvider = new PlugItemProvider(this);
		}

		return plugItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.AdapterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdapterTypeItemProvider adapterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.AdapterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdapterTypeAdapter() {
		if (adapterTypeItemProvider == null) {
			adapterTypeItemProvider = new AdapterTypeItemProvider(this);
		}

		return adapterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.ServiceSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSequenceItemProvider serviceSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.ServiceSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSequenceAdapter() {
		if (serviceSequenceItemProvider == null) {
			serviceSequenceItemProvider = new ServiceSequenceItemProvider(this);
		}

		return serviceSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.ServiceTransaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceTransactionItemProvider serviceTransactionItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.ServiceTransaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceTransactionAdapter() {
		if (serviceTransactionItemProvider == null) {
			serviceTransactionItemProvider = new ServiceTransactionItemProvider(this);
		}

		return serviceTransactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.InputPrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPrimitiveItemProvider inputPrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.InputPrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPrimitiveAdapter() {
		if (inputPrimitiveItemProvider == null) {
			inputPrimitiveItemProvider = new InputPrimitiveItemProvider(this);
		}

		return inputPrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.OutputPrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPrimitiveItemProvider outputPrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.OutputPrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPrimitiveAdapter() {
		if (outputPrimitiveItemProvider == null) {
			outputPrimitiveItemProvider = new OutputPrimitiveItemProvider(this);
		}

		return outputPrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.BFBType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BFBTypeItemProvider bfbTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.BFBType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBFBTypeAdapter() {
		if (bfbTypeItemProvider == null) {
			bfbTypeItemProvider = new BFBTypeItemProvider(this);
		}

		return bfbTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.FBD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FBDItemProvider fbdItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.FBD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFBDAdapter() {
		if (fbdItemProvider == null) {
			fbdItemProvider = new FBDItemProvider(this);
		}

		return fbdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.ST} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STItemProvider stItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.ST}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTAdapter() {
		if (stItemProvider == null) {
			stItemProvider = new STItemProvider(this);
		}

		return stItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.LD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDItemProvider ldItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.LD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDAdapter() {
		if (ldItemProvider == null) {
			ldItemProvider = new LDItemProvider(this);
		}

		return ldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Other} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherItemProvider otherItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Other}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherAdapter() {
		if (otherItemProvider == null) {
			otherItemProvider = new OtherItemProvider(this);
		}

		return otherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.Rung} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RungItemProvider rungItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.Rung}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRungAdapter() {
		if (rungItemProvider == null) {
			rungItemProvider = new RungItemProvider(this);
		}

		return rungItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.CFBType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CFBTypeItemProvider cfbTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.CFBType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCFBTypeAdapter() {
		if (cfbTypeItemProvider == null) {
			cfbTypeItemProvider = new CFBTypeItemProvider(this);
		}

		return cfbTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.DeviceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceTypeItemProvider deviceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.DeviceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceTypeAdapter() {
		if (deviceTypeItemProvider == null) {
			deviceTypeItemProvider = new DeviceTypeItemProvider(this);
		}

		return deviceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.ResourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceTypeItemProvider resourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.ResourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceTypeAdapter() {
		if (resourceTypeItemProvider == null) {
			resourceTypeItemProvider = new ResourceTypeItemProvider(this);
		}

		return resourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.BFBDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BFBDiagramItemProvider bfbDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.BFBDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBFBDiagramAdapter() {
		if (bfbDiagramItemProvider == null) {
			bfbDiagramItemProvider = new BFBDiagramItemProvider(this);
		}

		return bfbDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.cakefeed.CFBDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CFBDiagramItemProvider cfbDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.cakefeed.CFBDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCFBDiagramAdapter() {
		if (cfbDiagramItemProvider == null) {
			cfbDiagramItemProvider = new CFBDiagramItemProvider(this);
		}

		return cfbDiagramItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (identificationItemProvider != null) identificationItemProvider.dispose();
		if (versionInfoItemProvider != null) versionInfoItemProvider.dispose();
		if (applicationItemProvider != null) applicationItemProvider.dispose();
		if (fbNetworkItemProvider != null) fbNetworkItemProvider.dispose();
		if (deviceItemProvider != null) deviceItemProvider.dispose();
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (segmentItemProvider != null) segmentItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (fbItemProvider != null) fbItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (compilerInfoItemProvider != null) compilerInfoItemProvider.dispose();
		if (ififEventConnectionItemProvider != null) ififEventConnectionItemProvider.dispose();
		if (ififDataConnectionItemProvider != null) ififDataConnectionItemProvider.dispose();
		if (iffbEventConnectionItemProvider != null) iffbEventConnectionItemProvider.dispose();
		if (iffbDataConnectionItemProvider != null) iffbDataConnectionItemProvider.dispose();
		if (fbifEventConnectionItemProvider != null) fbifEventConnectionItemProvider.dispose();
		if (fbifDataConnectionItemProvider != null) fbifDataConnectionItemProvider.dispose();
		if (fbfbEventConnectionItemProvider != null) fbfbEventConnectionItemProvider.dispose();
		if (fbfbDataConnectionItemProvider != null) fbfbDataConnectionItemProvider.dispose();
		if (ifivDataConnectionItemProvider != null) ifivDataConnectionItemProvider.dispose();
		if (ivifDataConnectionItemProvider != null) ivifDataConnectionItemProvider.dispose();
		if (fbivDataConnectionItemProvider != null) fbivDataConnectionItemProvider.dispose();
		if (ivfbDataConnectionItemProvider != null) ivfbDataConnectionItemProvider.dispose();
		if (ivivDataConnectionItemProvider != null) ivivDataConnectionItemProvider.dispose();
		if (adapterConnectionItemProvider != null) adapterConnectionItemProvider.dispose();
		if (ifInputEventItemProvider != null) ifInputEventItemProvider.dispose();
		if (fbInputEventItemProvider != null) fbInputEventItemProvider.dispose();
		if (ifOutputEventItemProvider != null) ifOutputEventItemProvider.dispose();
		if (fbOutputEventItemProvider != null) fbOutputEventItemProvider.dispose();
		if (ifInputVarItemProvider != null) ifInputVarItemProvider.dispose();
		if (fbInputVarItemProvider != null) fbInputVarItemProvider.dispose();
		if (ifOutputVarItemProvider != null) ifOutputVarItemProvider.dispose();
		if (fbOutputVarItemProvider != null) fbOutputVarItemProvider.dispose();
		if (internalVarItemProvider != null) internalVarItemProvider.dispose();
		if (compilerItemProvider != null) compilerItemProvider.dispose();
		if (inputWithItemProvider != null) inputWithItemProvider.dispose();
		if (outputWithItemProvider != null) outputWithItemProvider.dispose();
		if (socketItemProvider != null) socketItemProvider.dispose();
		if (plugItemProvider != null) plugItemProvider.dispose();
		if (adapterTypeItemProvider != null) adapterTypeItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (serviceSequenceItemProvider != null) serviceSequenceItemProvider.dispose();
		if (serviceTransactionItemProvider != null) serviceTransactionItemProvider.dispose();
		if (inputPrimitiveItemProvider != null) inputPrimitiveItemProvider.dispose();
		if (outputPrimitiveItemProvider != null) outputPrimitiveItemProvider.dispose();
		if (bfbTypeItemProvider != null) bfbTypeItemProvider.dispose();
		if (fbdItemProvider != null) fbdItemProvider.dispose();
		if (stItemProvider != null) stItemProvider.dispose();
		if (ldItemProvider != null) ldItemProvider.dispose();
		if (otherItemProvider != null) otherItemProvider.dispose();
		if (rungItemProvider != null) rungItemProvider.dispose();
		if (cfbTypeItemProvider != null) cfbTypeItemProvider.dispose();
		if (deviceTypeItemProvider != null) deviceTypeItemProvider.dispose();
		if (resourceTypeItemProvider != null) resourceTypeItemProvider.dispose();
		if (bfbDiagramItemProvider != null) bfbDiagramItemProvider.dispose();
		if (cfbDiagramItemProvider != null) cfbDiagramItemProvider.dispose();
	}

}
