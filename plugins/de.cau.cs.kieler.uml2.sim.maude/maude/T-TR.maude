load T-ST
load TRANS

fmod T-TR is
	including TRANSITIONS .
	including T-ST .
	ops a1 a2 a3 a4 a5 a6 a7 a8 a9 a0 aF : -> Action [ctor] .
	ops e1 e2 e3 e4 e5 e6 e7 e8 e9 e0 : -> Event [ctor] .    
	
	ops ee0 ee1 ee2 ee3 ee4 ee5 ee6 ee7 : -> Event [ctor] .
	op allEvs : -> Events .
	eq allEvs =  ee0 ee1 ee2 ee3 ee4 ee5 ee6 ee7 .
	ops tr0 tr1 tr2 tr3 tr4 tr5 tr6 tr7 tr8 tr9 tr10 : -> ModTransition .	

	eq tr0 = SC ee1 Gd a3 a3 a3 SD RB .
	eq tr1 = SE ee1 Gd a1 a1 a1 SF RD .
	eq tr2 = SF ee2 Gd a2 a2 a2 SG RD .
	eq tr3 = SH ee2 Gd a2 a2 a2 SI RE .
	eq tr4 = SJ ee0 Gd a1 a1 a1 SK RC .
	eq tr5 = SK ee1 Gd a3 a3 a3 SL RC .
	eq tr6 = SL ee0 Gd a4 a4 a4 SM RC .
	eq tr7 = SB ee0 Gd a4 a4 a4 (SE, SH) RB .
	eq tr8 = (SG, SI) ee0 Gd a4 a4 a4 SD RB .

	eq tr9 = SH ee2 Gd a4 a4 a4 SI RE .
	eq tr10 = SA ee4 Gd a8 a8 a8 SA RA .
	
	ops t1 t2 t3 t4 t5 t6 t7 t8 t9 t0 : -> ModTransition .

	ops tt1 tt2 tt3 tt4 tt5 tt6 tt7 tt8 tt9 tt0 : -> ModTransition .
	eq tt0 = SC ee1 a3 SD RB .
	eq tt1 = SE ee1 a1 SF RD .
	eq tt2 = SF ee2 a2 SG RD .
	eq tt3 = SH ee2 a2 SI RE .
	eq tt4 = SJ ee0 a1 SK RC .
	eq tt5 = SK ee1 a3 SL RC .
	eq tt6 = SL ee0 a4 SM RC .
	eq tt7 = SB ee0 a4 (SE, SH) RB .
	eq tt8 = (SG, SI) ee0 a4 SD RB .
	eq tt9 = SH ee2 a4 SI RE .
 
    
	ops trHC trHCrestart : -> ModTransition .	
	eq trHC = SA ee3 Gd a9 a9 a9 (SHst, DHst) RA .
	eq trHCrestart = SA ee4 Gd a9 a9 a9 SA RA .

	ops trFE trFD : -> Transitions .
	eq trFD = SF ee4 Gd aF aF aF FD RD .
	eq trFE = SH ee0 Gd aF aF aF FE RE .
	
	op allTrans : -> Transitions .
	eq allTrans = tr0, tr1, tr2, tr3, tr4, tr5, tr6, tr7, tr8, tr10 .

	op allSTrans : -> Transitions .
	eq allSTrans = tt0, tt1, tt2, tt3, tt4, tt5, tt6, tt7, tt8, tt9 .
		
	op finAndHisTrans : -> Transitions .
	eq finAndHisTrans = allTrans, trHC, trFE, trFD, trHCrestart .
	
	ops cf1 cf2 cf3 cf4 cf5 : -> Verts .
	eq cf1 = SB, SJ, RA, SA, RB, RC .
	eq cf2 = SJ, SE, SH, RA, SA, RB, RC, SC, RD, RE .
	eq cf3 = SJ, SF, SH, RA, SA, RB, RC, SC, RD, RE .
	eq cf4 = SJ, SG, SI, RA, SA, RB, RC, SC, RD, RE .
	eq cf5 = SL, SG, SI, RA, SA, RB, RC, SC, RD, RE .


	ops trA0 trA1 trA2 trA3 trA4 trA5 trA6 trA7 trA8 : -> ModTransition .	

	eq trA0 = SC ee1 Gd a3 a3 a3 SD RB .
	eq trA1 = SE ee1 Gd a1 a1 a1 SF RD .
	eq trA2 = SF ee2 Gd a2 a2 a2 SG RD .
	eq trA3 = SH ee2 Gd a7 a7 a7 SI RE .
	eq trA4 = SJ ee0 Gd a1 a1 a1 SK RC .
	eq trA5 = SK ee1 Gd a3 a3 a3 SL RC .
	eq trA6 = SL ee0 Gd a1 a1 a1 SM RC .
	eq trA7 = SB ee0 Gd a4 a4 a4 (SE, SH) RB .
	eq trA8 = (SG, SI) ee0 Gd a4 a4 a4 SD RB .
		
	ops trB0 trB1 trB2 trB3 trB4 trB5 trB6 trB7 trB8 : -> ModTransition .	

	eq trB0 = SC ee1 Gd a3 a3 a3 SD RB .
	eq trB1 = SE ee1 Gd a1 a1 a1 SF RD .
	eq trB2 = SF ee2 Gd a2 a2 a2 SG RD .
	eq trB3 = SH ee2 Gd a2 a2 a2 SI RE .
	eq trB4 = SJ ee0 Gd a1 a1 a1 SK RC .
	eq trB5 = SK ee1 Gd a3 a3 a3 SL RC .
	eq trB6 = SL ee0 Gd a1 a1 a1 SM RC .
	eq trB7 = SB ee0 Gd a4 a4 a4 (SE, SH) RB .
	eq trB8 = (SG, SI) ee0 Gd a4 a4 a4 SD RB .

	ops trBsusp trBresume trBconfl trBconfl2 trBrest : -> ModTransition .	
	eq trBrest = SA ee4 Gd a9 a9 a9 SA RA .
	eq trBsusp = SA ee3 Gd a9 a9 a9 SUSP RA .
	eq trBresume = SUSP ee4 Gd a9 a9 a9 (SHst, DHst) RA .
	eq trBconfl = SE ee1 Gd (seq (a1 a2)) a1 a1 SG RD .
	eq trBconfl2 = SH ee2 Gd a7 a7 a7 SI RE .

	ops allTransA allTransHA allTransB allTransFHA : -> Transitions .
	eq allTransA = trA1, trA2, trA3, trA4, trA5, trA6, trA7 .
	eq allTransHA = trA1, trA2, trA3, trA4, trA5, trA6, trA7, trA8, trHC, trHCrestart .
	eq allTransB = trB0, trB3, trB4, trB5, trB6, trB7, trB8, trBconfl, trBrest .
	eq allTransFHA = allTransA, trHC, trFE, trFD, trHCrestart .
	
	
	ops cTR0 cTR1 cTR2 cTR3 cTR4 cTR5 cTR6 cTR7 cTR8 cTR9 cTR10 : -> ModTransition .	
	eq cTR0 = cSA ee0 a0 cSD cR1 .
	eq cTR1 = cSA ee0 a1 cSD cR1 .
	eq cTR2 = cSB ee0 a2 cSE cR2 .
	eq cTR3 = cSI ee0 a3 cSH cR0 .
	eq cTR4 = cSC ee0 a4 cSF cR3 .
	eq cTR5 = cSC ee0 a5 cSF cR3 .
	eq cTR6 = cSG ee0 a6 cSH cR0 .
	eq cTR7 = cSX ee0 a7 cSY cRand .
	op allCTR : -> Transitions .
	eq allCTR = cTR0, cTR1, cTR2, cTR3, cTR4, cTR5, cTR6, cTR7 .
	
	ops TR1 TR2 TR3 TR4 TR5 TR6 : -> ModTransition . 
	
endfm
***(  red prettyTrans(getDeepestSource (remLowPrio allCTR)) .
  red prettyTrans(getDeepestScope (remLowPrio allCTR)) .
  red prettyTrans(getConflSets(getDeepestScope (remLowPrio allCTR))) . 
  red prettyTrans(allIntoAll (cTR0, cTR1) (mm(cTR2),mm(cTR3))) .
  red prettyTrans(allIntoAll (cTR0, cTR1) empty) .
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) mm(cTR2)) .
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) (mm(cTR2, cTR3),mm(cTR4))) .
  red prettyTrans(allSetsIntoAll (mm(cTR0, cTR1),mm(cTR4, cTR5)) empty) .
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) empty) .
 )***
 red prettyTrans(getConflSets(getDeepestScope (remLowPrio allCTR))) .
 red prettyTrans((remLowPrio allCTR) \(getDeepestScope (remLowPrio allCTR))) .
 red prettyTrans(getDeepestScope ((remLowPrio allCTR) \(getDeepestScope (remLowPrio allCTR)))) .
 red prettyTrans(getConflSets cTR3) .
 red prettyTrans(getConflSets((remLowPrio allCTR) \(getDeepestScope (remLowPrio allCTR)))) .
 red prettyTrans(getConflSets(getDeepestScope ((remLowPrio allCTR) \(getDeepestScope (remLowPrio allCTR))))) .
 red prettyTrans(allSetsIntoAll getConflSets(getDeepestScope (remLowPrio allCTR)) empty) .  
  red prettyTrans(fireIter (remLowPrio allCTR) empty) . 
***(
  red prettyTrans(allSetsIntoAll(getConflSets(getDeepestScope (remLowPrio allCTR))) (empty).Menge) . 
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) (empty).Menge) .
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) mm(cTR2)) .
  red prettyTrans(intoAll cTR2 mm(cTR0, cTR1)) .
  red prettyTrans(allSetsIntoAll mm(cTR0, cTR1) (cTR6).Menge) .

)***
***(
 red prettyTrans(allCTR) .
 red prettyTrans(remLowPrio allCTR) .

red prettyTrans allTrans .
red noHigherPrioSC tr0 tr3 .
red noHigherPrioSC tr3 tr0 .
red noHigherPrioUML tr0 tr3 .
red noHigherPrioUML tr3 tr0 .
red prettyTrans (enabled cf1 ee0 allTrans) .
red prettyTrans (enabled cf2 ee0 allTrans) .
red prettyTrans (enabled cf2 ee1 allTrans) .
red prettyTrans (enabled cf3 ee2 allTrans) .
)***

