fmod SMGETTER is
  including eclipseInterface .
  including COMPOUNDTRANSITIONSSYNTAX .
  including VERTSSYNTAX .
  including STATEMACHINESYNTAX .
  including STATE-DEFAULT .
  including DEEP-DEFAULT .
  including SHALLOW-DEFAULT .
  including HISTORY-CONF .
  including STATE-ACTION .
  including SET{Default} * (sort Set{Default} to Defaults, sort NeSet{Default} to NeDefaults) .
  including SET{DeepDefault} * (sort Set{DeepDefault} to DeepDefaults, sort NeSet{DeepDefault} to NeDeepDefaults) .
  including SET{ShallowDefault} * (sort Set{ShallowDefault} to ShallowDefaults, sort NeSet{ShallowDefault} to NeShallowDefaults) .
  including SET{HistoryConf} * (sort Set{HistoryConf} to HistoryConfs, sort NeSet{HistoryConf} to NeHistoryConfs) .
  including SET{EntryAction} * (sort Set{EntryAction} to EntryActions, sort NeSet{EntryAction} to NeEntryActions) .
  including SET{ExitAction} * (sort Set{ExitAction} to ExitActions, sort NeSet{ExitAction} to NeExitActions) .


***  vars shn : HistShallowName .
***  vars dhn : HistDeepName .
  vars D smDefaults : Defaults .
  vars d : Default .
  vars SH : ShallowDefaults .
  vars sh : ShallowDefault .
  vars DH : DeepDefaults .
  vars dh : DeepDefault .
  vars  ENA : EntryActions .
  vars  EXA : ExitActions .
  vars  ena : EntryActions .
  vars  exa : ExitActions .   
  vars T T1 T2 F : Compoundtransitions .
  vars t t1 t2 : Compoundtransition .
***  vars c : CompositeName .
  var str : String .
  vars HC : HistoryConfs .
  vars hc : HistoryConf .
  vars e e2 : Event .
  vars g g2 : Guard .
  vars a : Action .
  vars A af aj a2 af2 aj2 actions : Actions .
  var sm : StateMachine .
  vars S S2 : Verts .
  vars hst s s2 s3 ds1 ds2 : State .
  vars R : Verts .
  vars r r2 r3 : Region .
  vars V V2 src tgt C src2 tgt2 smAllVerts curVerts tgtStates curVert : Verts .  
  vars v v2 lreg lreg2 : Vert .
  
  op $$getEntryAc__ : EntryActions Vert -> Action [format (g o d d)] .
  eq $$getEntryAc ((entryAc v a), ENA) v = a .
  eq $$getEntryAc ENA v = nil [owise] .  
      
  op $$getExitAc__ : ExitActions Vert -> Action [format (g o d d)] .
  eq $$getExitAc ((exitAc v a), EXA) v = a .
  eq $$getExitAc EXA v = nil [owise] .  
   
  op getSMVerts : -> Verts .
  eq getSMVerts = getVerts SMINT .
  
  op getVerts_ : StateMachine -> Verts .
  eq getVerts(V D SH DH ENA EXA T) = V .

  op getTrans_ : StateMachine -> Compoundtransitions .
  eq getTrans(V D SH DH ENA EXA T) = T .

  *** get default states of regions from default relation
  op getAlldefaults_ : StateMachine -> Defaults .
  eq getAlldefaults(V D SH DH ENA EXA T) = D .
  
  *** get default states of regions from default relation
  op getAllShallowdefaults_ : StateMachine -> ShallowDefaults .
  eq getAllShallowdefaults(V D SH DH ENA EXA T) = SH .

  *** get default states of regions from default relation
  op getAllDeepdefaults_ : StateMachine -> DeepDefaults .
  eq getAllDeepdefaults(V D SH DH ENA EXA T) = DH .

      
  *** get default states of regions from default relation
  op getAllEntry_ : StateMachine -> EntryActions .
  eq getAllEntry(V D SH DH ENA EXA T) = ENA .
 
  *** get default states of regions from default relation
  op getDefault __ : Verts Defaults -> Verts [format (g o d n)] .
  eq getDefault R empty = empty .
  eq getDefault empty D = empty .
  eq getDefault r (r default v) = v .
  ceq getDefault r (r2 default v) = empty if r =/= r2 .
  eq getDefault r (d ,  D) = (getDefault r d) ,  (getDefault r D) .
  eq getDefault (r ,  R) D = (getDefault r D) ,  (getDefault R D) .
 
    *** get the history default state of 
  op getDeepDefault __ : Region DeepDefaults -> State .
  ceq getDeepDefault r (DH ,  (r2 deepdefault v)) = getDeepDefault r DH
    if r =/= r2 .
  eq getDeepDefault r (DH ,  (r deepdefault v)) = v .

  op getShallowDefault __ : Region ShallowDefaults -> State .
  eq getShallowDefault r (SH ,  (r shallowdefault v)) = v .
  ceq getShallowDefault r (SH  ,   (r2 shallowdefault v)) = 
    getShallowDefault r SH if r =/= r2 .
  eq getShallowDefault r (r shallowdefault v) = v .
  eq getShallowDefault r (r2 shallowdefault v) = empty [owise] .

  op genDeepTgts__ : State Verts -> Verts .
  ceq genDeepTgts v V = $genDeepTgts (getSubVerts v V) 
        if |(getSubVerts v V)| > 0 . 
  eq genDeepTgts v V = empty [owise] .

  op $genDeepTgts_ : Verts -> Verts .
  eq $genDeepTgts (v, V) = ($$genDeepTgts v), ($genDeepTgts V) .
  eq $genDeepTgts empty = empty [owise] .

  op $$genDeepTgts_ : Verts -> Vert .
  eq $$genDeepTgts v = v : H* .
  
  
endfm
