fmod VERTS is
  
  including VERTSSYNTAX .
  including SMGETTER .
  including STRING .

  vars v v2 v3 : Vert .
  vars V V2 : Verts .
  vars id : VertID .
  vars ids : VertIDs .
  vars s : State .
  vars r : Region .
  vars name : String .
  
 
  op len _ : Vert -> Nat .
  eq len (v : id) = (len v) + 1 . 
***  eq len id = 1 .
  eq len (root id) = 1 .
  
  *** comparelen x Y : return the length of a vert y in Y where x is
  *** prefix of y
  op comparelen__ : Vert Verts -> Nat [memo] .
  ceq comparelen v2 (v, V) = len v if prefix v2 v .
  eq comparelen v2 (v, V) = comparelen v2 V [owise] .
  eq comparelen v2 empty = 0 .
  
  
  *** prefix x y: is x prefix of y?
  op prefix__ : Vert Vert -> Bool [memo] .
  eq prefix v v = true .
  ceq prefix v v2 = prefix v (start v2) if (len v) < (len v2) .
  eq prefix v v2 = false [owise] .
  
  *** downset x: returns all Statenames that are prefix of x  
  op downset_ : Verts -> Verts [memo] .
  eq downset empty = empty .
  eq downset (v, V) = v, downset(start v), (downset V) .
  eq downset root(id) = root(id) .

  *** restricted to the statemachines verts given in the second argument
  *** upset y X: return all vertices x in X where y is prefix of x 
  op upset__ : Vert Verts -> Verts [memo] .
  ceq upset v (v2, V) = v2, (upset v V) if prefix v v2 .  
  eq upset v empty = empty .    
  eq upset v (v2, V) = upset v V [owise] .  

  *** getSubStates x Y: get all substates of x in Y .
  op getSubStates__ : Region Verts -> Verts  [format (g r c n) memo] .
  ceq getSubStates r (v, V) = v,  getSubStates r V
    if (r == start v) .
  ceq getSubStates r (v, V) = getSubStates r V
    if (r =/= start v) .
  eq getSubStates r empty = empty .

  *** getSubRegions x Y: get all subregions of x in Y .
  op getSubRegions__ : State Verts -> Verts [memo] .
  ceq getSubRegions s (v, V) = v,  getSubRegions s V
    if (s == start v) .
  ceq getSubRegions s (v, V) = getSubRegions s V
    if (s =/= start v) .
  eq getSubRegions s empty = empty .

  op getSubVerts_ : Vert -> Verts .
  eq getSubVerts v = getSubs v getSMVerts .
   
  *** getSubRegions x Y: get all subregions of x in Y .
  op getSubs__ : Vert Verts -> Verts .
  ceq getSubs v V = (getSubRegions v V) if typeState v .
  ceq getSubs v V = empty if typeFinal v .
  eq getSubs v V = (getSubStates v V) [owise] .
    
  op getsub __ : Vert Verts -> Vert [memo] .
  ceq getsub v (v2 ,  V) = v2
    if v == start v2 .
  eq getsub v (v2 ,  V) = getsub v V [owise] .
  ceq getsub v v2 = v2
    if v == start v2 .
  eq getsub v v2 = getsub v (start v2) [owise] .

  *** get the subsverts of v (determined with all vertices V) which are superverts of a state in V2 
  op getSubStToTgt___ : Vert Verts Verts -> Verts .
  eq getSubStToTgt v V2 V = intersection((getSubs v V), (downset V2)) .
  
    *** functions determining the type (state, final state, region and 
  ***  history) of a given state
  op typeFinal_ : State -> Bool .
  eq typeFinal (v : (F name)) = true .
  eq typeFinal v = false [owise] .

  op typeState_ : Vert -> Bool .
  eq typeState (v : (C name)) = true .
  eq typeState v = false [owise] .
  
  op typeAnyState_ : Verts -> Bool .
  eq typeAnyState (v, V) = ((typeFinal v) or (typeState v)) and (typeAnyState V) .   
  eq typeAnyState empty = true .
     
  op typeRegion_ : Vert -> Bool .
  eq typeRegion root(R name) = true .
  eq typeRegion (v : (R name)) = true .  
  eq typeRegion v = false [owise] .

  op typeHistory_ : Vert -> Bool .
  eq typeHistory (v : H) = true .
  eq typeHistory (v : H*) = true .
  eq typeHistory v = false [owise] .
  
  op containsSuper__ : Verts Verts -> Bool .
  eq containsSuper (v, V) V2 = ($containsSuper v V2) and (containsSuper V  V2) .
  eq containsSuper empty V = true .

  op $containsSuper__ : Vert Verts -> Bool .
  eq $containsSuper v (v2, V) = ((prefix v2 v) and v =/= v2) or ($containsSuper v  V) .
  eq $containsSuper v empty = false .
  
  op orthogonal__ : Vert Vert -> Bool .
  eq orthogonal v v2 = not(
  	(v2 in (downset v)) or 
  	(v in (downset v2))) . 


  
endfm
