fmod VERTEXSYNTAX is
  sort Vert .
  sort VertID .
endfm
view Vert from TRIV to VERTEXSYNTAX is
  sort Elt to Vert .
endv
view VertID from TRIV to VERTEXSYNTAX is
  sort Elt to VertID .
endv

fmod VERTSSYNTAX is
  
  including VERTEXSYNTAX .
  including STRING .
  including SET{Vert} * (sort Set{Vert} to Verts, sort NeSet{Vert} to NeVerts) .
  including SET{VertID} * (sort Set{VertID} to VertIDs, sort NeSet{VertID} to NeVertIDs) .

  sorts 
  	RegionID 
  	StateID 
***  	DefaultID 
  	CompositeID 
  	FinalID 
    HistDeepID 
    JoinID
    ForkID
    ChoiceID 
    HistShallowID .
  subsorts 
***  	DefaultID 
  	CompositeID 
  	FinalID 
    HistDeepID 
    JoinID
    ForkID
    ChoiceID 
    HistShallowID < StateID .
  subsorts RegionID StateID < VertID .
 
  sorts 
  	Region 
  	State
***  	Default 
  	Composite 
  	Final 
    HistDeep 
    Join
    Fork
    Choice 
    HistShallow .
  subsorts 
***  	Default 
  	Composite 
  	Final 
    HistDeep 
    Join
    Fork
    Choice 
    HistShallow < State .

  subsort State Region < Vert .
    
  op F_ : String -> FinalID [ctor] .
  op C_ : String -> CompositeID [ctor] .
  op R_ : String -> RegionID [ctor] .
  op join_ : String -> JoinID [ctor] .
  op fork_ : String -> ForkID [ctor] .  
  op choice_ : String -> ChoiceID [ctor] .
***  op D : -> DefaultID [ctor] .
  op H : -> HistShallowID [ctor] .
  op H* : -> HistDeepID [ctor] .
  op root_ : RegionID -> Region [ctor] .
  op _:_ : Composite RegionID -> Region [ctor] .
  op _:_ : Region CompositeID -> Composite [ctor] .
  op _:_ : Region FinalID -> Final [ctor] .
***  op _:_ : Region DefaultID -> Default [ctor] .
  op _:_ : Region HistShallowID -> HistShallow [ctor] .
  op _:_ : Region JoinID  -> Join [ctor] .
  op _:_ : Region ForkID -> Fork [ctor] .
  op _:_ : Region ChoiceID -> Choice [ctor] .
  
  vars v v2 : Vert .
  vars V V2 : Verts .
  vars id : VertID .
  vars ids : VertIDs .

  *** parameter may be a set of vertices for every one the containing vertex is returned
  op start_ : Verts -> Verts .
  eq start (v : id) = v . 
  eq start (root id) = empty .  
  eq start (v, V) = (start v) , (start V) .
  
  *** explain
  op last_ : Verts -> VertIDs .
  eq last (v : id) = id . 
  eq last (root id) = id . 
  eq last (v, V) = (last v) , (last V) .
   
  *** getSubVerts x Y: get all subregions of x in Y .
  op getSubVerts__ : State Verts -> Verts [memo] .
  ceq getSubVerts v (v2, V) = v2,  getSubVerts v V
    if (v == start v2) .
  ceq getSubVerts v (v2, V) = getSubVerts v V
    if (v =/= start v2) .
  eq getSubVerts v empty = empty .
   
   
   
endfm
