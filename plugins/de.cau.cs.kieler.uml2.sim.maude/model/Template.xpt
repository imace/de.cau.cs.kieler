«IMPORT uml»

«EXTENSION Extensions»

«DEFINE main FOR Model»
   «EXPAND sm FOREACH packagedElement»
«ENDDEFINE»

«DEFINE main FOR Package»
   «EXPAND sm FOREACH packagedElement»
«ENDDEFINE»


	
«DEFINE sm FOR StateMachine»
	«FILE ((String)(GLOBALVAR modelname)) +".maude"»
	
*** load ../maude/model-checker.maude
load «((String)(GLOBALVAR maudebasecode))»STATES
load «((String)(GLOBALVAR maudebasecode))»EVENTS
load «((String)(GLOBALVAR maudebasecode))»ACTIONS
load «((String)(GLOBALVAR maudebasecode))»TRANS
load «((String)(GLOBALVAR maudebasecode))»SM

fmod eclipseInterface is
 including STATEMACHINE .
 including TRANSITIONS .
 including STATES .
*** // Events //
  ops «FOREACH this.getTriggerEvents() AS event SEPARATOR " "-»«event-»«ENDFOREACH-» : -> Event .
  op allEvents : -> Events .

*** // allActions //
«REM»ToDo: no double entries, no nils? nil == falsche transitionen, fehlende beschriftung«ENDREM»	
  ops «FOREACH this.getAction() AS action SEPARATOR " "-»«action-»«ENDFOREACH-» : -> Action .

***// States //
  «IF  this.getStates().size > 0-»
  ops «FOREACH this.getStates() AS state SEPARATOR " "-»«((State)state).getId()-»«ENDFOREACH-» : -> ModState .	
	«FOREACH this.getMaudeStates() AS state SEPARATOR " .\n"-»«state-»«ENDFOREACH-» .	
  «ENDIF-»
  	
«REM»also generate history and deep history states«ENDREM» 
***// PseudoStates //
  «IF  this.getHistoryStates().size > 0-»
  ops «FOREACH this.getHistoryStates() AS pseudostate SEPARATOR " "-»«((Pseudostate)pseudostate).getId()-»«ENDFOREACH-» : -> ModState .	
	«FOREACH this.getHistoryMaudeStates() AS state SEPARATOR " .\n"-»«state-»«ENDFOREACH-» .
  «ENDIF-»
  	
***// Regions //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«region.getId()-»«ENDFOREACH-» : -> Region .
	«FOREACH this.getMaudeRegions() AS region SEPARATOR " .\n"-»«region-»«ENDFOREACH-» .
***// allVerts //
  op allVerts : -> Verts .
  eq allVerts = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«region.getId()-»«ENDFOREACH-» , «FOREACH this.getStates() AS state SEPARATOR ", "-»«((State)state).getId()-»«ENDFOREACH-» .
	
***// defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"def"+region.getId()-»«ENDFOREACH-» : -> Default .
  «FOREACH this.getInitialTransitions() AS transition SEPARATOR ""-»«transition.genDefault()-»«ENDFOREACH-»
  op allDefs : -> Defaults .
  eq allDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"def"+region.getId()-»«ENDFOREACH-» .
  
***// deep defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"dDef"+region.getId()-»«ENDFOREACH-» : -> DeepDefault .
  «FOREACH this.getDHDTransitions() AS transition SEPARATOR ""-»«transition.genDHDefault()-»«ENDFOREACH-»
  op allDHDefs : -> DeepDefaults .
  eq allDHDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"dDef"+region.getId()-»«ENDFOREACH-» .

***// shallow defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"sDef"+region.getId()-»«ENDFOREACH-» : -> ShallowDefault .
  «FOREACH this.getSHDTransitions() AS transition SEPARATOR ""-»«transition.genSHDefault()-»«ENDFOREACH-»
  
  op allSHDefs : -> ShallowDefaults .
  eq allSHDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"sDef"+region.getId()-»«ENDFOREACH-» .

*** Transitions
«REM» First calculate psudostates (Fork / Join) for complex transition ids «ENDREM»
«clearDoneVertices()-»
«FOREACH this.getForkJoin() AS pseudostate-»
   «IF !pseudostate.isDone("OUTGOING")-»
   «ignore(pseudostate.getPseudoSourceVertices().toString())-»
   «addPseudostate(pseudostate)-»
   «ENDIF-»
«ENDFOREACH-»
«REM»No getPseudostates() can be queried«ENDREM»
*** ToDo: Add trigger statt noevent!!
  ops «FOREACH this.getTransitions().select(e|e.isConsidered())  AS transition SEPARATOR "  "-»tr«transition.getId()-»«ENDFOREACH-»
      «FOREACH getPseudostates()  AS pseudostate SEPARATOR " "-»tr«pseudostate.getId()-»«ENDFOREACH-»
      : -> ModTransition .
  
  «FOREACH this.getTransitions().select(e|e.isConsidered()) AS transition SEPARATOR '\n'-»«transition.genMaude()-»«ENDFOREACH-»
  «REM» We now work thru the Fork and Join nodes. For all CCs ending with non Fork/Join nodes, we just construct ONE combined transition. «ENDREM»
  «resetPseudostates()-»
  «REM»Clear marked vertices«ENDREM»
  «clearDoneVertices()-»
  «FOREACH this.getForkJoin() AS pseudostate SEPARATOR '\n'-»
   «IF !pseudostate.isDone("OUTGOING")-»
   eq tr«pseudostate.getId()-» = («FOREACH pseudostate.getPseudoSourceVertices() AS source SEPARATOR ','-»«source.getId()-»«ENDFOREACH-») «getComplexTransitionInformation("TRIGGER").get(0)» «getComplexTransitionInformation("GUARD").get(0)» «getComplexTransitionInformation("ACTION").get(0)» skip skip («FOREACH pseudostate.getPseudoTargetVertices() AS target SEPARATOR ','-»«target.getId()-»«ENDFOREACH-») «getLastRootRegion().getId()-» . «resetLastRootRegion()-»
   «addPseudostate(pseudostate)-»
   «ENDIF-»
  «ENDFOREACH-»
  
  op allTrans : -> Transitions .
  eq allTrans = «FOREACH this.getTransitions().select(e|e.isConsidered())  AS transition SEPARATOR ",  "-»tr«transition.getId()-»«ENDFOREACH-»
  				«IF getPseudostates().size > 0-»,«ENDIF-»
                «FOREACH getPseudostates()  AS pseudostate SEPARATOR ",  "-»tr«pseudostate.getId()-»«ENDFOREACH-» .


***/// A state machine consits of Vertices Defaultsstatesfunction ShallowDefaultstatesfunction DeepDefaultstatesfunction EntryActionsfunction ExitActionsFunction Transitions 
  op SMINT : -> StateMachine .
  ***// ToDo: add entry/exit actions//
  eq SMINT = (SM allVerts allDefs allSHDefs allDHDefs (empty).EntryActions (empty).ExitActions allTrans) .

endfm

«REM» state machine definition ends here, following the Eclipse interface module referenced by maude core step sem «ENDREM»


load «((String)(GLOBALVAR maudebasecode))»STEPSEM

mod INIT is
	including STEPSEM .
	
	vars msst mastate : MState .
	vars V V2 : Verts .
	var ac ac2 : Actions .
	var T : Transitions .
	var ES : EventSS .
	var mode : String .
	vars HC : HistoryConfs .
	
	op isDone_ : MState -> Bool .
	eq isDone (maState mode ($doneC V HC) empty) = true .
	eq isDone msst = false [owise] .
endm

***(
set break on .
break select finishedRTCESINT discardFSetESINT .
)***

***(
#####################################################
##          Interface     for     Eclipse          ##        
#####################################################
search (maState "UML" ($stableC prettyVerts(<Konfiguration>) prettyHc(<HistoryKonfiguration>)) <Events>) =>* mastate such that isDone mastate .

- <Konfiguration>: eine durch "," getrennte Menge von Regionen und States. Diese muss den Anforderungen im Standard entsprechen.
  z.B: Rroot, Csusp (aus Test.maude)
- <HistoryKonfiguration>: kann erstmal empty sein
- <Events>: eine durch "," getrennte Menge von Events die abgearbeitet werden soll

(Rroot = R-990928836 , Csusp = susp441237549)
search (maState "UML" ($stableC (prettyVerts (R-990928836 , susp441237549)) empty) res) =>* mastate such that isDone mastate .
multistep
search (maState "UML" ($stableC (prettyVerts (R-990928836 , susp441237549)) empty) (res, ee1)) =>* mastate such that isDone mastate .

search (maState "UML" ($stableC (prettyVerts (Rroot, Csusp)) empty) res) =>* mastate such that isDone mastate .
)***

	«ENDFILE»
«ENDDEFINE»


«REM» needed else branch - should not be taken but should not have any effect «ENDREM»
«DEFINE sm FOR PackageableElement»
«ENDDEFINE»

«REM» needed else branch - should not be taken but should not have any effect «ENDREM»
«DEFINE init FOR PackageableElement»
«ENDDEFINE»
