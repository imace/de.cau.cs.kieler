import uml;

// ================================================================================================
// Additional restrictions for Maude simulation of UML state machine diagrams

// All transitions that originate from initial nodes must not have a trigger
context Transition if (this.source.metaType.toString().endsWith("Pseudostate") && ((Pseudostate)this.source).kind.toString().matches("initial")) 
WARNING "MAUDE: Initial transitions should not have a trigger or action (these are ignored)! (transition from "+this.source.name+ " to " + this.target.name + ")" :
  (name == null || name.matches(""));

// For all transitions that
// 1. do not originate from initial nodes AND
// 2. do not originate/target from/to forks nodes AND
// 3. do not originate/target from/to join nodes
// Check if the transition trigger is empty!
context Transition if ((!this.source.metaType.toString().endsWith("Pseudostate") && !this.target.metaType.toString().endsWith("Pseudostate")) 
                       || ((this.source.metaType.toString().endsWith("Pseudostate") 
                           && !((Pseudostate)this.source).kind.toString().matches("initial") 
                           && !((Pseudostate)this.source).kind.toString().matches("fork") 
                           && !((Pseudostate)this.source).kind.toString().matches("join"))
                       	 && (this.target.metaType.toString().endsWith("Pseudostate") 
                           && !((Pseudostate)this.source).kind.toString().matches("fork") 
                           && !((Pseudostate)this.source).kind.toString().matches("join")) )) 
ERROR "MAUDE: Transitions should always have a trigger! (transition from "+this.source.name+ " to " + this.target.name + ")" :
  (name != null &&  name.contains("/") && (name.split("/").get(0)).length > 0);

// States should have a name
context State 
WARNING "MAUDE: States should have a name!" :
  (name != null && !name.matches(""));

	