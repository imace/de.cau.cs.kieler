// M2M-transformation from the KGraph to GraphML

import kgraph;
import graphml;

// workaround
Void callStringMethod(Object instance, String methodName, String param):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.callStringMethod(java.lang.Object, java.lang.String, java.lang.String)
;

Void setId(Object obj, String id):
	callStringMethod(obj, "setId", id)
;

Void setSource(Object obj, String id):
	callStringMethod(obj, "setSource", id)
;

Void setTarget(Object obj, String id):
	callStringMethod(obj, "setTarget", id)
;

Void setName(Object obj, String id):
	callStringMethod(obj, "setName", id)
;

Void setSourceport(Object obj, String id):
	callStringMethod(obj, "setSourceport", id)
;

Void setTargetport(Object obj, String id):
	callStringMethod(obj, "setTargetport", id)
;

String generateName(String generatorName, String prefix):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.generateName(java.lang.String, java.lang.String)
;

// generates an id for a node
String generateNodeId():
	generateName("node", "n")
;

// generates an id for an edge
String generateEdgeId():
	generateName("edge", "e")
;

// generates an id for a port
String generatePortId():
	generateName("port", "p")
;

// the entry point for the transformation
create graphml::DocumentRoot transform(KNode node):
	let graphmlRoot = new graphml::GraphmlType:
	let graph = transformGraph(node):
	this.setGraphml(graphmlRoot) ->
	graphmlRoot.graph.add(graph)
;

// transforms the graph
create graphml::GraphType transformGraph(KNode node):
	this.setEdgedefault(graphml::GraphEdgedefaultType::directed) ->
	node.children.transformNode(this) ->
	node.children.transformNodeEdges(this)
;

// transforms a node
Void transformNode(KNode node, graphml::GraphType parent):
	let graphmlNode = getNode(node):
	parent.node.add(graphmlNode) ->
	node.ports.transformPort(graphmlNode) ->
	(if node.children.size > 0 then
		(let graph = transformGraph(node):
		graphmlNode.setGraph(graph)))
;

// returns the graphml counterpart for the given kgraph node
create graphml::NodeType getNode(KNode node):
	this.setId(getId(node))
;

// transforms a port
Void transformPort(KPort port, graphml::NodeType node):
	node.port.add(getPort(port))
;

// returns the graphml counterpart for the given kgraph port
create graphml::PortType getPort(KPort port):
	this.setName(getId(port))
;

// transforms all the edges of a node
Void transformNodeEdges(KNode node, graphml::GraphType parent):
	node.outgoingEdges.transformEdge(parent)
;

// transforms an edge
Void transformEdge(KEdge edge, graphml::GraphType parent):
	let sourceId = getId(edge.source):
	let targetId = getId(edge.target):
	let graphmlEdge = getEdge(edge):
	//graphmlEdge.setDirected(false) ->// hard to decide
	graphmlEdge.setSource(sourceId) ->
	graphmlEdge.setTarget(targetId) ->
	(if edge.sourcePort != null then graphmlEdge.setSourceport(getId(edge.sourcePort))) ->
	(if edge.targetPort != null then graphmlEdge.setTargetport(getId(edge.targetPort))) ->
	parent.edge.add(graphmlEdge)
;

create graphml::EdgeType getEdge(KEdge edge):
	this.setId(getId(edge))
;

// returns the id associated with the node
cached String getId(KNode node):
	generateNodeId()
;

// returns the id associated with the edge
cached String getId(KEdge edge):
	generateEdgeId()
;

// returns the id associated with the port
cached String getId(KPort port):
	generatePortId()
;