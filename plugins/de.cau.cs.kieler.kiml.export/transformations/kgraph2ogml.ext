// M2M-transformation from the KGraph to OGML

import kgraph;
import ogml;
import klayoutdata;

// workaround
Void callStringMethod(Object instance, String methodName, String param):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.callStringMethod(java.lang.Object, java.lang.String, java.lang.String)
;

Void setId(Object obj, String id):
	callStringMethod(obj, "setId", id)
;

Void setIdRef(Object obj, String idRef):
	callStringMethod(obj, "setIdRef", idRef)
;

Void setContent(Object obj, String content):
	callStringMethod(obj, "setContent", content)
;

String generateName(String generatorName, String prefix):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.generateName(java.lang.String, java.lang.String)
;

KShapeLayout getShapeLayout(KNode node):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.getShapeLayout(de.cau.cs.kieler.core.kgraph.KNode)
;

KEdgeLayout getEdgeLayout(KEdge node):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.getEdgeLayout(de.cau.cs.kieler.core.kgraph.KEdge)
;

Void setShapeBounds(ogml::ShapeType1 shapeType, KShapeLayout shapeLayout):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.ogmlSetShapeBounds(net.ogdf.ogml.ShapeType1, de.cau.cs.kieler.kiml.klayoutdata.KShapeLayout)
;

// generates an id for a node
String generateNodeId():
	generateName("node", "n")
;

// generates an id for an edge
String generateEdgeId():
	generateName("edge", "e")
;

// generates an id for a label
String generateLabelId():
	generateName("label", "l")
;

// the entry point for the transformation
create ogml::DocumentRoot transform(KNode node, Boolean layoutInformation):
	let ogmlRoot = new ogml::OgmlType:
	let graph = new ogml::GraphType:
	let structure = transformGraph(node):
	this.setOgml(ogmlRoot) ->
	ogmlRoot.setGraph(graph) ->
	graph.setStructure(structure) ->
	(if layoutInformation then
		(let layout = transformLayout(node):
		graph.setLayout(layout)))
;

// transforms the structure of the graph
create ogml::StructureType transformGraph(KNode node):
	node.children.transformTopNode(this) ->
	node.children.transformEdgesNodeWalker(this)
;

// transforms a top-level node
Void transformTopNode(KNode node, ogml::StructureType structure):
	let ogmlNode = getNode(node):
	structure.node.add(ogmlNode) ->
	node.children.transformNode(ogmlNode)
;

// transforms a node that is not a top-level node
Void transformNode(KNode node, ogml::NodeType parent):
	let ogmlNode = getNode(node):
	parent.node.add(ogmlNode) ->
	node.children.transformNode(ogmlNode)
;

// returns the ogml counterpart for the given kgraph node
create ogml::NodeType getNode(KNode node): 
	(if node.label.text.length > 0 then
		(let label = new LabelType:
		label.setId(getId(node.label)) ->
		label.setContent(node.label.text) ->
		this.label.add(label))) ->
	this.setId(getId(node))
;

// recursively transforms all edges
Void transformEdgesNodeWalker(KNode node, ogml::StructureType structure):
	node.outgoingEdges.transformEdge(structure) ->
	node.children.transformEdgesNodeWalker(structure)		
;

// transforms an edge
Void transformEdge(KEdge edge, ogml::StructureType structure):
	let sourceId = getId(edge.source):
	let targetId = getId(edge.target):
	let ogmlEdge = getEdge(edge):
	let source = new ogml::SourceTargetType:
	let target = new ogml::SourceTargetType:
	source.setIdRef(sourceId) ->
	target.setIdRef(targetId) ->
	ogmlEdge.source.add(source) ->
	ogmlEdge.target.add(target) ->
	edge.labels.transformEdgeLabel(ogmlEdge) ->
	structure.edge.add(ogmlEdge)
;

// transforms an edge label
Void transformEdgeLabel(KLabel label, ogml::EdgeType edge):
	(if label.text.length > 0 then
		(let ogmlLabel = new ogml::LabelType:
		ogmlLabel.setContent(label.text) ->
		edge.label.add(ogmlLabel)))
;

// transforms the layout information
create ogml::LayoutType transformLayout(KNode graph):
	let styles = new ogml::StylesType:
	this.setStyles(styles) ->
	graph.children.transformNodeLayout(styles, 0.0, 0.0)
;

// transforms the node layout information and also the layout information
// of outgoing edges
Void transformNodeLayout(KNode node, ogml::StylesType styles, Real xOffset, Real yOffset):
	let shapeLayout = node.getShapeLayout():
	let nodeStyle = new ogml::NodeLayoutType:
	let location = new ogml::LocationType:
	let shapeType = new ogml::ShapeType1:
	nodeStyle.setIdRef(getId(node)) ->
	location.setX(xOffset + shapeLayout.xpos + shapeLayout.width / 2) ->
	location.setY(yOffset + shapeLayout.ypos + shapeLayout.height / 2) ->
	shapeType.setShapeBounds(shapeLayout) ->
	nodeStyle.setLocation(location) ->
	nodeStyle.setShape(shapeType) ->
	styles.nodeStyle.add(nodeStyle) ->
	node.children.transformNodeLayout(styles, xOffset + shapeLayout.xpos,
		yOffset + shapeLayout.ypos) ->
	node.outgoingEdges.transformEdgeLayout(styles, xOffset, yOffset)
;

// transforms the edge layout information
Void transformEdgeLayout(KEdge edge, ogml::StylesType styles, Real xOffset, Real yOffset):
	let edgeLayout = edge.getEdgeLayout():
	let edgeStyle = new ogml::EdgeLayoutType:
	edgeStyle.setIdRef(getId(edge)) ->
	edgeLayout.sourcePoint.transformBendPoint(edgeStyle, xOffset, yOffset) ->
	edgeLayout.bendPoints.transformBendPoint(edgeStyle, xOffset, yOffset) ->
	edgeLayout.targetPoint.transformBendPoint(edgeStyle, xOffset, yOffset) ->
	styles.edgeStyle.add(edgeStyle)
;

// transforms a bend point
Void transformBendPoint(KPoint point, ogml::EdgeLayoutType edgeStyle, Real xOffset, Real yOffset):
	let ogmlPoint = new ogml::PointType:
	ogmlPoint.setX(xOffset + point.x) ->
	ogmlPoint.setY(yOffset + point.y) ->
	edgeStyle.point.add(ogmlPoint)
; 

// returns the ogml counterpart for the given kgraph edge
create ogml::EdgeType getEdge(KEdge edge):
	this.setId(getId(edge))
;

// returns the id associated with the node
cached String getId(KNode node):
	generateNodeId()
;

// returns the id associated with the edge
cached String getId(KEdge edge):
	generateEdgeId()
;

// returns the id associated with the label
cached String getId(KLabel label):
	generateLabelId()
;
