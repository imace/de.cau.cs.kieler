// M2M-transformation from the KGraph to OGML

import kgraph;
import ogml;

// workaround
Void callStringMethod(Object instance, String methodName, String param):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.callStringMethod(java.lang.Object, java.lang.String, java.lang.String)
;

Void setId(Object obj, String id):
	callStringMethod(obj, "setId", id)
;

Void setIdRef(Object obj, String idRef):
	callStringMethod(obj, "setIdRef", idRef)
;

Void setContent(Object obj, String content):
	callStringMethod(obj, "setContent", content)
;

String generateName(String generatorName, String prefix):
	JAVA de.cau.cs.kieler.kiml.export.util.XtendUtil.generateName(java.lang.String, java.lang.String)
;

// generates an id for a node
String generateNodeId():
	generateName("node", "n")
;

// generates an id for an edge
String generateEdgeId():
	generateName("edge", "e")
;

// the entry point for the transformation
create ogml::DocumentRoot transform(KNode node):
	let ogmlRoot = new ogml::OgmlType:
	let graph = new ogml::GraphType:
	let structure = transformGraph(node):
	this.setOgml(ogmlRoot) ->
	ogmlRoot.setGraph(graph) ->
	graph.setStructure(structure)
;

// transforms the structure of the graph
create ogml::StructureType transformGraph(KNode node):
	node.children.transformTopNode(this) ->
	node.children.transformEdgesNodeWalker(this)
;

// transforms a top-level node
Void transformTopNode(KNode node, ogml::StructureType structure):
	let ogmlNode = getNode(node):
	structure.node.add(ogmlNode) ->
	node.children.transformNode(ogmlNode)
;

// transforms a node that is not a top-level node
Void transformNode(KNode node, ogml::NodeType parent):
	let ogmlNode = getNode(node):
	parent.node.add(ogmlNode) ->
	node.children.transformNode(ogmlNode)
;

// returns the ogml counterpart for the given kgraph node
//TODO is node.label != null required?
create ogml::NodeType getNode(KNode node): 
	let label = new LabelType:
	label.setContent(node.label.text) ->
	this.label.add(label) ->
	this.setId(getId(node))
;

// recursively transforms all edges
Void transformEdgesNodeWalker(KNode node, ogml::StructureType structure):
	node.outgoingEdges.transformEdge(structure) ->
	node.children.transformEdgesNodeWalker(structure)		
;

// transforms an edge
Void transformEdge(KEdge edge, ogml::StructureType structure):
	let sourceId = getId(edge.source):
	let targetId = getId(edge.target):
	let ogmlEdge = getEdge(edge):
	let source = new ogml::SourceTargetType:
	let target = new ogml::SourceTargetType:
	source.setIdRef(sourceId) ->
	target.setIdRef(targetId) ->
	ogmlEdge.source.add(source) ->
	ogmlEdge.target.add(target) ->
	structure.edge.add(ogmlEdge)
;

// returns the ogml counterpart for the given kgraph edge
create ogml::EdgeType getEdge(KEdge edge):
	this.setId(getId(edge))
;

// returns the id associated with the node
cached String getId(KNode node):
	generateNodeId()
;

// returns the id associated with the edge
cached String getId(KEdge edge):
	generateEdgeId()
;