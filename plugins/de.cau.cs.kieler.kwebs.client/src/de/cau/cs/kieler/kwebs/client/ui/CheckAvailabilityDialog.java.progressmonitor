/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 *
 * Copyright 2011 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */

package de.cau.cs.kieler.kwebs.client.kiml.ui;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;

import de.cau.cs.kieler.kwebs.client.ILayoutServiceClient;
import de.cau.cs.kieler.kwebs.client.ServerConfig;
import de.cau.cs.kieler.kwebs.client.kiml.LayoutServiceClients;
import de.cau.cs.kieler.kwebs.client.kiml.ServerConfigs;
import de.cau.cs.kieler.kwebs.client.kiml.ServerConfigs.ServerConfigError;

/**.
 *
 * @kieler.rating 2011-05-14
 * @author swe
 */
public class CheckAvailabilityDialog extends ProgressMonitorDialog {

    /** The server configuration to be tested. */
    private ServerConfig serverConfig;

    /** The button for viewing the error log. */
    private Button errorButton;
    
    private String[] errorOccurred;
    
    /** The client used to test connectivity. */
    private ILayoutServiceClient client;
    
    private IRunnableWithProgress runnable;
    
    /**
     * Creates a dialog for testing the availability of the layout service of a given server
     * configuration.
     * 
     * @param parentShell
     *            the parent shell
     * @param theserverConfig
     *            the server configuration to test
     */
    public CheckAvailabilityDialog(final Shell parentShell, final ServerConfig theserverConfig) {
        super(parentShell);
        serverConfig = theserverConfig;
         
        runnable = new IRunnableWithProgress() {            
            public void run(final IProgressMonitor monitor) throws InvocationTargetException,
                InterruptedException {               
                monitor.beginTask("Checking server configuration", 100);
                ServerConfigError why = ServerConfigs.getInstance().
                    isValidServerConfig(serverConfig);
                if (why == ServerConfigError.ERROR_OK) {
                    monitor.setTaskName("Getting appropriate client implementation");
                    client = LayoutServiceClients.getInstance().
                        createClientForServerConfig(serverConfig);
                    try {
                        monitor.setTaskName("The layout service you selected is reachable.");
                        client.connect();
                    } catch (Exception e) {                                
                        monitor.setTaskName("The layout service you selected is not reachable.");
                        errorOccurred = client.getLastErrorAsStringArray();
                        setButtonEnabled(errorButton, true);
                        setButtonVisible(errorButton, true);
                    } finally {
                        client.disconnect();
                    }
                } else {
                    String text = "";
                    if (why == ServerConfigError.ERROR_NOSERVERCONFIG) {
                        text += "The server configuration is missing a name or an address.";
                    } else if (why == ServerConfigError.ERROR_INVALIDNAME) {
                        text += "The name of the server configuration is empty.";
                    } else if (why == ServerConfigError.ERROR_INVALIDADDRESS) {
                        text += "The address is empty or not correct.";
                    } else if (why == ServerConfigError.ERROR_NOPROTOCOL) {
                        text += "The address does not specify a protocol.";
                    } else if (why == ServerConfigError.ERROR_PROTOCOLNOTSUPPORTED) {
                        text += "The protocol is not supported."
                                + "\n\nPlease make sure that the appropriate plug-in"
                                + " for the protocol is available in your KIELER installation.";
                    } else if (why == ServerConfigError.ERROR_NOTRUSTSTORE) {
                        text += "You have specified a server configuration which is using"
                                + " a HTTPS based connection but the trust store for"
                                + " establishing the connection is missing.";
                    } else if (why == ServerConfigError.ERROR_NOTRUSTSTOREPASS) {
                        text += "You have specified a server configuration which is using"
                                + " a HTTPS based connection but the password for the"
                                + " trust store is missing.";
                    } else {
                        text += "An unspecified error occured.";
                    }
                    monitor.setTaskName(
                        "The selected server configuration is invalid."
                        + " An availability test can not be performed."
                    );
                    errorOccurred = new String[] { text };
                }
                monitor.done();
            }
        };
    }

    public IRunnableWithProgress getRunnable() {
        return runnable;
    }
    /**
     * Sets the enabled state of the OK button.
     * 
     * @param button
     *            the button to be enabled or disabled
     * @param enabled
     *            whether the button shall be enabled
     */
    private void setButtonEnabled(final Button button, final boolean enabled) {
        Display display = Display.getDefault();
        display.syncExec(
            new Runnable() {
                public void run() {
                    button.setEnabled(enabled);
                };                
            }
        );
    }

    /**
     * Sets the visible state of the OK button.
     * 
     * @param button
     *            the button to be made visible or not visible
     * @param visible
     *            whether the button shall be visible
     */
    private void setButtonVisible(final Button button, final boolean visible) {
        Display display = Display.getDefault();
        display.syncExec(
            new Runnable() {
                public void run() {
                    button.setVisible(visible);
                };                
            }
        );
    }
    
    /** Id for the view error log button. */
    private static final int ID_ERRRORVIEW 
        = 10000;

    /**
     * {@inheritDoc}
     */
    @Override
    protected void createButtonsForButtonBar(final Composite parent) {
        errorButton = super.createButton(parent, ID_ERRRORVIEW, "View error", true);
        errorButton.setEnabled(false);
        errorButton.setVisible(false);
        errorButton.addSelectionListener(
            new SelectionAdapter() {
                public void widgetSelected(final SelectionEvent e) {
                    if (e.getSource() == errorButton) {
                        String text = "\n\nThe error occurred was:\n\n"; 
                        if (errorOccurred != null) {                            
                            for (String line : errorOccurred) {
                                text += line + "\n";
                            }
                        } else {
                            text += "No error description available.";
                        }    
                        MessageBox box = new MessageBox(getShell(), SWT.OK);
                        box.setText("Error log");
                        box.setMessage(text);
                        box.open();
                    }
                };
            }
        );
        super.createButtonsForButtonBar(parent);
    }
    
}
