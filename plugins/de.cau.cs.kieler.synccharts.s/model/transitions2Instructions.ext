import synccharts;
import annotations;
import expressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

/////////////// local imports //////////////
extension presentInstruction;
extension gotoInstruction;
extension emitInstruction;
////////////////////////////////////////////

List[Instruction] getTransitionInstruction(Transition transition):
	if transition.label == "" then
		emptyTransition(transition)
	else 
		if transition.trigger == null then
			justEffectTransition(transition)
		else
			getPresentInstruction(transition)
;

List[Instruction] emptyTransition(Transition transition):
	let out = {}:
		out.add(getGotoInstruction(transition.targetState)) ->
		out
;

List[Instruction] justEffectTransition(Transition transition):
	let out = {}:
	let emit = Emit:
		out.addAll(getEmitInstructions(transition)) ->
		out.add(getGotoInstruction(transition.targetState)) ->
		//emit.setSignal((s::Signal)(trigger .getSingleTraceTarget("S"))
		out
;