import synccharts;
import annotations;
import expressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

/////////////// local imports //////////////
extension presentInstruction;
extension gotoInstruction;
extension emitInstruction;
extension priorities;
////////////////////////////////////////////

//TODO: maybe this already works for actions? (inner/(exit)/entry-actions)

/*
* Returns a list with the SC representations of a given transition.
*/
List[Instruction] getTransitionInstruction(Transition transition):
	let out = {}:
		(
			if transition.label == "" then
				out.addAll(emptyTransition(transition))
			else 
				if transition.trigger == null then
					out.addAll(justEffectTransition(transition))
				else
					out.addAll(getPresentInstruction(transition))
		)
		->
		out.addAll(getSmallestStatePrio(transition)) ->
		out
;

List[Instruction] emptyTransition(Transition transition):
	let out = {}:
		out.addAll(getGotoInstruction(transition.targetState)) ->
		out
;

List[Instruction] justEffectTransition(Transition transition):
	let out = {}:
	let emit = Emit:
		out.addAll(getEmitInstructions(transition)) ->
		out.addAll(getReducedPrio(transition)) ->
		out.addAll(getGotoInstruction(transition.targetState)) ->
		out
;