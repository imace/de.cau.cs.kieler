import synccharts;
import annotations;
import kexpressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

/////////////// local imports //////////////
extension gotoInstruction;
extension transitions2Instructions;
////////////////////////////////////////////

List[Instruction] getJoinInstruction(Transition transition):
	let out = {}:
	(
		if transition.sourceState.outgoingTransitions == 1 then
			out.addAll(joinOneTransition(transition))
		else
			// TODO: 
			out.addAll(joinOneTransition(transition))
	)
	->
	out
;

// instructions for join, if the macro state has only one transition
List[Instruction] joinOneTransition(Transition transition):
	let out = {}:
	let join = new Join:
		out.add(join) ->
		out.addAll(justEffectTransition(transition)) ->
		out
;