import synccharts;
import annotations;
import expressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

/////////////// local imports //////////////
extension helper;
extension priorities;
////////////////////////////////////////////

List[Instruction] getForkInstructions(synccharts::State state):
	let out = {}:
	let forke = new Forke:
			out.addAll(state.regions.transform()) ->
		if !state.regions.isEmpty then (
			forke.setState((s::State)state.getSingleTraceTarget("S_main")) ->
			out.add(forke)
		)
		else
			null
		->
		out
;

create s::Fork this transform(Region region):
	let intValue = new s::IntValue:
	this.setState((s::State)getInitialState(region).getSingleTraceTarget("S")) ->
	intValue.setValue(getRealThreadPriority(getInitialState(region))) ->
	this.setPriority(intValue)
;
