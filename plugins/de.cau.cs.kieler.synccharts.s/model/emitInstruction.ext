import synccharts;
import annotations;
import expressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

List[Emit] getEmitInstructions(Transition transition):
	let out = {}:
		out.addAll(transition.effects.transform()) ->
		out
;

create s::Emit this transform(Effect effect):
	// TODO: complex too
	this.setSignal((s::Signal) ((Emission)effect).signal.getSingleTraceTarget("S"))
;