import synccharts;
import annotations;
import expressions;
import s;
extension org::eclipse::xtend::util::stdlib::io;          // debug printouts
extension org::eclipse::xtend::util::stdlib::crossref;    // find elements that reference others
extension org::eclipse::xtend::util::stdlib::cloning;     // copy model elements and whole trees
extension org::eclipse::xtend::util::stdlib::tracing;     // create map between transformed objects
extension org::eclipse::xtend::util::stdlib::issues;      // pass messages back to java (e.g. to UI)

/////////////// local imports //////////////
extension gotoInstruction;
extension priorities;
////////////////////////////////////////////

List[Instruction] getPresentInstruction(Transition transition):
	let out = {}:
	let present = new Present:
	createPresent(present, transition) ->
	out.add(present) ->
	out
;

Void createPresent(Present present, Transition transition):
 	//TODO: for complex expression this code needs to be changed...
	let trigger = ((SignalReference)transition.trigger).signal:
	let targetState = transition.targetState:
		present.setSignal((s::Signal) (trigger.getSingleTraceTarget("S")))->
		present.instructions.addAll(getReducedPrio(transition)) ->
		present.instructions.addAll(getGotoInstruction(transition.targetState))
;