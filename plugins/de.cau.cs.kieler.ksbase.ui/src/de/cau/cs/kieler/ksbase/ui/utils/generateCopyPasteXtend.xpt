

«DEFINE main FOR List[String]-»
    «FILE "copyAndPaste.ext"-»
    «EXPAND init-»
    «EXPAND copy-»
    «EXPAND paste-»

    «ENDFILE-»
«ENDDEFINE»

«DEFINE init FOR List[String]-»

// Java escapes

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

//Get the file name of the file loaded in the currently active editor
String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

// copy an object or a list of objects to clipboard
Object copyObjectToClipboard(Object object):
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
 null
;

// get an object or a list of objects from clipboard
Object getObjectFromClipboard():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getObjectFromClipboard()
 null
;

Boolean isClipboardEmpty():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.isClipboardEmpty()
 true
;
«ENDDEFINE»

«DEFINE copy FOR List[String]-»
«FOREACH {"copy", "cut"} AS operation-»
// Entry point for «operation»
Void «operation»(Object obj):
 «IF operation.matches("cut")-»copyInternal(obj) ->«ENDIF-»
 «operation»Internal(obj)
;

// dummy for matching
Void «operation»Internal(Object obj):
 null
;

// Entry point for list «operation» since Xtend can't match over list type.
Void «operation»Internal(List[Object] list):
«FOREACH this AS metaType-»
let «metaType»List = list.select(e|e.metaType == «metaType»):
«ENDFOREACH-»
«FOREACH this AS metaType-»
(if (!«metaType»List.isEmpty) then («operation»Internal«metaType»List(«metaType»List)) else (
«ENDFOREACH-»
null
«FOREACH this AS metaType-»
))
«ENDFOREACH-»
;

«FOREACH this AS metaType-»
// «operation» a «metaType»
Void «operation»Internal(«metaType» target):
 «IF operation.matches("copy")-»copyObjectToClipboard(target)«ENDIF-»
 «IF operation.matches("cut")-»null //TODO: implement me«ENDIF-»
 
;
// «operation» a list of «metaType»s
Void «operation»Internal«metaType»List(List[«metaType»] list):
 «IF operation.matches("copy")-»copyObjectToClipboard(list)«ENDIF-»
 «IF operation.matches("cut")-»null //TODO: implement me«ENDIF-»
 
;

«ENDFOREACH-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE paste FOR List[String]-»
// Paste

// dummy operation for no match
Void pasteInternal(Object noop0, Object noop1):
 null
;

«FOREACH this AS metaType-»
// determine whether or not a list is of type «metaType»
Boolean is«metaType»List(List[Object] list):
 let head = list.get(0):
 head.metaType == «metaType»
;
«ENDFOREACH-»

// Entry point for list paste since Xtend can't match over list type.
Void paste(List[Object] list):
«FOREACH this AS metaType-»
let «metaType»List = list.select(e|e.metaType == «metaType»):
«ENDFOREACH-»
(if (!isClipboardEmpty()) then (
«FOREACH this AS metaType-»
(if (!«metaType»List.isEmpty) then (paste«metaType»List(«metaType»List)) else (
«ENDFOREACH-»
null
«FOREACH this AS metaType-»
))
«ENDFOREACH-»
))
;

«FOREACH this AS targetMetaType-»
///////////////////////////////
// «targetMetaType»     
///////////////////////////////

    // paste onto a «targetMetaType»
    Void paste(«targetMetaType» target):
        if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
    ;

    // Entry point for list paste since Xtend can't match over list type.
    Void pasteInternal(«targetMetaType» target, List[Object] list):
    «FOREACH this AS sourceMetaType-»
        (if (is«sourceMetaType»List(list)) then pasteInternal«sourceMetaType»List(target, list) else 
    «ENDFOREACH-»
        null
    «FOREACH this AS sourceMetaType-»
        )
    «ENDFOREACH-»
    ;

    «FOREACH this AS sourceMetaType-»
    // paste a «sourceMetaType» onto a «targetMetaType»
    Void pasteInternal(«targetMetaType» target, «sourceMetaType» source):
     null //TODO: implement me
    ;
        
    // paste a list of «sourceMetaType»s onto a «targetMetaType»
    Void pasteInternal«sourceMetaType»List(«targetMetaType» target, List[«sourceMetaType»] sources):
     null //TODO: implement me
    ;
        
    «ENDFOREACH-»
    
///////////////////////////////
// List of «targetMetaType»s     
///////////////////////////////
    
    // paste onto a list of «targetMetaType»s
    Void paste«targetMetaType»List(List[«targetMetaType»] targets):
     let clipBoard = getObjectFromClipboard():
     paste«targetMetaType»List(targets, clipBoard)
    ;
    
    // Entry point for list paste since Xtend can't match over list type.
    Void paste«targetMetaType»List(List[«targetMetaType»] targets, List[Object] list):
    «FOREACH this AS sourceMetaType-»
        (if (is«sourceMetaType»List(list)) then paste«targetMetaType»List«sourceMetaType»List(targets, list) else 
    «ENDFOREACH-»
        null
    «FOREACH this AS sourceMetaType-»
        )
    «ENDFOREACH-»
    ;
    
    «FOREACH this AS sourceMetaType-»
    // paste a «sourceMetaType» onto a list of «targetMetaType»s
    Void paste«targetMetaType»List(List[«targetMetaType»] targets, «sourceMetaType» source):
     null //TODO: implement me
    ;
        
    // paste a list of «sourceMetaType»s onto a list of «targetMetaType»s
    Void paste«targetMetaType»List«sourceMetaType»List(List[«targetMetaType»] targets, List[«sourceMetaType»] sources):
     null //TODO: implement me
    ;
        
    «ENDFOREACH-»
«ENDFOREACH-»
«ENDDEFINE»