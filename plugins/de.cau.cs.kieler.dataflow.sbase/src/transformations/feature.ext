import dataflow;

Void connectPorts(OutputPort out, InputPort in):
 let con = new Connection:
 con.setSourcePort(out) ->
 con.setTargetPort(in) ->
 out.parentBox.connections.add(con)
;

//Connects two boxes
//If any of the boxes has an unused port, the connection is using this port
Void connectBoxes(Box source, Box target):
 let out = new OutputPort:
 let in = new InputPort:
 let sourcePorts = source.outputs.select(e|  !source.connections.exists(c|c.sourcePort == e) ) :
 //hint: this may lead to a bad performance in larger diagrams!
 let targetPorts = target.inputs.select( in | !((Box)source.eContainer).boxes.connections.exists(c| c.targetPort == in)):
 
 if (sourcePorts.size == 0 ) then {
 	source.outputs.add(out) ->
 	if (targetPorts.size == 0) then {
 		target.inputs.add(in) ->
 		target.inputs.add(in) ->
		connectPorts(out,in)	 
	}
	else {
		connectPorts(out,targetPorts.first())
	}
 } else {
 	if (targetPorts.size == 0) then {
 		target.inputs.add(in) ->
 		connectPorts(sourcePorts.first(),in)
 	}
 	else {
 		connectPorts(sourcePorts.first(),targetPorts.first())
 	}
 }
;

Void connectOutputsToInputs(OutputPort out,List[InputPort] in):
if (in.size > 0) then {
 out.connectPorts(in.first())->
 in.remove(in.first())
 }
;


Void connectAllBoxPorts(Box source, Box target):
 let sourceList = source.outputs.select(e| !source.connections.exists(c|c.sourcePort == e)):
 //hint: this may lead to a bad performance in larger diagrams!
 let targetList = target.inputs.select( in | !((Box)source.eContainer).boxes.connections.exists(c| c.targetPort == in)):
 sourceList.connectOutputsToInputs(targetList)
;



Void createSuccessor(Box source):
 let target = new Box:
 connectBoxes(source,target) ->
 ((DataflowModel)source.eContainer).boxes.add(target)
;

Void createPredecessor(Box target):
 let source = new Box:
 connectBoxes(source,target) ->
 ((DataflowModel)target.eContainer).boxes.add(source)
;

Void insertBoxInConnection(Connection source):
let box = new Box:
let con = new Connection:
let tempPort = source.targetPort:
let inP = new InputPort:
let outP = new OutputPort:
box.inputs.add(inP) ->
box.outputs.add(outP) ->
source.setTargetPort(inP) ->
con.setSourcePort(outP) ->
con.setTargetPort(tempPort) ->
//Carefull here: this wont work with hierarchy, cause
//the eContainer is not a DataflowModel but a Box
((DataflowModel)source.sourcePort.eContainer.eContainer).boxes.add(box) ->
box.connections.add(con)
;