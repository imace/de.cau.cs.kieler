/*
* generated by Xtext
*/
package de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.krep.editors.klp.services.KlpGrammarAccess;

public class KlpParser extends AbstractContentAssistParser {
	
	@Inject
	private KlpGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr.internal.InternalKlpParser createParser() {
		de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr.internal.InternalKlpParser result = new de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr.internal.InternalKlpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getBinopAccess().getAlternatives_3(), "rule__Binop__Alternatives_3");
					put(grammarAccess.getMoveAccess().getAlternatives_2(), "rule__Move__Alternatives_2");
					put(grammarAccess.getReadAccess().getAlternatives(), "rule__Read__Alternatives");
					put(grammarAccess.getScopeAccess().getAlternatives(), "rule__Scope__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getJumpKindAccess().getAlternatives(), "rule__JumpKind__Alternatives");
					put(grammarAccess.getMoveKindAccess().getAlternatives(), "rule__MoveKind__Alternatives");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getLineAccess().getGroup_0(), "rule__Line__Group_0__0");
					put(grammarAccess.getDeclAccess().getGroup(), "rule__Decl__Group__0");
					put(grammarAccess.getSetClkAccess().getGroup(), "rule__SetClk__Group__0");
					put(grammarAccess.getSetPCAccess().getGroup(), "rule__SetPC__Group__0");
					put(grammarAccess.getPrioAccess().getGroup(), "rule__Prio__Group__0");
					put(grammarAccess.getDoneAccess().getGroup(), "rule__Done__Group__0");
					put(grammarAccess.getBinopAccess().getGroup(), "rule__Binop__Group__0");
					put(grammarAccess.getJmpAccess().getGroup(), "rule__Jmp__Group__0");
					put(grammarAccess.getCJmpAccess().getGroup(), "rule__CJmp__Group__0");
					put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
					put(grammarAccess.getReadAccess().getGroup_0(), "rule__Read__Group_0__0");
					put(grammarAccess.getKLPAccess().getInstructionsAssignment(), "rule__KLP__InstructionsAssignment");
					put(grammarAccess.getLineAccess().getLabelsAssignment_0_0(), "rule__Line__LabelsAssignment_0_0");
					put(grammarAccess.getLineAccess().getInstructionAssignment_1(), "rule__Line__InstructionAssignment_1");
					put(grammarAccess.getDeclAccess().getScopeAssignment_0(), "rule__Decl__ScopeAssignment_0");
					put(grammarAccess.getDeclAccess().getRegAssignment_1(), "rule__Decl__RegAssignment_1");
					put(grammarAccess.getSetClkAccess().getRegAssignment_1(), "rule__SetClk__RegAssignment_1");
					put(grammarAccess.getSetClkAccess().getClkAssignment_2(), "rule__SetClk__ClkAssignment_2");
					put(grammarAccess.getSetPCAccess().getRegAssignment_1(), "rule__SetPC__RegAssignment_1");
					put(grammarAccess.getSetPCAccess().getLabelAssignment_2(), "rule__SetPC__LabelAssignment_2");
					put(grammarAccess.getPrioAccess().getRegAssignment_1(), "rule__Prio__RegAssignment_1");
					put(grammarAccess.getPrioAccess().getPrioAssignment_2(), "rule__Prio__PrioAssignment_2");
					put(grammarAccess.getDoneAccess().getPcAssignment_1(), "rule__Done__PcAssignment_1");
					put(grammarAccess.getBinopAccess().getOpAssignment_0(), "rule__Binop__OpAssignment_0");
					put(grammarAccess.getBinopAccess().getToAssignment_1(), "rule__Binop__ToAssignment_1");
					put(grammarAccess.getBinopAccess().getArg1Assignment_2(), "rule__Binop__Arg1Assignment_2");
					put(grammarAccess.getBinopAccess().getArg2Assignment_3_0(), "rule__Binop__Arg2Assignment_3_0");
					put(grammarAccess.getBinopAccess().getValAssignment_3_1(), "rule__Binop__ValAssignment_3_1");
					put(grammarAccess.getJmpAccess().getLabelAssignment_1(), "rule__Jmp__LabelAssignment_1");
					put(grammarAccess.getCJmpAccess().getCondAssignment_0(), "rule__CJmp__CondAssignment_0");
					put(grammarAccess.getCJmpAccess().getRegAssignment_1(), "rule__CJmp__RegAssignment_1");
					put(grammarAccess.getCJmpAccess().getLabelAssignment_2(), "rule__CJmp__LabelAssignment_2");
					put(grammarAccess.getMoveAccess().getTypeAssignment_0(), "rule__Move__TypeAssignment_0");
					put(grammarAccess.getMoveAccess().getToAssignment_1(), "rule__Move__ToAssignment_1");
					put(grammarAccess.getMoveAccess().getFromAssignment_2_0(), "rule__Move__FromAssignment_2_0");
					put(grammarAccess.getMoveAccess().getValAssignment_2_1(), "rule__Move__ValAssignment_2_1");
					put(grammarAccess.getLabelAccess().getNameAssignment(), "rule__Label__NameAssignment");
					put(grammarAccess.getRegAccess().getNameAssignment(), "rule__Reg__NameAssignment");
					put(grammarAccess.getReadAccess().getPreAssignment_0_0(), "rule__Read__PreAssignment_0_0");
					put(grammarAccess.getReadAccess().getRegAssignment_0_2(), "rule__Read__RegAssignment_0_2");
					put(grammarAccess.getReadAccess().getRegAssignment_1(), "rule__Read__RegAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr.internal.InternalKlpParser typedParser = (de.cau.cs.kieler.krep.editors.klp.ui.contentassist.antlr.internal.InternalKlpParser) parser;
			typedParser.entryRuleKLP();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_COMMENT", "RULE_WS" };
	}
	
	public KlpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(KlpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
