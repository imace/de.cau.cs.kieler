/*
* generated by Xtext
*/
grammar InternalKlp;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.cau.cs.kieler.krep.editors.klp.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.krep.editors.klp.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import de.cau.cs.kieler.krep.editors.klp.services.KlpGrammarAccess;

}

@parser::members {
 
 	private KlpGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(KlpGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleKLP
entryRuleKLP 
:
{ before(grammarAccess.getKLPRule()); }
	 ruleKLP
{ after(grammarAccess.getKLPRule()); } 
	 EOF 
;

// Rule KLP
ruleKLP 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKLPAccess().getInstructionsAssignment()); }
(rule__KLP__InstructionsAssignment)*
{ after(grammarAccess.getKLPAccess().getInstructionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLine
entryRuleLine 
:
{ before(grammarAccess.getLineRule()); }
	 ruleLine
{ after(grammarAccess.getLineRule()); } 
	 EOF 
;

// Rule Line
ruleLine 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLineAccess().getGroup()); }
(rule__Line__Group__0)
{ after(grammarAccess.getLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecl
entryRuleDecl 
:
{ before(grammarAccess.getDeclRule()); }
	 ruleDecl
{ after(grammarAccess.getDeclRule()); } 
	 EOF 
;

// Rule Decl
ruleDecl 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclAccess().getGroup()); }
(rule__Decl__Group__0)
{ after(grammarAccess.getDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetClk
entryRuleSetClk 
:
{ before(grammarAccess.getSetClkRule()); }
	 ruleSetClk
{ after(grammarAccess.getSetClkRule()); } 
	 EOF 
;

// Rule SetClk
ruleSetClk 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetClkAccess().getGroup()); }
(rule__SetClk__Group__0)
{ after(grammarAccess.getSetClkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetPC
entryRuleSetPC 
:
{ before(grammarAccess.getSetPCRule()); }
	 ruleSetPC
{ after(grammarAccess.getSetPCRule()); } 
	 EOF 
;

// Rule SetPC
ruleSetPC 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetPCAccess().getGroup()); }
(rule__SetPC__Group__0)
{ after(grammarAccess.getSetPCAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrio
entryRulePrio 
:
{ before(grammarAccess.getPrioRule()); }
	 rulePrio
{ after(grammarAccess.getPrioRule()); } 
	 EOF 
;

// Rule Prio
rulePrio 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrioAccess().getGroup()); }
(rule__Prio__Group__0)
{ after(grammarAccess.getPrioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDone
entryRuleDone 
:
{ before(grammarAccess.getDoneRule()); }
	 ruleDone
{ after(grammarAccess.getDoneRule()); } 
	 EOF 
;

// Rule Done
ruleDone 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoneAccess().getGroup()); }
(rule__Done__Group__0)
{ after(grammarAccess.getDoneAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinop
entryRuleBinop 
:
{ before(grammarAccess.getBinopRule()); }
	 ruleBinop
{ after(grammarAccess.getBinopRule()); } 
	 EOF 
;

// Rule Binop
ruleBinop 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinopAccess().getGroup()); }
(rule__Binop__Group__0)
{ after(grammarAccess.getBinopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJmp
entryRuleJmp 
:
{ before(grammarAccess.getJmpRule()); }
	 ruleJmp
{ after(grammarAccess.getJmpRule()); } 
	 EOF 
;

// Rule Jmp
ruleJmp 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJmpAccess().getGroup()); }
(rule__Jmp__Group__0)
{ after(grammarAccess.getJmpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCJmp
entryRuleCJmp 
:
{ before(grammarAccess.getCJmpRule()); }
	 ruleCJmp
{ after(grammarAccess.getCJmpRule()); } 
	 EOF 
;

// Rule CJmp
ruleCJmp 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCJmpAccess().getGroup()); }
(rule__CJmp__Group__0)
{ after(grammarAccess.getCJmpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMove
entryRuleMove 
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoveAccess().getGroup()); }
(rule__Move__Group__0)
{ after(grammarAccess.getMoveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getNameAssignment()); }
(rule__Label__NameAssignment)
{ after(grammarAccess.getLabelAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReg
entryRuleReg 
:
{ before(grammarAccess.getRegRule()); }
	 ruleReg
{ after(grammarAccess.getRegRule()); } 
	 EOF 
;

// Rule Reg
ruleReg 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegAccess().getNameAssignment()); }
(rule__Reg__NameAssignment)
{ after(grammarAccess.getRegAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRead
entryRuleRead 
:
{ before(grammarAccess.getReadRule()); }
	 ruleRead
{ after(grammarAccess.getReadRule()); } 
	 EOF 
;

// Rule Read
ruleRead 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReadAccess().getAlternatives()); }
(rule__Read__Alternatives)
{ after(grammarAccess.getReadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Scope
ruleScope
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getAlternatives()); }
(rule__Scope__Alternatives)
{ after(grammarAccess.getScopeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule JumpKind
ruleJumpKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpKindAccess().getAlternatives()); }
(rule__JumpKind__Alternatives)
{ after(grammarAccess.getJumpKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MoveKind
ruleMoveKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveKindAccess().getAlternatives()); }
(rule__MoveKind__Alternatives)
{ after(grammarAccess.getMoveKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getDeclParserRuleCall_0()); }
	ruleDecl
{ after(grammarAccess.getInstructionAccess().getDeclParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getSetClkParserRuleCall_1()); }
	ruleSetClk
{ after(grammarAccess.getInstructionAccess().getSetClkParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getSetPCParserRuleCall_2()); }
	ruleSetPC
{ after(grammarAccess.getInstructionAccess().getSetPCParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getPrioParserRuleCall_3()); }
	rulePrio
{ after(grammarAccess.getInstructionAccess().getPrioParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getDoneParserRuleCall_4()); }
	ruleDone
{ after(grammarAccess.getInstructionAccess().getDoneParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getBinopParserRuleCall_5()); }
	ruleBinop
{ after(grammarAccess.getInstructionAccess().getBinopParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getJmpParserRuleCall_6()); }
	ruleJmp
{ after(grammarAccess.getInstructionAccess().getJmpParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getCJmpParserRuleCall_7()); }
	ruleCJmp
{ after(grammarAccess.getInstructionAccess().getCJmpParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getMoveParserRuleCall_8()); }
	ruleMove
{ after(grammarAccess.getInstructionAccess().getMoveParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getArg2Assignment_3_0()); }
(rule__Binop__Arg2Assignment_3_0)
{ after(grammarAccess.getBinopAccess().getArg2Assignment_3_0()); }
)

    |(
{ before(grammarAccess.getBinopAccess().getValAssignment_3_1()); }
(rule__Binop__ValAssignment_3_1)
{ after(grammarAccess.getBinopAccess().getValAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getFromAssignment_2_0()); }
(rule__Move__FromAssignment_2_0)
{ after(grammarAccess.getMoveAccess().getFromAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getMoveAccess().getValAssignment_2_1()); }
(rule__Move__ValAssignment_2_1)
{ after(grammarAccess.getMoveAccess().getValAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getGroup_0()); }
(rule__Read__Group_0__0)
{ after(grammarAccess.getReadAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getReadAccess().getRegAssignment_1()); }
(rule__Read__RegAssignment_1)
{ after(grammarAccess.getReadAccess().getRegAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getInputEnumLiteralDeclaration_0()); }
(	'INPUT' 
)
{ after(grammarAccess.getScopeAccess().getInputEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getScopeAccess().getOutputEnumLiteralDeclaration_1()); }
(	'OUTPUT' 
)
{ after(grammarAccess.getScopeAccess().getOutputEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getScopeAccess().getLocalEnumLiteralDeclaration_2()); }
(	'LOCAL' 
)
{ after(grammarAccess.getScopeAccess().getLocalEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	'ADD' 
)
{ after(grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIaddEnumLiteralDeclaration_1()); }
(	'IADD' 
)
{ after(grammarAccess.getOperatorAccess().getIaddEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_2()); }
(	'SUB' 
)
{ after(grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getMulEnumLiteralDeclaration_3()); }
(	'MUL' 
)
{ after(grammarAccess.getOperatorAccess().getMulEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_4()); }
(	'DIV' 
)
{ after(grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_5()); }
(	'AND' 
)
{ after(grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_6()); }
(	'OR' 
)
{ after(grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_7()); }
(	'XOR' 
)
{ after(grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_8()); }
(	'LT' 
)
{ after(grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLeEnumLiteralDeclaration_9()); }
(	'LE' 
)
{ after(grammarAccess.getOperatorAccess().getLeEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEqEnumLiteralDeclaration_10()); }
(	'EQ' 
)
{ after(grammarAccess.getOperatorAccess().getEqEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGeEnumLiteralDeclaration_11()); }
(	'GE' 
)
{ after(grammarAccess.getOperatorAccess().getGeEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_12()); }
(	'GT' 
)
{ after(grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNeqEnumLiteralDeclaration_13()); }
(	'NEQ' 
)
{ after(grammarAccess.getOperatorAccess().getNeqEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIsubEnumLiteralDeclaration_14()); }
(	'ISUB' 
)
{ after(grammarAccess.getOperatorAccess().getIsubEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getImulEnumLiteralDeclaration_15()); }
(	'IMUL' 
)
{ after(grammarAccess.getOperatorAccess().getImulEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIdivEnumLiteralDeclaration_16()); }
(	'IDIV' 
)
{ after(grammarAccess.getOperatorAccess().getIdivEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIandEnumLiteralDeclaration_17()); }
(	'IAND' 
)
{ after(grammarAccess.getOperatorAccess().getIandEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIorEnumLiteralDeclaration_18()); }
(	'IOR' 
)
{ after(grammarAccess.getOperatorAccess().getIorEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIxorEnumLiteralDeclaration_19()); }
(	'IXOR' 
)
{ after(grammarAccess.getOperatorAccess().getIxorEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIltEnumLiteralDeclaration_20()); }
(	'ILT' 
)
{ after(grammarAccess.getOperatorAccess().getIltEnumLiteralDeclaration_20()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIleEnumLiteralDeclaration_21()); }
(	'ILE' 
)
{ after(grammarAccess.getOperatorAccess().getIleEnumLiteralDeclaration_21()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIeqEnumLiteralDeclaration_22()); }
(	'IEQ' 
)
{ after(grammarAccess.getOperatorAccess().getIeqEnumLiteralDeclaration_22()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIgeEnumLiteralDeclaration_23()); }
(	'IGE' 
)
{ after(grammarAccess.getOperatorAccess().getIgeEnumLiteralDeclaration_23()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIgtEnumLiteralDeclaration_24()); }
(	'IGT' 
)
{ after(grammarAccess.getOperatorAccess().getIgtEnumLiteralDeclaration_24()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getIneqEnumLiteralDeclaration_25()); }
(	'INEQ' 
)
{ after(grammarAccess.getOperatorAccess().getIneqEnumLiteralDeclaration_25()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpKindAccess().getJtEnumLiteralDeclaration_0()); }
(	'JT' 
)
{ after(grammarAccess.getJumpKindAccess().getJtEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getJumpKindAccess().getJfEnumLiteralDeclaration_1()); }
(	'JF' 
)
{ after(grammarAccess.getJumpKindAccess().getJfEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getJumpKindAccess().getJzEnumLiteralDeclaration_2()); }
(	'JZ' 
)
{ after(grammarAccess.getJumpKindAccess().getJzEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getJumpKindAccess().getJnzEnumLiteralDeclaration_3()); }
(	'JNZ' 
)
{ after(grammarAccess.getJumpKindAccess().getJnzEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MoveKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveKindAccess().getCmovEnumLiteralDeclaration_0()); }
(	'CVMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getCmovEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMoveKindAccess().getVcmovEnumLiteralDeclaration_1()); }
(	'VCMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getVcmovEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMoveKindAccess().getVvmovEnumLiteralDeclaration_2()); }
(	'VVMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getVvmovEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMoveKindAccess().getCcmovEnumLiteralDeclaration_3()); }
(	'CCMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getCcmovEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMoveKindAccess().getIvmovEnumLiteralDeclaration_4()); }
(	'IVMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getIvmovEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMoveKindAccess().getIcmovEnumLiteralDeclaration_5()); }
(	'ICMOV' 
)
{ after(grammarAccess.getMoveKindAccess().getIcmovEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Line__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getGroup_0()); }
(rule__Line__Group_0__0)*
{ after(grammarAccess.getLineAccess().getGroup_0()); }
)

	rule__Line__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Line__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getInstructionAssignment_1()); }
(rule__Line__InstructionAssignment_1)
{ after(grammarAccess.getLineAccess().getInstructionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Line__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getLabelsAssignment_0_0()); }
(rule__Line__LabelsAssignment_0_0)
{ after(grammarAccess.getLineAccess().getLabelsAssignment_0_0()); }
)

	rule__Line__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Line__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getLineAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Decl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getScopeAssignment_0()); }
(rule__Decl__ScopeAssignment_0)
{ after(grammarAccess.getDeclAccess().getScopeAssignment_0()); }
)

	rule__Decl__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Decl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getRegAssignment_1()); }
(rule__Decl__RegAssignment_1)
{ after(grammarAccess.getDeclAccess().getRegAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetClk__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClkAccess().getSETCLKKeyword_0()); }

	'SETCLK' 

{ after(grammarAccess.getSetClkAccess().getSETCLKKeyword_0()); }
)

	rule__SetClk__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SetClk__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClkAccess().getRegAssignment_1()); }
(rule__SetClk__RegAssignment_1)
{ after(grammarAccess.getSetClkAccess().getRegAssignment_1()); }
)

	rule__SetClk__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SetClk__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClkAccess().getClkAssignment_2()); }
(rule__SetClk__ClkAssignment_2)
{ after(grammarAccess.getSetClkAccess().getClkAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetPC__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPCAccess().getSETPCKeyword_0()); }

	'SETPC' 

{ after(grammarAccess.getSetPCAccess().getSETPCKeyword_0()); }
)

	rule__SetPC__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SetPC__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPCAccess().getRegAssignment_1()); }
(rule__SetPC__RegAssignment_1)
{ after(grammarAccess.getSetPCAccess().getRegAssignment_1()); }
)

	rule__SetPC__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SetPC__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPCAccess().getLabelAssignment_2()); }
(rule__SetPC__LabelAssignment_2)
{ after(grammarAccess.getSetPCAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Prio__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }

	'PRIO' 

{ after(grammarAccess.getPrioAccess().getPRIOKeyword_0()); }
)

	rule__Prio__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getRegAssignment_1()); }
(rule__Prio__RegAssignment_1)?
{ after(grammarAccess.getPrioAccess().getRegAssignment_1()); }
)

	rule__Prio__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Prio__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPrioAssignment_2()); }
(rule__Prio__PrioAssignment_2)
{ after(grammarAccess.getPrioAccess().getPrioAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Done__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoneAccess().getDONEKeyword_0()); }

	'DONE' 

{ after(grammarAccess.getDoneAccess().getDONEKeyword_0()); }
)

	rule__Done__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Done__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoneAccess().getPcAssignment_1()); }
(rule__Done__PcAssignment_1)?
{ after(grammarAccess.getDoneAccess().getPcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Binop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getOpAssignment_0()); }
(rule__Binop__OpAssignment_0)
{ after(grammarAccess.getBinopAccess().getOpAssignment_0()); }
)

	rule__Binop__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Binop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getToAssignment_1()); }
(rule__Binop__ToAssignment_1)
{ after(grammarAccess.getBinopAccess().getToAssignment_1()); }
)

	rule__Binop__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Binop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getArg1Assignment_2()); }
(rule__Binop__Arg1Assignment_2)
{ after(grammarAccess.getBinopAccess().getArg1Assignment_2()); }
)

	rule__Binop__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Binop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getAlternatives_3()); }
(rule__Binop__Alternatives_3)
{ after(grammarAccess.getBinopAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Jmp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJmpAccess().getJMPKeyword_0()); }

	'JMP' 

{ after(grammarAccess.getJmpAccess().getJMPKeyword_0()); }
)

	rule__Jmp__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Jmp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJmpAccess().getLabelAssignment_1()); }
(rule__Jmp__LabelAssignment_1)
{ after(grammarAccess.getJmpAccess().getLabelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CJmp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getCondAssignment_0()); }
(rule__CJmp__CondAssignment_0)
{ after(grammarAccess.getCJmpAccess().getCondAssignment_0()); }
)

	rule__CJmp__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CJmp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getRegAssignment_1()); }
(rule__CJmp__RegAssignment_1)
{ after(grammarAccess.getCJmpAccess().getRegAssignment_1()); }
)

	rule__CJmp__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CJmp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getLabelAssignment_2()); }
(rule__CJmp__LabelAssignment_2)
{ after(grammarAccess.getCJmpAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Move__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getTypeAssignment_0()); }
(rule__Move__TypeAssignment_0)
{ after(grammarAccess.getMoveAccess().getTypeAssignment_0()); }
)

	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getToAssignment_1()); }
(rule__Move__ToAssignment_1)
{ after(grammarAccess.getMoveAccess().getToAssignment_1()); }
)

	rule__Move__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getAlternatives_2()); }
(rule__Move__Alternatives_2)
{ after(grammarAccess.getMoveAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Read__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getPreAssignment_0_0()); }
(rule__Read__PreAssignment_0_0)
{ after(grammarAccess.getReadAccess().getPreAssignment_0_0()); }
)

	rule__Read__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getLeftParenthesisKeyword_0_1()); }

	'(' 

{ after(grammarAccess.getReadAccess().getLeftParenthesisKeyword_0_1()); }
)

	rule__Read__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getRegAssignment_0_2()); }
(rule__Read__RegAssignment_0_2)
{ after(grammarAccess.getReadAccess().getRegAssignment_0_2()); }
)

	rule__Read__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getReadAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KLP__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKLPAccess().getInstructionsLineParserRuleCall_0()); }
	ruleLine{ after(grammarAccess.getKLPAccess().getInstructionsLineParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Line__LabelsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getLabelsIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getLineAccess().getLabelsIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Line__InstructionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getInstructionInstructionParserRuleCall_1_0()); }
	ruleInstruction{ after(grammarAccess.getLineAccess().getInstructionInstructionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__ScopeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getScopeScopeEnumRuleCall_0_0()); }
	ruleScope{ after(grammarAccess.getDeclAccess().getScopeScopeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getRegRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getDeclAccess().getRegRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClk__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClkAccess().getRegRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getSetClkAccess().getRegRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetClk__ClkAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetClkAccess().getClkRegParserRuleCall_2_0()); }
	ruleReg{ after(grammarAccess.getSetClkAccess().getClkRegParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetPC__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPCAccess().getRegRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getSetPCAccess().getRegRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetPC__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPCAccess().getLabelLabelParserRuleCall_2_0()); }
	ruleLabel{ after(grammarAccess.getSetPCAccess().getLabelLabelParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getRegRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getPrioAccess().getRegRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prio__PrioAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrioAccess().getPrioINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getPrioAccess().getPrioINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Done__PcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoneAccess().getPcLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getDoneAccess().getPcLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getOpOperatorEnumRuleCall_0_0()); }
	ruleOperator{ after(grammarAccess.getBinopAccess().getOpOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__ToAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getToRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getBinopAccess().getToRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__Arg1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getArg1ReadParserRuleCall_2_0()); }
	ruleRead{ after(grammarAccess.getBinopAccess().getArg1ReadParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__Arg2Assignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getArg2ReadParserRuleCall_3_0_0()); }
	ruleRead{ after(grammarAccess.getBinopAccess().getArg2ReadParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__ValAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinopAccess().getValINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getBinopAccess().getValINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Jmp__LabelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJmpAccess().getLabelLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getJmpAccess().getLabelLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CJmp__CondAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getCondJumpKindEnumRuleCall_0_0()); }
	ruleJumpKind{ after(grammarAccess.getCJmpAccess().getCondJumpKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CJmp__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getRegReadParserRuleCall_1_0()); }
	ruleRead{ after(grammarAccess.getCJmpAccess().getRegReadParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CJmp__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCJmpAccess().getLabelLabelParserRuleCall_2_0()); }
	ruleLabel{ after(grammarAccess.getCJmpAccess().getLabelLabelParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Move__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getTypeMoveKindEnumRuleCall_0_0()); }
	ruleMoveKind{ after(grammarAccess.getMoveAccess().getTypeMoveKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Move__ToAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getToRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getMoveAccess().getToRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FromAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getFromReadParserRuleCall_2_0_0()); }
	ruleRead{ after(grammarAccess.getMoveAccess().getFromReadParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Move__ValAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveAccess().getValINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getMoveAccess().getValINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reg__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getRegAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Read__PreAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getPrePreKeyword_0_0_0()); }
(
{ before(grammarAccess.getReadAccess().getPrePreKeyword_0_0_0()); }

	'pre' 

{ after(grammarAccess.getReadAccess().getPrePreKeyword_0_0_0()); }
)

{ after(grammarAccess.getReadAccess().getPrePreKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Read__RegAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getRegRegParserRuleCall_0_2_0()); }
	ruleReg{ after(grammarAccess.getReadAccess().getRegRegParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Read__RegAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReadAccess().getRegRegParserRuleCall_1_0()); }
	ruleReg{ after(grammarAccess.getReadAccess().getRegRegParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : ('+'|'-')? RULE_DIGIT+;

RULE_ID : (RULE_LETTER|'_') (RULE_LETTER|RULE_DIGIT|'_')*;

RULE_WS : ('\t'|' '|'\r'|'\n');

RULE_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_DIGIT : '0'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


