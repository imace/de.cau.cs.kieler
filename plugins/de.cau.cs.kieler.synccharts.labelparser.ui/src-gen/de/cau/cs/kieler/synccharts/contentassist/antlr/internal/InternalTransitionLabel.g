/*
* generated by Xtext
*/
grammar InternalTransitionLabel;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import de.cau.cs.kieler.synccharts.services.TransitionLabelGrammarAccess;

}

@parser::members {
 
 	private TransitionLabelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TransitionLabelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction :
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEffect
entryRuleEffect :
{ before(grammarAccess.getEffectRule()); }
	 ruleEffect
{ after(grammarAccess.getEffectRule()); } 
	 EOF 
;

// Rule Effect
ruleEffect 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEffectAccess().getAlternatives()); }
(rule__Effect__Alternatives)
{ after(grammarAccess.getEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmission
entryRuleEmission :
{ before(grammarAccess.getEmissionRule()); }
	 ruleEmission
{ after(grammarAccess.getEmissionRule()); } 
	 EOF 
;

// Rule Emission
ruleEmission 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEmissionAccess().getGroup()); }
(rule__Emission__Group__0)
{ after(grammarAccess.getEmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment :
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalReference
entryRuleSignalReference :
{ before(grammarAccess.getSignalReferenceRule()); }
	 ruleSignalReference
{ after(grammarAccess.getSignalReferenceRule()); } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSignalReferenceAccess().getReferenceAssignment()); }
(rule__SignalReference__ReferenceAssignment)
{ after(grammarAccess.getSignalReferenceAccess().getReferenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference :
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVariableReferenceAccess().getReferenceAssignment()); }
(rule__VariableReference__ReferenceAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getReferenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignal
entryRuleSignal :
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSignalAccess().getGroup()); }
(rule__Signal__Group__0)
{ after(grammarAccess.getSignalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable :
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue :
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue :
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue :
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleHostCode
entryRuleHostCode :
{ before(grammarAccess.getHostCodeRule()); }
	 ruleHostCode
{ after(grammarAccess.getHostCodeRule()); } 
	 EOF 
;

// Rule HostCode
ruleHostCode 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getHostCodeAccess().getCodeAssignment()); }
(rule__HostCode__CodeAssignment)
{ after(grammarAccess.getHostCodeAccess().getCodeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleValOperation
entryRuleValOperation :
{ before(grammarAccess.getValOperationRule()); }
	 ruleValOperation
{ after(grammarAccess.getValOperationRule()); } 
	 EOF 
;

// Rule ValOperation
ruleValOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getValOperationAccess().getGroup()); }
(rule__ValOperation__Group__0)
{ after(grammarAccess.getValOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression :
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
(rule__ValueExpression__Alternatives)
{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation :
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
(rule__CompareOperation__Group__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOperation
entryRuleNotOperation :
{ before(grammarAccess.getNotOperationRule()); }
	 ruleNotOperation
{ after(grammarAccess.getNotOperationRule()); } 
	 EOF 
;

// Rule NotOperation
ruleNotOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNotOperationAccess().getGroup()); }
(rule__NotOperation__Group__0)
{ after(grammarAccess.getNotOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOrNormalExpression
entryRuleNotOrNormalExpression :
{ before(grammarAccess.getNotOrNormalExpressionRule()); }
	 ruleNotOrNormalExpression
{ after(grammarAccess.getNotOrNormalExpressionRule()); } 
	 EOF 
;

// Rule NotOrNormalExpression
ruleNotOrNormalExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives()); }
(rule__NotOrNormalExpression__Alternatives)
{ after(grammarAccess.getNotOrNormalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperation
entryRuleAndOperation :
{ before(grammarAccess.getAndOperationRule()); }
	 ruleAndOperation
{ after(grammarAccess.getAndOperationRule()); } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAndOperationAccess().getGroup()); }
(rule__AndOperation__Group__0)
{ after(grammarAccess.getAndOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperation
entryRuleOrOperation :
{ before(grammarAccess.getOrOperationRule()); }
	 ruleOrOperation
{ after(grammarAccess.getOrOperationRule()); } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getOrOperationAccess().getGroup()); }
(rule__OrOperation__Group__0)
{ after(grammarAccess.getOrOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression :
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
(rule__BooleanExpression__Alternatives)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression :
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getPrimaryExpressionAccess().getBooleanExpressionParserRuleCall()); }
	ruleBooleanExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBooleanExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule OperatorKind
ruleOperatorKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorKindAccess().getAlternatives()); }
(rule__OperatorKind__Alternatives)
{ after(grammarAccess.getOperatorKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValOperator
ruleValOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorOr
ruleOperatorOr
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorAnd
ruleOperatorAnd
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSignalsAssignment_0_0()); }
(rule__Model__SignalsAssignment_0_0)
{ after(grammarAccess.getModelAccess().getSignalsAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getVariablesAssignment_0_1()); }
(rule__Model__VariablesAssignment_0_1)
{ after(grammarAccess.getModelAccess().getVariablesAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Effect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
	ruleEmission
{ after(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getHostCodeParserRuleCall_2()); }
	ruleHostCode
{ after(grammarAccess.getEffectAccess().getHostCodeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getValueExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getValueExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getValOperationParserRuleCall_2()); }
	ruleValOperation
{ after(grammarAccess.getValueExpressionAccess().getValOperationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
	ruleVariableReference
{ after(grammarAccess.getValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrNormalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getNotOperationParserRuleCall_0()); }
	ruleNotOperation
{ after(grammarAccess.getNotOrNormalExpressionAccess().getNotOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotOrNormalExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getNotOrNormalExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getSignalReferenceParserRuleCall_1()); }
	ruleSignalReference
{ after(grammarAccess.getBooleanExpressionAccess().getSignalReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getCompareOperationParserRuleCall_2()); }
	ruleCompareOperation
{ after(grammarAccess.getBooleanExpressionAccess().getCompareOperationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getGroup_3()); }
(rule__BooleanExpression__Group_3__0)
{ after(grammarAccess.getBooleanExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorKindAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getOperatorKindAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getOperatorKindAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorKindAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getOperatorKindAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorKindAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getNOTEnumLiteralDeclaration_5()); }
(	'not' 
)
{ after(grammarAccess.getOperatorKindAccess().getNOTEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getANDEnumLiteralDeclaration_6()); }
(	'and' 
)
{ after(grammarAccess.getOperatorKindAccess().getANDEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getOREnumLiteralDeclaration_7()); }
(	'or' 
)
{ after(grammarAccess.getOperatorKindAccess().getOREnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getADDEnumLiteralDeclaration_8()); }
(	'+' 
)
{ after(grammarAccess.getOperatorKindAccess().getADDEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getSUBEnumLiteralDeclaration_9()); }
(	'-' 
)
{ after(grammarAccess.getOperatorKindAccess().getSUBEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getMULTEnumLiteralDeclaration_10()); }
(	'*' 
)
{ after(grammarAccess.getOperatorKindAccess().getMULTEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getDIVEnumLiteralDeclaration_11()); }
(	'div' 
)
{ after(grammarAccess.getOperatorKindAccess().getDIVEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getMODEnumLiteralDeclaration_12()); }
(	'mod' 
)
{ after(grammarAccess.getOperatorKindAccess().getMODEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getVALEnumLiteralDeclaration_13()); }
(	'?' 
)
{ after(grammarAccess.getOperatorKindAccess().getVALEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getOperatorKindAccess().getPREEnumLiteralDeclaration_14()); }
(	'pre' 
)
{ after(grammarAccess.getOperatorKindAccess().getPREEnumLiteralDeclaration_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_0()); }
(rule__Model__Alternatives_0)*
{ after(grammarAccess.getModelAccess().getAlternatives_0()); }
)

	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)*
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsAssignment_1_0()); }
(rule__Model__ActionsAssignment_1_0)
{ after(grammarAccess.getModelAccess().getActionsAssignment_1_0()); }
)

	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getModelAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getTriggerAssignment_0()); }
(rule__Action__TriggerAssignment_0)?
{ after(grammarAccess.getActionAccess().getTriggerAssignment_0()); }
)

	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getGroup_1()); }
(rule__Action__Group_1__0)?
{ after(grammarAccess.getActionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getActionAccess().getSolidusKeyword_1_0()); }
)

	rule__Action__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEffectsAssignment_1_1()); }
(rule__Action__EffectsAssignment_1_1)*
{ after(grammarAccess.getActionAccess().getEffectsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
(rule__Emission__SignalAssignment_0)
{ after(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
)

	rule__Emission__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getGroup_1()); }
(rule__Emission__Group_1__0)?
{ after(grammarAccess.getEmissionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emission__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__Emission__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1()); }
(rule__Emission__NewValueAssignment_1_1)
{ after(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1()); }
)

	rule__Emission__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Signal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getInputKeyword_0()); }

	'input' 

{ after(grammarAccess.getSignalAccess().getInputKeyword_0()); }
)

	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameAssignment_1()); }
(rule__Signal__NameAssignment_1)
{ after(grammarAccess.getSignalAccess().getNameAssignment_1()); }
)

	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getSignalAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVariableAccess().getVarKeyword_0()); }
)

	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
(rule__Variable__NameAssignment_1)
{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)

	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getVariableAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
(rule__ValOperation__OperatorAssignment_0)
{ after(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
)

	rule__ValOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ValOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
(rule__ValOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getCompareOperationAccess().getValueExpressionParserRuleCall_0()); }
)

	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_1()); }
(rule__CompareOperation__Group_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperationSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperationSubExpressionsAction_1_0()); }
)

	rule__CompareOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
(rule__CompareOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__CompareOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getOperatorsAssignment_0()); }
(rule__NotOperation__OperatorsAssignment_0)
{ after(grammarAccess.getNotOperationAccess().getOperatorsAssignment_0()); }
)

	rule__NotOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1()); }
(rule__NotOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getNotOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getNotOrNormalExpressionParserRuleCall_0()); }
	ruleNotOrNormalExpression
{ after(grammarAccess.getAndOperationAccess().getNotOrNormalExpressionParserRuleCall_0()); }
)

	rule__AndOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getGroup_1()); }
(rule__AndOperation__Group_1__0)*
{ after(grammarAccess.getAndOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperationSubExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getAndOperationAccess().getOperationSubExpressionAction_1_0()); }
)

	rule__AndOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
(rule__AndOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__AndOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionAssignment_1_2()); }
(rule__AndOperation__SubExpressionAssignment_1_2)
{ after(grammarAccess.getAndOperationAccess().getSubExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
	ruleAndOperation
{ after(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
)

	rule__OrOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getGroup_1()); }
(rule__OrOperation__Group_1__0)*
{ after(grammarAccess.getOrOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrOperationAccess().getOperationSubExpressionsAction_1_0()); }
)

	rule__OrOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
(rule__OrOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__OrOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)

	rule__BooleanExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall_3_1()); }
	ruleOrOperation
{ after(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall_3_1()); }
)

	rule__BooleanExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Model__SignalsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0_0()); }
	ruleSignal{ after(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VariablesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_0_1_0()); }
	ruleVariable{ after(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ActionsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsActionParserRuleCall_1_0_0()); }
	ruleAction{ after(grammarAccess.getModelAccess().getActionsActionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TriggerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getTriggerPrimaryExpressionParserRuleCall_0_0()); }
	rulePrimaryExpression{ after(grammarAccess.getActionAccess().getTriggerPrimaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__EffectsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_1_1_0()); }
	ruleEffect{ after(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__SignalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__NewValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValuePrimaryExpressionParserRuleCall_1_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEmissionAccess().getNewValuePrimaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionPrimaryExpressionParserRuleCall_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getAssignmentAccess().getExpressionPrimaryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__ReferenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getReferenceSignalCrossReference_0()); }
(
{ before(grammarAccess.getSignalReferenceAccess().getReferenceSignalIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getSignalReferenceAccess().getReferenceSignalIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getSignalReferenceAccess().getReferenceSignalCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__ReferenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getReferenceVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getReferenceVariableIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getReferenceVariableIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getReferenceVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostCode__CodeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getCodeSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getHostCodeAccess().getCodeSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
	ruleValOperator{ after(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
	ruleSignalReference{ after(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsValueExpressionParserRuleCall_1_2_0()); }
	ruleValueExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsValueExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__OperatorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getOperatorsNotOperatorEnumRuleCall_0_0()); }
	ruleNotOperator{ after(grammarAccess.getNotOperationAccess().getOperatorsNotOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getNotOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
	ruleOperatorAnd{ after(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__SubExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0()); }
	ruleNotOrNormalExpression{ after(grammarAccess.getAndOperationAccess().getSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
	ruleOperatorOr{ after(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
	ruleAndOperation{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') ('-'|'+')? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


