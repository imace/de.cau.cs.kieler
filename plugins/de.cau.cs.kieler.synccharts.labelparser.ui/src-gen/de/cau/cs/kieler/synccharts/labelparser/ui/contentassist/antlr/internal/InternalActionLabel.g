/*
* generated by Xtext
*/
grammar InternalActionLabel;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.labelparser.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.labelparser.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import de.cau.cs.kieler.synccharts.labelparser.services.ActionLabelGrammarAccess;

}

@parser::members {
 
 	private ActionLabelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ActionLabelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEffect
entryRuleEffect 
:
{ before(grammarAccess.getEffectRule()); }
	 ruleEffect
{ after(grammarAccess.getEffectRule()); } 
	 EOF 
;

// Rule Effect
ruleEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectAccess().getAlternatives()); }
(rule__Effect__Alternatives)
{ after(grammarAccess.getEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmission
entryRuleEmission 
:
{ before(grammarAccess.getEmissionRule()); }
	 ruleEmission
{ after(grammarAccess.getEmissionRule()); } 
	 EOF 
;

// Rule Emission
ruleEmission
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmissionAccess().getGroup()); }
(rule__Emission__Group__0)
{ after(grammarAccess.getEmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalReference
entryRuleSignalReference 
:
{ before(grammarAccess.getSignalReferenceRule()); }
	 ruleSignalReference
{ after(grammarAccess.getSignalReferenceRule()); } 
	 EOF 
;

// Rule SignalReference
ruleSignalReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup()); }
(rule__SignalReference__Group__0)
{ after(grammarAccess.getSignalReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleValOperation
entryRuleValOperation 
:
{ before(grammarAccess.getValOperationRule()); }
	 ruleValOperation
{ after(grammarAccess.getValOperationRule()); } 
	 EOF 
;

// Rule ValOperation
ruleValOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValOperationAccess().getGroup()); }
(rule__ValOperation__Group__0)
{ after(grammarAccess.getValOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExpressionAccess().getPlusOperationParserRuleCall()); }
	rulePlusOperation
{ after(grammarAccess.getValueExpressionAccess().getPlusOperationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesedValueExpression
entryRuleParanthesedValueExpression 
:
{ before(grammarAccess.getParanthesedValueExpressionRule()); }
	 ruleParanthesedValueExpression
{ after(grammarAccess.getParanthesedValueExpressionRule()); } 
	 EOF 
;

// Rule ParanthesedValueExpression
ruleParanthesedValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getAlternatives()); }
(rule__ParanthesedValueExpression__Alternatives)
{ after(grammarAccess.getParanthesedValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusOperation
entryRulePlusOperation 
:
{ before(grammarAccess.getPlusOperationRule()); }
	 rulePlusOperation
{ after(grammarAccess.getPlusOperationRule()); } 
	 EOF 
;

// Rule PlusOperation
rulePlusOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusOperationAccess().getGroup()); }
(rule__PlusOperation__Group__0)
{ after(grammarAccess.getPlusOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultOrDivOperation
entryRuleMultOrDivOperation 
:
{ before(grammarAccess.getMultOrDivOperationRule()); }
	 ruleMultOrDivOperation
{ after(grammarAccess.getMultOrDivOperationRule()); } 
	 EOF 
;

// Rule MultOrDivOperation
ruleMultOrDivOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getAlternatives()); }
(rule__MultOrDivOperation__Alternatives)
{ after(grammarAccess.getMultOrDivOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultOperation
entryRuleMultOperation 
:
{ before(grammarAccess.getMultOperationRule()); }
	 ruleMultOperation
{ after(grammarAccess.getMultOperationRule()); } 
	 EOF 
;

// Rule MultOperation
ruleMultOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultOperationAccess().getGroup()); }
(rule__MultOperation__Group__0)
{ after(grammarAccess.getMultOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivOperation
entryRuleDivOperation 
:
{ before(grammarAccess.getDivOperationRule()); }
	 ruleDivOperation
{ after(grammarAccess.getDivOperationRule()); } 
	 EOF 
;

// Rule DivOperation
ruleDivOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivOperationAccess().getGroup()); }
(rule__DivOperation__Group__0)
{ after(grammarAccess.getDivOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreArithmOperation
entryRulePreArithmOperation 
:
{ before(grammarAccess.getPreArithmOperationRule()); }
	 rulePreArithmOperation
{ after(grammarAccess.getPreArithmOperationRule()); } 
	 EOF 
;

// Rule PreArithmOperation
rulePreArithmOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreArithmOperationAccess().getGroup()); }
(rule__PreArithmOperation__Group__0)
{ after(grammarAccess.getPreArithmOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreOrNormalValueExpression
entryRulePreOrNormalValueExpression 
:
{ before(grammarAccess.getPreOrNormalValueExpressionRule()); }
	 rulePreOrNormalValueExpression
{ after(grammarAccess.getPreOrNormalValueExpressionRule()); } 
	 EOF 
;

// Rule PreOrNormalValueExpression
rulePreOrNormalValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreOrNormalValueExpressionAccess().getAlternatives()); }
(rule__PreOrNormalValueExpression__Alternatives)
{ after(grammarAccess.getPreOrNormalValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
(rule__CompareOperation__Group__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup()); }
(rule__UnaryOperation__Group__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryParanthesedOperation
entryRuleUnaryParanthesedOperation 
:
{ before(grammarAccess.getUnaryParanthesedOperationRule()); }
	 ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryParanthesedOperationRule()); } 
	 EOF 
;

// Rule UnaryParanthesedOperation
ruleUnaryParanthesedOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getGroup()); }
(rule__UnaryParanthesedOperation__Group__0)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOrNormalExpression
entryRuleUnaryOrNormalExpression 
:
{ before(grammarAccess.getUnaryOrNormalExpressionRule()); }
	 ruleUnaryOrNormalExpression
{ after(grammarAccess.getUnaryOrNormalExpressionRule()); } 
	 EOF 
;

// Rule UnaryOrNormalExpression
ruleUnaryOrNormalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getAlternatives()); }
(rule__UnaryOrNormalExpression__Alternatives)
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperation
entryRuleAndOperation 
:
{ before(grammarAccess.getAndOperationRule()); }
	 ruleAndOperation
{ after(grammarAccess.getAndOperationRule()); } 
	 EOF 
;

// Rule AndOperation
ruleAndOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndOperationAccess().getGroup()); }
(rule__AndOperation__Group__0)
{ after(grammarAccess.getAndOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperation
entryRuleOrOperation 
:
{ before(grammarAccess.getOrOperationRule()); }
	 ruleOrOperation
{ after(grammarAccess.getOrOperationRule()); } 
	 EOF 
;

// Rule OrOperation
ruleOrOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrOperationAccess().getGroup()); }
(rule__OrOperation__Group__0)
{ after(grammarAccess.getOrOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesedBooleanExpression
entryRuleParanthesedBooleanExpression 
:
{ before(grammarAccess.getParanthesedBooleanExpressionRule()); }
	 ruleParanthesedBooleanExpression
{ after(grammarAccess.getParanthesedBooleanExpressionRule()); } 
	 EOF 
;

// Rule ParanthesedBooleanExpression
ruleParanthesedBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
(rule__ParanthesedBooleanExpression__Alternatives)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
	ruleOrOperation
{ after(grammarAccess.getBooleanExpressionAccess().getOrOperationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHostCode
entryRuleHostCode 
:
{ before(grammarAccess.getHostCodeRule()); }
	 ruleHostCode
{ after(grammarAccess.getHostCodeRule()); } 
	 EOF 
;

// Rule HostCode
ruleHostCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHostCodeAccess().getGroup()); }
(rule__HostCode__Group__0)
{ after(grammarAccess.getHostCodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule ValOperator
ruleValOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryParanthesedOperator
ruleUnaryParanthesedOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getUnaryParanthesedOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorOr
ruleOperatorOr
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOperatorOrAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OperatorAnd
ruleOperatorAnd
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getOperatorAndAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Rule PlusOperator
rulePlusOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
(rule__PlusOperator__Alternatives)
{ after(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getAlternatives()); }
(rule__MultOperator__Alternatives)
{ after(grammarAccess.getMultOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Effect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
	ruleEmission
{ after(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getHostCodeParserRuleCall_2()); }
	ruleHostCode
{ after(grammarAccess.getEffectAccess().getHostCodeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getGroup_1_0()); }
(rule__Emission__Group_1_0__0)
{ after(grammarAccess.getEmissionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getEmissionAccess().getGroup_1_1()); }
(rule__Emission__Group_1_1__0)
{ after(grammarAccess.getEmissionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2_0()); }
(rule__Assignment__ExpressionAssignment_2_0)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2_1()); }
(rule__Assignment__ExpressionAssignment_2_1)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getParanthesedValueExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getParanthesedValueExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getValOperationParserRuleCall_2()); }
	ruleValOperation
{ after(grammarAccess.getParanthesedValueExpressionAccess().getValOperationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
	ruleVariableReference
{ after(grammarAccess.getParanthesedValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getHostCodeParserRuleCall_4()); }
	ruleHostCode
{ after(grammarAccess.getParanthesedValueExpressionAccess().getHostCodeParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getGroup_5()); }
(rule__ParanthesedValueExpression__Group_5__0)
{ after(grammarAccess.getParanthesedValueExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getGroup_6()); }
(rule__ParanthesedValueExpression__Group_6__0)
{ after(grammarAccess.getParanthesedValueExpressionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOrDivOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getMultOperationParserRuleCall_0()); }
	ruleMultOperation
{ after(grammarAccess.getMultOrDivOperationAccess().getMultOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMultOrDivOperationAccess().getGroup_1()); }
(rule__MultOrDivOperation__Group_1__0)
{ after(grammarAccess.getMultOrDivOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreOrNormalValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOrNormalValueExpressionAccess().getPreArithmOperationParserRuleCall_0()); }
	rulePreArithmOperation
{ after(grammarAccess.getPreOrNormalValueExpressionAccess().getPreArithmOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPreOrNormalValueExpressionAccess().getParanthesedValueExpressionParserRuleCall_1()); }
	ruleParanthesedValueExpression
{ after(grammarAccess.getPreOrNormalValueExpressionAccess().getParanthesedValueExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__SubExpressionsAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0_0()); }
	ruleParanthesedBooleanExpression
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsParanthesedBooleanExpressionParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsUnaryParanthesedOperationParserRuleCall_1_0_1()); }
	ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsUnaryParanthesedOperationParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrNormalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryParanthesedOperationParserRuleCall_1()); }
	ruleUnaryParanthesedOperation
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getUnaryParanthesedOperationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_2()); }
	ruleParanthesedBooleanExpression
{ after(grammarAccess.getUnaryOrNormalExpressionAccess().getParanthesedBooleanExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesedBooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getCompareOperationParserRuleCall_1()); }
	ruleCompareOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getCompareOperationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_2()); }
	ruleSignalReference
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getSignalReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getValOperationParserRuleCall_3()); }
	ruleValOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getValOperationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getHostCodeParserRuleCall_4()); }
	ruleHostCode
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getHostCodeParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_5()); }
(rule__ParanthesedBooleanExpression__Group_5__0)
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getPlusOperatorAccess().getADDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getPlusOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1()); }
(	'mod' 
)
{ after(grammarAccess.getMultOperatorAccess().getMODEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getIsImmediateAssignment_0()); }
(rule__Action__IsImmediateAssignment_0)?
{ after(grammarAccess.getActionAccess().getIsImmediateAssignment_0()); }
)

	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDelayAssignment_1()); }
(rule__Action__DelayAssignment_1)?
{ after(grammarAccess.getActionAccess().getDelayAssignment_1()); }
)

	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getTriggerAssignment_2()); }
(rule__Action__TriggerAssignment_2)?
{ after(grammarAccess.getActionAccess().getTriggerAssignment_2()); }
)

	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getGroup_3()); }
(rule__Action__Group_3__0)?
{ after(grammarAccess.getActionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Action__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSolidusKeyword_3_0()); }

	'/' 

{ after(grammarAccess.getActionAccess().getSolidusKeyword_3_0()); }
)

	rule__Action__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getGroup_3_1()); }
(rule__Action__Group_3_1__0)*
{ after(grammarAccess.getActionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEffectsAssignment_3_1_0()); }
(rule__Action__EffectsAssignment_3_1_0)
{ after(grammarAccess.getActionAccess().getEffectsAssignment_3_1_0()); }
)

	rule__Action__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getCommaKeyword_3_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getActionAccess().getCommaKeyword_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
(rule__Emission__SignalAssignment_0)
{ after(grammarAccess.getEmissionAccess().getSignalAssignment_0()); }
)

	rule__Emission__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getAlternatives_1()); }
(rule__Emission__Alternatives_1)?
{ after(grammarAccess.getEmissionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Emission__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0_0()); }

	'(' 

{ after(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0_0()); }
)

	rule__Emission__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueAssignment_1_0_1()); }
(rule__Emission__NewValueAssignment_1_0_1)
{ after(grammarAccess.getEmissionAccess().getNewValueAssignment_1_0_1()); }
)

	rule__Emission__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_0_2()); }

	')' 

{ after(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Emission__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_1_0()); }
)

	rule__Emission__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1_1()); }
(rule__Emission__NewValueAssignment_1_1_1)
{ after(grammarAccess.getEmissionAccess().getNewValueAssignment_1_1_1()); }
)

	rule__Emission__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Emission__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_1_2()); }

	')' 

{ after(grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives_2()); }
(rule__Assignment__Alternatives_2)
{ after(grammarAccess.getAssignmentAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignalReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalAssignment_0()); }
(rule__SignalReference__SignalAssignment_0)
{ after(grammarAccess.getSignalReferenceAccess().getSignalAssignment_0()); }
)

	rule__SignalReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup_1()); }
(rule__SignalReference__Group_1__0)?
{ after(grammarAccess.getSignalReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignalReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSignalReferenceAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__SignalReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getGroup_1_1()); }
(rule__SignalReference__Group_1_1__0)*
{ after(grammarAccess.getSignalReferenceAccess().getGroup_1_1()); }
)

	rule__SignalReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSignalReferenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignalReference__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
(rule__SignalReference__SubExpressionsAssignment_1_1_0)
{ after(grammarAccess.getSignalReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
)

	rule__SignalReference__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SignalReference__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getCommaKeyword_1_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getSignalReferenceAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
(rule__VariableReference__VariableAssignment_0)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
)

	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
(rule__VariableReference__Group_1__0)?
{ after(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__VariableReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_1_1()); }
(rule__VariableReference__Group_1_1__0)*
{ after(grammarAccess.getVariableReferenceAccess().getGroup_1_1()); }
)

	rule__VariableReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
(rule__VariableReference__SubExpressionsAssignment_1_1_0)
{ after(grammarAccess.getVariableReferenceAccess().getSubExpressionsAssignment_1_1_0()); }
)

	rule__VariableReference__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getCommaKeyword_1_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getVariableReferenceAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
(rule__ValOperation__OperatorAssignment_0)
{ after(grammarAccess.getValOperationAccess().getOperatorAssignment_0()); }
)

	rule__ValOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ValOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
(rule__ValOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getValOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParanthesedValueExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getParanthesedValueExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

	rule__ParanthesedValueExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValueExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getPlusOperationParserRuleCall_5_1()); }
	rulePlusOperation
{ after(grammarAccess.getParanthesedValueExpressionAccess().getPlusOperationParserRuleCall_5_1()); }
)

	rule__ParanthesedValueExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValueExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getParanthesedValueExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParanthesedValueExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getLeftParenthesisKeyword_6_0()); }

	'(' 

{ after(grammarAccess.getParanthesedValueExpressionAccess().getLeftParenthesisKeyword_6_0()); }
)

	rule__ParanthesedValueExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValueExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getDivOperationParserRuleCall_6_1()); }
	ruleDivOperation
{ after(grammarAccess.getParanthesedValueExpressionAccess().getDivOperationParserRuleCall_6_1()); }
)

	rule__ParanthesedValueExpression__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedValueExpression__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedValueExpressionAccess().getRightParenthesisKeyword_6_2()); }

	')' 

{ after(grammarAccess.getParanthesedValueExpressionAccess().getRightParenthesisKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PlusOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getMultOrDivOperationParserRuleCall_0()); }
	ruleMultOrDivOperation
{ after(grammarAccess.getPlusOperationAccess().getMultOrDivOperationParserRuleCall_0()); }
)

	rule__PlusOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getGroup_1()); }
(rule__PlusOperation__Group_1__0)*
{ after(grammarAccess.getPlusOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getPlusOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__PlusOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorAssignment_1_1()); }
(rule__PlusOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getPlusOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__PlusOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__PlusOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getPlusOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultOrDivOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getMultOrDivOperationAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__MultOrDivOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultOrDivOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getDivOperationParserRuleCall_1_1()); }
	ruleDivOperation
{ after(grammarAccess.getMultOrDivOperationAccess().getDivOperationParserRuleCall_1_1()); }
)

	rule__MultOrDivOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__MultOrDivOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOrDivOperationAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getMultOrDivOperationAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getPreOrNormalValueExpressionParserRuleCall_0()); }
	rulePreOrNormalValueExpression
{ after(grammarAccess.getMultOperationAccess().getPreOrNormalValueExpressionParserRuleCall_0()); }
)

	rule__MultOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getGroup_1()); }
(rule__MultOperation__Group_1__0)*
{ after(grammarAccess.getMultOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__MultOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorAssignment_1_1()); }
(rule__MultOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getMultOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__MultOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__MultOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__MultOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getMultOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getPreOrNormalValueExpressionParserRuleCall_0()); }
	rulePreOrNormalValueExpression
{ after(grammarAccess.getDivOperationAccess().getPreOrNormalValueExpressionParserRuleCall_0()); }
)

	rule__DivOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getGroup_1()); }
(rule__DivOperation__Group_1__0)*
{ after(grammarAccess.getDivOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getDivOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__DivOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorAssignment_1_1()); }
(rule__DivOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getDivOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__DivOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__DivOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__DivOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getDivOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PreArithmOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getOperatorAssignment_0()); }
(rule__PreArithmOperation__OperatorAssignment_0)
{ after(grammarAccess.getPreArithmOperationAccess().getOperatorAssignment_0()); }
)

	rule__PreArithmOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPreArithmOperationAccess().getLeftParenthesisKeyword_1()); }
)

	rule__PreArithmOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getSubExpressionsAssignment_2()); }
(rule__PreArithmOperation__SubExpressionsAssignment_2)
{ after(grammarAccess.getPreArithmOperationAccess().getSubExpressionsAssignment_2()); }
)

	rule__PreArithmOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__PreArithmOperation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPreArithmOperationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CompareOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getCompareOperationAccess().getValueExpressionParserRuleCall_0()); }
)

	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_1()); }
(rule__CompareOperation__Group_1__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__CompareOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
(rule__CompareOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__CompareOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0()); }
(rule__UnaryOperation__OperatorAssignment_0)
{ after(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0()); }
)

	rule__UnaryOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsAssignment_1()); }
(rule__UnaryOperation__SubExpressionsAssignment_1)
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryParanthesedOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorAssignment_0()); }
(rule__UnaryParanthesedOperation__OperatorAssignment_0)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorAssignment_0()); }
)

	rule__UnaryParanthesedOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getUnaryParanthesedOperationAccess().getLeftParenthesisKeyword_1()); }
)

	rule__UnaryParanthesedOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsAssignment_2()); }
(rule__UnaryParanthesedOperation__SubExpressionsAssignment_2)
{ after(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsAssignment_2()); }
)

	rule__UnaryParanthesedOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryParanthesedOperation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getUnaryParanthesedOperationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AndOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getUnaryOrNormalExpressionParserRuleCall_0()); }
	ruleUnaryOrNormalExpression
{ after(grammarAccess.getAndOperationAccess().getUnaryOrNormalExpressionParserRuleCall_0()); }
)

	rule__AndOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getGroup_1()); }
(rule__AndOperation__Group_1__0)*
{ after(grammarAccess.getAndOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAndOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__AndOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
(rule__AndOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getAndOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__AndOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AndOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__AndOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getAndOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
	ruleAndOperation
{ after(grammarAccess.getOrOperationAccess().getAndOperationParserRuleCall_0()); }
)

	rule__OrOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getGroup_1()); }
(rule__OrOperation__Group_1__0)*
{ after(grammarAccess.getOrOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getOrOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

	rule__OrOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
(rule__OrOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getOrOperationAccess().getOperatorAssignment_1_1()); }
)

	rule__OrOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OrOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__OrOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParanthesedBooleanExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

	rule__ParanthesedBooleanExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_5_1()); }
	ruleOrOperation
{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getOrOperationParserRuleCall_5_1()); }
)

	rule__ParanthesedBooleanExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesedBooleanExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getParanthesedBooleanExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HostCode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getCodeAssignment_0()); }
(rule__HostCode__CodeAssignment_0)
{ after(grammarAccess.getHostCodeAccess().getCodeAssignment_0()); }
)

	rule__HostCode__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__HostCode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getGroup_1()); }
(rule__HostCode__Group_1__0)?
{ after(grammarAccess.getHostCodeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HostCode__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getHostCodeAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__HostCode__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__HostCode__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getTypeAssignment_1_1()); }
(rule__HostCode__TypeAssignment_1_1)
{ after(grammarAccess.getHostCodeAccess().getTypeAssignment_1_1()); }
)

	rule__HostCode__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__HostCode__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getHostCodeAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Action__IsImmediateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0()); }
(
{ before(grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0()); }

	'#' 

{ after(grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0()); }
)

{ after(grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DelayAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TriggerAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getTriggerBooleanExpressionParserRuleCall_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getActionAccess().getTriggerBooleanExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__EffectsAssignment_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_3_1_0_0()); }
	ruleEffect{ after(grammarAccess.getActionAccess().getEffectsEffectParserRuleCall_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__SignalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
(
{ before(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEmissionAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEmissionAccess().getSignalSignalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__NewValueAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueValueExpressionParserRuleCall_1_0_1_0()); }
	ruleValueExpression{ after(grammarAccess.getEmissionAccess().getNewValueValueExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Emission__NewValueAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmissionAccess().getNewValueBooleanExpressionParserRuleCall_1_1_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getEmissionAccess().getNewValueBooleanExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionValueExpressionParserRuleCall_2_0_0()); }
	ruleValueExpression{ after(grammarAccess.getAssignmentAccess().getExpressionValueExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionBooleanExpressionParserRuleCall_2_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getAssignmentAccess().getExpressionBooleanExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SignalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0_0()); }
(
{ before(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSignalReferenceAccess().getSignalSignalCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalReference__SubExpressionsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
	ruleExpression{ after(grammarAccess.getSignalReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__SubExpressionsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
	ruleExpression{ after(grammarAccess.getVariableReferenceAccess().getSubExpressionsExpressionParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFloatTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBooleanTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
	ruleValOperator{ after(grammarAccess.getValOperationAccess().getOperatorValOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
	ruleSignalReference{ after(grammarAccess.getValOperationAccess().getSubExpressionsSignalReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getOperatorPlusOperatorEnumRuleCall_1_1_0()); }
	rulePlusOperator{ after(grammarAccess.getPlusOperationAccess().getOperatorPlusOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOperationAccess().getSubExpressionsMultOrDivOperationParserRuleCall_1_2_0()); }
	ruleMultOrDivOperation{ after(grammarAccess.getPlusOperationAccess().getSubExpressionsMultOrDivOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
	ruleMultOperator{ after(grammarAccess.getMultOperationAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperationAccess().getSubExpressionsPreOrNormalValueExpressionParserRuleCall_1_2_0()); }
	rulePreOrNormalValueExpression{ after(grammarAccess.getMultOperationAccess().getSubExpressionsPreOrNormalValueExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
	ruleDivOperator{ after(grammarAccess.getDivOperationAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperationAccess().getSubExpressionsPreOrNormalValueExpressionParserRuleCall_1_2_0()); }
	rulePreOrNormalValueExpression{ after(grammarAccess.getDivOperationAccess().getSubExpressionsPreOrNormalValueExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
	ruleUnaryParanthesedOperator{ after(grammarAccess.getPreArithmOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreArithmOperation__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreArithmOperationAccess().getSubExpressionsValOperationParserRuleCall_2_0()); }
	ruleValOperation{ after(grammarAccess.getPreArithmOperationAccess().getSubExpressionsValOperationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsValueExpressionParserRuleCall_1_2_0()); }
	ruleValueExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsValueExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__SubExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getSubExpressionsAlternatives_1_0()); }
(rule__UnaryOperation__SubExpressionsAlternatives_1_0)
{ after(grammarAccess.getUnaryOperationAccess().getSubExpressionsAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
	ruleUnaryParanthesedOperator{ after(grammarAccess.getUnaryParanthesedOperationAccess().getOperatorUnaryParanthesedOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryParanthesedOperation__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_2_0()); }
	ruleBooleanExpression{ after(grammarAccess.getUnaryParanthesedOperationAccess().getSubExpressionsBooleanExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
	ruleOperatorAnd{ after(grammarAccess.getAndOperationAccess().getOperatorOperatorAndEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperationAccess().getSubExpressionsUnaryOrNormalExpressionParserRuleCall_1_2_0()); }
	ruleUnaryOrNormalExpression{ after(grammarAccess.getAndOperationAccess().getSubExpressionsUnaryOrNormalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
	ruleOperatorOr{ after(grammarAccess.getOrOperationAccess().getOperatorOperatorOrEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
	ruleAndOperation{ after(grammarAccess.getOrOperationAccess().getSubExpressionsAndOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostCode__CodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getHostCodeAccess().getCodeSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostCode__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostCodeAccess().getTypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getHostCodeAccess().getTypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') '+'? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


