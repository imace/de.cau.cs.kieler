/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.interfacedeclparser.scoping;

import java.util.ArrayList;
import java.util.Collections;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import de.cau.cs.kieler.synccharts.Region;
import de.cau.cs.kieler.synccharts.State;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 * @author uru
 * @author car
 * 
 */
public class InterfaceDeclScopeProvider extends AbstractDeclarativeScopeProvider {
    
    /**
     * parent state.
     */
    public static State parent;

    /**
     * {@inheritDoc}
     */
    @Override
    public IScope getScope(EObject context, EReference reference) {
        if (parent != null) {
            Iterable<IEObjectDescription> li = getElements(parent);
            return new SimpleScope(li);
        }
        // this is likely to return the NULLSCOPE
        return super.getScope(context, reference);
    }

    /**
     * only the contained regions need to be scoped.
     * 
     * @param parentState
     *            state containing the regions being scoped
     * @return
     */
    private Iterable<IEObjectDescription> getElements(final State parentState) {
        ArrayList<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();

        for (Region r : parentState.getRegions()) {
            elements.add(new EObjectDescription(r.getId(), r, Collections.EMPTY_MAP));
        }

        return elements;
    }

}
