/*
* generated by Xtext
*/
grammar InternalInterfaceDecl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.synccharts.interfacedeclparser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.synccharts.interfacedeclparser.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.synccharts.interfacedeclparser.services.InterfaceDeclGrammarAccess;

}

@parser::members {

 	private InterfaceDeclGrammarAccess grammarAccess;
 	
    public InternalInterfaceDeclParser(TokenStream input, IAstFactory factory, InterfaceDeclGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/synccharts/interfacedeclparser/parser/antlr/internal/InternalInterfaceDecl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StateExtend";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStateExtend
entryRuleStateExtend returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateExtendRule(), currentNode); }
	 iv_ruleStateExtend=ruleStateExtend 
	 { $current=$iv_ruleStateExtend.current; } 
	 EOF 
;

// Rule StateExtend
ruleStateExtend returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'input' 
    {
        createLeafNode(grammarAccess.getStateExtendAccess().getInputKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateExtendAccess().getInputSignalsInputSignalsParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_inputSignals_1_0=ruleInputSignals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateExtendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"inputSignals",
	        		lv_inputSignals_1_0, 
	        		"InputSignals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'output' 
    {
        createLeafNode(grammarAccess.getStateExtendAccess().getOutputKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateExtendAccess().getOutputSignalsOutputSignalsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_outputSignals_3_0=ruleOutputSignals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateExtendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"outputSignals",
	        		lv_outputSignals_3_0, 
	        		"OutputSignals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'input' 
    {
        createLeafNode(grammarAccess.getStateExtendAccess().getInputKeyword_2_0(), null); 
    }
	'output' 
    {
        createLeafNode(grammarAccess.getStateExtendAccess().getOutputKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateExtendAccess().getInOutputSignalsInOutputSignalsParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_inOutputSignals_6_0=ruleInOutputSignals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateExtendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"inOutputSignals",
	        		lv_inOutputSignals_6_0, 
	        		"InOutputSignals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'signal' 
    {
        createLeafNode(grammarAccess.getStateExtendAccess().getSignalKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateExtendAccess().getSignalsSignalsParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_signals_8_0=ruleSignals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateExtendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_8_0, 
	        		"Signals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateExtendAccess().getRegionsRegionSignalDecParserRuleCall_4_0(), currentNode); 
	    }
		lv_regions_9_0=ruleRegionSignalDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateExtendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"regions",
	        		lv_regions_9_0, 
	        		"RegionSignalDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+
;





// Entry rule entryRuleRegionSignalDec
entryRuleRegionSignalDec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegionSignalDecRule(), currentNode); }
	 iv_ruleRegionSignalDec=ruleRegionSignalDec 
	 { $current=$iv_ruleRegionSignalDec.current; } 
	 EOF 
;

// Rule RegionSignalDec
ruleRegionSignalDec returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionSignalDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRegionSignalDecAccess().getRegionRegionCrossReference_0_0(), "region"); 
	}

)
)	':' 
    {
        createLeafNode(grammarAccess.getRegionSignalDecAccess().getColonKeyword_1(), null); 
    }
((	'signal' 
    {
        createLeafNode(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_signals_3_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionSignalDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_3_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_vars_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionSignalDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vars",
	        		lv_vars_4_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	',' 
    {
        createLeafNode(grammarAccess.getRegionSignalDecAccess().getCommaKeyword_3_0(), null); 
    }
((	'signal' 
    {
        createLeafNode(grammarAccess.getRegionSignalDecAccess().getSignalKeyword_3_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionSignalDecAccess().getSignalsSignalParserRuleCall_3_1_0_1_0(), currentNode); 
	    }
		lv_signals_7_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionSignalDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_7_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRegionSignalDecAccess().getVarsVariableParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_vars_8_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegionSignalDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vars",
	        		lv_vars_8_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*	';' 
    {
        createLeafNode(grammarAccess.getRegionSignalDecAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSignals
entryRuleSignals returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalsRule(), currentNode); }
	 iv_ruleSignals=ruleSignals 
	 { $current=$iv_ruleSignals.current; } 
	 EOF 
;

// Rule Signals
ruleSignals returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_signals_0_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_0_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalsAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_signals_2_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_2_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	';' 
    {
        createLeafNode(grammarAccess.getSignalsAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleInputSignals
entryRuleInputSignals returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInputSignalsRule(), currentNode); }
	 iv_ruleInputSignals=ruleInputSignals 
	 { $current=$iv_ruleInputSignals.current; } 
	 EOF 
;

// Rule InputSignals
ruleInputSignals returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_signals_0_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_0_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInputSignalsAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_signals_2_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_2_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	';' 
    {
        createLeafNode(grammarAccess.getInputSignalsAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleOutputSignals
entryRuleOutputSignals returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutputSignalsRule(), currentNode); }
	 iv_ruleOutputSignals=ruleOutputSignals 
	 { $current=$iv_ruleOutputSignals.current; } 
	 EOF 
;

// Rule OutputSignals
ruleOutputSignals returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_signals_0_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_0_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOutputSignalsAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_signals_2_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_2_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	';' 
    {
        createLeafNode(grammarAccess.getOutputSignalsAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleInOutputSignals
entryRuleInOutputSignals returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInOutputSignalsRule(), currentNode); }
	 iv_ruleInOutputSignals=ruleInOutputSignals 
	 { $current=$iv_ruleInOutputSignals.current; } 
	 EOF 
;

// Rule InOutputSignals
ruleInOutputSignals returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_signals_0_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInOutputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_0_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInOutputSignalsAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInOutputSignalsAccess().getSignalsSignalParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_signals_2_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInOutputSignalsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signals",
	        		lv_signals_2_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	';' 
    {
        createLeafNode(grammarAccess.getInOutputSignalsAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |((
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_1_1_0(), null); 
    }
(
(
		lv_initialValue_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_1_1_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
    |((
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_2_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_1_0(), null); 
    }
(
(
		lv_initialValue_6_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_2_1_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_6_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_2_2_0(), currentNode); 
	    }
		lv_type_7_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_name_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_3_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_3_1_0(), null); 
    }
(
(
		lv_initialValue_10_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_3_1_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_10_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_type_12_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_12_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_3_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_3_2_3_0(), currentNode); 
	    }
		lv_combineOperator_14_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"combineOperator",
	        		lv_combineOperator_14_0, 
	        		"CombineOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |((
(
		lv_name_15_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_4_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_15_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_4_1_0(), null); 
    }
(
(
		lv_initialValue_17_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_4_1_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_17_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(
(
		lv_hostType_18_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getHostTypeSTRINGTerminalRuleCall_4_2_0(), "hostType"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostType",
	        		lv_hostType_18_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
(
		lv_name_19_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_5_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_19_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getColonEqualsSignKeyword_5_1_0(), null); 
    }
(
(
		lv_initialValue_21_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getInitialValueSTRINGTerminalRuleCall_5_1_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_21_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_5_2_0(), null); 
    }
(
(
		lv_hostType_23_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getHostTypeSTRINGTerminalRuleCall_5_2_1_0(), "hostType"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostType",
	        		lv_hostType_23_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_5_2_2(), null); 
    }
(
(
		lv_hostCombineOperator_25_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_5_2_3_0(), "hostCombineOperator"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostCombineOperator",
	        		lv_hostCombineOperator_25_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
    |((
(
		lv_name_26_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_6_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_26_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_6_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_6_1_1_0(), currentNode); 
	    }
		lv_type_28_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_28_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_6_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_6_1_3_0(), currentNode); 
	    }
		lv_combineOperator_30_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"combineOperator",
	        		lv_combineOperator_30_0, 
	        		"CombineOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |((
(
		lv_name_31_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_7_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_31_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'combine' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getCombineKeyword_7_1_0(), null); 
    }
(
(
		lv_hostType_33_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getHostTypeSTRINGTerminalRuleCall_7_1_1_0(), "hostType"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostType",
	        		lv_hostType_33_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'with' 
    {
        createLeafNode(grammarAccess.getSignalAccess().getWithKeyword_7_1_2(), null); 
    }
(
(
		lv_hostCombineOperator_35_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_7_1_3_0(), "hostCombineOperator"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostCombineOperator",
	        		lv_hostCombineOperator_35_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(
(
		lv_initialValue_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getVariableAccess().getInitialValueSTRINGTerminalRuleCall_2_1_0(), "initialValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_3_0(), currentNode); 
	    }
		lv_type_4_0=ruleValueType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_4_0, 
	        		"ValueType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'host' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getHostKeyword_4_0(), null); 
    }
(
(
		lv_hostType_6_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getVariableAccess().getHostTypeSTRINGTerminalRuleCall_4_1_0(), "hostType"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostType",
	        		lv_hostType_6_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'PURE' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'BOOL' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'UNSIGNED' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'INT' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEGEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getINTEGEREnumLiteralDeclaration_3(), null); 
    }
)
    |(	'FLOAT' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'HOST' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_5(), null); 
    }
));



// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'NONE' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


