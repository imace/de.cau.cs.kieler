/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.interfacedeclparser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class InterfaceDeclGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateExtend");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cInputKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInputSignalsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInputSignalsInputSignalsParserRuleCall_0_1_0 = (RuleCall)cInputSignalsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOutputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOutputSignalsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOutputSignalsOutputSignalsParserRuleCall_1_1_0 = (RuleCall)cOutputSignalsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cInputKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cOutputKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cInOutputSignalsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInOutputSignalsInOutputSignalsParserRuleCall_2_2_0 = (RuleCall)cInOutputSignalsAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSignalKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignalsSignalsParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Assignment cRegionsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cRegionsRegionSignalDecParserRuleCall_4_0 = (RuleCall)cRegionsAssignment_4.eContents().get(0);
		
		//StateExtend:
		//  ("input" inputSignals+=InputSignals|"output" outputSignals+=OutputSignals|"input"
		//  "output" inOutputSignals+=InOutputSignals|"signal" signals+=Signals|regions+=
		//  RegionSignalDec)+; 
		//
		////==============================================================================
		//// "Buckets" containing the Signals / Regions with Signals
		////==============================================================================
		public ParserRule getRule() { return rule; }

		//("input" inputSignals+=InputSignals|"output" outputSignals+=OutputSignals|"input"
		//"output" inOutputSignals+=InOutputSignals|"signal" signals+=Signals|regions+=
		//RegionSignalDec)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"input" inputSignals+=InputSignals
		public Group getGroup_0() { return cGroup_0; }

		//"input"
		public Keyword getInputKeyword_0_0() { return cInputKeyword_0_0; }

		//inputSignals+=InputSignals
		public Assignment getInputSignalsAssignment_0_1() { return cInputSignalsAssignment_0_1; }

		//InputSignals
		public RuleCall getInputSignalsInputSignalsParserRuleCall_0_1_0() { return cInputSignalsInputSignalsParserRuleCall_0_1_0; }

		//"output" outputSignals+=OutputSignals
		public Group getGroup_1() { return cGroup_1; }

		//"output"
		public Keyword getOutputKeyword_1_0() { return cOutputKeyword_1_0; }

		//outputSignals+=OutputSignals
		public Assignment getOutputSignalsAssignment_1_1() { return cOutputSignalsAssignment_1_1; }

		//OutputSignals
		public RuleCall getOutputSignalsOutputSignalsParserRuleCall_1_1_0() { return cOutputSignalsOutputSignalsParserRuleCall_1_1_0; }

		//"input" "output" inOutputSignals+=InOutputSignals
		public Group getGroup_2() { return cGroup_2; }

		//"input"
		public Keyword getInputKeyword_2_0() { return cInputKeyword_2_0; }

		//"output"
		public Keyword getOutputKeyword_2_1() { return cOutputKeyword_2_1; }

		//inOutputSignals+=InOutputSignals
		public Assignment getInOutputSignalsAssignment_2_2() { return cInOutputSignalsAssignment_2_2; }

		//InOutputSignals
		public RuleCall getInOutputSignalsInOutputSignalsParserRuleCall_2_2_0() { return cInOutputSignalsInOutputSignalsParserRuleCall_2_2_0; }

		//"signal" signals+=Signals
		public Group getGroup_3() { return cGroup_3; }

		//"signal"
		public Keyword getSignalKeyword_3_0() { return cSignalKeyword_3_0; }

		//signals+=Signals
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//Signals
		public RuleCall getSignalsSignalsParserRuleCall_3_1_0() { return cSignalsSignalsParserRuleCall_3_1_0; }

		//regions+=RegionSignalDec
		public Assignment getRegionsAssignment_4() { return cRegionsAssignment_4; }

		//RegionSignalDec
		public RuleCall getRegionsRegionSignalDecParserRuleCall_4_0() { return cRegionsRegionSignalDecParserRuleCall_4_0; }
	}

	public class RegionSignalDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegionSignalDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRegionRegionCrossReference_0_0 = (CrossReference)cRegionAssignment_0.eContents().get(0);
		private final RuleCall cRegionRegionIDTerminalRuleCall_0_0_1 = (RuleCall)cRegionRegionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cSignalKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSignalsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_2_0_1_0 = (RuleCall)cSignalsAssignment_2_0_1.eContents().get(0);
		private final Assignment cVarsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_2_1_0 = (RuleCall)cVarsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cSignalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_3_1_0_1_0 = (RuleCall)cSignalsAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cVarsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_3_1_1_0 = (RuleCall)cVarsAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegionSignalDec:
		//  region=[synccharts::Region] ":" ("signal" signals+=Signal|vars+=Variable) ("," (
		//  "signal" signals+=Signal|vars+=Variable))* ";";
		public ParserRule getRule() { return rule; }

		//region=[synccharts::Region] ":" ("signal" signals+=Signal|vars+=Variable) ("," (
		//"signal" signals+=Signal|vars+=Variable))* ";"
		public Group getGroup() { return cGroup; }

		//region=[synccharts::Region]
		public Assignment getRegionAssignment_0() { return cRegionAssignment_0; }

		//[synccharts::Region]
		public CrossReference getRegionRegionCrossReference_0_0() { return cRegionRegionCrossReference_0_0; }

		//ID
		public RuleCall getRegionRegionIDTerminalRuleCall_0_0_1() { return cRegionRegionIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"signal" signals+=Signal|vars+=Variable
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"signal" signals+=Signal
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"signal"
		public Keyword getSignalKeyword_2_0_0() { return cSignalKeyword_2_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_2_0_1() { return cSignalsAssignment_2_0_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_2_0_1_0() { return cSignalsSignalParserRuleCall_2_0_1_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_2_1() { return cVarsAssignment_2_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_2_1_0() { return cVarsVariableParserRuleCall_2_1_0; }

		//("," ("signal" signals+=Signal|vars+=Variable))*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//"signal" signals+=Signal|vars+=Variable
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"signal" signals+=Signal
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"signal"
		public Keyword getSignalKeyword_3_1_0_0() { return cSignalKeyword_3_1_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_3_1_0_1() { return cSignalsAssignment_3_1_0_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_3_1_0_1_0() { return cSignalsSignalParserRuleCall_3_1_0_1_0; }

		//vars+=Variable
		public Assignment getVarsAssignment_3_1_1() { return cVarsAssignment_3_1_1; }

		//Variable
		public RuleCall getVarsVariableParserRuleCall_3_1_1_0() { return cVarsVariableParserRuleCall_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Signals:
		//  (signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class InputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InputSignals:
		//  (signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class OutputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OutputSignals:
		//  (signals+=Signal ("," signals+=Signal)*) ";";
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class InOutputSignalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InOutputSignals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSignalsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0_0 = (RuleCall)cSignalsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSignalsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_0_1_1_0 = (RuleCall)cSignalsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InOutputSignals:
		//  (signals+=Signal ("," signals+=Signal)*) ";"; 
		//
		//
		//	      
		//	
		//
		//
		////==============================================================================
		//// synccharts elements as needed
		////==============================================================================
		public ParserRule getRule() { return rule; }

		//(signals+=Signal ("," signals+=Signal)*) ";"
		public Group getGroup() { return cGroup; }

		//signals+=Signal ("," signals+=Signal)*
		public Group getGroup_0() { return cGroup_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_0() { return cSignalsAssignment_0_0; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0_0() { return cSignalsSignalParserRuleCall_0_0_0; }

		//("," signals+=Signal)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_0_1_1() { return cSignalsAssignment_0_1_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_1_1_0() { return cSignalsSignalParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cInitialValueAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cInitialValueAssignment_2_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypeValueTypeEnumRuleCall_2_2_0 = (RuleCall)cTypeAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cInitialValueAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCombineKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_2_1_0 = (RuleCall)cTypeAssignment_3_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Assignment cCombineOperatorAssignment_3_2_3 = (Assignment)cGroup_3_2.eContents().get(3);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_3_2_3_0 = (RuleCall)cCombineOperatorAssignment_3_2_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cInitialValueAssignment_4_1_1.eContents().get(0);
		private final Assignment cHostTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cHostTypeAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_5_0_0 = (RuleCall)cNameAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_5_1_1_0 = (RuleCall)cInitialValueAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCombineKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cHostTypeAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_5_2_1_0 = (RuleCall)cHostTypeAssignment_5_2_1.eContents().get(0);
		private final Keyword cWithKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cHostCombineOperatorAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_5_2_3_0 = (RuleCall)cHostCombineOperatorAssignment_5_2_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNameAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_6_0_0 = (RuleCall)cNameAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCombineKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cTypeAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_6_1_1_0 = (RuleCall)cTypeAssignment_6_1_1.eContents().get(0);
		private final Keyword cWithKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Assignment cCombineOperatorAssignment_6_1_3 = (Assignment)cGroup_6_1.eContents().get(3);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_6_1_3_0 = (RuleCall)cCombineOperatorAssignment_6_1_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cNameAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_7_0_0 = (RuleCall)cNameAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCombineKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cHostTypeAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_7_1_1_0 = (RuleCall)cHostTypeAssignment_7_1_1.eContents().get(0);
		private final Keyword cWithKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Assignment cHostCombineOperatorAssignment_7_1_3 = (Assignment)cGroup_7_1.eContents().get(3);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_7_1_3_0 = (RuleCall)cHostCombineOperatorAssignment_7_1_3.eContents().get(0);
		
		//Signal returns synccharts::Signal:
		//  name=ID|name=ID (":=" initialValue=STRING)|name=ID (":=" initialValue=STRING) type=
		//  ValueType|name=ID (":=" initialValue=STRING) ("combine" type=ValueType "with"
		//  combineOperator=CombineOperator)|name=ID (":=" initialValue=STRING) hostType=STRING
		//  |name=ID (":=" initialValue=STRING) ("combine" hostType=STRING "with"
		//  hostCombineOperator=STRING)|name=ID ("combine" type=ValueType "with" combineOperator
		//  =CombineOperator)|name=ID ("combine" hostType=STRING "with" hostCombineOperator=
		//  STRING); 
		//
		//
		////==============================================================================
		//// synccharts elements as needed
		////==============================================================================
		//
		//    
		//	
		//	
		//	  
		//	      
		//	        
		//	               
		//	        
		//	               
		//	          
		//	        
		//	
		//	
		//		
		//	
		//	// not working correctly yet
		public ParserRule getRule() { return rule; }

		//name=ID|name=ID (":=" initialValue=STRING)|name=ID (":=" initialValue=STRING) type=
		//ValueType|name=ID (":=" initialValue=STRING) ("combine" type=ValueType "with"
		//combineOperator=CombineOperator)|name=ID (":=" initialValue=STRING) hostType=STRING
		//|name=ID (":=" initialValue=STRING) ("combine" hostType=STRING "with"
		//hostCombineOperator=STRING)|name=ID ("combine" type=ValueType "with" combineOperator
		//=CombineOperator)|name=ID ("combine" hostType=STRING "with" hostCombineOperator=
		//STRING)
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//name=ID (":=" initialValue=STRING)
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":=" initialValue=STRING
		public Group getGroup_1_1() { return cGroup_1_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1_0() { return cColonEqualsSignKeyword_1_1_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_1_1_1() { return cInitialValueAssignment_1_1_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_1_1_1_0() { return cInitialValueSTRINGTerminalRuleCall_1_1_1_0; }

		//name=ID (":=" initialValue=STRING) type=ValueType
		public Group getGroup_2() { return cGroup_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//":=" initialValue=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_1_0() { return cColonEqualsSignKeyword_2_1_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_2_1_1() { return cInitialValueAssignment_2_1_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_2_1_1_0() { return cInitialValueSTRINGTerminalRuleCall_2_1_1_0; }

		//type=ValueType
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_2_2_0() { return cTypeValueTypeEnumRuleCall_2_2_0; }

		//name=ID (":=" initialValue=STRING) ("combine" type=ValueType "with" combineOperator=
		//CombineOperator)
		public Group getGroup_3() { return cGroup_3; }

		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }

		//":=" initialValue=STRING
		public Group getGroup_3_1() { return cGroup_3_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_3_1_0() { return cColonEqualsSignKeyword_3_1_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_3_1_1() { return cInitialValueAssignment_3_1_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_3_1_1_0() { return cInitialValueSTRINGTerminalRuleCall_3_1_1_0; }

		//"combine" type=ValueType "with" combineOperator=CombineOperator
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"combine"
		public Keyword getCombineKeyword_3_2_0() { return cCombineKeyword_3_2_0; }

		//type=ValueType
		public Assignment getTypeAssignment_3_2_1() { return cTypeAssignment_3_2_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_2_1_0() { return cTypeValueTypeEnumRuleCall_3_2_1_0; }

		//"with"
		public Keyword getWithKeyword_3_2_2() { return cWithKeyword_3_2_2; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_3_2_3() { return cCombineOperatorAssignment_3_2_3; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_3_2_3_0() { return cCombineOperatorCombineOperatorEnumRuleCall_3_2_3_0; }

		//name=ID (":=" initialValue=STRING) hostType=STRING
		public Group getGroup_4() { return cGroup_4; }

		//name=ID
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }

		//":=" initialValue=STRING
		public Group getGroup_4_1() { return cGroup_4_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_4_1_0() { return cColonEqualsSignKeyword_4_1_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_4_1_1() { return cInitialValueAssignment_4_1_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_4_1_1_0() { return cInitialValueSTRINGTerminalRuleCall_4_1_1_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_4_2() { return cHostTypeAssignment_4_2; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_4_2_0() { return cHostTypeSTRINGTerminalRuleCall_4_2_0; }

		//name=ID (":=" initialValue=STRING) ("combine" hostType=STRING "with"
		//hostCombineOperator=STRING)
		public Group getGroup_5() { return cGroup_5; }

		//name=ID
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0_0() { return cNameIDTerminalRuleCall_5_0_0; }

		//":=" initialValue=STRING
		public Group getGroup_5_1() { return cGroup_5_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_1_0() { return cColonEqualsSignKeyword_5_1_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_5_1_1() { return cInitialValueAssignment_5_1_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_5_1_1_0() { return cInitialValueSTRINGTerminalRuleCall_5_1_1_0; }

		//"combine" hostType=STRING "with" hostCombineOperator=STRING
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"combine"
		public Keyword getCombineKeyword_5_2_0() { return cCombineKeyword_5_2_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_5_2_1() { return cHostTypeAssignment_5_2_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_5_2_1_0() { return cHostTypeSTRINGTerminalRuleCall_5_2_1_0; }

		//"with"
		public Keyword getWithKeyword_5_2_2() { return cWithKeyword_5_2_2; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_5_2_3() { return cHostCombineOperatorAssignment_5_2_3; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_5_2_3_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_5_2_3_0; }

		//name=ID ("combine" type=ValueType "with" combineOperator=CombineOperator)
		public Group getGroup_6() { return cGroup_6; }

		//name=ID
		public Assignment getNameAssignment_6_0() { return cNameAssignment_6_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0_0() { return cNameIDTerminalRuleCall_6_0_0; }

		//"combine" type=ValueType "with" combineOperator=CombineOperator
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"combine"
		public Keyword getCombineKeyword_6_1_0() { return cCombineKeyword_6_1_0; }

		//type=ValueType
		public Assignment getTypeAssignment_6_1_1() { return cTypeAssignment_6_1_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_6_1_1_0() { return cTypeValueTypeEnumRuleCall_6_1_1_0; }

		//"with"
		public Keyword getWithKeyword_6_1_2() { return cWithKeyword_6_1_2; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_6_1_3() { return cCombineOperatorAssignment_6_1_3; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_6_1_3_0() { return cCombineOperatorCombineOperatorEnumRuleCall_6_1_3_0; }

		//name=ID ("combine" hostType=STRING "with" hostCombineOperator=STRING)
		public Group getGroup_7() { return cGroup_7; }

		//name=ID
		public Assignment getNameAssignment_7_0() { return cNameAssignment_7_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0_0() { return cNameIDTerminalRuleCall_7_0_0; }

		//"combine" hostType=STRING "with" hostCombineOperator=STRING
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"combine"
		public Keyword getCombineKeyword_7_1_0() { return cCombineKeyword_7_1_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_7_1_1() { return cHostTypeAssignment_7_1_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_7_1_1_0() { return cHostTypeSTRINGTerminalRuleCall_7_1_1_0; }

		//"with"
		public Keyword getWithKeyword_7_1_2() { return cWithKeyword_7_1_2; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_7_1_3() { return cHostCombineOperatorAssignment_7_1_3; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_7_1_3_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_7_1_3_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cInitialValueAssignment_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHostKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHostTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cHostTypeAssignment_4_1.eContents().get(0);
		
		//Variable returns synccharts::Variable:
		//  "var" name=ID (":=" initialValue=STRING)? type=ValueType? ("host" hostType=STRING)?; 
		//		
		//	
		//	// not working correctly yet
		public ParserRule getRule() { return rule; }

		//"var" name=ID (":=" initialValue=STRING)? type=ValueType? ("host" hostType=STRING)?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":=" initialValue=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }

		//initialValue=STRING
		public Assignment getInitialValueAssignment_2_1() { return cInitialValueAssignment_2_1; }

		//STRING
		public RuleCall getInitialValueSTRINGTerminalRuleCall_2_1_0() { return cInitialValueSTRINGTerminalRuleCall_2_1_0; }

		//type=ValueType?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_0() { return cTypeValueTypeEnumRuleCall_3_0; }

		//("host" hostType=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"host"
		public Keyword getHostKeyword_4_0() { return cHostKeyword_4_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_4_1() { return cHostTypeAssignment_4_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_4_1_0() { return cHostTypeSTRINGTerminalRuleCall_4_1_0; }
	}
	
	
	public class ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPUREKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBOOLKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSIGNEDUNSIGNEDKeyword_2_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTEGERINTKeyword_3_0 = (Keyword)cINTEGEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFLOATKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHOSTHOSTKeyword_5_0 = (Keyword)cHOSTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ValueType returns synccharts::ValueType:
		//  PURE | BOOL | UNSIGNED | INTEGER="INT" | FLOAT | HOST;
		public EnumRule getRule() { return rule; }

		//PURE | BOOL | UNSIGNED | INTEGER="INT" | FLOAT | HOST
		public Alternatives getAlternatives() { return cAlternatives; }

		//PURE
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }

		//"PURE"
		public Keyword getPUREPUREKeyword_0_0() { return cPUREPUREKeyword_0_0; }

		//BOOL
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }

		//"BOOL"
		public Keyword getBOOLBOOLKeyword_1_0() { return cBOOLBOOLKeyword_1_0; }

		//UNSIGNED
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_2() { return cUNSIGNEDEnumLiteralDeclaration_2; }

		//"UNSIGNED"
		public Keyword getUNSIGNEDUNSIGNEDKeyword_2_0() { return cUNSIGNEDUNSIGNEDKeyword_2_0; }

		//INTEGER="INT"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_3() { return cINTEGEREnumLiteralDeclaration_3; }

		//"INT"
		public Keyword getINTEGERINTKeyword_3_0() { return cINTEGERINTKeyword_3_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_4_0() { return cFLOATFLOATKeyword_4_0; }

		//HOST
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_5() { return cHOSTEnumLiteralDeclaration_5; }

		//"HOST"
		public Keyword getHOSTHOSTKeyword_5_0() { return cHOSTHOSTKeyword_5_0; }
	}

	public class CombineOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTAsteriskKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOROrKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum CombineOperator returns synccharts::CombineOperator:
		//  NONE | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
		public EnumRule getRule() { return rule; }

		//NONE | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getADDPlusSignKeyword_1_0() { return cADDPlusSignKeyword_1_0; }

		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULTAsteriskKeyword_2_0() { return cMULTAsteriskKeyword_2_0; }

		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }

		//"max"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }

		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }

		//"min"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }

		//"or"
		public Keyword getOROrKeyword_5_0() { return cOROrKeyword_5_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }

		//"and"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }

		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }

		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	
	private StateExtendElements pStateExtend;
	private RegionSignalDecElements pRegionSignalDec;
	private SignalsElements pSignals;
	private InputSignalsElements pInputSignals;
	private OutputSignalsElements pOutputSignals;
	private InOutputSignalsElements pInOutputSignals;
	private SignalElements pSignal;
	private VariableElements pVariable;
	private ValueTypeElements unknownRuleValueType;
	private CombineOperatorElements unknownRuleCombineOperator;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public InterfaceDeclGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateExtend:
	//  ("input" inputSignals+=InputSignals|"output" outputSignals+=OutputSignals|"input"
	//  "output" inOutputSignals+=InOutputSignals|"signal" signals+=Signals|regions+=
	//  RegionSignalDec)+; 
	//
	////==============================================================================
	//// "Buckets" containing the Signals / Regions with Signals
	////==============================================================================
	public StateExtendElements getStateExtendAccess() {
		return (pStateExtend != null) ? pStateExtend : (pStateExtend = new StateExtendElements());
	}
	
	public ParserRule getStateExtendRule() {
		return getStateExtendAccess().getRule();
	}

	//RegionSignalDec:
	//  region=[synccharts::Region] ":" ("signal" signals+=Signal|vars+=Variable) ("," (
	//  "signal" signals+=Signal|vars+=Variable))* ";";
	public RegionSignalDecElements getRegionSignalDecAccess() {
		return (pRegionSignalDec != null) ? pRegionSignalDec : (pRegionSignalDec = new RegionSignalDecElements());
	}
	
	public ParserRule getRegionSignalDecRule() {
		return getRegionSignalDecAccess().getRule();
	}

	//Signals:
	//  (signals+=Signal ("," signals+=Signal)*) ";";
	public SignalsElements getSignalsAccess() {
		return (pSignals != null) ? pSignals : (pSignals = new SignalsElements());
	}
	
	public ParserRule getSignalsRule() {
		return getSignalsAccess().getRule();
	}

	//InputSignals:
	//  (signals+=Signal ("," signals+=Signal)*) ";";
	public InputSignalsElements getInputSignalsAccess() {
		return (pInputSignals != null) ? pInputSignals : (pInputSignals = new InputSignalsElements());
	}
	
	public ParserRule getInputSignalsRule() {
		return getInputSignalsAccess().getRule();
	}

	//OutputSignals:
	//  (signals+=Signal ("," signals+=Signal)*) ";";
	public OutputSignalsElements getOutputSignalsAccess() {
		return (pOutputSignals != null) ? pOutputSignals : (pOutputSignals = new OutputSignalsElements());
	}
	
	public ParserRule getOutputSignalsRule() {
		return getOutputSignalsAccess().getRule();
	}

	//InOutputSignals:
	//  (signals+=Signal ("," signals+=Signal)*) ";"; 
	//
	//
	//	      
	//	
	//
	//
	////==============================================================================
	//// synccharts elements as needed
	////==============================================================================
	public InOutputSignalsElements getInOutputSignalsAccess() {
		return (pInOutputSignals != null) ? pInOutputSignals : (pInOutputSignals = new InOutputSignalsElements());
	}
	
	public ParserRule getInOutputSignalsRule() {
		return getInOutputSignalsAccess().getRule();
	}

	//Signal returns synccharts::Signal:
	//  name=ID|name=ID (":=" initialValue=STRING)|name=ID (":=" initialValue=STRING) type=
	//  ValueType|name=ID (":=" initialValue=STRING) ("combine" type=ValueType "with"
	//  combineOperator=CombineOperator)|name=ID (":=" initialValue=STRING) hostType=STRING
	//  |name=ID (":=" initialValue=STRING) ("combine" hostType=STRING "with"
	//  hostCombineOperator=STRING)|name=ID ("combine" type=ValueType "with" combineOperator
	//  =CombineOperator)|name=ID ("combine" hostType=STRING "with" hostCombineOperator=
	//  STRING); 
	//
	//
	////==============================================================================
	//// synccharts elements as needed
	////==============================================================================
	//
	//    
	//	
	//	
	//	  
	//	      
	//	        
	//	               
	//	        
	//	               
	//	          
	//	        
	//	
	//	
	//		
	//	
	//	// not working correctly yet
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Variable returns synccharts::Variable:
	//  "var" name=ID (":=" initialValue=STRING)? type=ValueType? ("host" hostType=STRING)?; 
	//		
	//	
	//	// not working correctly yet
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//enum ValueType returns synccharts::ValueType:
	//  PURE | BOOL | UNSIGNED | INTEGER="INT" | FLOAT | HOST;
	public ValueTypeElements getValueTypeAccess() {
		return (unknownRuleValueType != null) ? unknownRuleValueType : (unknownRuleValueType = new ValueTypeElements());
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator returns synccharts::CombineOperator:
	//  NONE | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public CombineOperatorElements getCombineOperatorAccess() {
		return (unknownRuleCombineOperator != null) ? unknownRuleCombineOperator : (unknownRuleCombineOperator = new CombineOperatorElements());
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
