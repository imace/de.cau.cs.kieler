load T-TR
load SM

fmod TSM is
	including STATEMACHINE .
	including T-ST .
	including T-TR .
	
	
	ops defA defB defC defD defE : -> Default .
	eq defA = RA default SA .
	eq defB = RB default SB .
	eq defC = RC default SJ .
	eq defD = RD default SE .
	eq defE = RE default SH .
	op allDefs : -> Defaults .
	eq allDefs = defA, defB, defC, defD, defE .
	
	op allDDefs : -> DeepDefault .
	eq allDDefs = RB deepdefault SC .
	op allSDefs : -> ShallowDefault .
	eq allSDefs = RC shallowdefault SM .
	
	
	
	
	ops exA exB exC exD exE exF exG exH exI exJ exK exL exM : -> Action .

	op allEx : -> ExitActions .
	eq allEx = (exitAc SA exA), 
				(exitAc SB exB), 
				(exitAc SC exC), 
				(exitAc SD exD), 
				(exitAc SE exE), 
				(exitAc SF exF), 
				(exitAc SG exG), 
				(exitAc SH exH), 
				(exitAc SI exI), 
				(exitAc SJ exJ), 
				(exitAc SK exK), 
				(exitAc SL exL), 
				(exitAc SM exM) .	

	ops enA enB enC enD enE enF enG enH enI enJ enK enL enM enHM enFM : -> Action .

	op allEn : -> EntryActions .
	eq allEn = (entryAc SA enA), 
				(entryAc SB enB), 
				(entryAc SC enC), 
				(entryAc SD enD), 
				(entryAc SE enE), 
				(entryAc SF enFM), 
				(entryAc SG enG), 
				(entryAc SH enH), 
				(entryAc SI enI), 
				(entryAc SJ enJ), 
				(entryAc SK enK), 
				(entryAc SL enL), 
				(entryAc SM enFM) .	

		
	ops sm1 sm2 smHC smFH smHCA smHCB smHCFB smHCFPB smFHA smB smB2 smHCConflB : -> StateMachine .
	eq sm1 = (SM allVerts allDefs empty empty allTrans) .
	eq sm2 = (SM allVerts allDefs allSDefs allDDefs allEn allEx allTrans) .
	eq smHC = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTrans, trHC, trHCrestart)) .
	eq smHCA = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTransA, trHC, trHCrestart)) .
	eq smB = (SM allVerts allDefs allSDefs allDDefs allEn allEx allTransB) .
	eq smB2 = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTransB, trBconfl)) .	
	eq smHCB = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTransB, trBsusp, trBresume)) .
	eq smHCFB = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTransB, trBsusp, trBresume, trFD)) .
	eq smHCFPB = (SM allVerts allDefs allSDefs allDDefs allEn allEx ((allTransB, trBsusp, trBresume, trFE, trBconfl2, trB1, trB2))) .
	
	eq smHCConflB = (SM allVerts allDefs allSDefs allDDefs allEn allEx (allTransB, trBsusp, trBresume, trBconfl)) .
	eq smFH = (SM finAndHisVerts allDefs allSDefs allDDefs allEn allEx finAndHisTrans) .
	eq smFHA = (SM finAndHisVerts allDefs allSDefs allDDefs allEn allEx allTransFHA) .

	op hcst : -> HistoryConfs .
	eq hcst = (historyconf root R "0" (root R "0" : C "A"), 
			historyconf root R "0" : C "A" : R "B" (root R "0" : C "A" : R "B" : C "C"), 
			historyconf root R "0" : C "A" : R "C" (root R "0" : C "A" : R "C" : C "L"), 
			historyconf root R "0" : C "A" : R "B" : C "C" : R "D" (root R "0" : C "A" : R "B" : C "C" : R "D" : C "F"), 
    		historyconf root R "0" : C "A" : R "B" : C "C" : R "E" (root R "0" : C "A" : R "B" : C "C" : R "E" : C "H")) .
endfm

***(
red prettyTrans allTrans .
)***