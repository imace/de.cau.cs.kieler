«IMPORT uml»

«EXTENSION Extensions»

«DEFINE main FOR Model»
   «EXPAND sm FOREACH packagedElement»
   «EXPAND init FOREACH packagedElement»
«ENDDEFINE»

«DEFINE main FOR Package»
   «EXPAND sm FOREACH packagedElement»
   «EXPAND init FOREACH packagedElement»
«ENDDEFINE»


«DEFINE init FOR StateMachine»
	«FILE "INIT.maude"»
	
load «this.name.toString()»

load STEPSEM
****(
#####################################################
Vorschlag Interface fuer Eclipse 
#####################################################
search (maState "UML" ($stableC <Konfiguration> <HistoryKonfiguration> <Events>) =>* mastate such that isDone mastate .

- <Konfiguration>: eine durch "," getrennte Menge von Regionen und States. Diese muss den Anforderungen im Standard entsprechen.
  z.B: Rroot, Csusp (aus Test.maude)
- <HistoryKonfiguration>: kann erstmal empty sein
- <Events>: eine durch "," getrennte Menge von Events die abgearbeitet werden soll

search (maState "UML" ($stableC (Rroot, Csusp) empty res .
)***
	«ENDFILE»
«ENDDEFINE»

«DEFINE sm FOR StateMachine»
	«FILE this.name.toString() +".maude"»

«REM»Clear marked vertices«ENDREM»
«clearDoneVertices()»
	
load model-checker.maude
load STATES
load EVENTS
load ACTIONS
load TRANS
load SM

fmod eclipseInterface is
 including STATEMACHINE .
 including TRANSITIONS .
 including STATES .
*** // Events //
  ops «FOREACH this.getTriggerEvents() AS event SEPARATOR " "-»«event-»«ENDFOREACH-» : -> Event .
  op allEvents : -> Events .

*** // allActions //	
  ops «FOREACH this.getAction() AS action SEPARATOR " "-»«action-»«ENDFOREACH-» : -> Action .

***// States //
  ops «FOREACH this.getStates() AS state SEPARATOR " "-»«((State)state).getId()-»«ENDFOREACH-» : -> ModState .	
	«FOREACH this.getMaudeStates() AS state SEPARATOR " .\n"-»«state-»«ENDFOREACH-» .	
***// Regions //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«region.getId()-»«ENDFOREACH-» : -> Region .
	«FOREACH this.getMaudeRegions() AS region SEPARATOR " .\n"-»«region-»«ENDFOREACH-» .
***// allVerts //
  op allVerts : -> Verts .
  eq allVerts = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«region.getId()-»«ENDFOREACH-» , «FOREACH this.getStates() AS state SEPARATOR ", "-»«((State)state).getId()-»«ENDFOREACH-» .
	
***// defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"def"+region.getId()-»«ENDFOREACH-» : -> Default .
  «FOREACH this.getInitialTransitions() AS transition SEPARATOR ""-»«transition.genDefault()-»«ENDFOREACH-»
  op allDefs : -> Defaults .
  eq allDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"def"+region.getId()-»«ENDFOREACH-» .
  
***// deep defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"dDef"+region.getId()-»«ENDFOREACH-» : -> DeepDefault .
  «FOREACH this.getDHDTransitions() AS transition SEPARATOR ""-»«transition.genDHDefault()-»«ENDFOREACH-»
  op allDHDefs : -> DeepDefaults .
  eq allDHDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"dDef"+region.getId()-»«ENDFOREACH-» .

***// shallow defaults //
  ops «FOREACH this.getRegions() AS region SEPARATOR " "-»«"sDef"+region.getId()-»«ENDFOREACH-» : -> ShallowDefault .
  «FOREACH this.getSHDTransitions() AS transition SEPARATOR ""-»«transition.genSHDefault()-»«ENDFOREACH-»
  
  op allSHDefs : -> ShallowDefaults .
  eq allSHDefs = «FOREACH this.getRegions() AS region SEPARATOR ", "-»«"sDef"+region.getId()-»«ENDFOREACH-» .

*** Transitions 
*** ToDo: (Important): Compute sources and targets sets
*** ToDo: Remove initial states transitions (DONE? -> isConsidered) 
  ops «FOREACH this.getTransitions().select(e|e.isConsidered())  AS transition SEPARATOR "  "-»tr-«transition.getId()-»«ENDFOREACH-» :-> ModTransition .
  «FOREACH this.getTransitions().select(e|e.isConsidered()) AS transition SEPARATOR '\n'-»«transition.genMaude()-»«ENDFOREACH-»
  «REM» We now work thru the Fork and Join nodes. For all CCs ending with non Fork/Join nodes, we just construct ONE combined transition. «ENDREM»
  «FOREACH this.getForkJoin() AS pseudostate SEPARATOR '\n'-»
   «IF !pseudostate.isDone("OUTGOING")-»
   eq tr-«pseudostate.getId()» = («FOREACH pseudostate.getPseudoSourceVertices() AS source SEPARATOR ','-»«source.getId()-»«ENDFOREACH-») nil nil nil («FOREACH pseudostate.getPseudoTargetVertices() AS target SEPARATOR ','-»«target.getId()-»«ENDFOREACH-») «getLastRootRegion().getId()-» . «resetLastRootRegion()-»
   «ENDIF-»
  «ENDFOREACH-»
  
  op allTrans :-> Transitons .
  eq allTrans = «FOREACH this.getTransitions().select(e|e.isConsidered())  AS transition SEPARATOR ",  "-»tr-«transition.getId()-»«ENDFOREACH-» .


***/// A state machine consits of Vertices Defaultsstatesfunction ShallowDefaultstatesfunction DeepDefaultstatesfunction EntryActionsfunction ExitActionsFunction Transitions 
  op SMINT : -> StateMachine .
  ***// ToDo: add entry/exit actions//
  eq SMINT = (SM allVerts allDefs allSHDefs allDHDefs (empty).EntryActions (empty).ExitActions allTrans) .

  
endfm

	«ENDFILE»
«ENDDEFINE»


«DEFINE sm FOR PackageableElement»
«ENDDEFINE»
