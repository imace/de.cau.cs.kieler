



	
load model-checker.maude
load STATES
load EVENTS
load ACTIONS
load TRANS
load SM

fmod eclipseInterface is
 including STATEMACHINE .
 including TRANSITIONS .
 including STATES .
*** // Events //
  ops ee0 susp ee0 ee1 ee1 res : -> Event .
  op allEvents : -> Events .

*** // allActions //	
  ops a4  a4 a3 a1  : -> Action .

***// States //
  ops Cinner CN CG Csusp CB CE Couter : -> ModState .	
    eq Cinner = root(R "root") : C "outer" : R "inOuter" : C "inner" .
    eq CN = root(R "root") : C "outer" : R "inOuter" : C "inner" : R "inInner1" : C "N" .
    eq CG = root(R "root") : C "outer" : R "inOuter" : C "inner" : R "inInner0" : C "G" .
    eq Csusp = root(R "root") : C "susp" .
    eq CB = root(R "root") : C "outer" : R "inOuter" : C "B" .
    eq CE = root(R "root") : C "outer" : R "inOuter" : C "inner" : R "inInner0" : C "E" .
    eq Couter = root(R "root") : C "outer" .	
***// Regions //
  ops RinInner0 RinInner1 Rroot RinOuter : -> Region .
    eq RinInner0 = root(R "root") : C "outer" : R "inOuter" : C "inner" : R "inInner0" .
    eq RinInner1 = root(R "root") : C "outer" : R "inOuter" : C "inner" : R "inInner1" .
    eq Rroot = root(R "root") .
    eq RinOuter = root(R "root") : C "outer" : R "inOuter" .
***// allVerts //
  op allVerts : -> Verts .
  eq allVerts = RinInner0, RinInner1, Rroot, RinOuter , Cinner, CN, CG, Csusp, CB, CE, Couter .
	
***// defaults //
  ops defRinInner0 defRinInner1 defRroot defRinOuter : -> Default .
 eq defRinInner0 = RinInner0 default CE .
 eq defRinInner1 = RinInner1 default CN .
 eq defRroot = Rroot default Couter .
 eq defRinOuter = RinOuter default CB .
  op allDefs : -> Defaults .
  eq allDefs = defRinInner0, defRinInner1, defRroot, defRinOuter .
  
***// deep defaults //
  ops dDefRinInner0 dDefRinInner1 dDefRroot dDefRinOuter : -> DeepDefault .
 eq dDefRinOuter = RinOuter deepdefault CB .
  op allDHDefs : -> DeepDefaults .
  eq allDHDefs = dDefRinInner0, dDefRinInner1, dDefRroot, dDefRinOuter .

***// shallow defaults //
  ops sDefRinInner0 sDefRinInner1 sDefRroot sDefRinOuter : -> ShallowDefault .
  
  op allSHDefs : -> ShallowDefaults .
  eq allSHDefs = sDefRinInner0, sDefRinInner1, sDefRroot, sDefRinOuter .

*** Transitions 
*** ToDo: (Important): Compute sources and targets sets
*** ToDo: Remove initial states transitions (DONE? -> isConsidered) 
  ops tr-outer2susp1444566273  tr-G2T-2040602862  tr-E2G-525037410  tr-susp2DH1714787712 :-> ModTransition .
   eq tr-outer2susp1444566273 = (outer1526898296) susp nil  empty empty (susp441237549) R-990928836 .
   eq tr-G2T-2040602862 = (G1874547736) ee1 nil a3 empty empty (T924601121) R1540734801 .
   eq tr-E2G-525037410 = (E690055665) ee1 nil a1 empty empty (G1874547736) R1540734801 .
   eq tr-susp2DH1714787712 = (susp441237549) res nil  empty empty (DH-1268649620) R-990928836 .  
   eq tr-F148389467 = (B-910885872) nil nil nil (E690055665,N-1229428651) R-1819018424 .      
   eq tr-J-242782697 = (G1874547736,N-1229428651) nil nil nil (T924601121) R-1819018424 .        
  op allTrans :-> Transitons .
  eq allTrans = tr-outer2susp1444566273,  tr-G2T-2040602862,  tr-E2G-525037410,  tr-susp2DH1714787712 .


***/// A state machine consits of Vertices Defaultsstatesfunction ShallowDefaultstatesfunction DeepDefaultstatesfunction EntryActionsfunction ExitActionsFunction Transitions 
  op SMINT : -> StateMachine .
  ***// ToDo: add entry/exit actions//
  eq SMINT = (SM allVerts allDefs allSHDefs allDHDefs (empty).EntryActions (empty).ExitActions allTrans) .

  
endfm

	