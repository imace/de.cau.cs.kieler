import kaom;
import Moml;

//-----------------------------------------------------------------------------
//     Ptolemy - 2 - KAOM    TRANSFORMATION    
//     @author: haf
//-----------------------------------------------------------------------------
  
//Start Model Transformation here.
create State this transform(DocumentRoot root):
 	this.childEntities.add(transform(root.entity))
;   

create Actor this transform(Moml::EntityType entity):
	this.setName(entity.name) ->
	addProperties(this, entity.property) ->
	addChildEntities(this, entity.entity) ->
	addChildRelations(this, entity.relation) ->
	addChildLinks(this, entity.link)
;

create Relation this transform(Moml::RelationType relation):
	this.setName(relation.name) ->
	addProperties(this, relation.property)
;

// create a new link in kaom from a Ptolemy link. The problem is, that a ptolemy link
// is (1) undirected and (2) has multiple possible attributes for head and tail, because
// it can connect a port and a relation or two relations, e.g.
// <link port="Ramp.output" relation="relation1"/>
// <link relation1="relation20" relation2="relation21"/>
create Link this transform(Moml::LinkType link, Entity parent):
	let relation = parent.getRelation(link.relation):
	let relation1 = parent.getRelation(link.relation1):
	let relation2 = parent.getRelation(link.relation2):
	let port = parent.getPort(link.port):
	let linkables = {}:
	(if(port != null) then (linkables.add(port)) else (null)) ->
	(if(relation != null) then (linkables.add(relation)) else (null)) ->
	(if(relation1 != null) then (linkables.add(relation1)) else (null)) ->
	(if(relation2 != null) then (linkables.add(relation2)) else (null)) ->
	(if(linkables.size == 2) then (this.setSource(linkables.get(0)) -> this.setTarget(linkables.get(1)))	else (null)) ->
	this.setName("link")
;

Void addChildEntities(Entity parent, List[EntityType] ptolemyEntities):
	let ptolemyEntity = ptolemyEntities.first():
	if(ptolemyEntities.isEmpty) then null else
		parent.childEntities.add(transform(ptolemyEntity)) ->
		addChildEntities(parent, ptolemyEntities.withoutFirst())
;

Void addChildRelations(Entity parent, List[RelationType] ptolemyRelations):
	let ptolemyRelation = ptolemyRelations.first():
	if(ptolemyRelations.isEmpty) then null else
		parent.childRelations.add(transform(ptolemyRelation)) ->
		addChildRelations(parent, ptolemyRelations.withoutFirst())
;

Void addChildLinks(Entity parent, List[LinkType] ptolemyLinks):
	let ptolemyLink = ptolemyLinks.first():
	if(ptolemyLinks.isEmpty) then null else
		parent.childLinks.add(transform(ptolemyLink, parent)) ->
		addChildLinks(parent, ptolemyLinks.withoutFirst())
;

Void addProperties(Annotatable annotatable, List[PropertyType] properties):
	let property = properties.first():
	if(properties.isEmpty) then null else
		annotatable.addAnnotation(property.name, property.value)->
		addProperties(annotatable, properties.withoutFirst())
;

Void addAnnotation(Annotatable annotatable, String key, String value):
	let entry = new AnnotationMapEntry:
	let annotation = new StringAnnotation:
	entry.setKey(key) ->
	annotation.setText(value) ->
	entry.setValue(annotation) ->
	annotatable.annotationMap.add(entry)
;

Relation getRelation(Entity parent,String relationName):
	let relation = parent.childRelations.selectFirst(r|r.name == relationName):
	relation
;

// get a port with a name like "Ramp.output", where the first part is the actor in the
// given parent and the second is the port name
// search for such existing port. If it does not exist, create it and add it to the model.
Port getPort(Entity parent, String portName):
	let newPort = new Port:
	let splitName = portName.split("\\."):
	let actor = splitName.size > 0 ? parent.childEntities.selectFirst(a|a.name == splitName.get(0)): null:
	let port = splitName.size > 1 ? actor.childPorts.selectFirst(p|p.name == splitName.get(1)): null:
	
	if(portName == null || splitName.size < 2) then(
		//newPort.setName("Invalid:"+portName) ->
		//parent.childPorts.add(newPort) ->
		//newPort
		null
	)	
	else
		if(port != null) then
			port
		else
			(newPort.setName(splitName.get(1)) ->
			actor.childPorts.add(newPort) ->
			newPort)
;

//String getName(Linkable linkable):
//	if(NamedObject.isInstance(linkable)) then ((NamedObject)linkable).name else ""
//;
