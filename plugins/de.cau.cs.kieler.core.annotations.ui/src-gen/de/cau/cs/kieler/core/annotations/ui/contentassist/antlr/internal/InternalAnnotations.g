/*
* generated by Xtext
*/
grammar InternalAnnotations;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.core.annotations.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.core.annotations.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.core.annotations.services.AnnotationsGrammarAccess;

}

@parser::members {
 
 	private AnnotationsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AnnotationsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleStringAnnotation
entryRuleStringAnnotation 
:
{ before(grammarAccess.getStringAnnotationRule()); }
	 ruleStringAnnotation
{ after(grammarAccess.getStringAnnotationRule()); } 
	 EOF 
;

// Rule StringAnnotation
ruleStringAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringAnnotationAccess().getAlternatives()); }
(rule__StringAnnotation__Alternatives)
{ after(grammarAccess.getStringAnnotationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation 
:
{ before(grammarAccess.getCommentAnnotationRule()); }
	 ruleCommentAnnotation
{ after(grammarAccess.getCommentAnnotationRule()); } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
(rule__CommentAnnotation__ValueAssignment)
{ after(grammarAccess.getCommentAnnotationAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyValueAnnotation
entryRuleKeyValueAnnotation 
:
{ before(grammarAccess.getKeyValueAnnotationRule()); }
	 ruleKeyValueAnnotation
{ after(grammarAccess.getKeyValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyValueAnnotation
ruleKeyValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getGroup()); }
(rule__KeyValueAnnotation__Group__0)
{ after(grammarAccess.getKeyValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__StringAnnotation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringAnnotationAccess().getCommentAnnotationParserRuleCall_0()); }
	ruleCommentAnnotation
{ after(grammarAccess.getStringAnnotationAccess().getCommentAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStringAnnotationAccess().getKeyValueAnnotationParserRuleCall_1()); }
	ruleKeyValueAnnotation
{ after(grammarAccess.getStringAnnotationAccess().getKeyValueAnnotationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__KeyValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__0__Impl
	rule__KeyValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__1__Impl
	rule__KeyValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValueAnnotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getValueAssignment_2()); }
(rule__KeyValueAnnotation__ValueAssignment_2)
{ after(grammarAccess.getKeyValueAnnotationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CommentAnnotation__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
	RULE_COMMENT_ANNOTATION{ after(grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKeyValueAnnotationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValueAnnotation__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getKeyValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


