///////////////////////////////////////////////////

exporting 
plugin.xml filtern 
->gegeben soll sein die projectId, die muesste man ermitteln koennen,
-> kriegen wir nicht raus, da wir nicht mit bundels herumhantieren sondern direkt auf der platte arbeiten,
aber wir können versuchen java projekte zu identifizieren.


der konkrete folder in den das example extrahiert werden soll

das example, welches aus den existierenden projekt generiert werden muss






//////////////////////////////////////////////////////
erklaeren warum interner eclipse mechanismus nicht geht


// TODO ExtensionPoint zugriff geht so leider nicht, da man zur laufzeit
		// nicht in die plugin.xml schreiben darf,
		// dies muss per hand geschehen...
		// extensionCreation.addExtension(projectId, location, mappedExample);


da nur dynamische dinge geladen werden koennen...

	/**
	 * common way, but does not work.
	 * 
	 * @param sb
	 */
	// private void addExtension(String pluginContent) {
	// try {
	// // use Eclipse Dynamic Extension API
	// IExtensionRegistry reg = RegistryFactory.getRegistry();
	// Object key = ((ExtensionRegistry) reg).getTemporaryUserToken();
	// Bundle bundle = Activator.getDefault().getBundle(
	// "de.cau.cs.kieler.kex");
	// // BundleContext context =
	// // org.eclipse.core.internal.registry.osgi.Activator.getContext();
	// IContributor contributor = ContributorFactoryOSGi
	// .createContributor(bundle);
	// ByteArrayInputStream is = new ByteArrayInputStream(
	// (sb.toString()).getBytes("UTF-8"));
	// reg.addContribution(is, contributor, true, null, null, key);
	// } catch (UnsupportedEncodingException e) {
	// e.printStackTrace();
	// }
	// } 

////////////////////////////////////////////////////////////

beim import muessen die examples über den bundle mechanismus geladen werden, da wir ja nur die gebauten 
KIELER Dateien zu Verfügung stehen haben, d.h. nur die deployten version, darin kommen wir nicht einfach
über java io an die daten des workspaces heran.

hingegen beim export schon, wir können nicht direkt in die dateien von oben reinschreiben da das problem
des Tokens besteht, welches früher schon erörtert wurde.
Hier müssen wir also auf die platte gehen und die daten in bestimmte dinge hineinschreiben,
zu beachten ist, dass auch hier nur pluginprojekte akzeptiert werden, da wir die example informationen in
der plugin.xml hinterlegen und somit die interne struktur gestalten.


