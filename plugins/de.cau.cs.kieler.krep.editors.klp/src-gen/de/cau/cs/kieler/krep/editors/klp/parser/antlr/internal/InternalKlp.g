/*
* generated by Xtext
*/
grammar InternalKlp;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.krep.editors.klp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.krep.editors.klp.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.krep.editors.klp.services.KlpGrammarAccess;

}

@parser::members {

 	private KlpGrammarAccess grammarAccess;
 	
    public InternalKlpParser(TokenStream input, IAstFactory factory, KlpGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/krep/editors/klp/parser/antlr/internal/InternalKlp.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "KLP";	
   	}
   	
   	@Override
   	protected KlpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKLP
entryRuleKLP returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKLPRule(), currentNode); }
	 iv_ruleKLP=ruleKLP 
	 { $current=$iv_ruleKLP.current; } 
	 EOF 
;

// Rule KLP
ruleKLP returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getKLPAccess().getInstructionsLineParserRuleCall_0(), currentNode); 
	    }
		lv_instructions_0_0=ruleLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKLPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"instructions",
	        		lv_instructions_0_0, 
	        		"Line", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLineRule(), currentNode); }
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current; } 
	 EOF 
;

// Rule Line
ruleLine returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_labels_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLineAccess().getLabelsIDTerminalRuleCall_0_0_0(), "labels"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLineAccess().getColonKeyword_0_1(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLineAccess().getInstructionInstructionParserRuleCall_1_0(), currentNode); 
	    }
		lv_instruction_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instruction",
	        		lv_instruction_2_0, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstructionRule(), currentNode); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getDeclParserRuleCall_0(), currentNode); 
    }
    this_Decl_0=ruleDecl
    { 
        $current = $this_Decl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getSetClkParserRuleCall_1(), currentNode); 
    }
    this_SetClk_1=ruleSetClk
    { 
        $current = $this_SetClk_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getSetPCParserRuleCall_2(), currentNode); 
    }
    this_SetPC_2=ruleSetPC
    { 
        $current = $this_SetPC_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getPrioParserRuleCall_3(), currentNode); 
    }
    this_Prio_3=rulePrio
    { 
        $current = $this_Prio_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getDoneParserRuleCall_4(), currentNode); 
    }
    this_Done_4=ruleDone
    { 
        $current = $this_Done_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getBinopParserRuleCall_5(), currentNode); 
    }
    this_Binop_5=ruleBinop
    { 
        $current = $this_Binop_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getJmpParserRuleCall_6(), currentNode); 
    }
    this_Jmp_6=ruleJmp
    { 
        $current = $this_Jmp_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getCJmpParserRuleCall_7(), currentNode); 
    }
    this_CJmp_7=ruleCJmp
    { 
        $current = $this_CJmp_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getMoveParserRuleCall_8(), currentNode); 
    }
    this_Move_8=ruleMove
    { 
        $current = $this_Move_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclRule(), currentNode); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getScopeScopeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_scope_0_0=ruleScope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scope",
	        		lv_scope_0_0, 
	        		"Scope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getRegRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSetClk
entryRuleSetClk returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSetClkRule(), currentNode); }
	 iv_ruleSetClk=ruleSetClk 
	 { $current=$iv_ruleSetClk.current; } 
	 EOF 
;

// Rule SetClk
ruleSetClk returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'SETCLK' 
    {
        createLeafNode(grammarAccess.getSetClkAccess().getSETCLKKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetClkAccess().getRegRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetClkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetClkAccess().getClkRegParserRuleCall_2_0(), currentNode); 
	    }
		lv_clk_2_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetClkRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clk",
	        		lv_clk_2_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSetPC
entryRuleSetPC returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSetPCRule(), currentNode); }
	 iv_ruleSetPC=ruleSetPC 
	 { $current=$iv_ruleSetPC.current; } 
	 EOF 
;

// Rule SetPC
ruleSetPC returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'SETPC' 
    {
        createLeafNode(grammarAccess.getSetPCAccess().getSETPCKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetPCAccess().getRegRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPCRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetPCAccess().getLabelLabelParserRuleCall_2_0(), currentNode); 
	    }
		lv_label_2_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPCRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_2_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePrio
entryRulePrio returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrioRule(), currentNode); }
	 iv_rulePrio=rulePrio 
	 { $current=$iv_rulePrio.current; } 
	 EOF 
;

// Rule Prio
rulePrio returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'PRIO' 
    {
        createLeafNode(grammarAccess.getPrioAccess().getPRIOKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrioAccess().getRegRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_prio_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPrioAccess().getPrioINTTerminalRuleCall_2_0(), "prio"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrioRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prio",
	        		lv_prio_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDone
entryRuleDone returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoneRule(), currentNode); }
	 iv_ruleDone=ruleDone 
	 { $current=$iv_ruleDone.current; } 
	 EOF 
;

// Rule Done
ruleDone returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'DONE' 
    {
        createLeafNode(grammarAccess.getDoneAccess().getDONEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoneAccess().getPcLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_pc_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoneRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pc",
	        		lv_pc_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBinop
entryRuleBinop returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBinopRule(), currentNode); }
	 iv_ruleBinop=ruleBinop 
	 { $current=$iv_ruleBinop.current; } 
	 EOF 
;

// Rule Binop
ruleBinop returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBinopAccess().getOpOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"Operator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBinopAccess().getToRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_to_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"to",
	        		lv_to_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBinopAccess().getArg1ReadParserRuleCall_2_0(), currentNode); 
	    }
		lv_arg1_2_0=ruleRead		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arg1",
	        		lv_arg1_2_0, 
	        		"Read", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBinopAccess().getArg2ReadParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_arg2_3_0=ruleRead		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arg2",
	        		lv_arg2_3_0, 
	        		"Read", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_val_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getBinopAccess().getValINTTerminalRuleCall_3_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleJmp
entryRuleJmp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJmpRule(), currentNode); }
	 iv_ruleJmp=ruleJmp 
	 { $current=$iv_ruleJmp.current; } 
	 EOF 
;

// Rule Jmp
ruleJmp returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'JMP' 
    {
        createLeafNode(grammarAccess.getJmpAccess().getJMPKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJmpAccess().getLabelLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJmpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCJmp
entryRuleCJmp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCJmpRule(), currentNode); }
	 iv_ruleCJmp=ruleCJmp 
	 { $current=$iv_ruleCJmp.current; } 
	 EOF 
;

// Rule CJmp
ruleCJmp returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCJmpAccess().getCondJumpKindEnumRuleCall_0_0(), currentNode); 
	    }
		lv_cond_0_0=ruleJumpKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCJmpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cond",
	        		lv_cond_0_0, 
	        		"JumpKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCJmpAccess().getRegReadParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_1_0=ruleRead		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCJmpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_1_0, 
	        		"Read", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCJmpAccess().getLabelLabelParserRuleCall_2_0(), currentNode); 
	    }
		lv_label_2_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCJmpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_2_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMoveRule(), currentNode); }
	 iv_ruleMove=ruleMove 
	 { $current=$iv_ruleMove.current; } 
	 EOF 
;

// Rule Move
ruleMove returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMoveAccess().getTypeMoveKindEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleMoveKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMoveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"MoveKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMoveAccess().getToRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_to_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMoveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"to",
	        		lv_to_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMoveAccess().getFromReadParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_from_2_0=ruleRead		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMoveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"from",
	        		lv_from_2_0, 
	        		"Read", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_val_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMoveAccess().getValINTTerminalRuleCall_2_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMoveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelRule(), currentNode); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleReg
entryRuleReg returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegRule(), currentNode); }
	 iv_ruleReg=ruleReg 
	 { $current=$iv_ruleReg.current; } 
	 EOF 
;

// Rule Reg
ruleReg returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRegAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReadRule(), currentNode); }
	 iv_ruleRead=ruleRead 
	 { $current=$iv_ruleRead.current; } 
	 EOF 
;

// Rule Read
ruleRead returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_pre_0_0=	'pre' 
    {
        createLeafNode(grammarAccess.getReadAccess().getPrePreKeyword_0_0_0(), "pre"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReadRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pre", true, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getReadAccess().getLeftParenthesisKeyword_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReadAccess().getRegRegParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_reg_2_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReadRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_2_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getReadAccess().getRightParenthesisKeyword_0_3(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReadAccess().getRegRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_reg_4_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReadRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_4_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Rule Scope
ruleScope returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'INPUT' 
	{
        $current = grammarAccess.getScopeAccess().getInputEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getScopeAccess().getInputEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'OUTPUT' 
	{
        $current = grammarAccess.getScopeAccess().getOutputEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getScopeAccess().getOutputEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'LOCAL' 
	{
        $current = grammarAccess.getScopeAccess().getLocalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getScopeAccess().getLocalEnumLiteralDeclaration_2(), null); 
    }
));



// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'ADD' 
	{
        $current = grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'IADD' 
	{
        $current = grammarAccess.getOperatorAccess().getIaddEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIaddEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'SUB' 
	{
        $current = grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getSubEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'MUL' 
	{
        $current = grammarAccess.getOperatorAccess().getMulEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getMulEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'DIV' 
	{
        $current = grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getDivEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'AND' 
	{
        $current = grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'OR' 
	{
        $current = grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'XOR' 
	{
        $current = grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getXorEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'LT' 
	{
        $current = grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'LE' 
	{
        $current = grammarAccess.getOperatorAccess().getLeEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLeEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'EQ' 
	{
        $current = grammarAccess.getOperatorAccess().getEqEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getEqEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'GE' 
	{
        $current = grammarAccess.getOperatorAccess().getGeEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGeEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'GT' 
	{
        $current = grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'NEQ' 
	{
        $current = grammarAccess.getOperatorAccess().getNeqEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNeqEnumLiteralDeclaration_13(), null); 
    }
)
    |(	'ISUB' 
	{
        $current = grammarAccess.getOperatorAccess().getIsubEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIsubEnumLiteralDeclaration_14(), null); 
    }
)
    |(	'IMUL' 
	{
        $current = grammarAccess.getOperatorAccess().getImulEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getImulEnumLiteralDeclaration_15(), null); 
    }
)
    |(	'IDIV' 
	{
        $current = grammarAccess.getOperatorAccess().getIdivEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIdivEnumLiteralDeclaration_16(), null); 
    }
)
    |(	'IAND' 
	{
        $current = grammarAccess.getOperatorAccess().getIandEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIandEnumLiteralDeclaration_17(), null); 
    }
)
    |(	'IOR' 
	{
        $current = grammarAccess.getOperatorAccess().getIorEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIorEnumLiteralDeclaration_18(), null); 
    }
)
    |(	'IXOR' 
	{
        $current = grammarAccess.getOperatorAccess().getIxorEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIxorEnumLiteralDeclaration_19(), null); 
    }
)
    |(	'ILT' 
	{
        $current = grammarAccess.getOperatorAccess().getIltEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIltEnumLiteralDeclaration_20(), null); 
    }
)
    |(	'ILE' 
	{
        $current = grammarAccess.getOperatorAccess().getIleEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIleEnumLiteralDeclaration_21(), null); 
    }
)
    |(	'IEQ' 
	{
        $current = grammarAccess.getOperatorAccess().getIeqEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIeqEnumLiteralDeclaration_22(), null); 
    }
)
    |(	'IGE' 
	{
        $current = grammarAccess.getOperatorAccess().getIgeEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIgeEnumLiteralDeclaration_23(), null); 
    }
)
    |(	'IGT' 
	{
        $current = grammarAccess.getOperatorAccess().getIgtEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIgtEnumLiteralDeclaration_24(), null); 
    }
)
    |(	'INEQ' 
	{
        $current = grammarAccess.getOperatorAccess().getIneqEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getIneqEnumLiteralDeclaration_25(), null); 
    }
));



// Rule JumpKind
ruleJumpKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'JT' 
	{
        $current = grammarAccess.getJumpKindAccess().getJtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getJumpKindAccess().getJtEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'JF' 
	{
        $current = grammarAccess.getJumpKindAccess().getJfEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getJumpKindAccess().getJfEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'JZ' 
	{
        $current = grammarAccess.getJumpKindAccess().getJzEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getJumpKindAccess().getJzEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'JNZ' 
	{
        $current = grammarAccess.getJumpKindAccess().getJnzEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getJumpKindAccess().getJnzEnumLiteralDeclaration_3(), null); 
    }
));



// Rule MoveKind
ruleMoveKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'CVMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getCmovEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getCmovEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'VCMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getVcmovEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getVcmovEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'VVMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getVvmovEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getVvmovEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'CCMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getCcmovEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getCcmovEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'IVMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getIvmovEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getIvmovEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'ICMOV' 
	{
        $current = grammarAccess.getMoveKindAccess().getIcmovEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMoveKindAccess().getIcmovEnumLiteralDeclaration_5(), null); 
    }
));



RULE_INT : ('+'|'-')? RULE_DIGIT+;

RULE_ID : (RULE_LETTER|'_') (RULE_LETTER|RULE_DIGIT|'_')*;

RULE_WS : ('\t'|' '|'\r'|'\n');

RULE_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_DIGIT : '0'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


