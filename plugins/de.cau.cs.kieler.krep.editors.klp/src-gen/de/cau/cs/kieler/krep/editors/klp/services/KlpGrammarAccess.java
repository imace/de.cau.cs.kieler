/*
* generated by Xtext
*/

package de.cau.cs.kieler.krep.editors.klp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KlpGrammarAccess implements IGrammarAccess {
	
	
	public class KLPElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KLP");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsLineParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//KLP returns klp::KLP:
		//  instructions+=Line*;
		public ParserRule getRule() { return rule; }

		//instructions+=Line*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }

		//Line
		public RuleCall getInstructionsLineParserRuleCall_0() { return cInstructionsLineParserRuleCall_0; }
	}

	public class LineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelsIDTerminalRuleCall_0_0_0 = (RuleCall)cLabelsAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//Line returns klp::Line:
		//  (labels+=ID ":")* instruction=Instruction;
		public ParserRule getRule() { return rule; }

		//(labels+=ID ":")* instruction=Instruction
		public Group getGroup() { return cGroup; }

		//(labels+=ID ":")*
		public Group getGroup_0() { return cGroup_0; }

		//labels+=ID
		public Assignment getLabelsAssignment_0_0() { return cLabelsAssignment_0_0; }

		//ID
		public RuleCall getLabelsIDTerminalRuleCall_0_0_0() { return cLabelsIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
	}

	public class InstructionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetClkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetPCParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrioParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoneParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBinopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJmpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCJmpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMoveParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Instruction returns klp::Instruction:
		//  Decl|SetClk|SetPC|Prio|Done|Binop|Jmp|CJmp|Move;
		public ParserRule getRule() { return rule; }

		//Decl|SetClk|SetPC|Prio|Done|Binop|Jmp|CJmp|Move
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decl
		public RuleCall getDeclParserRuleCall_0() { return cDeclParserRuleCall_0; }

		//SetClk
		public RuleCall getSetClkParserRuleCall_1() { return cSetClkParserRuleCall_1; }

		//SetPC
		public RuleCall getSetPCParserRuleCall_2() { return cSetPCParserRuleCall_2; }

		//Prio
		public RuleCall getPrioParserRuleCall_3() { return cPrioParserRuleCall_3; }

		//Done
		public RuleCall getDoneParserRuleCall_4() { return cDoneParserRuleCall_4; }

		//Binop
		public RuleCall getBinopParserRuleCall_5() { return cBinopParserRuleCall_5; }

		//Jmp
		public RuleCall getJmpParserRuleCall_6() { return cJmpParserRuleCall_6; }

		//CJmp
		public RuleCall getCJmpParserRuleCall_7() { return cCJmpParserRuleCall_7; }

		//Move
		public RuleCall getMoveParserRuleCall_8() { return cMoveParserRuleCall_8; }
	}

	public class DeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScopeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScopeScopeEnumRuleCall_0_0 = (RuleCall)cScopeAssignment_0.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		
		//Decl returns klp::Decl:
		//  scope=Scope reg=Reg;
		public ParserRule getRule() { return rule; }

		//scope=Scope reg=Reg
		public Group getGroup() { return cGroup; }

		//scope=Scope
		public Assignment getScopeAssignment_0() { return cScopeAssignment_0; }

		//Scope
		public RuleCall getScopeScopeEnumRuleCall_0_0() { return cScopeScopeEnumRuleCall_0_0; }

		//reg=Reg
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Reg
		public RuleCall getRegRegParserRuleCall_1_0() { return cRegRegParserRuleCall_1_0; }
	}

	public class SetClkElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetClk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETCLKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Assignment cClkAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClkRegParserRuleCall_2_0 = (RuleCall)cClkAssignment_2.eContents().get(0);
		
		//SetClk returns klp::SetClk:
		//  "SETCLK" reg=Reg clk=Reg;
		public ParserRule getRule() { return rule; }

		//"SETCLK" reg=Reg clk=Reg
		public Group getGroup() { return cGroup; }

		//"SETCLK"
		public Keyword getSETCLKKeyword_0() { return cSETCLKKeyword_0; }

		//reg=Reg
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Reg
		public RuleCall getRegRegParserRuleCall_1_0() { return cRegRegParserRuleCall_1_0; }

		//clk=Reg
		public Assignment getClkAssignment_2() { return cClkAssignment_2; }

		//Reg
		public RuleCall getClkRegParserRuleCall_2_0() { return cClkRegParserRuleCall_2_0; }
	}

	public class SetPCElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetPC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETPCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelLabelParserRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//SetPC returns klp::SetPC:
		//  "SETPC" reg=Reg label=Label;
		public ParserRule getRule() { return rule; }

		//"SETPC" reg=Reg label=Label
		public Group getGroup() { return cGroup; }

		//"SETPC"
		public Keyword getSETPCKeyword_0() { return cSETPCKeyword_0; }

		//reg=Reg
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Reg
		public RuleCall getRegRegParserRuleCall_1_0() { return cRegRegParserRuleCall_1_0; }

		//label=Label
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_2_0() { return cLabelLabelParserRuleCall_2_0; }
	}

	public class PrioElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Assignment cPrioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrioINTTerminalRuleCall_2_0 = (RuleCall)cPrioAssignment_2.eContents().get(0);
		
		//Prio returns klp::Prio:
		//  "PRIO" reg=Reg? prio=INT;
		public ParserRule getRule() { return rule; }

		//"PRIO" reg=Reg? prio=INT
		public Group getGroup() { return cGroup; }

		//"PRIO"
		public Keyword getPRIOKeyword_0() { return cPRIOKeyword_0; }

		//reg=Reg?
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Reg
		public RuleCall getRegRegParserRuleCall_1_0() { return cRegRegParserRuleCall_1_0; }

		//prio=INT
		public Assignment getPrioAssignment_2() { return cPrioAssignment_2; }

		//INT
		public RuleCall getPrioINTTerminalRuleCall_2_0() { return cPrioINTTerminalRuleCall_2_0; }
	}

	public class DoneElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Done");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDONEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPcLabelParserRuleCall_1_0 = (RuleCall)cPcAssignment_1.eContents().get(0);
		
		//Done returns klp::Done:
		//  "DONE" pc=Label?;
		public ParserRule getRule() { return rule; }

		//"DONE" pc=Label?
		public Group getGroup() { return cGroup; }

		//"DONE"
		public Keyword getDONEKeyword_0() { return cDONEKeyword_0; }

		//pc=Label?
		public Assignment getPcAssignment_1() { return cPcAssignment_1; }

		//Label
		public RuleCall getPcLabelParserRuleCall_1_0() { return cPcLabelParserRuleCall_1_0; }
	}

	public class BinopElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToRegParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1ReadParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cArg2ReadParserRuleCall_3_0_0 = (RuleCall)cArg2Assignment_3_0.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		
		//Binop returns klp::Binop:
		//  op=Operator to=Reg arg1=Read (arg2=Read|val=INT);
		public ParserRule getRule() { return rule; }

		//op=Operator to=Reg arg1=Read (arg2=Read|val=INT)
		public Group getGroup() { return cGroup; }

		//op=Operator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//Operator
		public RuleCall getOpOperatorEnumRuleCall_0_0() { return cOpOperatorEnumRuleCall_0_0; }

		//to=Reg
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//Reg
		public RuleCall getToRegParserRuleCall_1_0() { return cToRegParserRuleCall_1_0; }

		//arg1=Read
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//Read
		public RuleCall getArg1ReadParserRuleCall_2_0() { return cArg1ReadParserRuleCall_2_0; }

		//arg2=Read|val=INT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//arg2=Read
		public Assignment getArg2Assignment_3_0() { return cArg2Assignment_3_0; }

		//Read
		public RuleCall getArg2ReadParserRuleCall_3_0_0() { return cArg2ReadParserRuleCall_3_0_0; }

		//val=INT
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_3_1_0() { return cValINTTerminalRuleCall_3_1_0; }
	}

	public class JmpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Jmp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJMPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//Jmp returns klp::Jmp:
		//  "JMP" label=Label;
		public ParserRule getRule() { return rule; }

		//"JMP" label=Label
		public Group getGroup() { return cGroup; }

		//"JMP"
		public Keyword getJMPKeyword_0() { return cJMPKeyword_0; }

		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}

	public class CJmpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CJmp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondJumpKindEnumRuleCall_0_0 = (RuleCall)cCondAssignment_0.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegReadParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelLabelParserRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//CJmp returns klp::CJmp:
		//  cond=JumpKind reg=Read label=Label;
		public ParserRule getRule() { return rule; }

		//cond=JumpKind reg=Read label=Label
		public Group getGroup() { return cGroup; }

		//cond=JumpKind
		public Assignment getCondAssignment_0() { return cCondAssignment_0; }

		//JumpKind
		public RuleCall getCondJumpKindEnumRuleCall_0_0() { return cCondJumpKindEnumRuleCall_0_0; }

		//reg=Read
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Read
		public RuleCall getRegReadParserRuleCall_1_0() { return cRegReadParserRuleCall_1_0; }

		//label=Label
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_2_0() { return cLabelLabelParserRuleCall_2_0; }
	}

	public class MoveElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMoveKindEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToRegParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFromReadParserRuleCall_2_0_0 = (RuleCall)cFromAssignment_2_0.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//Move returns klp::Move:
		//  type=MoveKind to=Reg (from=Read|val=INT);
		public ParserRule getRule() { return rule; }

		//type=MoveKind to=Reg (from=Read|val=INT)
		public Group getGroup() { return cGroup; }

		//type=MoveKind
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//MoveKind
		public RuleCall getTypeMoveKindEnumRuleCall_0_0() { return cTypeMoveKindEnumRuleCall_0_0; }

		//to=Reg
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//Reg
		public RuleCall getToRegParserRuleCall_1_0() { return cToRegParserRuleCall_1_0; }

		//from=Read|val=INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//from=Read
		public Assignment getFromAssignment_2_0() { return cFromAssignment_2_0; }

		//Read
		public RuleCall getFromReadParserRuleCall_2_0_0() { return cFromReadParserRuleCall_2_0_0; }

		//val=INT
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_2_1_0() { return cValINTTerminalRuleCall_2_1_0; }
	}

	public class LabelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label returns klp::Label:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RegElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reg");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Reg returns klp::Reg:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ReadElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Read");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPreAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPrePreKeyword_0_0_0 = (Keyword)cPreAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRegAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRegRegParserRuleCall_0_2_0 = (RuleCall)cRegAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRegAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRegRegParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		
		//Read returns klp::Read:
		//  pre?="pre" "(" reg=Reg ")"|reg=Reg; 
		//      
		//     
		//            
		//         
		//      
		// 
		/// *------------------------------------------------------------------
		// * LEXER RULES
		// *------------------------------------------------------------------* /
		public ParserRule getRule() { return rule; }

		//pre?="pre" "(" reg=Reg ")"|reg=Reg 
		//      
		//     
		//            
		//         
		//      
		// 
		/// *------------------------------------------------------------------
		// * LEXER RULES
		// *------------------------------------------------------------------* /
		public Alternatives getAlternatives() { return cAlternatives; }

		//pre?="pre" "(" reg=Reg ")"
		public Group getGroup_0() { return cGroup_0; }

		//pre?="pre"
		public Assignment getPreAssignment_0_0() { return cPreAssignment_0_0; }

		//"pre"
		public Keyword getPrePreKeyword_0_0_0() { return cPrePreKeyword_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//reg=Reg
		public Assignment getRegAssignment_0_2() { return cRegAssignment_0_2; }

		//Reg
		public RuleCall getRegRegParserRuleCall_0_2_0() { return cRegRegParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//reg=Reg
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }

		//Reg
		public RuleCall getRegRegParserRuleCall_1_0() { return cRegRegParserRuleCall_1_0; }
	}
	
	
	public class ScopeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInputINPUTKeyword_0_0 = (Keyword)cInputEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutputEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutputOUTPUTKeyword_1_0 = (Keyword)cOutputEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLocalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLocalLOCALKeyword_2_0 = (Keyword)cLocalEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Scope returns klp::Scope:
		//  input="INPUT" | output="OUTPUT" | local="LOCAL";
		public EnumRule getRule() { return rule; }

		//input="INPUT" | output="OUTPUT" | local="LOCAL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//input="INPUT"
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_0() { return cInputEnumLiteralDeclaration_0; }

		//"INPUT"
		public Keyword getInputINPUTKeyword_0_0() { return cInputINPUTKeyword_0_0; }

		//output="OUTPUT"
		public EnumLiteralDeclaration getOutputEnumLiteralDeclaration_1() { return cOutputEnumLiteralDeclaration_1; }

		//"OUTPUT"
		public Keyword getOutputOUTPUTKeyword_1_0() { return cOutputOUTPUTKeyword_1_0; }

		//local="LOCAL"
		public EnumLiteralDeclaration getLocalEnumLiteralDeclaration_2() { return cLocalEnumLiteralDeclaration_2; }

		//"LOCAL"
		public Keyword getLocalLOCALKeyword_2_0() { return cLocalLOCALKeyword_2_0; }
	}

	public class OperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddADDKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIaddEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIaddIADDKeyword_1_0 = (Keyword)cIaddEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSubSUBKeyword_2_0 = (Keyword)cSubEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMulMULKeyword_3_0 = (Keyword)cMulEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDivDIVKeyword_4_0 = (Keyword)cDivEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAndANDKeyword_5_0 = (Keyword)cAndEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOrORKeyword_6_0 = (Keyword)cOrEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cXorXORKeyword_7_0 = (Keyword)cXorEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLtLTKeyword_8_0 = (Keyword)cLtEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLeLEKeyword_9_0 = (Keyword)cLeEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cEqEQKeyword_10_0 = (Keyword)cEqEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGeGEKeyword_11_0 = (Keyword)cGeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cGtGTKeyword_12_0 = (Keyword)cGtEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cNeqNEQKeyword_13_0 = (Keyword)cNeqEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cIsubEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cIsubISUBKeyword_14_0 = (Keyword)cIsubEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cImulEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cImulIMULKeyword_15_0 = (Keyword)cImulEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cIdivEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cIdivIDIVKeyword_16_0 = (Keyword)cIdivEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cIandEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cIandIANDKeyword_17_0 = (Keyword)cIandEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cIorEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cIorIORKeyword_18_0 = (Keyword)cIorEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cIxorEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cIxorIXORKeyword_19_0 = (Keyword)cIxorEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cIltEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cIltILTKeyword_20_0 = (Keyword)cIltEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cIleEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cIleILEKeyword_21_0 = (Keyword)cIleEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cIeqEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cIeqIEQKeyword_22_0 = (Keyword)cIeqEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cIgeEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cIgeIGEKeyword_23_0 = (Keyword)cIgeEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cIgtEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cIgtIGTKeyword_24_0 = (Keyword)cIgtEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cIneqEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cIneqINEQKeyword_25_0 = (Keyword)cIneqEnumLiteralDeclaration_25.eContents().get(0);
		
		//enum Operator returns klp::Operator:
		//  add="ADD" | iadd="IADD" | sub="SUB" | mul="MUL" | div="DIV" | and="AND" | or="OR" | xor="XOR" |
		//  lt="LT" | le="LE" | eq="EQ" | ge="GE" | gt="GT" | neq="NEQ" | isub="ISUB" | imul="IMUL" | idiv=
		//  "IDIV" | iand="IAND" | ior="IOR" | ixor="IXOR" | ilt="ILT" | ile="ILE" | ieq="IEQ" | ige="IGE"
		//  | igt="IGT" | ineq="INEQ";
		public EnumRule getRule() { return rule; }

		//add="ADD" | iadd="IADD" | sub="SUB" | mul="MUL" | div="DIV" | and="AND" | or="OR" | xor="XOR" |
		//lt="LT" | le="LE" | eq="EQ" | ge="GE" | gt="GT" | neq="NEQ" | isub="ISUB" | imul="IMUL" | idiv=
		//"IDIV" | iand="IAND" | ior="IOR" | ixor="IXOR" | ilt="ILT" | ile="ILE" | ieq="IEQ" | ige="IGE"
		//| igt="IGT" | ineq="INEQ"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="ADD"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"ADD"
		public Keyword getAddADDKeyword_0_0() { return cAddADDKeyword_0_0; }

		//iadd="IADD"
		public EnumLiteralDeclaration getIaddEnumLiteralDeclaration_1() { return cIaddEnumLiteralDeclaration_1; }

		//"IADD"
		public Keyword getIaddIADDKeyword_1_0() { return cIaddIADDKeyword_1_0; }

		//sub="SUB"
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_2() { return cSubEnumLiteralDeclaration_2; }

		//"SUB"
		public Keyword getSubSUBKeyword_2_0() { return cSubSUBKeyword_2_0; }

		//mul="MUL"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_3() { return cMulEnumLiteralDeclaration_3; }

		//"MUL"
		public Keyword getMulMULKeyword_3_0() { return cMulMULKeyword_3_0; }

		//div="DIV"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_4() { return cDivEnumLiteralDeclaration_4; }

		//"DIV"
		public Keyword getDivDIVKeyword_4_0() { return cDivDIVKeyword_4_0; }

		//and="AND"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_5() { return cAndEnumLiteralDeclaration_5; }

		//"AND"
		public Keyword getAndANDKeyword_5_0() { return cAndANDKeyword_5_0; }

		//or="OR"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_6() { return cOrEnumLiteralDeclaration_6; }

		//"OR"
		public Keyword getOrORKeyword_6_0() { return cOrORKeyword_6_0; }

		//xor="XOR"
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_7() { return cXorEnumLiteralDeclaration_7; }

		//"XOR"
		public Keyword getXorXORKeyword_7_0() { return cXorXORKeyword_7_0; }

		//lt="LT"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_8() { return cLtEnumLiteralDeclaration_8; }

		//"LT"
		public Keyword getLtLTKeyword_8_0() { return cLtLTKeyword_8_0; }

		//le="LE"
		public EnumLiteralDeclaration getLeEnumLiteralDeclaration_9() { return cLeEnumLiteralDeclaration_9; }

		//"LE"
		public Keyword getLeLEKeyword_9_0() { return cLeLEKeyword_9_0; }

		//eq="EQ"
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_10() { return cEqEnumLiteralDeclaration_10; }

		//"EQ"
		public Keyword getEqEQKeyword_10_0() { return cEqEQKeyword_10_0; }

		//ge="GE"
		public EnumLiteralDeclaration getGeEnumLiteralDeclaration_11() { return cGeEnumLiteralDeclaration_11; }

		//"GE"
		public Keyword getGeGEKeyword_11_0() { return cGeGEKeyword_11_0; }

		//gt="GT"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_12() { return cGtEnumLiteralDeclaration_12; }

		//"GT"
		public Keyword getGtGTKeyword_12_0() { return cGtGTKeyword_12_0; }

		//neq="NEQ"
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_13() { return cNeqEnumLiteralDeclaration_13; }

		//"NEQ"
		public Keyword getNeqNEQKeyword_13_0() { return cNeqNEQKeyword_13_0; }

		//isub="ISUB"
		public EnumLiteralDeclaration getIsubEnumLiteralDeclaration_14() { return cIsubEnumLiteralDeclaration_14; }

		//"ISUB"
		public Keyword getIsubISUBKeyword_14_0() { return cIsubISUBKeyword_14_0; }

		//imul="IMUL"
		public EnumLiteralDeclaration getImulEnumLiteralDeclaration_15() { return cImulEnumLiteralDeclaration_15; }

		//"IMUL"
		public Keyword getImulIMULKeyword_15_0() { return cImulIMULKeyword_15_0; }

		//idiv="IDIV"
		public EnumLiteralDeclaration getIdivEnumLiteralDeclaration_16() { return cIdivEnumLiteralDeclaration_16; }

		//"IDIV"
		public Keyword getIdivIDIVKeyword_16_0() { return cIdivIDIVKeyword_16_0; }

		//iand="IAND"
		public EnumLiteralDeclaration getIandEnumLiteralDeclaration_17() { return cIandEnumLiteralDeclaration_17; }

		//"IAND"
		public Keyword getIandIANDKeyword_17_0() { return cIandIANDKeyword_17_0; }

		//ior="IOR"
		public EnumLiteralDeclaration getIorEnumLiteralDeclaration_18() { return cIorEnumLiteralDeclaration_18; }

		//"IOR"
		public Keyword getIorIORKeyword_18_0() { return cIorIORKeyword_18_0; }

		//ixor="IXOR"
		public EnumLiteralDeclaration getIxorEnumLiteralDeclaration_19() { return cIxorEnumLiteralDeclaration_19; }

		//"IXOR"
		public Keyword getIxorIXORKeyword_19_0() { return cIxorIXORKeyword_19_0; }

		//ilt="ILT"
		public EnumLiteralDeclaration getIltEnumLiteralDeclaration_20() { return cIltEnumLiteralDeclaration_20; }

		//"ILT"
		public Keyword getIltILTKeyword_20_0() { return cIltILTKeyword_20_0; }

		//ile="ILE"
		public EnumLiteralDeclaration getIleEnumLiteralDeclaration_21() { return cIleEnumLiteralDeclaration_21; }

		//"ILE"
		public Keyword getIleILEKeyword_21_0() { return cIleILEKeyword_21_0; }

		//ieq="IEQ"
		public EnumLiteralDeclaration getIeqEnumLiteralDeclaration_22() { return cIeqEnumLiteralDeclaration_22; }

		//"IEQ"
		public Keyword getIeqIEQKeyword_22_0() { return cIeqIEQKeyword_22_0; }

		//ige="IGE"
		public EnumLiteralDeclaration getIgeEnumLiteralDeclaration_23() { return cIgeEnumLiteralDeclaration_23; }

		//"IGE"
		public Keyword getIgeIGEKeyword_23_0() { return cIgeIGEKeyword_23_0; }

		//igt="IGT"
		public EnumLiteralDeclaration getIgtEnumLiteralDeclaration_24() { return cIgtEnumLiteralDeclaration_24; }

		//"IGT"
		public Keyword getIgtIGTKeyword_24_0() { return cIgtIGTKeyword_24_0; }

		//ineq="INEQ"
		public EnumLiteralDeclaration getIneqEnumLiteralDeclaration_25() { return cIneqEnumLiteralDeclaration_25; }

		//"INEQ"
		public Keyword getIneqINEQKeyword_25_0() { return cIneqINEQKeyword_25_0; }
	}

	public class JumpKindElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JumpKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJtJTKeyword_0_0 = (Keyword)cJtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJfEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJfJFKeyword_1_0 = (Keyword)cJfEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cJzEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cJzJZKeyword_2_0 = (Keyword)cJzEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJnzEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJnzJNZKeyword_3_0 = (Keyword)cJnzEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JumpKind returns klp::JumpKind:
		//  jt="JT" | jf="JF" | jz="JZ" | jnz="JNZ";
		public EnumRule getRule() { return rule; }

		//jt="JT" | jf="JF" | jz="JZ" | jnz="JNZ"
		public Alternatives getAlternatives() { return cAlternatives; }

		//jt="JT"
		public EnumLiteralDeclaration getJtEnumLiteralDeclaration_0() { return cJtEnumLiteralDeclaration_0; }

		//"JT"
		public Keyword getJtJTKeyword_0_0() { return cJtJTKeyword_0_0; }

		//jf="JF"
		public EnumLiteralDeclaration getJfEnumLiteralDeclaration_1() { return cJfEnumLiteralDeclaration_1; }

		//"JF"
		public Keyword getJfJFKeyword_1_0() { return cJfJFKeyword_1_0; }

		//jz="JZ"
		public EnumLiteralDeclaration getJzEnumLiteralDeclaration_2() { return cJzEnumLiteralDeclaration_2; }

		//"JZ"
		public Keyword getJzJZKeyword_2_0() { return cJzJZKeyword_2_0; }

		//jnz="JNZ"
		public EnumLiteralDeclaration getJnzEnumLiteralDeclaration_3() { return cJnzEnumLiteralDeclaration_3; }

		//"JNZ"
		public Keyword getJnzJNZKeyword_3_0() { return cJnzJNZKeyword_3_0; }
	}

	public class MoveKindElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MoveKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCmovEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCmovCVMOVKeyword_0_0 = (Keyword)cCmovEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVcmovEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVcmovVCMOVKeyword_1_0 = (Keyword)cVcmovEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVvmovEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVvmovVVMOVKeyword_2_0 = (Keyword)cVvmovEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCcmovEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCcmovCCMOVKeyword_3_0 = (Keyword)cCcmovEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIvmovEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIvmovIVMOVKeyword_4_0 = (Keyword)cIvmovEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIcmovEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIcmovICMOVKeyword_5_0 = (Keyword)cIcmovEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum MoveKind returns klp::MoveKind:
		//  cmov="CVMOV" | vcmov="VCMOV" | vvmov="VVMOV" | ccmov="CCMOV" | ivmov="IVMOV" | icmov=
		//  "ICMOV";
		public EnumRule getRule() { return rule; }

		//cmov="CVMOV" | vcmov="VCMOV" | vvmov="VVMOV" | ccmov="CCMOV" | ivmov="IVMOV" | icmov=
		//"ICMOV"
		public Alternatives getAlternatives() { return cAlternatives; }

		//cmov="CVMOV"
		public EnumLiteralDeclaration getCmovEnumLiteralDeclaration_0() { return cCmovEnumLiteralDeclaration_0; }

		//"CVMOV"
		public Keyword getCmovCVMOVKeyword_0_0() { return cCmovCVMOVKeyword_0_0; }

		//vcmov="VCMOV"
		public EnumLiteralDeclaration getVcmovEnumLiteralDeclaration_1() { return cVcmovEnumLiteralDeclaration_1; }

		//"VCMOV"
		public Keyword getVcmovVCMOVKeyword_1_0() { return cVcmovVCMOVKeyword_1_0; }

		//vvmov="VVMOV"
		public EnumLiteralDeclaration getVvmovEnumLiteralDeclaration_2() { return cVvmovEnumLiteralDeclaration_2; }

		//"VVMOV"
		public Keyword getVvmovVVMOVKeyword_2_0() { return cVvmovVVMOVKeyword_2_0; }

		//ccmov="CCMOV"
		public EnumLiteralDeclaration getCcmovEnumLiteralDeclaration_3() { return cCcmovEnumLiteralDeclaration_3; }

		//"CCMOV"
		public Keyword getCcmovCCMOVKeyword_3_0() { return cCcmovCCMOVKeyword_3_0; }

		//ivmov="IVMOV"
		public EnumLiteralDeclaration getIvmovEnumLiteralDeclaration_4() { return cIvmovEnumLiteralDeclaration_4; }

		//"IVMOV"
		public Keyword getIvmovIVMOVKeyword_4_0() { return cIvmovIVMOVKeyword_4_0; }

		//icmov="ICMOV"
		public EnumLiteralDeclaration getIcmovEnumLiteralDeclaration_5() { return cIcmovEnumLiteralDeclaration_5; }

		//"ICMOV"
		public Keyword getIcmovICMOVKeyword_5_0() { return cIcmovICMOVKeyword_5_0; }
	}
	
	private KLPElements pKLP;
	private LineElements pLine;
	private InstructionElements pInstruction;
	private DeclElements pDecl;
	private SetClkElements pSetClk;
	private SetPCElements pSetPC;
	private PrioElements pPrio;
	private DoneElements pDone;
	private BinopElements pBinop;
	private JmpElements pJmp;
	private CJmpElements pCJmp;
	private MoveElements pMove;
	private LabelElements pLabel;
	private RegElements pReg;
	private ScopeElements unknownRuleScope;
	private OperatorElements unknownRuleOperator;
	private JumpKindElements unknownRuleJumpKind;
	private MoveKindElements unknownRuleMoveKind;
	private ReadElements pRead;
	private TerminalRule tINT;
	private TerminalRule tID;
	private TerminalRule tWS;
	private TerminalRule tCOMMENT;
	private TerminalRule tDIGIT;
	private TerminalRule tLETTER;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public KlpGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//KLP returns klp::KLP:
	//  instructions+=Line*;
	public KLPElements getKLPAccess() {
		return (pKLP != null) ? pKLP : (pKLP = new KLPElements());
	}
	
	public ParserRule getKLPRule() {
		return getKLPAccess().getRule();
	}

	//Line returns klp::Line:
	//  (labels+=ID ":")* instruction=Instruction;
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//Instruction returns klp::Instruction:
	//  Decl|SetClk|SetPC|Prio|Done|Binop|Jmp|CJmp|Move;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Decl returns klp::Decl:
	//  scope=Scope reg=Reg;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//SetClk returns klp::SetClk:
	//  "SETCLK" reg=Reg clk=Reg;
	public SetClkElements getSetClkAccess() {
		return (pSetClk != null) ? pSetClk : (pSetClk = new SetClkElements());
	}
	
	public ParserRule getSetClkRule() {
		return getSetClkAccess().getRule();
	}

	//SetPC returns klp::SetPC:
	//  "SETPC" reg=Reg label=Label;
	public SetPCElements getSetPCAccess() {
		return (pSetPC != null) ? pSetPC : (pSetPC = new SetPCElements());
	}
	
	public ParserRule getSetPCRule() {
		return getSetPCAccess().getRule();
	}

	//Prio returns klp::Prio:
	//  "PRIO" reg=Reg? prio=INT;
	public PrioElements getPrioAccess() {
		return (pPrio != null) ? pPrio : (pPrio = new PrioElements());
	}
	
	public ParserRule getPrioRule() {
		return getPrioAccess().getRule();
	}

	//Done returns klp::Done:
	//  "DONE" pc=Label?;
	public DoneElements getDoneAccess() {
		return (pDone != null) ? pDone : (pDone = new DoneElements());
	}
	
	public ParserRule getDoneRule() {
		return getDoneAccess().getRule();
	}

	//Binop returns klp::Binop:
	//  op=Operator to=Reg arg1=Read (arg2=Read|val=INT);
	public BinopElements getBinopAccess() {
		return (pBinop != null) ? pBinop : (pBinop = new BinopElements());
	}
	
	public ParserRule getBinopRule() {
		return getBinopAccess().getRule();
	}

	//Jmp returns klp::Jmp:
	//  "JMP" label=Label;
	public JmpElements getJmpAccess() {
		return (pJmp != null) ? pJmp : (pJmp = new JmpElements());
	}
	
	public ParserRule getJmpRule() {
		return getJmpAccess().getRule();
	}

	//CJmp returns klp::CJmp:
	//  cond=JumpKind reg=Read label=Label;
	public CJmpElements getCJmpAccess() {
		return (pCJmp != null) ? pCJmp : (pCJmp = new CJmpElements());
	}
	
	public ParserRule getCJmpRule() {
		return getCJmpAccess().getRule();
	}

	//Move returns klp::Move:
	//  type=MoveKind to=Reg (from=Read|val=INT);
	public MoveElements getMoveAccess() {
		return (pMove != null) ? pMove : (pMove = new MoveElements());
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Label returns klp::Label:
	//  name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Reg returns klp::Reg:
	//  name=ID;
	public RegElements getRegAccess() {
		return (pReg != null) ? pReg : (pReg = new RegElements());
	}
	
	public ParserRule getRegRule() {
		return getRegAccess().getRule();
	}

	//enum Scope returns klp::Scope:
	//  input="INPUT" | output="OUTPUT" | local="LOCAL";
	public ScopeElements getScopeAccess() {
		return (unknownRuleScope != null) ? unknownRuleScope : (unknownRuleScope = new ScopeElements());
	}
	
	public EnumRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//enum Operator returns klp::Operator:
	//  add="ADD" | iadd="IADD" | sub="SUB" | mul="MUL" | div="DIV" | and="AND" | or="OR" | xor="XOR" |
	//  lt="LT" | le="LE" | eq="EQ" | ge="GE" | gt="GT" | neq="NEQ" | isub="ISUB" | imul="IMUL" | idiv=
	//  "IDIV" | iand="IAND" | ior="IOR" | ixor="IXOR" | ilt="ILT" | ile="ILE" | ieq="IEQ" | ige="IGE"
	//  | igt="IGT" | ineq="INEQ";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//enum JumpKind returns klp::JumpKind:
	//  jt="JT" | jf="JF" | jz="JZ" | jnz="JNZ";
	public JumpKindElements getJumpKindAccess() {
		return (unknownRuleJumpKind != null) ? unknownRuleJumpKind : (unknownRuleJumpKind = new JumpKindElements());
	}
	
	public EnumRule getJumpKindRule() {
		return getJumpKindAccess().getRule();
	}

	//enum MoveKind returns klp::MoveKind:
	//  cmov="CVMOV" | vcmov="VCMOV" | vvmov="VVMOV" | ccmov="CCMOV" | ivmov="IVMOV" | icmov=
	//  "ICMOV";
	public MoveKindElements getMoveKindAccess() {
		return (unknownRuleMoveKind != null) ? unknownRuleMoveKind : (unknownRuleMoveKind = new MoveKindElements());
	}
	
	public EnumRule getMoveKindRule() {
		return getMoveKindAccess().getRule();
	}

	//Read returns klp::Read:
	//  pre?="pre" "(" reg=Reg ")"|reg=Reg; 
	//      
	//     
	//            
	//         
	//      
	// 
	/// *------------------------------------------------------------------
	// * LEXER RULES
	// *------------------------------------------------------------------* /
	public ReadElements getReadAccess() {
		return (pRead != null) ? pRead : (pRead = new ReadElements());
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//  ("+" | "-")? DIGIT+; 
	// 
	/// *------------------------------------------------------------------
	// * LEXER RULES
	// *------------------------------------------------------------------* /
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//  (LETTER | "_") (LETTER | DIGIT | "_")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal WS:
	//  "\t" | " " | "\r" | "\n";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal COMMENT:
	//  "#"->"\n";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal DIGIT:
	//  "0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal LETTER:
	//  "a".."z" | "A".."Z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
