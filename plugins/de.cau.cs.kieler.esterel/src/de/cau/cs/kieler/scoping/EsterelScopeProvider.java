/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scoping;

import java.util.ArrayList;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopedElement;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.ScopedElement;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import de.cau.cs.kieler.esterel.DelayEvent;
import de.cau.cs.kieler.esterel.DelayExpr;
import de.cau.cs.kieler.esterel.MainModule;
import de.cau.cs.kieler.esterel.Module;
import de.cau.cs.kieler.esterel.ModuleBody;
import de.cau.cs.kieler.esterel.ModuleInterface;
import de.cau.cs.kieler.esterel.Signal;
import de.cau.cs.kieler.esterel.SignalDecl;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class EsterelScopeProvider extends AbstractDeclarativeScopeProvider {

	// TODO: IScope for other references
	// TODO: consider local Signals in the Scope
	
	IScope scope_DelayEvent_signal(DelayEvent context, EReference ref) {
		ArrayList<IScopedElement> scopeElems = new ArrayList<IScopedElement>();
		EObject parent = context.eContainer();
		// Go up in the Structure until Module/MainModule
		while (!(parent instanceof ModuleBody)) {
			parent = parent.eContainer();
		}
		if (parent instanceof ModuleBody)
			parent = parent.eContainer();
		// Get the Signals declared in this Module
		ModuleInterface modInt = null;
		if (parent instanceof Module) {
			modInt = ((Module) parent).getModInt();
		}
		if (parent instanceof MainModule) {
			modInt = ((MainModule) parent).getModInt();
		}
		EList<SignalDecl> intSignalDecl = modInt.getIntSignalDecl();
		if (!(intSignalDecl.isEmpty())) {
			for (SignalDecl sigDecl : intSignalDecl) {
				EList<Signal> sigList = sigDecl.getSignal();
				for (Signal sig : sigList) {
					scopeElems.add(ScopedElement.create(sig.getName(), sig));
				}
			}
		}
		return new SimpleScope(scopeElems);

	}


}
