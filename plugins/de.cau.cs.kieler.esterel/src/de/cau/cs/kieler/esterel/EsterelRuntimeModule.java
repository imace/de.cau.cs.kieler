/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.DefaultEcoreElementFactory;
import org.eclipse.xtext.parser.IAstFactory;
import org.eclipse.xtext.parsetree.AbstractNode;

//import de.cau.cs.kieler.esterel.esterel.InterfaceSignalDecl;
import de.cau.cs.kieler.esterel.esterel.impl.ModuleInterfaceImpl;

/**
 * Use this class to register components to be used within the IDE.
 */
public class EsterelRuntimeModule extends de.cau.cs.kieler.esterel.AbstractEsterelRuntimeModule {

    /**
     * {@inheritDoc}
     */
    @Override
    public Class<? extends IAstFactory> bindIAstFactory() {
        // TODO Auto-generated method stub
        return SignalExtetionAstFactory.class;
    }

    static public class SignalExtetionAstFactory extends DefaultEcoreElementFactory {
        /**
         * {@inheritDoc}
         */
        @Override
        public void set(EObject object, String feature, Object value, String ruleName,
                AbstractNode node) throws ValueConverterException {
            super.set(object, feature, value, ruleName, node);

//            if (object instanceof TextExpression) {
//                ((TextExpression) object).setCode("");
//            }
            // filter out signals and handle them
            if (value instanceof ModuleInterfaceImpl) {
//                EList<InterfaceSignalDecl> interfaceSignalDecls = ((ModuleInterfaceImpl) value)
//                        .getIntSignalDecl();
//                // System.out.println("Stop");
//                for (InterfaceSignalDecl isd : interfaceSignalDecls) {
//                    // if (isd instanceof Input) {
//                    // Input input = (Input) isd;
//                    // for (SignalDecl sDecl : input.getSignal()) {
//                    // sDecl.getSignal().setIsInput(true);
//                    // }
//                    // }
//                }
            }
            // System.out.println("done");
        }
    }
}
