/*
* generated by Xtext
*/
package de.cau.cs.kieler.esterel.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;

import com.google.inject.Inject;

public class EsterelParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EsterelGrammarAccess grammarAccess;
	
	@Override	
	public EsterelGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_Group(this, this, 0, inst);
			case 1: return new Module_Group(this, this, 1, inst);
			case 2: return new ModuleBody_StatementAssignment(this, this, 2, inst);
			case 3: return new ModuleInterface_Alternatives(this, this, 3, inst);
			case 4: return new SignalDecl_Alternatives(this, this, 4, inst);
			case 5: return new SensorDecl_Group(this, this, 5, inst);
			case 6: return new RelationDecl_Group(this, this, 6, inst);
			case 7: return new RelationType_Alternatives(this, this, 7, inst);
			case 8: return new RelationImplication_Group(this, this, 8, inst);
			case 9: return new RelationIncompatibility_Group(this, this, 9, inst);
			case 10: return new TypeDecl_Group(this, this, 10, inst);
			case 11: return new Type_NameAssignment(this, this, 11, inst);
			case 12: return new ConstantDecl_Group(this, this, 12, inst);
			case 13: return new OneTypeConstantDecl_Group(this, this, 13, inst);
			case 14: return new Constant_Group(this, this, 14, inst);
			case 15: return new FunctionDecl_Group(this, this, 15, inst);
			case 16: return new Function_Group(this, this, 16, inst);
			case 17: return new ProcedureDecl_Group(this, this, 17, inst);
			case 18: return new Procedure_Group(this, this, 18, inst);
			case 19: return new Statement_Group(this, this, 19, inst);
			case 20: return new AtomicStatement_Alternatives(this, this, 20, inst);
			case 21: return new Sequence_Group(this, this, 21, inst);
			case 22: return new Block_Group(this, this, 22, inst);
			case 23: return new Assignment_Group(this, this, 23, inst);
			case 24: return new Abort_Group(this, this, 24, inst);
			case 25: return new AbortBody_Alternatives(this, this, 25, inst);
			case 26: return new AbortInstance_Group(this, this, 26, inst);
			case 27: return new AbortCase_Group(this, this, 27, inst);
			case 28: return new AbortCaseSingle_Group(this, this, 28, inst);
			case 29: return new Await_Group(this, this, 29, inst);
			case 30: return new AwaitBody_Alternatives(this, this, 30, inst);
			case 31: return new AwaitInstance_Group(this, this, 31, inst);
			case 32: return new AwaitCase_Group(this, this, 32, inst);
			case 33: return new Do_Group(this, this, 33, inst);
			case 34: return new DoUpto_Group(this, this, 34, inst);
			case 35: return new DoWatching_Group(this, this, 35, inst);
			case 36: return new DoWatchingEnd_Group(this, this, 36, inst);
			case 37: return new Emit_Group(this, this, 37, inst);
			case 38: return new EveryDo_Group(this, this, 38, inst);
			case 39: return new Exit_Group(this, this, 39, inst);
			case 40: return new Halt_Group(this, this, 40, inst);
			case 41: return new IfTest_Group(this, this, 41, inst);
			case 42: return new ElsIfPart_Group(this, this, 42, inst);
			case 43: return new ElsIf_Group(this, this, 43, inst);
			case 44: return new ThenPart_Group(this, this, 44, inst);
			case 45: return new ElsePart_Group(this, this, 45, inst);
			case 46: return new Loop_Group(this, this, 46, inst);
			case 47: return new LoopEach_Group(this, this, 47, inst);
			case 48: return new LoopDelay_DelayAssignment(this, this, 48, inst);
			case 49: return new LoopBody_StatementAssignment(this, this, 49, inst);
			case 50: return new Nothing_Group(this, this, 50, inst);
			case 51: return new Pause_Group(this, this, 51, inst);
			case 52: return new Present_Group(this, this, 52, inst);
			case 53: return new PresentBody_Alternatives(this, this, 53, inst);
			case 54: return new PresentEventBody_Group(this, this, 54, inst);
			case 55: return new PresentCaseList_Group(this, this, 55, inst);
			case 56: return new PresentCase_Group(this, this, 56, inst);
			case 57: return new PresentEvent_Alternatives(this, this, 57, inst);
			case 58: return new Repeat_Group(this, this, 58, inst);
			case 59: return new Run_Alternatives(this, this, 59, inst);
			case 60: return new ModuleRenaming_Group(this, this, 60, inst);
			case 61: return new RenamingList_Group(this, this, 61, inst);
			case 62: return new Renaming_Alternatives(this, this, 62, inst);
			case 63: return new TypeRenaming_Group(this, this, 63, inst);
			case 64: return new ConstantRenaming_Group(this, this, 64, inst);
			case 65: return new FunctionRenaming_Group(this, this, 65, inst);
			case 66: return new ProcedureRenaming_Group(this, this, 66, inst);
			case 67: return new SignalRenaming_Group(this, this, 67, inst);
			case 68: return new LocalSignalDecl_Group(this, this, 68, inst);
			case 69: return new LocalSignalList_Group(this, this, 69, inst);
			case 70: return new Suspend_Group(this, this, 70, inst);
			case 71: return new Sustain_Group(this, this, 71, inst);
			case 72: return new Trap_Group(this, this, 72, inst);
			case 73: return new TrapDeclList_Group(this, this, 73, inst);
			case 74: return new TrapDecl_Group(this, this, 74, inst);
			case 75: return new TrapHandlerList_Group(this, this, 75, inst);
			case 76: return new TrapHandler_Group(this, this, 76, inst);
			case 77: return new Variable_Group(this, this, 77, inst);
			case 78: return new VariableDecl_Group(this, this, 78, inst);
			case 79: return new VariableList_Group(this, this, 79, inst);
			case 80: return new WeakAbort_Group(this, this, 80, inst);
			case 81: return new WeakAbortBody_Alternatives(this, this, 81, inst);
			case 82: return new WeakAbortInstance_Group(this, this, 82, inst);
			case 83: return new WeakAbortCase_Group(this, this, 83, inst);
			case 84: return new DataExpr_Alternatives(this, this, 84, inst);
			case 85: return new DataUnaryExpr_Alternatives(this, this, 85, inst);
			case 86: return new DataValueID_ValueAssignment(this, this, 86, inst);
			case 87: return new DataValueFloat_ValueAssignment(this, this, 87, inst);
			case 88: return new DataValueBoolean_ValueAssignment(this, this, 88, inst);
			case 89: return new DataValueInt_ValueAssignment(this, this, 89, inst);
			case 90: return new DataValueString_ValueAssignment(this, this, 90, inst);
			case 91: return new DataBlock_Group(this, this, 91, inst);
			case 92: return new DataCurrent_Group(this, this, 92, inst);
			case 93: return new DataPre_Group(this, this, 93, inst);
			case 94: return new DataTrap_Group(this, this, 94, inst);
			case 95: return new DataFunction_Group(this, this, 95, inst);
			case 96: return new TrapExpr_SigExprParserRuleCall(this, this, 96, inst);
			case 97: return new SigExpr_Group(this, this, 97, inst);
			case 98: return new SigExprAND_Group(this, this, 98, inst);
			case 99: return new SigExprUnary_Alternatives(this, this, 99, inst);
			case 100: return new DelayExpr_Alternatives(this, this, 100, inst);
			case 101: return new DelayEvent_Alternatives(this, this, 101, inst);
			case 102: return new ChannelDescription_Alternatives(this, this, 102, inst);
			case 103: return new ChannelType_Alternatives(this, this, 103, inst);
			case 104: return new Signal_Group(this, this, 104, inst);
			case 105: return new Sensor_Alternatives(this, this, 105, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Program ****************
 *
 * Program hidden ( Esterel_SL_Comment , Esterel_ML_Comment , WS ):
 *   module+=Module module+=Module*; 
 * 
 * // ==============================================
 * // ===              B.5 Modules               ===
 * // ==============================================
 * 
 * //	help function to allow multiple modules in one document
 *
 **/

// module+=Module module+=Module*
protected class Program_Group extends GroupToken {
	
	public Program_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Program_ModuleAssignment_1(parent, this, 0, inst);
			case 1: return new Program_ModuleAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProgramRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// module+=Module
protected class Program_ModuleAssignment_0 extends AssignmentToken  {
	
	public Program_ModuleAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getModuleAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProgramAccess().getModuleModuleParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// module+=Module*
protected class Program_ModuleAssignment_1 extends AssignmentToken  {
	
	public Program_ModuleAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getModuleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProgramAccess().getModuleModuleParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program_ModuleAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Program_ModuleAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Program ****************/


/************ begin Rule Module ****************
 *
 * Module:
 *   "module" name=EsterelID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule;
 *
 **/

// "module" name=EsterelID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule
protected class Module_Group extends GroupToken {
	
	public Module_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_EndModuleParserRuleCall_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "module"
protected class Module_ModuleKeyword_0 extends KeywordToken  {
	
	public Module_ModuleKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=EsterelID
protected class Module_NameAssignment_1 extends AssignmentToken  {
	
	public Module_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_ModuleKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModuleAccess().getNameEsterelIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Module_ColonKeyword_2 extends KeywordToken  {
	
	public Module_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// modInt=ModuleInterface?
protected class Module_ModIntAssignment_3 extends AssignmentToken  {
	
	public Module_ModIntAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getModIntAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modInt",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modInt");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleInterfaceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleAccess().getModIntModuleInterfaceParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// modBody=ModuleBody
protected class Module_ModBodyAssignment_4 extends AssignmentToken  {
	
	public Module_ModBodyAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getModBodyAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleBody_StatementAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modBody",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modBody");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleAccess().getModBodyModuleBodyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_ModIntAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Module_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// EndModule
protected class Module_EndModuleParserRuleCall_5 extends UnassignedTextToken {

	public Module_EndModuleParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModuleAccess().getEndModuleParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_ModBodyAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Module ****************/



/************ begin Rule ModuleBody ****************
 *
 * ModuleBody:
 *   statement+=Statement;   //deprecated
 * 
 * // help function to clearly divide a Module into interface and body
 *
 **/

// statement+=Statement
protected class ModuleBody_StatementAssignment extends AssignmentToken  {
	
	public ModuleBody_StatementAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleBodyAccess().getStatementAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModuleBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleBodyAccess().getStatementStatementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ModuleBody ****************/


/************ begin Rule ModuleInterface ****************
 *
 * ModuleInterface:
 *   (intSignalDecl+=SignalDecl|intTypeDecl+=TypeDecl|intSensorDecl+=SensorDecl|
 *   intConstantDecl+=ConstantDecl|intRelationDecl+=RelationDecl|intFunctionDecl+=
 *   FunctionDecl|intProcedureDecl+=ProcedureDecl)+; 
 * 
 * 
 * 	
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 
 * // ----------------------------------------------
 * //            Interface Declarations
 * // ----------------------------------------------
 * 	
 * // ==> Signals and Sensors <==
 *
 **/

// (intSignalDecl+=SignalDecl|intTypeDecl+=TypeDecl|intSensorDecl+=SensorDecl|
// intConstantDecl+=ConstantDecl|intRelationDecl+=RelationDecl|intFunctionDecl+=
// FunctionDecl|intProcedureDecl+=ProcedureDecl)+
protected class ModuleInterface_Alternatives extends AlternativesToken {

	public ModuleInterface_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleInterface_IntSignalDeclAssignment_0(parent, this, 0, inst);
			case 1: return new ModuleInterface_IntTypeDeclAssignment_1(parent, this, 1, inst);
			case 2: return new ModuleInterface_IntSensorDeclAssignment_2(parent, this, 2, inst);
			case 3: return new ModuleInterface_IntConstantDeclAssignment_3(parent, this, 3, inst);
			case 4: return new ModuleInterface_IntRelationDeclAssignment_4(parent, this, 4, inst);
			case 5: return new ModuleInterface_IntFunctionDeclAssignment_5(parent, this, 5, inst);
			case 6: return new ModuleInterface_IntProcedureDeclAssignment_6(parent, this, 6, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModuleInterfaceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// intSignalDecl+=SignalDecl
protected class ModuleInterface_IntSignalDeclAssignment_0 extends AssignmentToken  {
	
	public ModuleInterface_IntSignalDeclAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntSignalDeclAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intSignalDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intSignalDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntSignalDeclSignalDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intTypeDecl+=TypeDecl
protected class ModuleInterface_IntTypeDeclAssignment_1 extends AssignmentToken  {
	
	public ModuleInterface_IntTypeDeclAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntTypeDeclAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intTypeDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intTypeDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntTypeDeclTypeDeclParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intSensorDecl+=SensorDecl
protected class ModuleInterface_IntSensorDeclAssignment_2 extends AssignmentToken  {
	
	public ModuleInterface_IntSensorDeclAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntSensorDeclAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SensorDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intSensorDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intSensorDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntSensorDeclSensorDeclParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intConstantDecl+=ConstantDecl
protected class ModuleInterface_IntConstantDeclAssignment_3 extends AssignmentToken  {
	
	public ModuleInterface_IntConstantDeclAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntConstantDeclAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intConstantDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intConstantDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntConstantDeclConstantDeclParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intRelationDecl+=RelationDecl
protected class ModuleInterface_IntRelationDeclAssignment_4 extends AssignmentToken  {
	
	public ModuleInterface_IntRelationDeclAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntRelationDeclAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intRelationDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intRelationDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntRelationDeclRelationDeclParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intFunctionDecl+=FunctionDecl
protected class ModuleInterface_IntFunctionDeclAssignment_5 extends AssignmentToken  {
	
	public ModuleInterface_IntFunctionDeclAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntFunctionDeclAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intFunctionDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intFunctionDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntFunctionDeclFunctionDeclParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// intProcedureDecl+=ProcedureDecl
protected class ModuleInterface_IntProcedureDeclAssignment_6 extends AssignmentToken  {
	
	public ModuleInterface_IntProcedureDeclAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleInterfaceAccess().getIntProcedureDeclAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intProcedureDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intProcedureDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleInterfaceAccess().getIntProcedureDeclProcedureDeclParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModuleInterface_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule ModuleInterface ****************/


/************ begin Rule SignalDecl ****************
 *
 * SignalDecl:
 *   {Input} "input" signal+=Signal ("," signal+=Signal)* ";"|{Output} "output" signal+=
 *   Signal ("," signal+=Signal)* ";"|{InputOutput} "inputoutput" signal+=Signal ("," signal
 *   +=Signal)* ";"|{Return} "return" signal+=Signal ("," signal+=Signal)* ";"; 
 * 
 * // ----------------------------------------------
 * //            Interface Declarations
 * // ----------------------------------------------
 * 	
 * // ==> Signals and Sensors <==
 * 
 * 
 * 	          
 * 		           
 * 		           
 * 		           
 * 
 * 	
 * //ChannelType:
 * //	//make reference to declared types
 * 	 //Problem: Need reference OR BaseType
 *
 **/

// {Input} "input" signal+=Signal ("," signal+=Signal)* ";"|{Output} "output" signal+=
// Signal ("," signal+=Signal)* ";"|{InputOutput} "inputoutput" signal+=Signal ("," signal
// +=Signal)* ";"|{Return} "return" signal+=Signal ("," signal+=Signal)* ";" 
// 
// // ----------------------------------------------
// //            Interface Declarations
// // ----------------------------------------------
// 	
// // ==> Signals and Sensors <==
// 
// 
// 	          
// 		           
// 		           
// 		           
// 
// 	
// //ChannelType:
// //	//make reference to declared types
// 	 //Problem: Need reference OR BaseType
protected class SignalDecl_Alternatives extends AlternativesToken {

	public SignalDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_0(parent, this, 0, inst);
			case 1: return new SignalDecl_Group_1(parent, this, 1, inst);
			case 2: return new SignalDecl_Group_2(parent, this, 2, inst);
			case 3: return new SignalDecl_Group_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Input} "input" signal+=Signal ("," signal+=Signal)* ";"
protected class SignalDecl_Group_0 extends GroupToken {
	
	public SignalDecl_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SemicolonKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Input}
protected class SignalDecl_InputAction_0_0 extends ActionToken  {

	public SignalDecl_InputAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getInputAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSignalDeclAccess().getInputAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "input"
protected class SignalDecl_InputKeyword_0_1 extends KeywordToken  {
	
	public SignalDecl_InputKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getInputKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_InputAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_0_2 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_InputKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," signal+=Signal)*
protected class SignalDecl_Group_0_3 extends GroupToken {
	
	public SignalDecl_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SignalAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SignalDecl_CommaKeyword_0_3_0 extends KeywordToken  {
	
	public SignalDecl_CommaKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getCommaKeyword_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_0_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_0_3_1 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_CommaKeyword_0_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class SignalDecl_SemicolonKeyword_0_4 extends KeywordToken  {
	
	public SignalDecl_SemicolonKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSemicolonKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_0_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {Output} "output" signal+=Signal ("," signal+=Signal)* ";"
protected class SignalDecl_Group_1 extends GroupToken {
	
	public SignalDecl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SemicolonKeyword_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Output}
protected class SignalDecl_OutputAction_1_0 extends ActionToken  {

	public SignalDecl_OutputAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getOutputAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSignalDeclAccess().getOutputAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "output"
protected class SignalDecl_OutputKeyword_1_1 extends KeywordToken  {
	
	public SignalDecl_OutputKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getOutputKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_OutputAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_1_2 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_OutputKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," signal+=Signal)*
protected class SignalDecl_Group_1_3 extends GroupToken {
	
	public SignalDecl_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SignalAssignment_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SignalDecl_CommaKeyword_1_3_0 extends KeywordToken  {
	
	public SignalDecl_CommaKeyword_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getCommaKeyword_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_1_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_1_3_1 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_CommaKeyword_1_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class SignalDecl_SemicolonKeyword_1_4 extends KeywordToken  {
	
	public SignalDecl_SemicolonKeyword_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSemicolonKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_1_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_1_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {InputOutput} "inputoutput" signal+=Signal ("," signal+=Signal)* ";"
protected class SignalDecl_Group_2 extends GroupToken {
	
	public SignalDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SemicolonKeyword_2_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {InputOutput}
protected class SignalDecl_InputOutputAction_2_0 extends ActionToken  {

	public SignalDecl_InputOutputAction_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "inputoutput"
protected class SignalDecl_InputoutputKeyword_2_1 extends KeywordToken  {
	
	public SignalDecl_InputoutputKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getInputoutputKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_InputOutputAction_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_2_2 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_InputoutputKeyword_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," signal+=Signal)*
protected class SignalDecl_Group_2_3 extends GroupToken {
	
	public SignalDecl_Group_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SignalAssignment_2_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SignalDecl_CommaKeyword_2_3_0 extends KeywordToken  {
	
	public SignalDecl_CommaKeyword_2_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getCommaKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_2_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_2_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_2_3_1 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_2_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_CommaKeyword_2_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class SignalDecl_SemicolonKeyword_2_4 extends KeywordToken  {
	
	public SignalDecl_SemicolonKeyword_2_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSemicolonKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_2_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_2_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {Return} "return" signal+=Signal ("," signal+=Signal)* ";"
protected class SignalDecl_Group_3 extends GroupToken {
	
	public SignalDecl_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SemicolonKeyword_3_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Return}
protected class SignalDecl_ReturnAction_3_0 extends ActionToken  {

	public SignalDecl_ReturnAction_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getReturnAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSignalDeclAccess().getReturnAction_3_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "return"
protected class SignalDecl_ReturnKeyword_3_1 extends KeywordToken  {
	
	public SignalDecl_ReturnKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getReturnKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_ReturnAction_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_3_2 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_ReturnKeyword_3_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," signal+=Signal)*
protected class SignalDecl_Group_3_3 extends GroupToken {
	
	public SignalDecl_Group_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getGroup_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_SignalAssignment_3_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SignalDecl_CommaKeyword_3_3_0 extends KeywordToken  {
	
	public SignalDecl_CommaKeyword_3_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getCommaKeyword_3_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_3_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_3_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class SignalDecl_SignalAssignment_3_3_1 extends AssignmentToken  {
	
	public SignalDecl_SignalAssignment_3_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSignalAssignment_3_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SignalDecl_CommaKeyword_3_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class SignalDecl_SemicolonKeyword_3_4 extends KeywordToken  {
	
	public SignalDecl_SemicolonKeyword_3_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalDeclAccess().getSemicolonKeyword_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalDecl_Group_3_3(parent, this, 0, inst);
			case 1: return new SignalDecl_SignalAssignment_3_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule SignalDecl ****************/


/************ begin Rule SensorDecl ****************
 *
 * SensorDecl:
 *   "sensor" sensor+=Sensor ("," sensor+=Sensor)* ";"; 
 * 
 * 	
 * //ChannelType:
 * //	//make reference to declared types
 * 	 //Problem: Need reference OR BaseType
 * 	
 * 
 * 	        
 * 	
 * // ==> Relations
 *
 **/

// "sensor" sensor+=Sensor ("," sensor+=Sensor)* ";"
protected class SensorDecl_Group extends GroupToken {
	
	public SensorDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SensorDecl_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSensorDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "sensor"
protected class SensorDecl_SensorKeyword_0 extends KeywordToken  {
	
	public SensorDecl_SensorKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getSensorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// sensor+=Sensor
protected class SensorDecl_SensorAssignment_1 extends AssignmentToken  {
	
	public SensorDecl_SensorAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getSensorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sensor",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sensor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SensorDecl_SensorKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," sensor+=Sensor)*
protected class SensorDecl_Group_2 extends GroupToken {
	
	public SensorDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SensorDecl_SensorAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SensorDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public SensorDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SensorDecl_Group_2(parent, this, 0, inst);
			case 1: return new SensorDecl_SensorAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// sensor+=Sensor
protected class SensorDecl_SensorAssignment_2_1 extends AssignmentToken  {
	
	public SensorDecl_SensorAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getSensorAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sensor",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sensor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SensorDecl_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class SensorDecl_SemicolonKeyword_3 extends KeywordToken  {
	
	public SensorDecl_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorDeclAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SensorDecl_Group_2(parent, this, 0, inst);
			case 1: return new SensorDecl_SensorAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SensorDecl ****************/


/************ begin Rule RelationDecl ****************
 *
 * RelationDecl:
 *   {Relation} "relation" relation+=RelationType ("," relation+=RelationType)* ";"; 
 * 	
 * // ==> Relations
 *
 **/

// {Relation} "relation" relation+=RelationType ("," relation+=RelationType)* ";"
protected class RelationDecl_Group extends GroupToken {
	
	public RelationDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Relation}
protected class RelationDecl_RelationAction_0 extends ActionToken  {

	public RelationDecl_RelationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getRelationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationDeclAccess().getRelationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "relation"
protected class RelationDecl_RelationKeyword_1 extends KeywordToken  {
	
	public RelationDecl_RelationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getRelationKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_RelationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// relation+=RelationType
protected class RelationDecl_RelationAssignment_2 extends AssignmentToken  {
	
	public RelationDecl_RelationAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getRelationAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("relation",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("relation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationDeclAccess().getRelationRelationTypeParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationDecl_RelationKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," relation+=RelationType)*
protected class RelationDecl_Group_3 extends GroupToken {
	
	public RelationDecl_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_RelationAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class RelationDecl_CommaKeyword_3_0 extends KeywordToken  {
	
	public RelationDecl_CommaKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_Group_3(parent, this, 0, inst);
			case 1: return new RelationDecl_RelationAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// relation+=RelationType
protected class RelationDecl_RelationAssignment_3_1 extends AssignmentToken  {
	
	public RelationDecl_RelationAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getRelationAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("relation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("relation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationDeclAccess().getRelationRelationTypeParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationDecl_CommaKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class RelationDecl_SemicolonKeyword_4 extends KeywordToken  {
	
	public RelationDecl_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationDeclAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationDecl_Group_3(parent, this, 0, inst);
			case 1: return new RelationDecl_RelationAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RelationDecl ****************/


/************ begin Rule RelationType ****************
 *
 * RelationType:
 *   RelationImplication|RelationIncompatibility;
 *
 **/

// RelationImplication|RelationIncompatibility
protected class RelationType_Alternatives extends AlternativesToken {

	public RelationType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_RelationImplicationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new RelationType_RelationIncompatibilityParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationImplication
protected class RelationType_RelationImplicationParserRuleCall_0 extends RuleCallToken {
	
	public RelationType_RelationImplicationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRelationImplicationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationImplication_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationImplication_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationImplicationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RelationIncompatibility
protected class RelationType_RelationIncompatibilityParserRuleCall_1 extends RuleCallToken {
	
	public RelationType_RelationIncompatibilityParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRelationIncompatibilityParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationIncompatibility_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RelationType ****************/


/************ begin Rule RelationImplication ****************
 *
 * RelationImplication:
 *   first=[Signal|EsterelID] type="=>" second=[Signal|EsterelID];
 *
 **/

// first=[Signal|EsterelID] type="=>" second=[Signal|EsterelID]
protected class RelationImplication_Group extends GroupToken {
	
	public RelationImplication_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationImplicationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationImplication_SecondAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationImplicationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// first=[Signal|EsterelID]
protected class RelationImplication_FirstAssignment_0 extends AssignmentToken  {
	
	public RelationImplication_FirstAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationImplicationAccess().getFirstAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("first",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("first");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationImplicationAccess().getFirstSignalCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationImplicationAccess().getFirstSignalCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type="=>"
protected class RelationImplication_TypeAssignment_1 extends AssignmentToken  {
	
	public RelationImplication_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationImplicationAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationImplication_FirstAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if("=>".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// second=[Signal|EsterelID]
protected class RelationImplication_SecondAssignment_2 extends AssignmentToken  {
	
	public RelationImplication_SecondAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationImplicationAccess().getSecondAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationImplication_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("second",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("second");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationImplicationAccess().getSecondSignalCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationImplicationAccess().getSecondSignalCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule RelationImplication ****************/


/************ begin Rule RelationIncompatibility ****************
 *
 * RelationIncompatibility:
 *   incomp+=[Signal|EsterelID] type="#" incomp+=[Signal|EsterelID] ("#" incomp+=[Signal|
 *   EsterelID])*; 
 * 	
 *   
 * 	        
 * 
 * // ==> Types
 *
 **/

// incomp+=[Signal|EsterelID] type="#" incomp+=[Signal|EsterelID] ("#" incomp+=[Signal|
// EsterelID])*
protected class RelationIncompatibility_Group extends GroupToken {
	
	public RelationIncompatibility_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_Group_3(parent, this, 0, inst);
			case 1: return new RelationIncompatibility_IncompAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// incomp+=[Signal|EsterelID]
protected class RelationIncompatibility_IncompAssignment_0 extends AssignmentToken  {
	
	public RelationIncompatibility_IncompAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getIncompAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("incomp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("incomp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type="#"
protected class RelationIncompatibility_TypeAssignment_1 extends AssignmentToken  {
	
	public RelationIncompatibility_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_IncompAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if("#".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationIncompatibilityAccess().getTypeNumberSignKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// incomp+=[Signal|EsterelID]
protected class RelationIncompatibility_IncompAssignment_2 extends AssignmentToken  {
	
	public RelationIncompatibility_IncompAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getIncompAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("incomp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("incomp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("#" incomp+=[Signal|EsterelID])*
protected class RelationIncompatibility_Group_3 extends GroupToken {
	
	public RelationIncompatibility_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_IncompAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "#"
protected class RelationIncompatibility_NumberSignKeyword_3_0 extends KeywordToken  {
	
	public RelationIncompatibility_NumberSignKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getNumberSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_Group_3(parent, this, 0, inst);
			case 1: return new RelationIncompatibility_IncompAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// incomp+=[Signal|EsterelID]
protected class RelationIncompatibility_IncompAssignment_3_1 extends AssignmentToken  {
	
	public RelationIncompatibility_IncompAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationIncompatibilityAccess().getIncompAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationIncompatibility_NumberSignKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("incomp",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("incomp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule RelationIncompatibility ****************/


/************ begin Rule TypeDecl ****************
 *
 * TypeDecl:
 *   "type" type+=Type ("," type+=Type)* ";"; 
 * 
 * // ==> Types
 *
 **/

// "type" type+=Type ("," type+=Type)* ";"
protected class TypeDecl_Group extends GroupToken {
	
	public TypeDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDecl_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type"
protected class TypeDecl_TypeKeyword_0 extends KeywordToken  {
	
	public TypeDecl_TypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type+=Type
protected class TypeDecl_TypeAssignment_1 extends AssignmentToken  {
	
	public TypeDecl_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeDecl_TypeKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," type+=Type)*
protected class TypeDecl_Group_2 extends GroupToken {
	
	public TypeDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDecl_TypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class TypeDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public TypeDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDecl_Group_2(parent, this, 0, inst);
			case 1: return new TypeDecl_TypeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type+=Type
protected class TypeDecl_TypeAssignment_2_1 extends AssignmentToken  {
	
	public TypeDecl_TypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeDecl_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class TypeDecl_SemicolonKeyword_3 extends KeywordToken  {
	
	public TypeDecl_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDecl_Group_2(parent, this, 0, inst);
			case 1: return new TypeDecl_TypeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule TypeDecl ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   name=EsterelID;  
 * 
 * 
 * 	
 * 
 * 	
 * // ==> Constants
 *
 **/

// name=EsterelID
protected class Type_NameAssignment extends AssignmentToken  {
	
	public Type_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTypeAccess().getNameEsterelIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Type ****************/


/************ begin Rule ConstantDecl ****************
 *
 * ConstantDecl:
 *   "constant" constant+=OneTypeConstantDecl ("," constant+=OneTypeConstantDecl)* ";"; 
 * 
 * 	
 * // ==> Constants
 *
 **/

// "constant" constant+=OneTypeConstantDecl ("," constant+=OneTypeConstantDecl)* ";"
protected class ConstantDecl_Group extends GroupToken {
	
	public ConstantDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantDecl_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstantDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "constant"
protected class ConstantDecl_ConstantKeyword_0 extends KeywordToken  {
	
	public ConstantDecl_ConstantKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getConstantKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// constant+=OneTypeConstantDecl
protected class ConstantDecl_ConstantAssignment_1 extends AssignmentToken  {
	
	public ConstantDecl_ConstantAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getConstantAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constant",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstantDecl_ConstantKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," constant+=OneTypeConstantDecl)*
protected class ConstantDecl_Group_2 extends GroupToken {
	
	public ConstantDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantDecl_ConstantAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ConstantDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public ConstantDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantDecl_Group_2(parent, this, 0, inst);
			case 1: return new ConstantDecl_ConstantAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// constant+=OneTypeConstantDecl
protected class ConstantDecl_ConstantAssignment_2_1 extends AssignmentToken  {
	
	public ConstantDecl_ConstantAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getConstantAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constant",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstantDecl_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class ConstantDecl_SemicolonKeyword_3 extends KeywordToken  {
	
	public ConstantDecl_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantDeclAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantDecl_Group_2(parent, this, 0, inst);
			case 1: return new ConstantDecl_ConstantAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ConstantDecl ****************/


/************ begin Rule OneTypeConstantDecl ****************
 *
 * OneTypeConstantDecl:
 *   constant+=Constant ("," constant+=Constant)* ":" (type=EsterelID|type=BaseType);
 *
 **/

// constant+=Constant ("," constant+=Constant)* ":" (type=EsterelID|type=BaseType)
protected class OneTypeConstantDecl_Group extends GroupToken {
	
	public OneTypeConstantDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// constant+=Constant
protected class OneTypeConstantDecl_ConstantAssignment_0 extends AssignmentToken  {
	
	public OneTypeConstantDecl_ConstantAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getConstantAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constant",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," constant+=Constant)*
protected class OneTypeConstantDecl_Group_1 extends GroupToken {
	
	public OneTypeConstantDecl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_ConstantAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class OneTypeConstantDecl_CommaKeyword_1_0 extends KeywordToken  {
	
	public OneTypeConstantDecl_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_Group_1(parent, this, 0, inst);
			case 1: return new OneTypeConstantDecl_ConstantAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// constant+=Constant
protected class OneTypeConstantDecl_ConstantAssignment_1_1 extends AssignmentToken  {
	
	public OneTypeConstantDecl_ConstantAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getConstantAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("constant",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("constant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OneTypeConstantDecl_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ":"
protected class OneTypeConstantDecl_ColonKeyword_2 extends KeywordToken  {
	
	public OneTypeConstantDecl_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_Group_1(parent, this, 0, inst);
			case 1: return new OneTypeConstantDecl_ConstantAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class OneTypeConstantDecl_Alternatives_3 extends AlternativesToken {

	public OneTypeConstantDecl_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_TypeAssignment_3_0(parent, this, 0, inst);
			case 1: return new OneTypeConstantDecl_TypeAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class OneTypeConstantDecl_TypeAssignment_3_0 extends AssignmentToken  {
	
	public OneTypeConstantDecl_TypeAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getTypeAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_ColonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getOneTypeConstantDeclAccess().getTypeEsterelIDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class OneTypeConstantDecl_TypeAssignment_3_1 extends AssignmentToken  {
	
	public OneTypeConstantDecl_TypeAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOneTypeConstantDeclAccess().getTypeAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneTypeConstantDecl_ColonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getOneTypeConstantDeclAccess().getTypeBaseTypeTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule OneTypeConstantDecl ****************/


/************ begin Rule Constant ****************
 *
 * Constant:
 *   name=EsterelID ("=" value=ConstantValue)?;
 *
 **/

// name=EsterelID ("=" value=ConstantValue)?
protected class Constant_Group extends GroupToken {
	
	public Constant_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_Group_1(parent, this, 0, inst);
			case 1: return new Constant_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstantRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID
protected class Constant_NameAssignment_0 extends AssignmentToken  {
	
	public Constant_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getConstantAccess().getNameEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=ConstantValue)?
protected class Constant_Group_1 extends GroupToken {
	
	public Constant_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_ValueAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Constant_EqualsSignKeyword_1_0 extends KeywordToken  {
	
	public Constant_EqualsSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantAccess().getEqualsSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=ConstantValue
protected class Constant_ValueAssignment_1_1 extends AssignmentToken  {
	
	public Constant_ValueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantAccess().getValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constant_EqualsSignKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getConstantAccess().getValueConstantValueParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Constant ****************/



/************ begin Rule FunctionDecl ****************
 *
 * FunctionDecl:
 *   "function" function+=Function ("," function+=Function)* ";"; 
 * 	
 * // ==> Functions
 *
 **/

// "function" function+=Function ("," function+=Function)* ";"
protected class FunctionDecl_Group extends GroupToken {
	
	public FunctionDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDecl_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "function"
protected class FunctionDecl_FunctionKeyword_0 extends KeywordToken  {
	
	public FunctionDecl_FunctionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getFunctionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// function+=Function
protected class FunctionDecl_FunctionAssignment_1 extends AssignmentToken  {
	
	public FunctionDecl_FunctionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getFunctionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("function",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("function");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionDecl_FunctionKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," function+=Function)*
protected class FunctionDecl_Group_2 extends GroupToken {
	
	public FunctionDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDecl_FunctionAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FunctionDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public FunctionDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDecl_Group_2(parent, this, 0, inst);
			case 1: return new FunctionDecl_FunctionAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// function+=Function
protected class FunctionDecl_FunctionAssignment_2_1 extends AssignmentToken  {
	
	public FunctionDecl_FunctionAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getFunctionAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("function",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("function");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionDecl_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class FunctionDecl_SemicolonKeyword_3 extends KeywordToken  {
	
	public FunctionDecl_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDecl_Group_2(parent, this, 0, inst);
			case 1: return new FunctionDecl_FunctionAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FunctionDecl ****************/


/************ begin Rule Function ****************
 *
 * Function:
 *   name=EsterelID "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*
 *   )? ")" ":" (type=EsterelID|type=BaseType); 
 * 	
 * 
 * 	                  
 * 
 * // ==> Procedures
 *
 **/

// name=EsterelID "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*
// )? ")" ":" (type=EsterelID|type=BaseType)
protected class Function_Group extends GroupToken {
	
	public Function_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID
protected class Function_NameAssignment_0 extends AssignmentToken  {
	
	public Function_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getNameEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class Function_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Function_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*)?
protected class Function_Group_2 extends GroupToken {
	
	public Function_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_2_1(parent, this, 0, inst);
			case 1: return new Function_IdListAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Function_IdListAssignment_2_0 extends AssignmentToken  {
	
	public Function_IdListAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getIdListAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_LeftParenthesisKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getIdListEsterelIDTerminalRuleCall_2_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("," idList+=( EsterelID | BaseType ))*
protected class Function_Group_2_1 extends GroupToken {
	
	public Function_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_IdListAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Function_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public Function_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_2_1(parent, this, 0, inst);
			case 1: return new Function_IdListAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Function_IdListAssignment_2_1_1 extends AssignmentToken  {
	
	public Function_IdListAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getIdListAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_CommaKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getIdListEsterelIDTerminalRuleCall_2_1_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_1_1_0_1();
			return obj;
		}
		return null;
	}

}



// ")"
protected class Function_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Function_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_2(parent, this, 0, inst);
			case 1: return new Function_LeftParenthesisKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Function_ColonKeyword_4 extends KeywordToken  {
	
	public Function_ColonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class Function_Alternatives_5 extends AlternativesToken {

	public Function_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_TypeAssignment_5_0(parent, this, 0, inst);
			case 1: return new Function_TypeAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class Function_TypeAssignment_5_0 extends AssignmentToken  {
	
	public Function_TypeAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getTypeAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ColonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getTypeEsterelIDTerminalRuleCall_5_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class Function_TypeAssignment_5_1 extends AssignmentToken  {
	
	public Function_TypeAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getTypeAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ColonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getTypeBaseTypeTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Function ****************/


/************ begin Rule ProcedureDecl ****************
 *
 * ProcedureDecl:
 *   "procedure" procedure+=Procedure ("," procedure+=Procedure)* ";"; 
 * 
 * // ==> Procedures
 *
 **/

// "procedure" procedure+=Procedure ("," procedure+=Procedure)* ";"
protected class ProcedureDecl_Group extends GroupToken {
	
	public ProcedureDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureDecl_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcedureDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "procedure"
protected class ProcedureDecl_ProcedureKeyword_0 extends KeywordToken  {
	
	public ProcedureDecl_ProcedureKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getProcedureKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// procedure+=Procedure
protected class ProcedureDecl_ProcedureAssignment_1 extends AssignmentToken  {
	
	public ProcedureDecl_ProcedureAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getProcedureAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("procedure",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("procedure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcedureDeclAccess().getProcedureProcedureParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureDecl_ProcedureKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," procedure+=Procedure)*
protected class ProcedureDecl_Group_2 extends GroupToken {
	
	public ProcedureDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureDecl_ProcedureAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ProcedureDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public ProcedureDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureDecl_Group_2(parent, this, 0, inst);
			case 1: return new ProcedureDecl_ProcedureAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// procedure+=Procedure
protected class ProcedureDecl_ProcedureAssignment_2_1 extends AssignmentToken  {
	
	public ProcedureDecl_ProcedureAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getProcedureAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("procedure",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("procedure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcedureDeclAccess().getProcedureProcedureParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureDecl_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class ProcedureDecl_SemicolonKeyword_3 extends KeywordToken  {
	
	public ProcedureDecl_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureDecl_Group_2(parent, this, 0, inst);
			case 1: return new ProcedureDecl_ProcedureAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ProcedureDecl ****************/


/************ begin Rule Procedure ****************
 *
 * Procedure:
 *   name=EsterelID "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*
 *   )? ")" "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*)? ")"; 
 * 
 * 
 * 	 
 * 	        
 * 	        
 * 
 * // ==============================================
 * // ===            B.4 Statements              ===
 * // ==============================================
 *
 **/

// name=EsterelID "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*
// )? ")" "(" (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*)? ")"
protected class Procedure_Group extends GroupToken {
	
	public Procedure_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_RightParenthesisKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcedureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID
protected class Procedure_NameAssignment_0 extends AssignmentToken  {
	
	public Procedure_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getNameEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class Procedure_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Procedure_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*)?
protected class Procedure_Group_2 extends GroupToken {
	
	public Procedure_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_2_1(parent, this, 0, inst);
			case 1: return new Procedure_IdListAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Procedure_IdListAssignment_2_0 extends AssignmentToken  {
	
	public Procedure_IdListAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getIdListAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_LeftParenthesisKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_2_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_2_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("," idList+=( EsterelID | BaseType ))*
protected class Procedure_Group_2_1 extends GroupToken {
	
	public Procedure_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_IdListAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Procedure_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public Procedure_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_2_1(parent, this, 0, inst);
			case 1: return new Procedure_IdListAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Procedure_IdListAssignment_2_1_1 extends AssignmentToken  {
	
	public Procedure_IdListAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getIdListAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_CommaKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_2_1_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_2_1_1_0_1();
			return obj;
		}
		return null;
	}

}



// ")"
protected class Procedure_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Procedure_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_2(parent, this, 0, inst);
			case 1: return new Procedure_LeftParenthesisKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Procedure_LeftParenthesisKeyword_4 extends KeywordToken  {
	
	public Procedure_LeftParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (idList+=( EsterelID | BaseType ) ("," idList+=( EsterelID | BaseType ))*)?
protected class Procedure_Group_5 extends GroupToken {
	
	public Procedure_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_5_1(parent, this, 0, inst);
			case 1: return new Procedure_IdListAssignment_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Procedure_IdListAssignment_5_0 extends AssignmentToken  {
	
	public Procedure_IdListAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getIdListAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_LeftParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_5_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_5_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("," idList+=( EsterelID | BaseType ))*
protected class Procedure_Group_5_1 extends GroupToken {
	
	public Procedure_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_IdListAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Procedure_CommaKeyword_5_1_0 extends KeywordToken  {
	
	public Procedure_CommaKeyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_5_1(parent, this, 0, inst);
			case 1: return new Procedure_IdListAssignment_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// idList+=( EsterelID | BaseType )
protected class Procedure_IdListAssignment_5_1_1 extends AssignmentToken  {
	
	public Procedure_IdListAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getIdListAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_CommaKeyword_5_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idList");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_5_1_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_5_1_1_0_1();
			return obj;
		}
		return null;
	}

}



// ")"
protected class Procedure_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public Procedure_RightParenthesisKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Procedure_Group_5(parent, this, 0, inst);
			case 1: return new Procedure_LeftParenthesisKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Procedure ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 *   Sequence ({Parallel.list+=current} "||" list+=Sequence)*; 
 * 
 * // ==============================================
 * // ===            B.4 Statements              ===
 * // ==============================================
 *
 **/

// Sequence ({Parallel.list+=current} "||" list+=Sequence)*
protected class Statement_Group extends GroupToken {
	
	public Statement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group_1(parent, this, 0, inst);
			case 1: return new Statement_SequenceParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Sequence
protected class Statement_SequenceParserRuleCall_0 extends RuleCallToken {
	
	public Statement_SequenceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSequenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Sequence_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSequenceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({Parallel.list+=current} "||" list+=Sequence)*
protected class Statement_Group_1 extends GroupToken {
	
	public Statement_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_ListAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Parallel.list+=current}
protected class Statement_ParallelListAction_1_0 extends ActionToken  {

	public Statement_ParallelListAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getParallelListAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group_1(parent, this, 0, inst);
			case 1: return new Statement_SequenceParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStatementAccess().getParallelListAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("list", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("list")) return null;
		return getDescr((EObject) val);
	}
}

// "||"
protected class Statement_VerticalLineVerticalLineKeyword_1_1 extends KeywordToken  {
	
	public Statement_VerticalLineVerticalLineKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getVerticalLineVerticalLineKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_ParallelListAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// list+=Sequence
protected class Statement_ListAssignment_1_2 extends AssignmentToken  {
	
	public Statement_ListAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getListAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSequenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStatementAccess().getListSequenceParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_VerticalLineVerticalLineKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Statement ****************/


/************ begin Rule AtomicStatement ****************
 *
 * AtomicStatement returns Statement:
 *   Abort|Assignment|Await|Block|Do|Emit|EveryDo|Exit|Halt|IfTest|LocalSignalDecl|
 *   Loop|Nothing|Pause|Present|Repeat|Run|Suspend|Sustain|Trap|Variable|WeakAbort; 
 * 	
 *     
 * 	 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 		 
 * 	
 * // --> B.4.1 Control Flow Operators <--
 *
 **/

// Abort|Assignment|Await|Block|Do|Emit|EveryDo|Exit|Halt|IfTest|LocalSignalDecl|
// Loop|Nothing|Pause|Present|Repeat|Run|Suspend|Sustain|Trap|Variable|WeakAbort 
// 	
//     
// 	 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 		 
// 	
// // --> B.4.1 Control Flow Operators <--
protected class AtomicStatement_Alternatives extends AlternativesToken {

	public AtomicStatement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AtomicStatement_AbortParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AtomicStatement_AssignmentParserRuleCall_1(parent, this, 1, inst);
			case 2: return new AtomicStatement_AwaitParserRuleCall_2(parent, this, 2, inst);
			case 3: return new AtomicStatement_BlockParserRuleCall_3(parent, this, 3, inst);
			case 4: return new AtomicStatement_DoParserRuleCall_4(parent, this, 4, inst);
			case 5: return new AtomicStatement_EmitParserRuleCall_5(parent, this, 5, inst);
			case 6: return new AtomicStatement_EveryDoParserRuleCall_6(parent, this, 6, inst);
			case 7: return new AtomicStatement_ExitParserRuleCall_7(parent, this, 7, inst);
			case 8: return new AtomicStatement_HaltParserRuleCall_8(parent, this, 8, inst);
			case 9: return new AtomicStatement_IfTestParserRuleCall_9(parent, this, 9, inst);
			case 10: return new AtomicStatement_LocalSignalDeclParserRuleCall_10(parent, this, 10, inst);
			case 11: return new AtomicStatement_LoopParserRuleCall_11(parent, this, 11, inst);
			case 12: return new AtomicStatement_NothingParserRuleCall_12(parent, this, 12, inst);
			case 13: return new AtomicStatement_PauseParserRuleCall_13(parent, this, 13, inst);
			case 14: return new AtomicStatement_PresentParserRuleCall_14(parent, this, 14, inst);
			case 15: return new AtomicStatement_RepeatParserRuleCall_15(parent, this, 15, inst);
			case 16: return new AtomicStatement_RunParserRuleCall_16(parent, this, 16, inst);
			case 17: return new AtomicStatement_SuspendParserRuleCall_17(parent, this, 17, inst);
			case 18: return new AtomicStatement_SustainParserRuleCall_18(parent, this, 18, inst);
			case 19: return new AtomicStatement_TrapParserRuleCall_19(parent, this, 19, inst);
			case 20: return new AtomicStatement_VariableParserRuleCall_20(parent, this, 20, inst);
			case 21: return new AtomicStatement_WeakAbortParserRuleCall_21(parent, this, 21, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAtomicStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Abort
protected class AtomicStatement_AbortParserRuleCall_0 extends RuleCallToken {
	
	public AtomicStatement_AbortParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getAbortParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abort_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Abort_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbortRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Assignment
protected class AtomicStatement_AssignmentParserRuleCall_1 extends RuleCallToken {
	
	public AtomicStatement_AssignmentParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getAssignmentParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Assignment_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Await
protected class AtomicStatement_AwaitParserRuleCall_2 extends RuleCallToken {
	
	public AtomicStatement_AwaitParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getAwaitParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Await_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Await_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAwaitRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Block
protected class AtomicStatement_BlockParserRuleCall_3 extends RuleCallToken {
	
	public AtomicStatement_BlockParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getBlockParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Block_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Block_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Do
protected class AtomicStatement_DoParserRuleCall_4 extends RuleCallToken {
	
	public AtomicStatement_DoParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getDoParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Do_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Do_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Emit
protected class AtomicStatement_EmitParserRuleCall_5 extends RuleCallToken {
	
	public AtomicStatement_EmitParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getEmitParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Emit_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEmitRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EveryDo
protected class AtomicStatement_EveryDoParserRuleCall_6 extends RuleCallToken {
	
	public AtomicStatement_EveryDoParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getEveryDoParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EveryDo_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EveryDo_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEveryDoRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Exit
protected class AtomicStatement_ExitParserRuleCall_7 extends RuleCallToken {
	
	public AtomicStatement_ExitParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getExitParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Exit_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExitRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Halt
protected class AtomicStatement_HaltParserRuleCall_8 extends RuleCallToken {
	
	public AtomicStatement_HaltParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getHaltParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Halt_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Halt_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHaltRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IfTest
protected class AtomicStatement_IfTestParserRuleCall_9 extends RuleCallToken {
	
	public AtomicStatement_IfTestParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getIfTestParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfTest_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfTest_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfTestRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LocalSignalDecl
protected class AtomicStatement_LocalSignalDeclParserRuleCall_10 extends RuleCallToken {
	
	public AtomicStatement_LocalSignalDeclParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getLocalSignalDeclParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LocalSignalDecl_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLocalSignalDeclRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Loop
protected class AtomicStatement_LoopParserRuleCall_11 extends RuleCallToken {
	
	public AtomicStatement_LoopParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getLoopParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Loop_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoopRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Nothing
protected class AtomicStatement_NothingParserRuleCall_12 extends RuleCallToken {
	
	public AtomicStatement_NothingParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getNothingParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nothing_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Nothing_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNothingRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Pause
protected class AtomicStatement_PauseParserRuleCall_13 extends RuleCallToken {
	
	public AtomicStatement_PauseParserRuleCall_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getPauseParserRuleCall_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Pause_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPauseRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Present
protected class AtomicStatement_PresentParserRuleCall_14 extends RuleCallToken {
	
	public AtomicStatement_PresentParserRuleCall_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getPresentParserRuleCall_14();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Present_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Present_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPresentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Repeat
protected class AtomicStatement_RepeatParserRuleCall_15 extends RuleCallToken {
	
	public AtomicStatement_RepeatParserRuleCall_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getRepeatParserRuleCall_15();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Repeat_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Repeat_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRepeatRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Run
protected class AtomicStatement_RunParserRuleCall_16 extends RuleCallToken {
	
	public AtomicStatement_RunParserRuleCall_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getRunParserRuleCall_16();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Run_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRunRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Suspend
protected class AtomicStatement_SuspendParserRuleCall_17 extends RuleCallToken {
	
	public AtomicStatement_SuspendParserRuleCall_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getSuspendParserRuleCall_17();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Suspend_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Suspend_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSuspendRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Sustain
protected class AtomicStatement_SustainParserRuleCall_18 extends RuleCallToken {
	
	public AtomicStatement_SustainParserRuleCall_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getSustainParserRuleCall_18();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Sustain_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSustainRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Trap
protected class AtomicStatement_TrapParserRuleCall_19 extends RuleCallToken {
	
	public AtomicStatement_TrapParserRuleCall_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getTrapParserRuleCall_19();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Trap_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Trap_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTrapRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Variable
protected class AtomicStatement_VariableParserRuleCall_20 extends RuleCallToken {
	
	public AtomicStatement_VariableParserRuleCall_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getVariableParserRuleCall_20();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Variable_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WeakAbort
protected class AtomicStatement_WeakAbortParserRuleCall_21 extends RuleCallToken {
	
	public AtomicStatement_WeakAbortParserRuleCall_21(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicStatementAccess().getWeakAbortParserRuleCall_21();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbort_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WeakAbort_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWeakAbortRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtomicStatement ****************/


/************ begin Rule Sequence ****************
 *
 * Sequence returns Statement:
 *   AtomicStatement ({Sequence.list+=current} ";" list+=AtomicStatement)* ";"?; 
 * 	
 * // --> B.4.1 Control Flow Operators <--
 *
 **/

// AtomicStatement ({Sequence.list+=current} ";" list+=AtomicStatement)* ";"?
protected class Sequence_Group extends GroupToken {
	
	public Sequence_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSequenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_Group_1(parent, this, 0, inst);
			case 1: return new Sequence_AtomicStatementParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSequenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AtomicStatement
protected class Sequence_AtomicStatementParserRuleCall_0 extends RuleCallToken {
	
	public Sequence_AtomicStatementParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSequenceAccess().getAtomicStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AtomicStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AtomicStatement_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAtomicStatementRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({Sequence.list+=current} ";" list+=AtomicStatement)*
protected class Sequence_Group_1 extends GroupToken {
	
	public Sequence_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSequenceAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_ListAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Sequence.list+=current}
protected class Sequence_SequenceListAction_1_0 extends ActionToken  {

	public Sequence_SequenceListAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSequenceAccess().getSequenceListAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_Group_1(parent, this, 0, inst);
			case 1: return new Sequence_AtomicStatementParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSequenceAccess().getSequenceListAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("list", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("list")) return null;
		return getDescr((EObject) val);
	}
}

// ";"
protected class Sequence_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public Sequence_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSequenceAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sequence_SequenceListAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// list+=AtomicStatement
protected class Sequence_ListAssignment_1_2 extends AssignmentToken  {
	
	public Sequence_ListAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSequenceAccess().getListAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AtomicStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAtomicStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSequenceAccess().getListAtomicStatementParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Sequence_SemicolonKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Sequence ****************/


/************ begin Rule Block ****************
 *
 * Block:
 *   "[" statement=Statement "]";
 *
 **/

// "[" statement=Statement "]"
protected class Block_Group extends GroupToken {
	
	public Block_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Block_RightSquareBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "["
protected class Block_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Block_LeftSquareBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class Block_StatementAssignment_1 extends AssignmentToken  {
	
	public Block_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Block_LeftSquareBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Block_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Block_RightSquareBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Block_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Block ****************/


/************ begin Rule Assignment ****************
 *
 * Assignment:
 *   variable=EsterelID ":=" expr=DataExpr; 
 * 	
 * 
 * 	    
 * 
 * // --> B.4.2 abort: Strong Preemption
 *
 **/

// variable=EsterelID ":=" expr=DataExpr
protected class Assignment_Group extends GroupToken {
	
	public Assignment_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// variable=EsterelID
protected class Assignment_VariableAssignment_0 extends AssignmentToken  {
	
	public Assignment_VariableAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getVariableAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("variable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("variable");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAssignmentAccess().getVariableEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":="
protected class Assignment_ColonEqualsSignKeyword_1 extends KeywordToken  {
	
	public Assignment_ColonEqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_VariableAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=DataExpr
protected class Assignment_ExprAssignment_2 extends AssignmentToken  {
	
	public Assignment_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentAccess().getExprDataExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Assignment_ColonEqualsSignKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Assignment ****************/


/************ begin Rule Abort ****************
 *
 * Abort:
 *   "abort" statement=Statement "when" body=AbortBody; 
 * 
 * // --> B.4.2 abort: Strong Preemption
 *
 **/

// "abort" statement=Statement "when" body=AbortBody
protected class Abort_Group extends GroupToken {
	
	public Abort_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abort_BodyAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbortRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "abort"
protected class Abort_AbortKeyword_0 extends KeywordToken  {
	
	public Abort_AbortKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbortAccess().getAbortKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class Abort_StatementAssignment_1 extends AssignmentToken  {
	
	public Abort_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Abort_AbortKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "when"
protected class Abort_WhenKeyword_2 extends KeywordToken  {
	
	public Abort_WhenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbortAccess().getWhenKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abort_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=AbortBody
protected class Abort_BodyAssignment_3 extends AssignmentToken  {
	
	public Abort_BodyAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortAccess().getBodyAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortAccess().getBodyAbortBodyParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Abort_WhenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Abort ****************/


/************ begin Rule AbortBody ****************
 *
 * AbortBody:
 *   AbortInstance|AbortCase;
 *
 **/

// AbortInstance|AbortCase
protected class AbortBody_Alternatives extends AlternativesToken {

	public AbortBody_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbortBodyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortBody_AbortInstanceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AbortBody_AbortCaseParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbortBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AbortInstance
protected class AbortBody_AbortInstanceParserRuleCall_0 extends RuleCallToken {
	
	public AbortBody_AbortInstanceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbortBodyAccess().getAbortInstanceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortInstance_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AbortInstance_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbortInstanceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AbortCase
protected class AbortBody_AbortCaseParserRuleCall_1 extends RuleCallToken {
	
	public AbortBody_AbortCaseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbortBodyAccess().getAbortCaseParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AbortCase_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbortCaseRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbortBody ****************/



/************ begin Rule AbortInstance ****************
 *
 * AbortInstance:
 *   delay=DelayExpr ("do" statement=Statement end=AbortEnd)?;
 *
 **/

// delay=DelayExpr ("do" statement=Statement end=AbortEnd)?
protected class AbortInstance_Group extends GroupToken {
	
	public AbortInstance_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortInstance_Group_1(parent, this, 0, inst);
			case 1: return new AbortInstance_DelayAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbortInstanceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// delay=DelayExpr
protected class AbortInstance_DelayAssignment_0 extends AssignmentToken  {
	
	public AbortInstance_DelayAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getDelayAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("do" statement=Statement end=AbortEnd)?
protected class AbortInstance_Group_1 extends GroupToken {
	
	public AbortInstance_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortInstance_EndAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "do"
protected class AbortInstance_DoKeyword_1_0 extends KeywordToken  {
	
	public AbortInstance_DoKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getDoKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortInstance_DelayAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class AbortInstance_StatementAssignment_1_1 extends AssignmentToken  {
	
	public AbortInstance_StatementAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getStatementAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AbortInstance_DoKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=AbortEnd
protected class AbortInstance_EndAssignment_1_2 extends AssignmentToken  {
	
	public AbortInstance_EndAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortInstanceAccess().getEndAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortInstance_StatementAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getAbortInstanceAccess().getEndAbortEndParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AbortInstance ****************/


/************ begin Rule AbortCase ****************
 *
 * AbortCase:
 *   cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AbortEnd;
 *
 **/

// cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AbortEnd
protected class AbortCase_Group extends GroupToken {
	
	public AbortCase_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCase_EndAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbortCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// cases+=AbortCaseSingle
protected class AbortCase_CasesAssignment_0 extends AssignmentToken  {
	
	public AbortCase_CasesAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortCaseAccess().getCasesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// cases+=AbortCaseSingle*
protected class AbortCase_CasesAssignment_1 extends AssignmentToken  {
	
	public AbortCase_CasesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortCaseAccess().getCasesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AbortCase_CasesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AbortCase_CasesAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=AbortEnd
protected class AbortCase_EndAssignment_2 extends AssignmentToken  {
	
	public AbortCase_EndAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortCaseAccess().getEndAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCase_CasesAssignment_1(parent, this, 0, inst);
			case 1: return new AbortCase_CasesAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getAbortCaseAccess().getEndAbortEndParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AbortCase ****************/


/************ begin Rule AbortCaseSingle ****************
 *
 * AbortCaseSingle:
 *   "case" delay=DelayExpr ("do" statement=Statement)?; 
 * 	
 * 
 * 	      
 * 	
 * // --> B.4.3 await: Strong Preemption
 *
 **/

// "case" delay=DelayExpr ("do" statement=Statement)?
protected class AbortCaseSingle_Group extends GroupToken {
	
	public AbortCaseSingle_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group_2(parent, this, 0, inst);
			case 1: return new AbortCaseSingle_DelayAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "case"
protected class AbortCaseSingle_CaseKeyword_0 extends KeywordToken  {
	
	public AbortCaseSingle_CaseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getCaseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// delay=DelayExpr
protected class AbortCaseSingle_DelayAssignment_1 extends AssignmentToken  {
	
	public AbortCaseSingle_DelayAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getDelayAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortCaseSingleAccess().getDelayDelayExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AbortCaseSingle_CaseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("do" statement=Statement)?
protected class AbortCaseSingle_Group_2 extends GroupToken {
	
	public AbortCaseSingle_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_StatementAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "do"
protected class AbortCaseSingle_DoKeyword_2_0 extends KeywordToken  {
	
	public AbortCaseSingle_DoKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getDoKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_DelayAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class AbortCaseSingle_StatementAssignment_2_1 extends AssignmentToken  {
	
	public AbortCaseSingle_StatementAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbortCaseSingleAccess().getStatementAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAbortCaseSingleAccess().getStatementStatementParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AbortCaseSingle_DoKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AbortCaseSingle ****************/


/************ begin Rule Await ****************
 *
 * Await:
 *   "await" body=AwaitBody; 
 * 	
 * // --> B.4.3 await: Strong Preemption
 *
 **/

// "await" body=AwaitBody
protected class Await_Group extends GroupToken {
	
	public Await_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAwaitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Await_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAwaitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "await"
protected class Await_AwaitKeyword_0 extends KeywordToken  {
	
	public Await_AwaitKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAwaitAccess().getAwaitKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// body=AwaitBody
protected class Await_BodyAssignment_1 extends AssignmentToken  {
	
	public Await_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAwaitBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAwaitAccess().getBodyAwaitBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Await_AwaitKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Await ****************/


/************ begin Rule AwaitBody ****************
 *
 * AwaitBody:
 *   AwaitInstance|AwaitCase;
 *
 **/

// AwaitInstance|AwaitCase
protected class AwaitBody_Alternatives extends AlternativesToken {

	public AwaitBody_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAwaitBodyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitBody_AwaitInstanceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AwaitBody_AwaitCaseParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAwaitBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AwaitInstance
protected class AwaitBody_AwaitInstanceParserRuleCall_0 extends RuleCallToken {
	
	public AwaitBody_AwaitInstanceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAwaitBodyAccess().getAwaitInstanceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitInstance_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AwaitInstance_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAwaitInstanceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AwaitCase
protected class AwaitBody_AwaitCaseParserRuleCall_1 extends RuleCallToken {
	
	public AwaitBody_AwaitCaseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAwaitBodyAccess().getAwaitCaseParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AwaitCase_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAwaitCaseRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AwaitBody ****************/



/************ begin Rule AwaitInstance ****************
 *
 * AwaitInstance:
 *   delay=DelayExpr ("do" statement=Statement end=AwaitEnd)?;
 *
 **/

// delay=DelayExpr ("do" statement=Statement end=AwaitEnd)?
protected class AwaitInstance_Group extends GroupToken {
	
	public AwaitInstance_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitInstance_Group_1(parent, this, 0, inst);
			case 1: return new AwaitInstance_DelayAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAwaitInstanceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// delay=DelayExpr
protected class AwaitInstance_DelayAssignment_0 extends AssignmentToken  {
	
	public AwaitInstance_DelayAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getDelayAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAwaitInstanceAccess().getDelayDelayExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("do" statement=Statement end=AwaitEnd)?
protected class AwaitInstance_Group_1 extends GroupToken {
	
	public AwaitInstance_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitInstance_EndAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "do"
protected class AwaitInstance_DoKeyword_1_0 extends KeywordToken  {
	
	public AwaitInstance_DoKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getDoKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitInstance_DelayAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class AwaitInstance_StatementAssignment_1_1 extends AssignmentToken  {
	
	public AwaitInstance_StatementAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getStatementAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAwaitInstanceAccess().getStatementStatementParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AwaitInstance_DoKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=AwaitEnd
protected class AwaitInstance_EndAssignment_1_2 extends AssignmentToken  {
	
	public AwaitInstance_EndAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitInstanceAccess().getEndAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitInstance_StatementAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getAwaitInstanceAccess().getEndAwaitEndParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AwaitInstance ****************/


/************ begin Rule AwaitCase ****************
 *
 * AwaitCase:
 *   cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AwaitEnd;  
 * 	
 * 
 * 	    
 * 	
 * // --> B.4.5 do-upto: Conditional Iteration (deprecated)
 * // --> B.4.6 do-watching: Strong Preemption (deprecated)
 *
 **/

// cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AwaitEnd
protected class AwaitCase_Group extends GroupToken {
	
	public AwaitCase_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAwaitCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitCase_EndAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAwaitCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// cases+=AbortCaseSingle
protected class AwaitCase_CasesAssignment_0 extends AssignmentToken  {
	
	public AwaitCase_CasesAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitCaseAccess().getCasesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// cases+=AbortCaseSingle*
protected class AwaitCase_CasesAssignment_1 extends AssignmentToken  {
	
	public AwaitCase_CasesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitCaseAccess().getCasesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AwaitCase_CasesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AwaitCase_CasesAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=AwaitEnd
protected class AwaitCase_EndAssignment_2 extends AssignmentToken  {
	
	public AwaitCase_EndAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAwaitCaseAccess().getEndAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AwaitCase_CasesAssignment_1(parent, this, 0, inst);
			case 1: return new AwaitCase_CasesAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getAwaitCaseAccess().getEndAwaitEndParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AwaitCase ****************/


/************ begin Rule Do ****************
 *
 * Do:
 *   "do" statement=Statement (endUp=DoUpto|endWatch=DoWatching); 
 * 	
 * // --> B.4.5 do-upto: Conditional Iteration (deprecated)
 * // --> B.4.6 do-watching: Strong Preemption (deprecated)
 *
 **/

// "do" statement=Statement (endUp=DoUpto|endWatch=DoWatching)
protected class Do_Group extends GroupToken {
	
	public Do_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Do_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "do"
protected class Do_DoKeyword_0 extends KeywordToken  {
	
	public Do_DoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoAccess().getDoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class Do_StatementAssignment_1 extends AssignmentToken  {
	
	public Do_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Do_DoKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// endUp=DoUpto|endWatch=DoWatching
protected class Do_Alternatives_2 extends AlternativesToken {

	public Do_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDoAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Do_EndUpAssignment_2_0(parent, this, 0, inst);
			case 1: return new Do_EndWatchAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// endUp=DoUpto
protected class Do_EndUpAssignment_2_0 extends AssignmentToken  {
	
	public Do_EndUpAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoAccess().getEndUpAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoUpto_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("endUp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("endUp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDoUptoRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoAccess().getEndUpDoUptoParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Do_StatementAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// endWatch=DoWatching
protected class Do_EndWatchAssignment_2_1 extends AssignmentToken  {
	
	public Do_EndWatchAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoAccess().getEndWatchAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWatching_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("endWatch",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("endWatch");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDoWatchingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoAccess().getEndWatchDoWatchingParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Do_StatementAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Do ****************/


/************ begin Rule DoUpto ****************
 *
 * DoUpto:
 *   "upto" expr=DelayExpr;
 *
 **/

// "upto" expr=DelayExpr
protected class DoUpto_Group extends GroupToken {
	
	public DoUpto_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoUptoAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoUpto_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoUptoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "upto"
protected class DoUpto_UptoKeyword_0 extends KeywordToken  {
	
	public DoUpto_UptoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoUptoAccess().getUptoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=DelayExpr
protected class DoUpto_ExprAssignment_1 extends AssignmentToken  {
	
	public DoUpto_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoUptoAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoUptoAccess().getExprDelayExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoUpto_UptoKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DoUpto ****************/


/************ begin Rule DoWatching ****************
 *
 * DoWatching:
 *   "watching" delay=DelayExpr end=DoWatchingEnd?;
 *
 **/

// "watching" delay=DelayExpr end=DoWatchingEnd?
protected class DoWatching_Group extends GroupToken {
	
	public DoWatching_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoWatchingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWatching_EndAssignment_2(parent, this, 0, inst);
			case 1: return new DoWatching_DelayAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoWatchingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "watching"
protected class DoWatching_WatchingKeyword_0 extends KeywordToken  {
	
	public DoWatching_WatchingKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWatchingAccess().getWatchingKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// delay=DelayExpr
protected class DoWatching_DelayAssignment_1 extends AssignmentToken  {
	
	public DoWatching_DelayAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoWatchingAccess().getDelayAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoWatchingAccess().getDelayDelayExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoWatching_WatchingKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=DoWatchingEnd?
protected class DoWatching_EndAssignment_2 extends AssignmentToken  {
	
	public DoWatching_EndAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoWatchingAccess().getEndAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWatchingEnd_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDoWatchingEndRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoWatchingAccess().getEndDoWatchingEndParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoWatching_DelayAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DoWatching ****************/


/************ begin Rule DoWatchingEnd ****************
 *
 * DoWatchingEnd:
 *   "timeout" statement=Statement "end" "timeout"?; 
 * 
 * 
 * 	      
 * 	
 * // --> B.4.7 emit: Signal Emission <--
 *
 **/

// "timeout" statement=Statement "end" "timeout"?
protected class DoWatchingEnd_Group extends GroupToken {
	
	public DoWatchingEnd_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoWatchingEndAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWatchingEnd_EndKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoWatchingEndRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "timeout"
protected class DoWatchingEnd_TimeoutKeyword_0 extends KeywordToken  {
	
	public DoWatchingEnd_TimeoutKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class DoWatchingEnd_StatementAssignment_1 extends AssignmentToken  {
	
	public DoWatchingEnd_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoWatchingEndAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDoWatchingEndAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DoWatchingEnd_TimeoutKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class DoWatchingEnd_EndKeyword_2 extends KeywordToken  {
	
	public DoWatchingEnd_EndKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoWatchingEndAccess().getEndKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoWatchingEnd_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoWatchingEnd ****************/


/************ begin Rule Emit ****************
 *
 * Emit:
 *   "emit" (signal=[Signal|EsterelID]|tick=Tick) ("(" expr=DataExpr ")")?; 
 * 	
 * // --> B.4.7 emit: Signal Emission <--
 * 	
 *  
 * 	          
 * 	
 * // --> B.4.8 every-do: Conditional Iteration
 *
 **/

// "emit" (signal=[Signal|EsterelID]|tick=Tick) ("(" expr=DataExpr ")")?
protected class Emit_Group extends GroupToken {
	
	public Emit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_Group_2(parent, this, 0, inst);
			case 1: return new Emit_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEmitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "emit"
protected class Emit_EmitKeyword_0 extends KeywordToken  {
	
	public Emit_EmitKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmitAccess().getEmitKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// signal=[Signal|EsterelID]|tick=Tick
protected class Emit_Alternatives_1 extends AlternativesToken {

	public Emit_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEmitAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_SignalAssignment_1_0(parent, this, 0, inst);
			case 1: return new Emit_TickAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]
protected class Emit_SignalAssignment_1_0 extends AssignmentToken  {
	
	public Emit_SignalAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitAccess().getSignalAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_EmitKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmitAccess().getSignalSignalCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEmitAccess().getSignalSignalCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// tick=Tick
protected class Emit_TickAssignment_1_1 extends AssignmentToken  {
	
	public Emit_TickAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitAccess().getTickAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_EmitKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tick",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tick");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getEmitAccess().getTickTickParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("(" expr=DataExpr ")")?
protected class Emit_Group_2 extends GroupToken {
	
	public Emit_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmitAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_RightParenthesisKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Emit_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public Emit_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmitAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=DataExpr
protected class Emit_ExprAssignment_2_1 extends AssignmentToken  {
	
	public Emit_ExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmitAccess().getExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEmitAccess().getExprDataExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Emit_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Emit_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public Emit_RightParenthesisKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmitAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Emit_ExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Emit ****************/


/************ begin Rule EveryDo ****************
 *
 * EveryDo:
 *   "every" delay=DelayExpr "do" statement=Statement "end" "every"?; 
 * 	
 * // --> B.4.8 every-do: Conditional Iteration
 * 
 * 	          
 * 
 * // --> B.4.10 exit: Trap Exit
 *
 **/

// "every" delay=DelayExpr "do" statement=Statement "end" "every"?
protected class EveryDo_Group extends GroupToken {
	
	public EveryDo_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EveryDo_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEveryDoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "every"
protected class EveryDo_EveryKeyword_0 extends KeywordToken  {
	
	public EveryDo_EveryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getEveryKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// delay=DelayExpr
protected class EveryDo_DelayAssignment_1 extends AssignmentToken  {
	
	public EveryDo_DelayAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getDelayAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEveryDoAccess().getDelayDelayExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EveryDo_EveryKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "do"
protected class EveryDo_DoKeyword_2 extends KeywordToken  {
	
	public EveryDo_DoKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getDoKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EveryDo_DelayAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class EveryDo_StatementAssignment_3 extends AssignmentToken  {
	
	public EveryDo_StatementAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getStatementAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEveryDoAccess().getStatementStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EveryDo_DoKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class EveryDo_EndKeyword_4 extends KeywordToken  {
	
	public EveryDo_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEveryDoAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EveryDo_StatementAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule EveryDo ****************/


/************ begin Rule Exit ****************
 *
 * Exit:
 *   "exit" trap=[TrapDecl|EsterelID] ("(" dataExpr=DataExpr ")")?; 
 * 
 * // --> B.4.10 exit: Trap Exit
 * 
 * 	        
 * 	
 * // --> B.4.11 halt: Wait Forever
 *
 **/

// "exit" trap=[TrapDecl|EsterelID] ("(" dataExpr=DataExpr ")")?
protected class Exit_Group extends GroupToken {
	
	public Exit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_Group_2(parent, this, 0, inst);
			case 1: return new Exit_TrapAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "exit"
protected class Exit_ExitKeyword_0 extends KeywordToken  {
	
	public Exit_ExitKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitAccess().getExitKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// trap=[TrapDecl|EsterelID]
protected class Exit_TrapAssignment_1 extends AssignmentToken  {
	
	public Exit_TrapAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExitAccess().getTrapAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_ExitKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trap",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trap");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExitAccess().getTrapTrapDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getExitAccess().getTrapTrapDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("(" dataExpr=DataExpr ")")?
protected class Exit_Group_2 extends GroupToken {
	
	public Exit_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExitAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_RightParenthesisKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Exit_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public Exit_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_TrapAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dataExpr=DataExpr
protected class Exit_DataExprAssignment_2_1 extends AssignmentToken  {
	
	public Exit_DataExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExitAccess().getDataExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExitAccess().getDataExprDataExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Exit_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Exit_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public Exit_RightParenthesisKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Exit_DataExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Exit ****************/


/************ begin Rule Halt ****************
 *
 * Halt:
 *   "halt" {Halt}; 
 * 	
 * // --> B.4.11 halt: Wait Forever
 * 
 * 	  
 * 	
 * // --> B.4.12: if: Conditional for Data
 *
 **/

// "halt" {Halt}
protected class Halt_Group extends GroupToken {
	
	public Halt_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHaltAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Halt_HaltAction_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHaltRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "halt"
protected class Halt_HaltKeyword_0 extends KeywordToken  {
	
	public Halt_HaltKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHaltAccess().getHaltKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// {Halt}
protected class Halt_HaltAction_1 extends ActionToken  {

	public Halt_HaltAction_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHaltAccess().getHaltAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Halt_HaltKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getHaltAccess().getHaltAction_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}


/************ end Rule Halt ****************/


/************ begin Rule IfTest ****************
 *
 * IfTest:
 *   "if" expr=DataExpr thenPart=ThenPart? elseIf=ElsIfPart? elsePart=ElsePart? "end" "if"?
 * ; 
 * 	
 * // --> B.4.12: if: Conditional for Data
 *
 **/

// "if" expr=DataExpr thenPart=ThenPart? elseIf=ElsIfPart? elsePart=ElsePart? "end" "if"?
protected class IfTest_Group extends GroupToken {
	
	public IfTest_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfTestAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfTest_EndKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfTestRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "if"
protected class IfTest_IfKeyword_0 extends KeywordToken  {
	
	public IfTest_IfKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfTestAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=DataExpr
protected class IfTest_ExprAssignment_1 extends AssignmentToken  {
	
	public IfTest_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfTestAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfTestAccess().getExprDataExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfTest_IfKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// thenPart=ThenPart?
protected class IfTest_ThenPartAssignment_2 extends AssignmentToken  {
	
	public IfTest_ThenPartAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfTestAccess().getThenPartAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThenPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenPart",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenPart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThenPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfTestAccess().getThenPartThenPartParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfTest_ExprAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elseIf=ElsIfPart?
protected class IfTest_ElseIfAssignment_3 extends AssignmentToken  {
	
	public IfTest_ElseIfAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfTestAccess().getElseIfAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsIfPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseIf",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseIf");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElsIfPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfTestAccess().getElseIfElsIfPartParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfTest_ThenPartAssignment_2(parent, next, actIndex, consumed);
			case 1: return new IfTest_ExprAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elsePart=ElsePart?
protected class IfTest_ElsePartAssignment_4 extends AssignmentToken  {
	
	public IfTest_ElsePartAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfTestAccess().getElsePartAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsePart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsePart",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsePart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElsePartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfTestAccess().getElsePartElsePartParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfTest_ElseIfAssignment_3(parent, next, actIndex, consumed);
			case 1: return new IfTest_ThenPartAssignment_2(parent, next, actIndex, consumed);
			case 2: return new IfTest_ExprAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class IfTest_EndKeyword_5 extends KeywordToken  {
	
	public IfTest_EndKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfTestAccess().getEndKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfTest_ElsePartAssignment_4(parent, this, 0, inst);
			case 1: return new IfTest_ElseIfAssignment_3(parent, this, 1, inst);
			case 2: return new IfTest_ThenPartAssignment_2(parent, this, 2, inst);
			case 3: return new IfTest_ExprAssignment_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IfTest ****************/


/************ begin Rule ElsIfPart ****************
 *
 * ElsIfPart:
 *   elsif+=ElsIf elsif+=ElsIf*;
 *
 **/

// elsif+=ElsIf elsif+=ElsIf*
protected class ElsIfPart_Group extends GroupToken {
	
	public ElsIfPart_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElsIfPartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsIfPart_ElsifAssignment_1(parent, this, 0, inst);
			case 1: return new ElsIfPart_ElsifAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElsIfPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// elsif+=ElsIf
protected class ElsIfPart_ElsifAssignment_0 extends AssignmentToken  {
	
	public ElsIfPart_ElsifAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElsIfPartAccess().getElsifAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsIf_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsif",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsif");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElsIfRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// elsif+=ElsIf*
protected class ElsIfPart_ElsifAssignment_1 extends AssignmentToken  {
	
	public ElsIfPart_ElsifAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElsIfPartAccess().getElsifAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsIf_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsif",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsif");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElsIfRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElsIfPart_ElsifAssignment_1(parent, next, actIndex, consumed);
			case 1: return new ElsIfPart_ElsifAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElsIfPart ****************/


/************ begin Rule ElsIf ****************
 *
 * ElsIf:
 *   "elsif" expr=DataExpr thenPart=ThenPart?;
 *
 **/

// "elsif" expr=DataExpr thenPart=ThenPart?
protected class ElsIf_Group extends GroupToken {
	
	public ElsIf_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElsIfAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsIf_ThenPartAssignment_2(parent, this, 0, inst);
			case 1: return new ElsIf_ExprAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElsIfRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "elsif"
protected class ElsIf_ElsifKeyword_0 extends KeywordToken  {
	
	public ElsIf_ElsifKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElsIfAccess().getElsifKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=DataExpr
protected class ElsIf_ExprAssignment_1 extends AssignmentToken  {
	
	public ElsIf_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElsIfAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElsIfAccess().getExprDataExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElsIf_ElsifKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// thenPart=ThenPart?
protected class ElsIf_ThenPartAssignment_2 extends AssignmentToken  {
	
	public ElsIf_ThenPartAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElsIfAccess().getThenPartAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThenPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenPart",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenPart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThenPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElsIfAccess().getThenPartThenPartParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElsIf_ExprAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElsIf ****************/


/************ begin Rule ThenPart ****************
 *
 * ThenPart:
 *   "then" statement=Statement;
 *
 **/

// "then" statement=Statement
protected class ThenPart_Group extends GroupToken {
	
	public ThenPart_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThenPartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThenPart_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThenPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "then"
protected class ThenPart_ThenKeyword_0 extends KeywordToken  {
	
	public ThenPart_ThenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThenPartAccess().getThenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class ThenPart_StatementAssignment_1 extends AssignmentToken  {
	
	public ThenPart_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThenPartAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getThenPartAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThenPart_ThenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ThenPart ****************/


/************ begin Rule ElsePart ****************
 *
 * ElsePart:
 *   "else" statement=Statement; 
 * 
 * 
 * 	  
 * 	
 * // --> B.4.13 loop: Infinite Loop
 * // --> B.4.14 loop-each: Condition Iteration
 *
 **/

// "else" statement=Statement
protected class ElsePart_Group extends GroupToken {
	
	public ElsePart_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElsePartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsePart_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElsePartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "else"
protected class ElsePart_ElseKeyword_0 extends KeywordToken  {
	
	public ElsePart_ElseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElsePartAccess().getElseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class ElsePart_StatementAssignment_1 extends AssignmentToken  {
	
	public ElsePart_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElsePartAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElsePartAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElsePart_ElseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElsePart ****************/


/************ begin Rule Loop ****************
 *
 * Loop:
 *   "loop" body=LoopBody (EndLoop|end=LoopEach); 
 * 	
 * // --> B.4.13 loop: Infinite Loop
 * // --> B.4.14 loop-each: Condition Iteration
 *
 **/

// "loop" body=LoopBody (EndLoop|end=LoopEach)
protected class Loop_Group extends GroupToken {
	
	public Loop_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLoopAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoopRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "loop"
protected class Loop_LoopKeyword_0 extends KeywordToken  {
	
	public Loop_LoopKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopAccess().getLoopKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// body=LoopBody
protected class Loop_BodyAssignment_1 extends AssignmentToken  {
	
	public Loop_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBody_StatementAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLoopBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLoopAccess().getBodyLoopBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Loop_LoopKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// EndLoop|end=LoopEach
protected class Loop_Alternatives_2 extends AlternativesToken {

	public Loop_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoopAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop_EndLoopParserRuleCall_2_0(parent, this, 0, inst);
			case 1: return new Loop_EndAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// EndLoop
protected class Loop_EndLoopParserRuleCall_2_0 extends UnassignedTextToken {

	public Loop_EndLoopParserRuleCall_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLoopAccess().getEndLoopParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// end=LoopEach
protected class Loop_EndAssignment_2_1 extends AssignmentToken  {
	
	public Loop_EndAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getEndAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopEach_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLoopEachRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLoopAccess().getEndLoopEachParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Loop_BodyAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Loop ****************/



/************ begin Rule LoopEach ****************
 *
 * LoopEach:
 *   "each" LoopDelay;
 *
 **/

// "each" LoopDelay
protected class LoopEach_Group extends GroupToken {
	
	public LoopEach_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLoopEachAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopEach_LoopDelayParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoopEachRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "each"
protected class LoopEach_EachKeyword_0 extends KeywordToken  {
	
	public LoopEach_EachKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopEachAccess().getEachKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// LoopDelay
protected class LoopEach_LoopDelayParserRuleCall_1 extends RuleCallToken {
	
	public LoopEach_LoopDelayParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLoopEachAccess().getLoopDelayParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopDelay_DelayAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LoopDelay_DelayAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoopDelayRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopEach_EachKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule LoopEach ****************/


/************ begin Rule LoopDelay ****************
 *
 * LoopDelay:
 *   delay=DelayExpr;
 *
 **/

// delay=DelayExpr
protected class LoopDelay_DelayAssignment extends AssignmentToken  {
	
	public LoopDelay_DelayAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopDelayAccess().getDelayAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoopDelayRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLoopDelayAccess().getDelayDelayExprParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule LoopDelay ****************/


/************ begin Rule LoopBody ****************
 *
 * LoopBody:
 *   statement=Statement; 
 * 	 
 * 
 * 	
 * 	
 * // --> B.4.15 nothing: No Operation
 *
 **/

// statement=Statement
protected class LoopBody_StatementAssignment extends AssignmentToken  {
	
	public LoopBody_StatementAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopBodyAccess().getStatementAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoopBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLoopBodyAccess().getStatementStatementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule LoopBody ****************/


/************ begin Rule Nothing ****************
 *
 * Nothing:
 *   "nothing" {Nothing}; 
 * 	
 * // --> B.4.15 nothing: No Operation
 * 
 * 	  
 * 
 * // --> B.4.16 pause: Unit Delay
 *
 **/

// "nothing" {Nothing}
protected class Nothing_Group extends GroupToken {
	
	public Nothing_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNothingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nothing_NothingAction_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNothingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "nothing"
protected class Nothing_NothingKeyword_0 extends KeywordToken  {
	
	public Nothing_NothingKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNothingAccess().getNothingKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// {Nothing}
protected class Nothing_NothingAction_1 extends ActionToken  {

	public Nothing_NothingAction_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNothingAccess().getNothingAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nothing_NothingKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getNothingAccess().getNothingAction_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}


/************ end Rule Nothing ****************/


/************ begin Rule Pause ****************
 *
 * Pause:
 *   "pause" {Pause}; 
 * 
 * // --> B.4.16 pause: Unit Delay
 *  
 * 	  
 * 	
 * // --> B.4.17 present: Conditional for Signals
 *
 **/

// "pause" {Pause}
protected class Pause_Group extends GroupToken {
	
	public Pause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pause_PauseAction_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "pause"
protected class Pause_PauseKeyword_0 extends KeywordToken  {
	
	public Pause_PauseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPauseAccess().getPauseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// {Pause}
protected class Pause_PauseAction_1 extends ActionToken  {

	public Pause_PauseAction_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPauseAccess().getPauseAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pause_PauseKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPauseAccess().getPauseAction_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}


/************ end Rule Pause ****************/


/************ begin Rule Present ****************
 *
 * Present:
 *   "present" body=PresentBody elsePart=ElsePart? "end" "present"?; 
 * 	
 * // --> B.4.17 present: Conditional for Signals
 *
 **/

// "present" body=PresentBody elsePart=ElsePart? "end" "present"?
protected class Present_Group extends GroupToken {
	
	public Present_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Present_EndKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "present"
protected class Present_PresentKeyword_0 extends KeywordToken  {
	
	public Present_PresentKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentAccess().getPresentKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// body=PresentBody
protected class Present_BodyAssignment_1 extends AssignmentToken  {
	
	public Present_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPresentBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentAccess().getBodyPresentBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Present_PresentKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elsePart=ElsePart?
protected class Present_ElsePartAssignment_2 extends AssignmentToken  {
	
	public Present_ElsePartAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentAccess().getElsePartAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElsePart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elsePart",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elsePart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElsePartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentAccess().getElsePartElsePartParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Present_BodyAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class Present_EndKeyword_3 extends KeywordToken  {
	
	public Present_EndKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Present_ElsePartAssignment_2(parent, this, 0, inst);
			case 1: return new Present_BodyAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Present ****************/


/************ begin Rule PresentBody ****************
 *
 * PresentBody:
 *   PresentEventBody|PresentCaseList;
 *
 **/

// PresentEventBody|PresentCaseList
protected class PresentBody_Alternatives extends AlternativesToken {

	public PresentBody_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPresentBodyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentBody_PresentEventBodyParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PresentBody_PresentCaseListParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PresentEventBody
protected class PresentBody_PresentEventBodyParserRuleCall_0 extends RuleCallToken {
	
	public PresentBody_PresentEventBodyParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentBodyAccess().getPresentEventBodyParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEventBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PresentEventBody_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPresentEventBodyRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PresentCaseList
protected class PresentBody_PresentCaseListParserRuleCall_1 extends RuleCallToken {
	
	public PresentBody_PresentCaseListParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentBodyAccess().getPresentCaseListParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCaseList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PresentCaseList_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPresentCaseListRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PresentBody ****************/


/************ begin Rule PresentEventBody ****************
 *
 * PresentEventBody:
 *   event=PresentEvent thenPart=ThenPart?;
 *
 **/

// event=PresentEvent thenPart=ThenPart?
protected class PresentEventBody_Group extends GroupToken {
	
	public PresentEventBody_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentEventBodyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEventBody_ThenPartAssignment_1(parent, this, 0, inst);
			case 1: return new PresentEventBody_EventAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentEventBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// event=PresentEvent
protected class PresentEventBody_EventAssignment_0 extends AssignmentToken  {
	
	public PresentEventBody_EventAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentEventBodyAccess().getEventAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEvent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPresentEventRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentEventBodyAccess().getEventPresentEventParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// thenPart=ThenPart?
protected class PresentEventBody_ThenPartAssignment_1 extends AssignmentToken  {
	
	public PresentEventBody_ThenPartAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentEventBodyAccess().getThenPartAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThenPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenPart",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenPart");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThenPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentEventBodyAccess().getThenPartThenPartParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentEventBody_EventAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PresentEventBody ****************/


/************ begin Rule PresentCaseList ****************
 *
 * PresentCaseList:
 *   case+=PresentCase case+=PresentCase*;
 *
 **/

// case+=PresentCase case+=PresentCase*
protected class PresentCaseList_Group extends GroupToken {
	
	public PresentCaseList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentCaseListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCaseList_CaseAssignment_1(parent, this, 0, inst);
			case 1: return new PresentCaseList_CaseAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentCaseListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// case+=PresentCase
protected class PresentCaseList_CaseAssignment_0 extends AssignmentToken  {
	
	public PresentCaseList_CaseAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentCaseListAccess().getCaseAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("case",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPresentCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// case+=PresentCase*
protected class PresentCaseList_CaseAssignment_1 extends AssignmentToken  {
	
	public PresentCaseList_CaseAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentCaseListAccess().getCaseAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("case",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPresentCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentCaseList_CaseAssignment_1(parent, next, actIndex, consumed);
			case 1: return new PresentCaseList_CaseAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PresentCaseList ****************/


/************ begin Rule PresentCase ****************
 *
 * PresentCase:
 *   "case" event=PresentEvent ("do" statement=Statement)?;
 *
 **/

// "case" event=PresentEvent ("do" statement=Statement)?
protected class PresentCase_Group extends GroupToken {
	
	public PresentCase_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCase_Group_2(parent, this, 0, inst);
			case 1: return new PresentCase_EventAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "case"
protected class PresentCase_CaseKeyword_0 extends KeywordToken  {
	
	public PresentCase_CaseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getCaseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// event=PresentEvent
protected class PresentCase_EventAssignment_1 extends AssignmentToken  {
	
	public PresentCase_EventAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getEventAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEvent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPresentEventRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentCaseAccess().getEventPresentEventParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentCase_CaseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("do" statement=Statement)?
protected class PresentCase_Group_2 extends GroupToken {
	
	public PresentCase_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCase_StatementAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "do"
protected class PresentCase_DoKeyword_2_0 extends KeywordToken  {
	
	public PresentCase_DoKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getDoKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentCase_EventAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class PresentCase_StatementAssignment_2_1 extends AssignmentToken  {
	
	public PresentCase_StatementAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentCaseAccess().getStatementAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentCaseAccess().getStatementStatementParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentCase_DoKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PresentCase ****************/


/************ begin Rule PresentEvent ****************
 *
 * PresentEvent:
 *   expression=SigExpr|"[" expression=SigExpr "]"; 
 * 
 * 
 * 	
 * 		     
 * 
 * // --> B.4.18 repeat: Iterate a Fixed Number of Times
 *
 **/

// expression=SigExpr|"[" expression=SigExpr "]" 
// 
// 
// 	
// 		     
// 
// // --> B.4.18 repeat: Iterate a Fixed Number of Times
protected class PresentEvent_Alternatives extends AlternativesToken {

	public PresentEvent_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEvent_ExpressionAssignment_0(parent, this, 0, inst);
			case 1: return new PresentEvent_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentEventRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expression=SigExpr
protected class PresentEvent_ExpressionAssignment_0 extends AssignmentToken  {
	
	public PresentEvent_ExpressionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getExpressionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "[" expression=SigExpr "]"
protected class PresentEvent_Group_1 extends GroupToken {
	
	public PresentEvent_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEvent_RightSquareBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class PresentEvent_LeftSquareBracketKeyword_1_0 extends KeywordToken  {
	
	public PresentEvent_LeftSquareBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getLeftSquareBracketKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expression=SigExpr
protected class PresentEvent_ExpressionAssignment_1_1 extends AssignmentToken  {
	
	public PresentEvent_ExpressionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getExpressionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentEvent_LeftSquareBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class PresentEvent_RightSquareBracketKeyword_1_2 extends KeywordToken  {
	
	public PresentEvent_RightSquareBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentEventAccess().getRightSquareBracketKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentEvent_ExpressionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule PresentEvent ****************/


/************ begin Rule Repeat ****************
 *
 * Repeat:
 *   positive?="positive"? "repeat" dataExpr=DataExpr "times" statement=Statement "end"
 *   "repeat"?; 
 * 
 * // --> B.4.18 repeat: Iterate a Fixed Number of Times
 * 
 * 	            
 * // --> B.4.19 run: Module Instantiation
 *
 **/

// positive?="positive"? "repeat" dataExpr=DataExpr "times" statement=Statement "end"
// "repeat"?
protected class Repeat_Group extends GroupToken {
	
	public Repeat_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRepeatAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Repeat_EndKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepeatRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// positive?="positive"?
protected class Repeat_PositiveAssignment_0 extends AssignmentToken  {
	
	public Repeat_PositiveAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepeatAccess().getPositiveAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("positive",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("positive");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRepeatAccess().getPositivePositiveKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "repeat"
protected class Repeat_RepeatKeyword_1 extends KeywordToken  {
	
	public Repeat_RepeatKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepeatAccess().getRepeatKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Repeat_PositiveAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// dataExpr=DataExpr
protected class Repeat_DataExprAssignment_2 extends AssignmentToken  {
	
	public Repeat_DataExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepeatAccess().getDataExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepeatAccess().getDataExprDataExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Repeat_RepeatKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "times"
protected class Repeat_TimesKeyword_3 extends KeywordToken  {
	
	public Repeat_TimesKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepeatAccess().getTimesKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Repeat_DataExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class Repeat_StatementAssignment_4 extends AssignmentToken  {
	
	public Repeat_StatementAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepeatAccess().getStatementAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepeatAccess().getStatementStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Repeat_TimesKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class Repeat_EndKeyword_5 extends KeywordToken  {
	
	public Repeat_EndKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepeatAccess().getEndKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Repeat_StatementAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Repeat ****************/


/************ begin Rule Run ****************
 *
 * Run:
 *   "run" module=ModuleRenaming ("[" list=RenamingList "]")?|"copymodule" module=
 *   ModuleRenaming ("[" list=RenamingList "]")?; 
 * // --> B.4.19 run: Module Instantiation
 * 
 * 
 * 	      
 * 		         //deprecated
 *
 **/

// "run" module=ModuleRenaming ("[" list=RenamingList "]")?|"copymodule" module=
// ModuleRenaming ("[" list=RenamingList "]")? 
// // --> B.4.19 run: Module Instantiation
// 
// 
// 	      
// 		         //deprecated
protected class Run_Alternatives extends AlternativesToken {

	public Run_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRunAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_Group_0(parent, this, 0, inst);
			case 1: return new Run_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRunRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "run" module=ModuleRenaming ("[" list=RenamingList "]")?
protected class Run_Group_0 extends GroupToken {
	
	public Run_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRunAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_Group_0_2(parent, this, 0, inst);
			case 1: return new Run_ModuleAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "run"
protected class Run_RunKeyword_0_0 extends KeywordToken  {
	
	public Run_RunKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getRunKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// module=ModuleRenaming
protected class Run_ModuleAssignment_0_1 extends AssignmentToken  {
	
	public Run_ModuleAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRunAccess().getModuleAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Run_RunKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("[" list=RenamingList "]")?
protected class Run_Group_0_2 extends GroupToken {
	
	public Run_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRunAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_RightSquareBracketKeyword_0_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class Run_LeftSquareBracketKeyword_0_2_0 extends KeywordToken  {
	
	public Run_LeftSquareBracketKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getLeftSquareBracketKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_ModuleAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// list=RenamingList
protected class Run_ListAssignment_0_2_1 extends AssignmentToken  {
	
	public Run_ListAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRunAccess().getListAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RenamingList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRenamingListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRunAccess().getListRenamingListParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Run_LeftSquareBracketKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Run_RightSquareBracketKeyword_0_2_2 extends KeywordToken  {
	
	public Run_RightSquareBracketKeyword_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getRightSquareBracketKeyword_0_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_ListAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "copymodule" module=ModuleRenaming ("[" list=RenamingList "]")?
protected class Run_Group_1 extends GroupToken {
	
	public Run_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRunAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_Group_1_2(parent, this, 0, inst);
			case 1: return new Run_ModuleAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "copymodule"
protected class Run_CopymoduleKeyword_1_0 extends KeywordToken  {
	
	public Run_CopymoduleKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getCopymoduleKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// module=ModuleRenaming
protected class Run_ModuleAssignment_1_1 extends AssignmentToken  {
	
	public Run_ModuleAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRunAccess().getModuleAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Run_CopymoduleKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("[" list=RenamingList "]")?
protected class Run_Group_1_2 extends GroupToken {
	
	public Run_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRunAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_RightSquareBracketKeyword_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class Run_LeftSquareBracketKeyword_1_2_0 extends KeywordToken  {
	
	public Run_LeftSquareBracketKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_ModuleAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// list=RenamingList
protected class Run_ListAssignment_1_2_1 extends AssignmentToken  {
	
	public Run_ListAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRunAccess().getListAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RenamingList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRenamingListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRunAccess().getListRenamingListParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Run_LeftSquareBracketKeyword_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Run_RightSquareBracketKeyword_1_2_2 extends KeywordToken  {
	
	public Run_RightSquareBracketKeyword_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Run_ListAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule Run ****************/


/************ begin Rule ModuleRenaming ****************
 *
 * ModuleRenaming:
 *   module=[Module|EsterelID] (renamed?="/" newName=EsterelID)?;   //deprecated
 *
 **/

// module=[Module|EsterelID] (renamed?="/" newName=EsterelID)?
protected class ModuleRenaming_Group extends GroupToken {
	
	public ModuleRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_Group_1(parent, this, 0, inst);
			case 1: return new ModuleRenaming_ModuleAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModuleRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// module=[Module|EsterelID]
protected class ModuleRenaming_ModuleAssignment_0 extends AssignmentToken  {
	
	public ModuleRenaming_ModuleAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleRenamingAccess().getModuleAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (renamed?="/" newName=EsterelID)?
protected class ModuleRenaming_Group_1 extends GroupToken {
	
	public ModuleRenaming_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleRenamingAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_NewNameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// renamed?="/"
protected class ModuleRenaming_RenamedAssignment_1_0 extends AssignmentToken  {
	
	public ModuleRenaming_RenamedAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleRenamingAccess().getRenamedAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_ModuleAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renamed",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renamed");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModuleRenamingAccess().getRenamedSolidusKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// newName=EsterelID
protected class ModuleRenaming_NewNameAssignment_1_1 extends AssignmentToken  {
	
	public ModuleRenaming_NewNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleRenamingAccess().getNewNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModuleRenaming_RenamedAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModuleRenamingAccess().getNewNameEsterelIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ModuleRenaming ****************/


/************ begin Rule RenamingList ****************
 *
 * RenamingList:
 *   list+=Renaming (";" list+=Renaming)*;
 *
 **/

// list+=Renaming (";" list+=Renaming)*
protected class RenamingList_Group extends GroupToken {
	
	public RenamingList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RenamingList_Group_1(parent, this, 0, inst);
			case 1: return new RenamingList_ListAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRenamingListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// list+=Renaming
protected class RenamingList_ListAssignment_0 extends AssignmentToken  {
	
	public RenamingList_ListAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingListAccess().getListAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// (";" list+=Renaming)*
protected class RenamingList_Group_1 extends GroupToken {
	
	public RenamingList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RenamingList_ListAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class RenamingList_SemicolonKeyword_1_0 extends KeywordToken  {
	
	public RenamingList_SemicolonKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingListAccess().getSemicolonKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RenamingList_Group_1(parent, this, 0, inst);
			case 1: return new RenamingList_ListAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// list+=Renaming
protected class RenamingList_ListAssignment_1_1 extends AssignmentToken  {
	
	public RenamingList_ListAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingListAccess().getListAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RenamingList_SemicolonKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RenamingList ****************/


/************ begin Rule Renaming ****************
 *
 * Renaming:
 *   "type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*|"constant" renaming+=
 *   ConstantRenaming ("," renaming+=ConstantRenaming)*|"function" renaming+=
 *   FunctionRenaming ("," renaming+=FunctionRenaming)*|"signal" renaming+=
 *   SignalRenaming ("," renaming+=SignalRenaming)*;
 *
 **/

// "type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*|"constant" renaming+=
// ConstantRenaming ("," renaming+=ConstantRenaming)*|"function" renaming+=
// FunctionRenaming ("," renaming+=FunctionRenaming)*|"signal" renaming+=
// SignalRenaming ("," renaming+=SignalRenaming)*
protected class Renaming_Alternatives extends AlternativesToken {

	public Renaming_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRenamingAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_0(parent, this, 0, inst);
			case 1: return new Renaming_Group_1(parent, this, 1, inst);
			case 2: return new Renaming_Group_2(parent, this, 2, inst);
			case 3: return new Renaming_Group_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*
protected class Renaming_Group_0 extends GroupToken {
	
	public Renaming_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_0_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "type"
protected class Renaming_TypeKeyword_0_0 extends KeywordToken  {
	
	public Renaming_TypeKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getTypeKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// renaming+=TypeRenaming
protected class Renaming_RenamingAssignment_0_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_TypeKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," renaming+=TypeRenaming)*
protected class Renaming_Group_0_2 extends GroupToken {
	
	public Renaming_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_RenamingAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Renaming_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public Renaming_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getCommaKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_0_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// renaming+=TypeRenaming
protected class Renaming_RenamingAssignment_0_2_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_CommaKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "constant" renaming+=ConstantRenaming ("," renaming+=ConstantRenaming)*
protected class Renaming_Group_1 extends GroupToken {
	
	public Renaming_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_1_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "constant"
protected class Renaming_ConstantKeyword_1_0 extends KeywordToken  {
	
	public Renaming_ConstantKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getConstantKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// renaming+=ConstantRenaming
protected class Renaming_RenamingAssignment_1_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_ConstantKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," renaming+=ConstantRenaming)*
protected class Renaming_Group_1_2 extends GroupToken {
	
	public Renaming_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_RenamingAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Renaming_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public Renaming_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getCommaKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_1_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// renaming+=ConstantRenaming
protected class Renaming_RenamingAssignment_1_2_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_CommaKeyword_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "function" renaming+=FunctionRenaming ("," renaming+=FunctionRenaming)*
protected class Renaming_Group_2 extends GroupToken {
	
	public Renaming_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_2_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "function"
protected class Renaming_FunctionKeyword_2_0 extends KeywordToken  {
	
	public Renaming_FunctionKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getFunctionKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// renaming+=FunctionRenaming
protected class Renaming_RenamingAssignment_2_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_FunctionKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," renaming+=FunctionRenaming)*
protected class Renaming_Group_2_2 extends GroupToken {
	
	public Renaming_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_RenamingAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Renaming_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public Renaming_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_2_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// renaming+=FunctionRenaming
protected class Renaming_RenamingAssignment_2_2_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "signal" renaming+=SignalRenaming ("," renaming+=SignalRenaming)*
protected class Renaming_Group_3 extends GroupToken {
	
	public Renaming_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_3_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "signal"
protected class Renaming_SignalKeyword_3_0 extends KeywordToken  {
	
	public Renaming_SignalKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getSignalKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// renaming+=SignalRenaming
protected class Renaming_RenamingAssignment_3_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_SignalKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," renaming+=SignalRenaming)*
protected class Renaming_Group_3_2 extends GroupToken {
	
	public Renaming_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamingAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_RenamingAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Renaming_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Renaming_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamingAccess().getCommaKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Renaming_Group_3_2(parent, this, 0, inst);
			case 1: return new Renaming_RenamingAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// renaming+=SignalRenaming
protected class Renaming_RenamingAssignment_3_2_1 extends AssignmentToken  {
	
	public Renaming_RenamingAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamingAccess().getRenamingAssignment_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("renaming",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("renaming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Renaming_CommaKeyword_3_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Renaming ****************/


/************ begin Rule TypeRenaming ****************
 *
 * TypeRenaming:
 *   newName=[Type|EsterelID] "/" oldName=[Type|EsterelID];
 *
 **/

// newName=[Type|EsterelID] "/" oldName=[Type|EsterelID]
protected class TypeRenaming_Group extends GroupToken {
	
	public TypeRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRenaming_OldNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// newName=[Type|EsterelID]
protected class TypeRenaming_NewNameAssignment_0 extends AssignmentToken  {
	
	public TypeRenaming_NewNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeRenamingAccess().getNewNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRenamingAccess().getNewNameTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeRenamingAccess().getNewNameTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class TypeRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public TypeRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeRenamingAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRenaming_NewNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// oldName=[Type|EsterelID]
protected class TypeRenaming_OldNameAssignment_2 extends AssignmentToken  {
	
	public TypeRenaming_OldNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeRenamingAccess().getOldNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule TypeRenaming ****************/


/************ begin Rule ConstantRenaming ****************
 *
 * ConstantRenaming:
 *   newName=[Constant|EsterelID] "/" oldName=[Constant|EsterelID];
 *
 **/

// newName=[Constant|EsterelID] "/" oldName=[Constant|EsterelID]
protected class ConstantRenaming_Group extends GroupToken {
	
	public ConstantRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantRenaming_OldNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstantRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// newName=[Constant|EsterelID]
protected class ConstantRenaming_NewNameAssignment_0 extends AssignmentToken  {
	
	public ConstantRenaming_NewNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantRenamingAccess().getNewNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRenamingAccess().getNewNameConstantCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getConstantRenamingAccess().getNewNameConstantCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class ConstantRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public ConstantRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantRenamingAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantRenaming_NewNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// oldName=[Constant|EsterelID]
protected class ConstantRenaming_OldNameAssignment_2 extends AssignmentToken  {
	
	public ConstantRenaming_OldNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantRenamingAccess().getOldNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantRenamingAccess().getOldNameConstantCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getConstantRenamingAccess().getOldNameConstantCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ConstantRenaming ****************/


/************ begin Rule FunctionRenaming ****************
 *
 * FunctionRenaming:
 *   newName=[Function|EsterelID] "/" oldName=[Function|EsterelID];
 *
 **/

// newName=[Function|EsterelID] "/" oldName=[Function|EsterelID]
protected class FunctionRenaming_Group extends GroupToken {
	
	public FunctionRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionRenaming_OldNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// newName=[Function|EsterelID]
protected class FunctionRenaming_NewNameAssignment_0 extends AssignmentToken  {
	
	public FunctionRenaming_NewNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionRenamingAccess().getNewNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRenamingAccess().getNewNameFunctionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getFunctionRenamingAccess().getNewNameFunctionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class FunctionRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public FunctionRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionRenamingAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionRenaming_NewNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// oldName=[Function|EsterelID]
protected class FunctionRenaming_OldNameAssignment_2 extends AssignmentToken  {
	
	public FunctionRenaming_OldNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionRenamingAccess().getOldNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule FunctionRenaming ****************/


/************ begin Rule ProcedureRenaming ****************
 *
 * ProcedureRenaming:
 *   newName=[Procedure|EsterelID] "/" oldName=[Procedure|EsterelID];
 *
 **/

// newName=[Procedure|EsterelID] "/" oldName=[Procedure|EsterelID]
protected class ProcedureRenaming_Group extends GroupToken {
	
	public ProcedureRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureRenaming_OldNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcedureRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// newName=[Procedure|EsterelID]
protected class ProcedureRenaming_NewNameAssignment_0 extends AssignmentToken  {
	
	public ProcedureRenaming_NewNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureRenamingAccess().getNewNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureRenamingAccess().getNewNameProcedureCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getProcedureRenamingAccess().getNewNameProcedureCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class ProcedureRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public ProcedureRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureRenamingAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureRenaming_NewNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// oldName=[Procedure|EsterelID]
protected class ProcedureRenaming_OldNameAssignment_2 extends AssignmentToken  {
	
	public ProcedureRenaming_OldNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureRenamingAccess().getOldNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcedureRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureRenamingAccess().getOldNameProcedureCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getProcedureRenamingAccess().getOldNameProcedureCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ProcedureRenaming ****************/


/************ begin Rule SignalRenaming ****************
 *
 * SignalRenaming:
 *   newName=[Signal|EsterelID] "/" oldName=[Signal|EsterelID]; 
 * 
 * 
 * 	    
 * 	
 * // --> B.4.20 signal: Local Signal Declaration <--
 *
 **/

// newName=[Signal|EsterelID] "/" oldName=[Signal|EsterelID]
protected class SignalRenaming_Group extends GroupToken {
	
	public SignalRenaming_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_OldNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalRenamingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// newName=[Signal|EsterelID]
protected class SignalRenaming_NewNameAssignment_0 extends AssignmentToken  {
	
	public SignalRenaming_NewNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getNewNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("newName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("newName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingAccess().getNewNameSignalCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSignalRenamingAccess().getNewNameSignalCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "/"
protected class SignalRenaming_SolidusKeyword_1 extends KeywordToken  {
	
	public SignalRenaming_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_NewNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// oldName=[Signal|EsterelID]
protected class SignalRenaming_OldNameAssignment_2 extends AssignmentToken  {
	
	public SignalRenaming_OldNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalRenamingAccess().getOldNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SignalRenaming_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("oldName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("oldName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRenamingAccess().getOldNameSignalCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSignalRenamingAccess().getOldNameSignalCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule SignalRenaming ****************/


/************ begin Rule LocalSignalDecl ****************
 *
 * LocalSignalDecl:
 *   "signal" signalList=LocalSignalList "in" statement=Statement "end" "signal"?; 
 * 	
 * // --> B.4.20 signal: Local Signal Declaration <--
 *
 **/

// "signal" signalList=LocalSignalList "in" statement=Statement "end" "signal"?
protected class LocalSignalDecl_Group extends GroupToken {
	
	public LocalSignalDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalDecl_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLocalSignalDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "signal"
protected class LocalSignalDecl_SignalKeyword_0 extends KeywordToken  {
	
	public LocalSignalDecl_SignalKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// signalList=LocalSignalList
protected class LocalSignalDecl_SignalListAssignment_1 extends AssignmentToken  {
	
	public LocalSignalDecl_SignalListAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getSignalListAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signalList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signalList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocalSignalListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLocalSignalDeclAccess().getSignalListLocalSignalListParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalSignalDecl_SignalKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "in"
protected class LocalSignalDecl_InKeyword_2 extends KeywordToken  {
	
	public LocalSignalDecl_InKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getInKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalDecl_SignalListAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class LocalSignalDecl_StatementAssignment_3 extends AssignmentToken  {
	
	public LocalSignalDecl_StatementAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getStatementAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLocalSignalDeclAccess().getStatementStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalSignalDecl_InKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class LocalSignalDecl_EndKeyword_4 extends KeywordToken  {
	
	public LocalSignalDecl_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalSignalDeclAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalDecl_StatementAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LocalSignalDecl ****************/


/************ begin Rule LocalSignalList ****************
 *
 * LocalSignalList:
 *   {LocalSignal} signal+=Signal ("," signal+=Signal)*; 
 * 	
 * 
 * 	   
 * 	  
 * 	
 * // --> B.4.21 suspend: Preemption with State Freeze
 *
 **/

// {LocalSignal} signal+=Signal ("," signal+=Signal)*
protected class LocalSignalList_Group extends GroupToken {
	
	public LocalSignalList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalList_Group_2(parent, this, 0, inst);
			case 1: return new LocalSignalList_SignalAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLocalSignalListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LocalSignal}
protected class LocalSignalList_LocalSignalAction_0 extends ActionToken  {

	public LocalSignalList_LocalSignalAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// signal+=Signal
protected class LocalSignalList_SignalAssignment_1 extends AssignmentToken  {
	
	public LocalSignalList_SignalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getSignalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalSignalList_LocalSignalAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," signal+=Signal)*
protected class LocalSignalList_Group_2 extends GroupToken {
	
	public LocalSignalList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalList_SignalAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LocalSignalList_CommaKeyword_2_0 extends KeywordToken  {
	
	public LocalSignalList_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LocalSignalList_Group_2(parent, this, 0, inst);
			case 1: return new LocalSignalList_SignalAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal+=Signal
protected class LocalSignalList_SignalAssignment_2_1 extends AssignmentToken  {
	
	public LocalSignalList_SignalAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalSignalListAccess().getSignalAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalSignalList_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule LocalSignalList ****************/


/************ begin Rule Suspend ****************
 *
 * Suspend:
 *   "suspend" statement=Statement "when" delay=DelayExpr; 
 * 	
 * // --> B.4.21 suspend: Preemption with State Freeze
 * 
 * 	      
 * 
 * // --> B.4.22 sustain: Emit a Signal Indefinitely
 *
 **/

// "suspend" statement=Statement "when" delay=DelayExpr
protected class Suspend_Group extends GroupToken {
	
	public Suspend_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSuspendAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Suspend_DelayAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSuspendRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "suspend"
protected class Suspend_SuspendKeyword_0 extends KeywordToken  {
	
	public Suspend_SuspendKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSuspendAccess().getSuspendKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// statement=Statement
protected class Suspend_StatementAssignment_1 extends AssignmentToken  {
	
	public Suspend_StatementAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSuspendAccess().getStatementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSuspendAccess().getStatementStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Suspend_SuspendKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "when"
protected class Suspend_WhenKeyword_2 extends KeywordToken  {
	
	public Suspend_WhenKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSuspendAccess().getWhenKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Suspend_StatementAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// delay=DelayExpr
protected class Suspend_DelayAssignment_3 extends AssignmentToken  {
	
	public Suspend_DelayAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSuspendAccess().getDelayAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSuspendAccess().getDelayDelayExprParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Suspend_WhenKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Suspend ****************/


/************ begin Rule Sustain ****************
 *
 * Sustain:
 *   "sustain" (signal=[Signal|EsterelID]|tick=Tick) ("(" dataExpr=DataExpr ")")?; 
 * 
 * // --> B.4.22 sustain: Emit a Signal Indefinitely
 * 
 * 	            
 * 	
 * // --> B.4.23 trap: TrapDeclaration and Handling
 *
 **/

// "sustain" (signal=[Signal|EsterelID]|tick=Tick) ("(" dataExpr=DataExpr ")")?
protected class Sustain_Group extends GroupToken {
	
	public Sustain_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSustainAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_Group_2(parent, this, 0, inst);
			case 1: return new Sustain_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSustainRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "sustain"
protected class Sustain_SustainKeyword_0 extends KeywordToken  {
	
	public Sustain_SustainKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSustainAccess().getSustainKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// signal=[Signal|EsterelID]|tick=Tick
protected class Sustain_Alternatives_1 extends AlternativesToken {

	public Sustain_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSustainAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_SignalAssignment_1_0(parent, this, 0, inst);
			case 1: return new Sustain_TickAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]
protected class Sustain_SignalAssignment_1_0 extends AssignmentToken  {
	
	public Sustain_SignalAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSustainAccess().getSignalAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_SustainKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSustainAccess().getSignalSignalCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSustainAccess().getSignalSignalCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// tick=Tick
protected class Sustain_TickAssignment_1_1 extends AssignmentToken  {
	
	public Sustain_TickAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSustainAccess().getTickAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_SustainKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tick",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tick");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getSustainAccess().getTickTickParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("(" dataExpr=DataExpr ")")?
protected class Sustain_Group_2 extends GroupToken {
	
	public Sustain_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSustainAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_RightParenthesisKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Sustain_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public Sustain_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSustainAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dataExpr=DataExpr
protected class Sustain_DataExprAssignment_2_1 extends AssignmentToken  {
	
	public Sustain_DataExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSustainAccess().getDataExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSustainAccess().getDataExprDataExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Sustain_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Sustain_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public Sustain_RightParenthesisKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSustainAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sustain_DataExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Sustain ****************/


/************ begin Rule Trap ****************
 *
 * Trap:
 *   "trap" trapDeclList=TrapDeclList "in" statement=Statement trapHandlerList=
 *   TrapHandlerList? "end" "trap"?; 
 * 	
 * // --> B.4.23 trap: TrapDeclaration and Handling
 *
 **/

// "trap" trapDeclList=TrapDeclList "in" statement=Statement trapHandlerList=
// TrapHandlerList? "end" "trap"?
protected class Trap_Group extends GroupToken {
	
	public Trap_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Trap_EndKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "trap"
protected class Trap_TrapKeyword_0 extends KeywordToken  {
	
	public Trap_TrapKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapAccess().getTrapKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// trapDeclList=TrapDeclList
protected class Trap_TrapDeclListAssignment_1 extends AssignmentToken  {
	
	public Trap_TrapDeclListAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapAccess().getTrapDeclListAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDeclList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapDeclList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapDeclList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapDeclListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapAccess().getTrapDeclListTrapDeclListParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trap_TrapKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "in"
protected class Trap_InKeyword_2 extends KeywordToken  {
	
	public Trap_InKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapAccess().getInKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Trap_TrapDeclListAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class Trap_StatementAssignment_3 extends AssignmentToken  {
	
	public Trap_StatementAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapAccess().getStatementAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapAccess().getStatementStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trap_InKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// trapHandlerList=TrapHandlerList?
protected class Trap_TrapHandlerListAssignment_4 extends AssignmentToken  {
	
	public Trap_TrapHandlerListAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapAccess().getTrapHandlerListAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandlerList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapHandlerList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapHandlerList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapHandlerListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapAccess().getTrapHandlerListTrapHandlerListParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Trap_StatementAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class Trap_EndKeyword_5 extends KeywordToken  {
	
	public Trap_EndKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapAccess().getEndKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Trap_TrapHandlerListAssignment_4(parent, this, 0, inst);
			case 1: return new Trap_StatementAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Trap ****************/


/************ begin Rule TrapDeclList ****************
 *
 * TrapDeclList:
 *   trapDecl+=TrapDecl ("," trapDecl+=TrapDecl)*;
 *
 **/

// trapDecl+=TrapDecl ("," trapDecl+=TrapDecl)*
protected class TrapDeclList_Group extends GroupToken {
	
	public TrapDeclList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapDeclListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDeclList_Group_1(parent, this, 0, inst);
			case 1: return new TrapDeclList_TrapDeclAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapDeclListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// trapDecl+=TrapDecl
protected class TrapDeclList_TrapDeclAssignment_0 extends AssignmentToken  {
	
	public TrapDeclList_TrapDeclAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapDeclListAccess().getTrapDeclAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," trapDecl+=TrapDecl)*
protected class TrapDeclList_Group_1 extends GroupToken {
	
	public TrapDeclList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapDeclListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDeclList_TrapDeclAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class TrapDeclList_CommaKeyword_1_0 extends KeywordToken  {
	
	public TrapDeclList_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapDeclListAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDeclList_Group_1(parent, this, 0, inst);
			case 1: return new TrapDeclList_TrapDeclAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// trapDecl+=TrapDecl
protected class TrapDeclList_TrapDeclAssignment_1_1 extends AssignmentToken  {
	
	public TrapDeclList_TrapDeclAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapDeclListAccess().getTrapDeclAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapDecl",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrapDeclList_CommaKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TrapDeclList ****************/


/************ begin Rule TrapDecl ****************
 *
 * TrapDecl:
 *   name=EsterelID channelDesc=ChannelDescription?;
 *
 **/

// name=EsterelID channelDesc=ChannelDescription?
protected class TrapDecl_Group extends GroupToken {
	
	public TrapDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapDecl_ChannelDescAssignment_1(parent, this, 0, inst);
			case 1: return new TrapDecl_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID
protected class TrapDecl_NameAssignment_0 extends AssignmentToken  {
	
	public TrapDecl_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapDeclAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrapDeclAccess().getNameEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// channelDesc=ChannelDescription?
protected class TrapDecl_ChannelDescAssignment_1 extends AssignmentToken  {
	
	public TrapDecl_ChannelDescAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapDeclAccess().getChannelDescAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("channelDesc",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("channelDesc");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelDescriptionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapDeclAccess().getChannelDescChannelDescriptionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrapDecl_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TrapDecl ****************/


/************ begin Rule TrapHandlerList ****************
 *
 * TrapHandlerList:
 *   trapHandler+=TrapHandler trapHandler+=TrapHandler*;
 *
 **/

// trapHandler+=TrapHandler trapHandler+=TrapHandler*
protected class TrapHandlerList_Group extends GroupToken {
	
	public TrapHandlerList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapHandlerListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandlerList_TrapHandlerAssignment_1(parent, this, 0, inst);
			case 1: return new TrapHandlerList_TrapHandlerAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapHandlerListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// trapHandler+=TrapHandler
protected class TrapHandlerList_TrapHandlerAssignment_0 extends AssignmentToken  {
	
	public TrapHandlerList_TrapHandlerAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapHandlerListAccess().getTrapHandlerAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandler_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapHandler",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapHandler");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapHandlerRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// trapHandler+=TrapHandler*
protected class TrapHandlerList_TrapHandlerAssignment_1 extends AssignmentToken  {
	
	public TrapHandlerList_TrapHandlerAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapHandlerListAccess().getTrapHandlerAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandler_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapHandler",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapHandler");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapHandlerRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrapHandlerList_TrapHandlerAssignment_1(parent, next, actIndex, consumed);
			case 1: return new TrapHandlerList_TrapHandlerAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TrapHandlerList ****************/


/************ begin Rule TrapHandler ****************
 *
 * TrapHandler:
 *   "handle" trapExpr=TrapExpr "do" statement=Statement; 
 * 	
 * 
 * 	      
 * 	
 * // --> B.4.24 var: Local Variable Declaration
 *
 **/

// "handle" trapExpr=TrapExpr "do" statement=Statement
protected class TrapHandler_Group extends GroupToken {
	
	public TrapHandler_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrapHandlerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandler_StatementAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapHandlerRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "handle"
protected class TrapHandler_HandleKeyword_0 extends KeywordToken  {
	
	public TrapHandler_HandleKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapHandlerAccess().getHandleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// trapExpr=TrapExpr
protected class TrapHandler_TrapExprAssignment_1 extends AssignmentToken  {
	
	public TrapHandler_TrapExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapHandlerAccess().getTrapExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapExpr_SigExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trapExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trapExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrapExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapHandlerAccess().getTrapExprTrapExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrapHandler_HandleKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "do"
protected class TrapHandler_DoKeyword_2 extends KeywordToken  {
	
	public TrapHandler_DoKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrapHandlerAccess().getDoKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrapHandler_TrapExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class TrapHandler_StatementAssignment_3 extends AssignmentToken  {
	
	public TrapHandler_StatementAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrapHandlerAccess().getStatementAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrapHandlerAccess().getStatementStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrapHandler_DoKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TrapHandler ****************/


/************ begin Rule Variable ****************
 *
 * Variable:
 *   "var" varDecl=VariableDecl "in" statement=Statement "end" "var"?; 
 * 	
 * // --> B.4.24 var: Local Variable Declaration
 *
 **/

// "var" varDecl=VariableDecl "in" statement=Statement "end" "var"?
protected class Variable_Group extends GroupToken {
	
	public Variable_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_EndKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "var"
protected class Variable_VarKeyword_0 extends KeywordToken  {
	
	public Variable_VarKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getVarKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// varDecl=VariableDecl
protected class Variable_VarDeclAssignment_1 extends AssignmentToken  {
	
	public Variable_VarDeclAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getVarDeclAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varDecl",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varDecl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableAccess().getVarDeclVariableDeclParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Variable_VarKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "in"
protected class Variable_InKeyword_2 extends KeywordToken  {
	
	public Variable_InKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getInKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_VarDeclAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class Variable_StatementAssignment_3 extends AssignmentToken  {
	
	public Variable_StatementAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getStatementAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableAccess().getStatementStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Variable_InKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class Variable_EndKeyword_4 extends KeywordToken  {
	
	public Variable_EndKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_StatementAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Variable ****************/


/************ begin Rule VariableDecl ****************
 *
 * VariableDecl:
 *   varList=VariableList ":" (type=EsterelID|type=BaseType) ({VariableDecl.left=current
 *   } "," varList=VariableList ":" (type=EsterelID|type=BaseType))*;
 *
 **/

// varList=VariableList ":" (type=EsterelID|type=BaseType) ({VariableDecl.left=current
// } "," varList=VariableList ":" (type=EsterelID|type=BaseType))*
protected class VariableDecl_Group extends GroupToken {
	
	public VariableDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_Group_3(parent, this, 0, inst);
			case 1: return new VariableDecl_Alternatives_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// varList=VariableList
protected class VariableDecl_VarListAssignment_0 extends AssignmentToken  {
	
	public VariableDecl_VarListAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getVarListAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ":"
protected class VariableDecl_ColonKeyword_1 extends KeywordToken  {
	
	public VariableDecl_ColonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_VarListAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class VariableDecl_Alternatives_2 extends AlternativesToken {

	public VariableDecl_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_TypeAssignment_2_0(parent, this, 0, inst);
			case 1: return new VariableDecl_TypeAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class VariableDecl_TypeAssignment_2_0 extends AssignmentToken  {
	
	public VariableDecl_TypeAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getTypeAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_ColonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableDeclAccess().getTypeEsterelIDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class VariableDecl_TypeAssignment_2_1 extends AssignmentToken  {
	
	public VariableDecl_TypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_ColonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ({VariableDecl.left=current} "," varList=VariableList ":" (type=EsterelID|type=
// BaseType))*
protected class VariableDecl_Group_3 extends GroupToken {
	
	public VariableDecl_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_Alternatives_3_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {VariableDecl.left=current}
protected class VariableDecl_VariableDeclLeftAction_3_0 extends ActionToken  {

	public VariableDecl_VariableDeclLeftAction_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_Group_3(parent, this, 0, inst);
			case 1: return new VariableDecl_Alternatives_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// ","
protected class VariableDecl_CommaKeyword_3_1 extends KeywordToken  {
	
	public VariableDecl_CommaKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getCommaKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_VariableDeclLeftAction_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// varList=VariableList
protected class VariableDecl_VarListAssignment_3_2 extends AssignmentToken  {
	
	public VariableDecl_VarListAssignment_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getVarListAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableDecl_CommaKeyword_3_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class VariableDecl_ColonKeyword_3_3 extends KeywordToken  {
	
	public VariableDecl_ColonKeyword_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getColonKeyword_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_VarListAssignment_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class VariableDecl_Alternatives_3_4 extends AlternativesToken {

	public VariableDecl_Alternatives_3_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getAlternatives_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_TypeAssignment_3_4_0(parent, this, 0, inst);
			case 1: return new VariableDecl_TypeAssignment_3_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class VariableDecl_TypeAssignment_3_4_0 extends AssignmentToken  {
	
	public VariableDecl_TypeAssignment_3_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getTypeAssignment_3_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_ColonKeyword_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableDeclAccess().getTypeEsterelIDTerminalRuleCall_3_4_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class VariableDecl_TypeAssignment_3_4_1 extends AssignmentToken  {
	
	public VariableDecl_TypeAssignment_3_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getTypeAssignment_3_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableDecl_ColonKeyword_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_3_4_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule VariableDecl ****************/


/************ begin Rule VariableList ****************
 *
 * VariableList:
 *   variable=EsterelID (":=" expression=DataExpr)? ({VariableList.left=current} ","
 *   variable=EsterelID (":=" expression=DataExpr)?)*; 
 * 	
 * 
 * 	     
 * 	        
 * 
 * // --> B.4.25 weak abort: Weak Preemption
 *
 **/

// variable=EsterelID (":=" expression=DataExpr)? ({VariableList.left=current} ","
// variable=EsterelID (":=" expression=DataExpr)?)*
protected class VariableList_Group extends GroupToken {
	
	public VariableList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_Group_2(parent, this, 0, inst);
			case 1: return new VariableList_Group_1(parent, this, 1, inst);
			case 2: return new VariableList_VariableAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// variable=EsterelID
protected class VariableList_VariableAssignment_0 extends AssignmentToken  {
	
	public VariableList_VariableAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableListAccess().getVariableAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("variable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("variable");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableListAccess().getVariableEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (":=" expression=DataExpr)?
protected class VariableList_Group_1 extends GroupToken {
	
	public VariableList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_ExpressionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class VariableList_ColonEqualsSignKeyword_1_0 extends KeywordToken  {
	
	public VariableList_ColonEqualsSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_VariableAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expression=DataExpr
protected class VariableList_ExpressionAssignment_1_1 extends AssignmentToken  {
	
	public VariableList_ExpressionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableListAccess().getExpressionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableList_ColonEqualsSignKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ({VariableList.left=current} "," variable=EsterelID (":=" expression=DataExpr)?)*
protected class VariableList_Group_2 extends GroupToken {
	
	public VariableList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_Group_2_3(parent, this, 0, inst);
			case 1: return new VariableList_VariableAssignment_2_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {VariableList.left=current}
protected class VariableList_VariableListLeftAction_2_0 extends ActionToken  {

	public VariableList_VariableListLeftAction_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_Group_2(parent, this, 0, inst);
			case 1: return new VariableList_Group_1(parent, this, 1, inst);
			case 2: return new VariableList_VariableAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// ","
protected class VariableList_CommaKeyword_2_1 extends KeywordToken  {
	
	public VariableList_CommaKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableListAccess().getCommaKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_VariableListLeftAction_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// variable=EsterelID
protected class VariableList_VariableAssignment_2_2 extends AssignmentToken  {
	
	public VariableList_VariableAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableListAccess().getVariableAssignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_CommaKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("variable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("variable");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableListAccess().getVariableEsterelIDTerminalRuleCall_2_2_0();
			return obj;
		}
		return null;
	}

}

// (":=" expression=DataExpr)?
protected class VariableList_Group_2_3 extends GroupToken {
	
	public VariableList_Group_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableListAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_ExpressionAssignment_2_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class VariableList_ColonEqualsSignKeyword_2_3_0 extends KeywordToken  {
	
	public VariableList_ColonEqualsSignKeyword_2_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableList_VariableAssignment_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expression=DataExpr
protected class VariableList_ExpressionAssignment_2_3_1 extends AssignmentToken  {
	
	public VariableList_ExpressionAssignment_2_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableListAccess().getExpressionAssignment_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_2_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableList_ColonEqualsSignKeyword_2_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule VariableList ****************/


/************ begin Rule WeakAbort ****************
 *
 * WeakAbort:
 *   "weak" "abort" statement=Statement "when" weakAbortBody=WeakAbortBody; 
 * 
 * // --> B.4.25 weak abort: Weak Preemption
 *
 **/

// "weak" "abort" statement=Statement "when" weakAbortBody=WeakAbortBody
protected class WeakAbort_Group extends GroupToken {
	
	public WeakAbort_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbort_WeakAbortBodyAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWeakAbortRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "weak"
protected class WeakAbort_WeakKeyword_0 extends KeywordToken  {
	
	public WeakAbort_WeakKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getWeakKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "abort"
protected class WeakAbort_AbortKeyword_1 extends KeywordToken  {
	
	public WeakAbort_AbortKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getAbortKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbort_WeakKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class WeakAbort_StatementAssignment_2 extends AssignmentToken  {
	
	public WeakAbort_StatementAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getStatementAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortAccess().getStatementStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WeakAbort_AbortKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "when"
protected class WeakAbort_WhenKeyword_3 extends KeywordToken  {
	
	public WeakAbort_WhenKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getWhenKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbort_StatementAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// weakAbortBody=WeakAbortBody
protected class WeakAbort_WeakAbortBodyAssignment_4 extends AssignmentToken  {
	
	public WeakAbort_WeakAbortBodyAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortAccess().getWeakAbortBodyAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortBody_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("weakAbortBody",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("weakAbortBody");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWeakAbortBodyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortAccess().getWeakAbortBodyWeakAbortBodyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WeakAbort_WhenKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WeakAbort ****************/


/************ begin Rule WeakAbortBody ****************
 *
 * WeakAbortBody:
 *   WeakAbortInstance|WeakAbortCase;
 *
 **/

// WeakAbortInstance|WeakAbortCase
protected class WeakAbortBody_Alternatives extends AlternativesToken {

	public WeakAbortBody_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWeakAbortBodyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortBody_WeakAbortInstanceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new WeakAbortBody_WeakAbortCaseParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWeakAbortBodyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// WeakAbortInstance
protected class WeakAbortBody_WeakAbortInstanceParserRuleCall_0 extends RuleCallToken {
	
	public WeakAbortBody_WeakAbortInstanceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeakAbortBodyAccess().getWeakAbortInstanceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortInstance_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WeakAbortInstance_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WeakAbortCase
protected class WeakAbortBody_WeakAbortCaseParserRuleCall_1 extends RuleCallToken {
	
	public WeakAbortBody_WeakAbortCaseParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeakAbortBodyAccess().getWeakAbortCaseParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WeakAbortCase_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWeakAbortCaseRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WeakAbortBody ****************/



/************ begin Rule WeakAbortInstance ****************
 *
 * WeakAbortInstance:
 *   delay=DelayExpr ("do" statement=Statement end=WeakAbortEnd)?;
 *
 **/

// delay=DelayExpr ("do" statement=Statement end=WeakAbortEnd)?
protected class WeakAbortInstance_Group extends GroupToken {
	
	public WeakAbortInstance_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortInstance_Group_1(parent, this, 0, inst);
			case 1: return new WeakAbortInstance_DelayAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// delay=DelayExpr
protected class WeakAbortInstance_DelayAssignment_0 extends AssignmentToken  {
	
	public WeakAbortInstance_DelayAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getDelayAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("do" statement=Statement end=WeakAbortEnd)?
protected class WeakAbortInstance_Group_1 extends GroupToken {
	
	public WeakAbortInstance_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortInstance_EndAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "do"
protected class WeakAbortInstance_DoKeyword_1_0 extends KeywordToken  {
	
	public WeakAbortInstance_DoKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getDoKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortInstance_DelayAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// statement=Statement
protected class WeakAbortInstance_StatementAssignment_1_1 extends AssignmentToken  {
	
	public WeakAbortInstance_StatementAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getStatementAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WeakAbortInstance_DoKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=WeakAbortEnd
protected class WeakAbortInstance_EndAssignment_1_2 extends AssignmentToken  {
	
	public WeakAbortInstance_EndAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortInstanceAccess().getEndAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortInstance_StatementAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getWeakAbortInstanceAccess().getEndWeakAbortEndParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule WeakAbortInstance ****************/


/************ begin Rule WeakAbortCase ****************
 *
 * WeakAbortCase:
 *   cases+=AbortCaseSingle cases+=AbortCaseSingle* end=WeakAbortEnd;  
 * 	
 * 
 * 	    
 * 
 * 
 * // ==============================================
 * // ===            B.3 Expressions             ===
 * // ==============================================
 * 
 * // --> B.3.1 Data Expressions
 *
 **/

// cases+=AbortCaseSingle cases+=AbortCaseSingle* end=WeakAbortEnd
protected class WeakAbortCase_Group extends GroupToken {
	
	public WeakAbortCase_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeakAbortCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortCase_EndAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWeakAbortCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// cases+=AbortCaseSingle
protected class WeakAbortCase_CasesAssignment_0 extends AssignmentToken  {
	
	public WeakAbortCase_CasesAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortCaseAccess().getCasesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// cases+=AbortCaseSingle*
protected class WeakAbortCase_CasesAssignment_1 extends AssignmentToken  {
	
	public WeakAbortCase_CasesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortCaseAccess().getCasesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbortCaseSingle_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cases",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbortCaseSingleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WeakAbortCase_CasesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new WeakAbortCase_CasesAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=WeakAbortEnd
protected class WeakAbortCase_EndAssignment_2 extends AssignmentToken  {
	
	public WeakAbortCase_EndAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeakAbortCaseAccess().getEndAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WeakAbortCase_CasesAssignment_1(parent, this, 0, inst);
			case 1: return new WeakAbortCase_CasesAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getWeakAbortCaseAccess().getEndWeakAbortEndParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeakAbortCase ****************/


/************ begin Rule DataExpr ****************
 *
 * DataExpr:
 *   DataUnaryExpr ({DataExpr.left=current} op=DataOp right=DataExpr)?|op=DataOp expr=
 *   DataExpr; 
 * 
 * 
 * // ==============================================
 * // ===            B.3 Expressions             ===
 * // ==============================================
 * 
 * // --> B.3.1 Data Expressions
 *
 **/

// DataUnaryExpr ({DataExpr.left=current} op=DataOp right=DataExpr)?|op=DataOp expr=
// DataExpr 
// 
// 
// // ==============================================
// // ===            B.3 Expressions             ===
// // ==============================================
// 
// // --> B.3.1 Data Expressions
protected class DataExpr_Alternatives extends AlternativesToken {

	public DataExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Group_0(parent, this, 0, inst);
			case 1: return new DataExpr_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DataUnaryExpr ({DataExpr.left=current} op=DataOp right=DataExpr)?
protected class DataExpr_Group_0 extends GroupToken {
	
	public DataExpr_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataExprAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Group_0_1(parent, this, 0, inst);
			case 1: return new DataExpr_DataUnaryExprParserRuleCall_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// DataUnaryExpr
protected class DataExpr_DataUnaryExprParserRuleCall_0_0 extends RuleCallToken {
	
	public DataExpr_DataUnaryExprParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataExprAccess().getDataUnaryExprParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataUnaryExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataUnaryExpr_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataUnaryExprRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({DataExpr.left=current} op=DataOp right=DataExpr)?
protected class DataExpr_Group_0_1 extends GroupToken {
	
	public DataExpr_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataExprAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_RightAssignment_0_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {DataExpr.left=current}
protected class DataExpr_DataExprLeftAction_0_1_0 extends ActionToken  {

	public DataExpr_DataExprLeftAction_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDataExprAccess().getDataExprLeftAction_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_DataUnaryExprParserRuleCall_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDataExprAccess().getDataExprLeftAction_0_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// op=DataOp
protected class DataExpr_OpAssignment_0_1_1 extends AssignmentToken  {
	
	public DataExpr_OpAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataExprAccess().getOpAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_DataExprLeftAction_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=DataExpr
protected class DataExpr_RightAssignment_0_1_2 extends AssignmentToken  {
	
	public DataExpr_RightAssignment_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataExprAccess().getRightAssignment_0_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataExprAccess().getRightDataExprParserRuleCall_0_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataExpr_OpAssignment_0_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// op=DataOp expr=DataExpr
protected class DataExpr_Group_1 extends GroupToken {
	
	public DataExpr_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_ExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// op=DataOp
protected class DataExpr_OpAssignment_1_0 extends AssignmentToken  {
	
	public DataExpr_OpAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataExprAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// expr=DataExpr
protected class DataExpr_ExprAssignment_1_1 extends AssignmentToken  {
	
	public DataExpr_ExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataExprAccess().getExprAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataExprAccess().getExprDataExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataExpr_OpAssignment_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DataExpr ****************/



/************ begin Rule DataUnaryExpr ****************
 *
 * DataUnaryExpr:
 *   DataValueFloat|DataValueBoolean|DataValueInt|DataValueString|DataValueID|
 *   DataBlock|DataCurrent|DataPre|DataTrap|DataFunction;
 *
 **/

// DataValueFloat|DataValueBoolean|DataValueInt|DataValueString|DataValueID|
// DataBlock|DataCurrent|DataPre|DataTrap|DataFunction
protected class DataUnaryExpr_Alternatives extends AlternativesToken {

	public DataUnaryExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataUnaryExpr_DataValueFloatParserRuleCall_0(parent, this, 0, inst);
			case 1: return new DataUnaryExpr_DataValueBooleanParserRuleCall_1(parent, this, 1, inst);
			case 2: return new DataUnaryExpr_DataValueIntParserRuleCall_2(parent, this, 2, inst);
			case 3: return new DataUnaryExpr_DataValueStringParserRuleCall_3(parent, this, 3, inst);
			case 4: return new DataUnaryExpr_DataValueIDParserRuleCall_4(parent, this, 4, inst);
			case 5: return new DataUnaryExpr_DataBlockParserRuleCall_5(parent, this, 5, inst);
			case 6: return new DataUnaryExpr_DataCurrentParserRuleCall_6(parent, this, 6, inst);
			case 7: return new DataUnaryExpr_DataPreParserRuleCall_7(parent, this, 7, inst);
			case 8: return new DataUnaryExpr_DataTrapParserRuleCall_8(parent, this, 8, inst);
			case 9: return new DataUnaryExpr_DataFunctionParserRuleCall_9(parent, this, 9, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataUnaryExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DataValueFloat
protected class DataUnaryExpr_DataValueFloatParserRuleCall_0 extends RuleCallToken {
	
	public DataUnaryExpr_DataValueFloatParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataValueFloatParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataValueFloat_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataValueFloat_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataValueFloatRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataValueBoolean
protected class DataUnaryExpr_DataValueBooleanParserRuleCall_1 extends RuleCallToken {
	
	public DataUnaryExpr_DataValueBooleanParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataValueBooleanParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataValueBoolean_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataValueBoolean_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataValueBooleanRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataValueInt
protected class DataUnaryExpr_DataValueIntParserRuleCall_2 extends RuleCallToken {
	
	public DataUnaryExpr_DataValueIntParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataValueIntParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataValueInt_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataValueInt_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataValueIntRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataValueString
protected class DataUnaryExpr_DataValueStringParserRuleCall_3 extends RuleCallToken {
	
	public DataUnaryExpr_DataValueStringParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataValueStringParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataValueString_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataValueString_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataValueStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataValueID
protected class DataUnaryExpr_DataValueIDParserRuleCall_4 extends RuleCallToken {
	
	public DataUnaryExpr_DataValueIDParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataValueIDParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataValueID_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataValueID_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataValueIDRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataBlock
protected class DataUnaryExpr_DataBlockParserRuleCall_5 extends RuleCallToken {
	
	public DataUnaryExpr_DataBlockParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataBlockParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataBlock_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataBlockRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataCurrent
protected class DataUnaryExpr_DataCurrentParserRuleCall_6 extends RuleCallToken {
	
	public DataUnaryExpr_DataCurrentParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataCurrentParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataCurrent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataCurrent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataCurrentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataPre
protected class DataUnaryExpr_DataPreParserRuleCall_7 extends RuleCallToken {
	
	public DataUnaryExpr_DataPreParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataPreParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataPre_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataPreRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataTrap
protected class DataUnaryExpr_DataTrapParserRuleCall_8 extends RuleCallToken {
	
	public DataUnaryExpr_DataTrapParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataTrapParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataTrap_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataTrap_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataTrapRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataFunction
protected class DataUnaryExpr_DataFunctionParserRuleCall_9 extends RuleCallToken {
	
	public DataUnaryExpr_DataFunctionParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataUnaryExprAccess().getDataFunctionParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataFunction_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataFunctionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule DataUnaryExpr ****************/


/************ begin Rule DataValueID ****************
 *
 * DataValueID:
 *   value=EsterelID;
 *
 **/

// value=EsterelID
protected class DataValueID_ValueAssignment extends AssignmentToken  {
	
	public DataValueID_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataValueIDAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataValueIDRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getDataValueIDAccess().getValueEsterelIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DataValueID ****************/


/************ begin Rule DataValueFloat ****************
 *
 * DataValueFloat:
 *   value=Float;
 *
 **/

// value=Float
protected class DataValueFloat_ValueAssignment extends AssignmentToken  {
	
	public DataValueFloat_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataValueFloatAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataValueFloatRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getDataValueFloatAccess().getValueFloatTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DataValueFloat ****************/


/************ begin Rule DataValueBoolean ****************
 *
 * DataValueBoolean:
 *   value=Boolean;
 *
 **/

// value=Boolean
protected class DataValueBoolean_ValueAssignment extends AssignmentToken  {
	
	public DataValueBoolean_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataValueBooleanAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataValueBooleanRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getDataValueBooleanAccess().getValueBooleanTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DataValueBoolean ****************/


/************ begin Rule DataValueInt ****************
 *
 * DataValueInt:
 *   value=INT;
 *
 **/

// value=INT
protected class DataValueInt_ValueAssignment extends AssignmentToken  {
	
	public DataValueInt_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataValueIntAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataValueIntRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getDataValueIntAccess().getValueINTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DataValueInt ****************/


/************ begin Rule DataValueString ****************
 *
 * DataValueString:
 *   value=STRING;
 *
 **/

// value=STRING
protected class DataValueString_ValueAssignment extends AssignmentToken  {
	
	public DataValueString_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataValueStringAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataValueStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getDataValueStringAccess().getValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DataValueString ****************/


/************ begin Rule DataBlock ****************
 *
 * DataBlock:
 *   "(" dataExpr=DataExpr ")";
 *
 **/

// "(" dataExpr=DataExpr ")"
protected class DataBlock_Group extends GroupToken {
	
	public DataBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataBlock_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class DataBlock_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public DataBlock_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataBlockAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// dataExpr=DataExpr
protected class DataBlock_DataExprAssignment_1 extends AssignmentToken  {
	
	public DataBlock_DataExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataBlockAccess().getDataExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataBlockAccess().getDataExprDataExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataBlock_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class DataBlock_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public DataBlock_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataBlockAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataBlock_DataExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DataBlock ****************/


/************ begin Rule DataCurrent ****************
 *
 * DataCurrent:
 *   "?" (signal=[Signal|EsterelID]|tick=Tick);
 *
 **/

// "?" (signal=[Signal|EsterelID]|tick=Tick)
protected class DataCurrent_Group extends GroupToken {
	
	public DataCurrent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataCurrentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataCurrent_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataCurrentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "?"
protected class DataCurrent_QuestionMarkKeyword_0 extends KeywordToken  {
	
	public DataCurrent_QuestionMarkKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataCurrentAccess().getQuestionMarkKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// signal=[Signal|EsterelID]|tick=Tick
protected class DataCurrent_Alternatives_1 extends AlternativesToken {

	public DataCurrent_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataCurrentAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataCurrent_SignalAssignment_1_0(parent, this, 0, inst);
			case 1: return new DataCurrent_TickAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]
protected class DataCurrent_SignalAssignment_1_0 extends AssignmentToken  {
	
	public DataCurrent_SignalAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataCurrentAccess().getSignalAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataCurrent_QuestionMarkKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataCurrentAccess().getSignalSignalCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDataCurrentAccess().getSignalSignalCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// tick=Tick
protected class DataCurrent_TickAssignment_1_1 extends AssignmentToken  {
	
	public DataCurrent_TickAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataCurrentAccess().getTickAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataCurrent_QuestionMarkKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tick",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tick");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDataCurrentAccess().getTickTickParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule DataCurrent ****************/


/************ begin Rule DataPre ****************
 *
 * DataPre:
 *   "pre" "(" "?" (signal=[Signal|EsterelID]|tick=Tick) ")";
 *
 **/

// "pre" "(" "?" (signal=[Signal|EsterelID]|tick=Tick) ")"
protected class DataPre_Group extends GroupToken {
	
	public DataPre_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataPreAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataPreRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "pre"
protected class DataPre_PreKeyword_0 extends KeywordToken  {
	
	public DataPre_PreKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPreAccess().getPreKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class DataPre_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public DataPre_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPreAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_PreKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "?"
protected class DataPre_QuestionMarkKeyword_2 extends KeywordToken  {
	
	public DataPre_QuestionMarkKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPreAccess().getQuestionMarkKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_LeftParenthesisKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]|tick=Tick
protected class DataPre_Alternatives_3 extends AlternativesToken {

	public DataPre_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataPreAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_SignalAssignment_3_0(parent, this, 0, inst);
			case 1: return new DataPre_TickAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]
protected class DataPre_SignalAssignment_3_0 extends AssignmentToken  {
	
	public DataPre_SignalAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataPreAccess().getSignalAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_QuestionMarkKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPreAccess().getSignalSignalCrossReference_3_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDataPreAccess().getSignalSignalCrossReference_3_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// tick=Tick
protected class DataPre_TickAssignment_3_1 extends AssignmentToken  {
	
	public DataPre_TickAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataPreAccess().getTickAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_QuestionMarkKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tick",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tick");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDataPreAccess().getTickTickParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class DataPre_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public DataPre_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPreAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataPre_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DataPre ****************/


/************ begin Rule DataTrap ****************
 *
 * DataTrap:
 *   "??" trap=[TrapDecl|EsterelID];
 *
 **/

// "??" trap=[TrapDecl|EsterelID]
protected class DataTrap_Group extends GroupToken {
	
	public DataTrap_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataTrapAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataTrap_TrapAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataTrapRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "??"
protected class DataTrap_QuestionMarkQuestionMarkKeyword_0 extends KeywordToken  {
	
	public DataTrap_QuestionMarkQuestionMarkKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTrapAccess().getQuestionMarkQuestionMarkKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// trap=[TrapDecl|EsterelID]
protected class DataTrap_TrapAssignment_1 extends AssignmentToken  {
	
	public DataTrap_TrapAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTrapAccess().getTrapAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataTrap_QuestionMarkQuestionMarkKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("trap",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("trap");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataTrapAccess().getTrapTrapDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDataTrapAccess().getTrapTrapDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule DataTrap ****************/


/************ begin Rule DataFunction ****************
 *
 * DataFunction:
 *   function=[Function|EsterelID] "(" dataExpr+=DataExpr ("," dataExpr+=DataExpr)* ")"; 
 * 	
 * 
 * 	          
 * 
 * // --> B.3.3 Signal Expressions <--
 * // --> B.3.5 Trap Expressions <--
 *
 **/

// function=[Function|EsterelID] "(" dataExpr+=DataExpr ("," dataExpr+=DataExpr)* ")"
protected class DataFunction_Group extends GroupToken {
	
	public DataFunction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// function=[Function|EsterelID]
protected class DataFunction_FunctionAssignment_0 extends AssignmentToken  {
	
	public DataFunction_FunctionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getFunctionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("function",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("function");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataFunctionAccess().getFunctionFunctionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDataFunctionAccess().getFunctionFunctionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class DataFunction_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public DataFunction_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_FunctionAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dataExpr+=DataExpr
protected class DataFunction_DataExprAssignment_2 extends AssignmentToken  {
	
	public DataFunction_DataExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getDataExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataFunctionAccess().getDataExprDataExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataFunction_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," dataExpr+=DataExpr)*
protected class DataFunction_Group_3 extends GroupToken {
	
	public DataFunction_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_DataExprAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class DataFunction_CommaKeyword_3_0 extends KeywordToken  {
	
	public DataFunction_CommaKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_Group_3(parent, this, 0, inst);
			case 1: return new DataFunction_DataExprAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// dataExpr+=DataExpr
protected class DataFunction_DataExprAssignment_3_1 extends AssignmentToken  {
	
	public DataFunction_DataExprAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getDataExprAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataFunctionAccess().getDataExprDataExprParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataFunction_CommaKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class DataFunction_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public DataFunction_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataFunctionAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataFunction_Group_3(parent, this, 0, inst);
			case 1: return new DataFunction_DataExprAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DataFunction ****************/


/************ begin Rule TrapExpr ****************
 *
 * TrapExpr:
 *   SigExpr; 
 * 
 * // --> B.3.3 Signal Expressions <--
 * // --> B.3.5 Trap Expressions <--
 *
 **/

// SigExpr
protected class TrapExpr_SigExprParserRuleCall extends RuleCallToken {
	
	public TrapExpr_SigExprParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTrapExprAccess().getSigExprParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTrapExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SigExpr_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule TrapExpr ****************/


/************ begin Rule SigExpr ****************
 *
 * SigExpr:
 *   andExpr+=SigExprAND ("or" andExpr+=SigExprAND)*;
 *
 **/

// andExpr+=SigExprAND ("or" andExpr+=SigExprAND)*
protected class SigExpr_Group extends GroupToken {
	
	public SigExpr_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group_1(parent, this, 0, inst);
			case 1: return new SigExpr_AndExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// andExpr+=SigExprAND
protected class SigExpr_AndExprAssignment_0 extends AssignmentToken  {
	
	public SigExpr_AndExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprAccess().getAndExprAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprAND_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("andExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("andExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprANDRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("or" andExpr+=SigExprAND)*
protected class SigExpr_Group_1 extends GroupToken {
	
	public SigExpr_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_AndExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "or"
protected class SigExpr_OrKeyword_1_0 extends KeywordToken  {
	
	public SigExpr_OrKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSigExprAccess().getOrKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group_1(parent, this, 0, inst);
			case 1: return new SigExpr_AndExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// andExpr+=SigExprAND
protected class SigExpr_AndExprAssignment_1_1 extends AssignmentToken  {
	
	public SigExpr_AndExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprAccess().getAndExprAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprAND_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("andExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("andExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprANDRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SigExpr_OrKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SigExpr ****************/


/************ begin Rule SigExprAND ****************
 *
 * SigExprAND:
 *   unaExpr+=SigExprUnary ("and" unaExpr+=SigExprUnary)*;
 *
 **/

// unaExpr+=SigExprUnary ("and" unaExpr+=SigExprUnary)*
protected class SigExprAND_Group extends GroupToken {
	
	public SigExprAND_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprANDAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprAND_Group_1(parent, this, 0, inst);
			case 1: return new SigExprAND_UnaExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSigExprANDRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// unaExpr+=SigExprUnary
protected class SigExprAND_UnaExprAssignment_0 extends AssignmentToken  {
	
	public SigExprAND_UnaExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprANDAccess().getUnaExprAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unaExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unaExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprUnaryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("and" unaExpr+=SigExprUnary)*
protected class SigExprAND_Group_1 extends GroupToken {
	
	public SigExprAND_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprANDAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprAND_UnaExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "and"
protected class SigExprAND_AndKeyword_1_0 extends KeywordToken  {
	
	public SigExprAND_AndKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSigExprANDAccess().getAndKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprAND_Group_1(parent, this, 0, inst);
			case 1: return new SigExprAND_UnaExprAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unaExpr+=SigExprUnary
protected class SigExprAND_UnaExprAssignment_1_1 extends AssignmentToken  {
	
	public SigExprAND_UnaExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprANDAccess().getUnaExprAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unaExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unaExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprUnaryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SigExprAND_AndKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SigExprAND ****************/


/************ begin Rule SigExprUnary ****************
 *
 * SigExprUnary:
 *   expr=EsterelID|"(" sigExpr=SigExpr ")"|"not" sigExpr=SigExprUnary; 
 * 
 * 
 * 	
 * 		     
 * 		   
 * 	
 * // --> B.3.4 Delay Expressions <--
 *
 **/

// expr=EsterelID|"(" sigExpr=SigExpr ")"|"not" sigExpr=SigExprUnary 
// 
// 
// 	
// 		     
// 		   
// 	
// // --> B.3.4 Delay Expressions <--
protected class SigExprUnary_Alternatives extends AlternativesToken {

	public SigExprUnary_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_ExprAssignment_0(parent, this, 0, inst);
			case 1: return new SigExprUnary_Group_1(parent, this, 1, inst);
			case 2: return new SigExprUnary_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSigExprUnaryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expr=EsterelID
protected class SigExprUnary_ExprAssignment_0 extends AssignmentToken  {
	
	public SigExprUnary_ExprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getExprAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSigExprUnaryAccess().getExprEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "(" sigExpr=SigExpr ")"
protected class SigExprUnary_Group_1 extends GroupToken {
	
	public SigExprUnary_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class SigExprUnary_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public SigExprUnary_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// sigExpr=SigExpr
protected class SigExprUnary_SigExprAssignment_1_1 extends AssignmentToken  {
	
	public SigExprUnary_SigExprAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getSigExprAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sigExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sigExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprUnaryAccess().getSigExprSigExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SigExprUnary_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class SigExprUnary_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public SigExprUnary_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_SigExprAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "not" sigExpr=SigExprUnary
protected class SigExprUnary_Group_2 extends GroupToken {
	
	public SigExprUnary_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_SigExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "not"
protected class SigExprUnary_NotKeyword_2_0 extends KeywordToken  {
	
	public SigExprUnary_NotKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getNotKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// sigExpr=SigExprUnary
protected class SigExprUnary_SigExprAssignment_2_1 extends AssignmentToken  {
	
	public SigExprUnary_SigExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSigExprUnaryAccess().getSigExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExprUnary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sigExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sigExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprUnaryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSigExprUnaryAccess().getSigExprSigExprUnaryParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SigExprUnary_NotKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SigExprUnary ****************/


/************ begin Rule DelayExpr ****************
 *
 * DelayExpr:
 *   event=DelayEvent|expr=DataExpr event=DelayEvent; 
 * 	
 * // --> B.3.4 Delay Expressions <--
 *
 **/

// event=DelayEvent|expr=DataExpr event=DelayEvent 
// 	
// // --> B.3.4 Delay Expressions <--
protected class DelayExpr_Alternatives extends AlternativesToken {

	public DelayExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDelayExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_EventAssignment_0(parent, this, 0, inst);
			case 1: return new DelayExpr_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDelayExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// event=DelayEvent
protected class DelayExpr_EventAssignment_0 extends AssignmentToken  {
	
	public DelayExpr_EventAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayExprAccess().getEventAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayEventRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// expr=DataExpr event=DelayEvent
protected class DelayExpr_Group_1 extends GroupToken {
	
	public DelayExpr_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDelayExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayExpr_EventAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=DataExpr
protected class DelayExpr_ExprAssignment_1_0 extends AssignmentToken  {
	
	public DelayExpr_ExprAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayExprAccess().getExprAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDelayExprAccess().getExprDataExprParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// event=DelayEvent
protected class DelayExpr_EventAssignment_1_1 extends AssignmentToken  {
	
	public DelayExpr_EventAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayExprAccess().getEventAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayEventRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DelayExpr_ExprAssignment_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DelayExpr ****************/


/************ begin Rule DelayEvent ****************
 *
 * DelayEvent:
 *   (signal=[Signal|EsterelID]|tick=Tick)|"pre" "(" preSigExpr=SigExpr ")"|"["
 *   blockSigExpr=SigExpr "]"; 
 * 	
 * 
 * 	    
 * 		       
 * 		   
 * 	
 * 
 * 
 * 	
 * // ==============================================
 * // === B.2 Namespaces and Predefined Objects  ===
 * // ==============================================
 * 
 * // ==> Signals <==
 *
 **/

// (signal=[Signal|EsterelID]|tick=Tick)|"pre" "(" preSigExpr=SigExpr ")"|"["
// blockSigExpr=SigExpr "]" 
// 	
// 
// 	    
// 		       
// 		   
// 	
// 
// 
// 	
// // ==============================================
// // === B.2 Namespaces and Predefined Objects  ===
// // ==============================================
// 
// // ==> Signals <==
protected class DelayEvent_Alternatives extends AlternativesToken {

	public DelayEvent_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_Alternatives_0(parent, this, 0, inst);
			case 1: return new DelayEvent_Group_1(parent, this, 1, inst);
			case 2: return new DelayEvent_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDelayEventRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// signal=[Signal|EsterelID]|tick=Tick
protected class DelayEvent_Alternatives_0 extends AlternativesToken {

	public DelayEvent_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_SignalAssignment_0_0(parent, this, 0, inst);
			case 1: return new DelayEvent_TickAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// signal=[Signal|EsterelID]
protected class DelayEvent_SignalAssignment_0_0 extends AssignmentToken  {
	
	public DelayEvent_SignalAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getSignalAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDelayEventAccess().getSignalSignalCrossReference_0_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDelayEventAccess().getSignalSignalCrossReference_0_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// tick=Tick
protected class DelayEvent_TickAssignment_0_1 extends AssignmentToken  {
	
	public DelayEvent_TickAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getTickAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tick",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tick");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDelayEventAccess().getTickTickParserRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// "pre" "(" preSigExpr=SigExpr ")"
protected class DelayEvent_Group_1 extends GroupToken {
	
	public DelayEvent_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "pre"
protected class DelayEvent_PreKeyword_1_0 extends KeywordToken  {
	
	public DelayEvent_PreKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getPreKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class DelayEvent_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public DelayEvent_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_PreKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// preSigExpr=SigExpr
protected class DelayEvent_PreSigExprAssignment_1_2 extends AssignmentToken  {
	
	public DelayEvent_PreSigExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getPreSigExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preSigExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preSigExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDelayEventAccess().getPreSigExprSigExprParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DelayEvent_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class DelayEvent_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public DelayEvent_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_PreSigExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "[" blockSigExpr=SigExpr "]"
protected class DelayEvent_Group_2 extends GroupToken {
	
	public DelayEvent_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_RightSquareBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class DelayEvent_LeftSquareBracketKeyword_2_0 extends KeywordToken  {
	
	public DelayEvent_LeftSquareBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getLeftSquareBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// blockSigExpr=SigExpr
protected class DelayEvent_BlockSigExprAssignment_2_1 extends AssignmentToken  {
	
	public DelayEvent_BlockSigExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getBlockSigExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SigExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("blockSigExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("blockSigExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSigExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDelayEventAccess().getBlockSigExprSigExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DelayEvent_LeftSquareBracketKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class DelayEvent_RightSquareBracketKeyword_2_2 extends KeywordToken  {
	
	public DelayEvent_RightSquareBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelayEventAccess().getRightSquareBracketKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelayEvent_BlockSigExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule DelayEvent ****************/


/************ begin Rule ChannelDescription ****************
 *
 * ChannelDescription:
 *   ":" type=ChannelType|"(" type=ChannelType ")"|":=" dataExpr=DataExpr ":" type=
 *   ChannelType; 
 * 	
 * 
 * 
 * 	
 * // ==============================================
 * // === B.2 Namespaces and Predefined Objects  ===
 * // ==============================================
 * 
 * // ==> Signals <==
 *
 **/

// ":" type=ChannelType|"(" type=ChannelType ")"|":=" dataExpr=DataExpr ":" type=
// ChannelType 
// 	
// 
// 
// 	
// // ==============================================
// // === B.2 Namespaces and Predefined Objects  ===
// // ==============================================
// 
// // ==> Signals <==
protected class ChannelDescription_Alternatives extends AlternativesToken {

	public ChannelDescription_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_Group_0(parent, this, 0, inst);
			case 1: return new ChannelDescription_Group_1(parent, this, 1, inst);
			case 2: return new ChannelDescription_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChannelDescriptionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ":" type=ChannelType
protected class ChannelDescription_Group_0 extends GroupToken {
	
	public ChannelDescription_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_TypeAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class ChannelDescription_ColonKeyword_0_0 extends KeywordToken  {
	
	public ChannelDescription_ColonKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=ChannelType
protected class ChannelDescription_TypeAssignment_0_1 extends AssignmentToken  {
	
	public ChannelDescription_TypeAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getTypeAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ChannelDescription_ColonKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "(" type=ChannelType ")"
protected class ChannelDescription_Group_1 extends GroupToken {
	
	public ChannelDescription_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ChannelDescription_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public ChannelDescription_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=ChannelType
protected class ChannelDescription_TypeAssignment_1_1 extends AssignmentToken  {
	
	public ChannelDescription_TypeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ChannelDescription_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ChannelDescription_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public ChannelDescription_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_TypeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ":=" dataExpr=DataExpr ":" type=ChannelType
protected class ChannelDescription_Group_2 extends GroupToken {
	
	public ChannelDescription_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_TypeAssignment_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class ChannelDescription_ColonEqualsSignKeyword_2_0 extends KeywordToken  {
	
	public ChannelDescription_ColonEqualsSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// dataExpr=DataExpr
protected class ChannelDescription_DataExprAssignment_2_1 extends AssignmentToken  {
	
	public ChannelDescription_DataExprAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getDataExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getChannelDescriptionAccess().getDataExprDataExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ChannelDescription_ColonEqualsSignKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class ChannelDescription_ColonKeyword_2_2 extends KeywordToken  {
	
	public ChannelDescription_ColonKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_DataExprAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ChannelType
protected class ChannelDescription_TypeAssignment_2_3 extends AssignmentToken  {
	
	public ChannelDescription_TypeAssignment_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelDescriptionAccess().getTypeAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_2_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ChannelDescription_ColonKeyword_2_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ChannelDescription ****************/


/************ begin Rule ChannelType ****************
 *
 * ChannelType:
 *   (type=EsterelID|type=BaseType)|"combine" (type=EsterelID|type=BaseType) "with" func
 *   =[Function|EsterelID];
 *
 **/

// (type=EsterelID|type=BaseType)|"combine" (type=EsterelID|type=BaseType) "with" func
// =[Function|EsterelID]
protected class ChannelType_Alternatives extends AlternativesToken {

	public ChannelType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_Alternatives_0(parent, this, 0, inst);
			case 1: return new ChannelType_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChannelTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=EsterelID|type=BaseType
protected class ChannelType_Alternatives_0 extends AlternativesToken {

	public ChannelType_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_TypeAssignment_0_0(parent, this, 0, inst);
			case 1: return new ChannelType_TypeAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class ChannelType_TypeAssignment_0_0 extends AssignmentToken  {
	
	public ChannelType_TypeAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getTypeAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getChannelTypeAccess().getTypeEsterelIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class ChannelType_TypeAssignment_0_1 extends AssignmentToken  {
	
	public ChannelType_TypeAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getTypeAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getChannelTypeAccess().getTypeBaseTypeTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// "combine" (type=EsterelID|type=BaseType) "with" func=[Function|EsterelID]
protected class ChannelType_Group_1 extends GroupToken {
	
	public ChannelType_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_FuncAssignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "combine"
protected class ChannelType_CombineKeyword_1_0 extends KeywordToken  {
	
	public ChannelType_CombineKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getCombineKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class ChannelType_Alternatives_1_1 extends AlternativesToken {

	public ChannelType_Alternatives_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getAlternatives_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_TypeAssignment_1_1_0(parent, this, 0, inst);
			case 1: return new ChannelType_TypeAssignment_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class ChannelType_TypeAssignment_1_1_0 extends AssignmentToken  {
	
	public ChannelType_TypeAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getTypeAssignment_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_CombineKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getChannelTypeAccess().getTypeEsterelIDTerminalRuleCall_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class ChannelType_TypeAssignment_1_1_1 extends AssignmentToken  {
	
	public ChannelType_TypeAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getTypeAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_CombineKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getChannelTypeAccess().getTypeBaseTypeTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}


// "with"
protected class ChannelType_WithKeyword_1_2 extends KeywordToken  {
	
	public ChannelType_WithKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getWithKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_Alternatives_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// func=[Function|EsterelID]
protected class ChannelType_FuncAssignment_1_3 extends AssignmentToken  {
	
	public ChannelType_FuncAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChannelTypeAccess().getFuncAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelType_WithKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("func",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("func");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelTypeAccess().getFuncFunctionCrossReference_1_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getChannelTypeAccess().getFuncFunctionCrossReference_1_3_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule ChannelType ****************/


/************ begin Rule Signal ****************
 *
 * Signal:
 *   name=EsterelID channel=ChannelDescription?;
 *
 **/

// name=EsterelID channel=ChannelDescription?
protected class Signal_Group extends GroupToken {
	
	public Signal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ChannelAssignment_1(parent, this, 0, inst);
			case 1: return new Signal_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID
protected class Signal_NameAssignment_0 extends AssignmentToken  {
	
	public Signal_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getNameEsterelIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// channel=ChannelDescription?
protected class Signal_ChannelAssignment_1 extends AssignmentToken  {
	
	public Signal_ChannelAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getChannelAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ChannelDescription_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("channel",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("channel");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChannelDescriptionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSignalAccess().getChannelChannelDescriptionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Signal_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Signal ****************/



/************ begin Rule Sensor ****************
 *
 * Sensor:
 *   name=EsterelID ":" (type=EsterelID|type=BaseType)|name=EsterelID "(" (type=EsterelID
 *   |type=BaseType) ")";
 *
 **/

// name=EsterelID ":" (type=EsterelID|type=BaseType)|name=EsterelID "(" (type=EsterelID
// |type=BaseType) ")"
protected class Sensor_Alternatives extends AlternativesToken {

	public Sensor_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSensorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_Group_0(parent, this, 0, inst);
			case 1: return new Sensor_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSensorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=EsterelID ":" (type=EsterelID|type=BaseType)
protected class Sensor_Group_0 extends GroupToken {
	
	public Sensor_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=EsterelID
protected class Sensor_NameAssignment_0_0 extends AssignmentToken  {
	
	public Sensor_NameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getNameAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getNameEsterelIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Sensor_ColonKeyword_0_1 extends KeywordToken  {
	
	public Sensor_ColonKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorAccess().getColonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_NameAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class Sensor_Alternatives_0_2 extends AlternativesToken {

	public Sensor_Alternatives_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSensorAccess().getAlternatives_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_TypeAssignment_0_2_0(parent, this, 0, inst);
			case 1: return new Sensor_TypeAssignment_0_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class Sensor_TypeAssignment_0_2_0 extends AssignmentToken  {
	
	public Sensor_TypeAssignment_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getTypeAssignment_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getTypeEsterelIDTerminalRuleCall_0_2_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class Sensor_TypeAssignment_0_2_1 extends AssignmentToken  {
	
	public Sensor_TypeAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getTypeAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_0_2_1_0();
			return obj;
		}
		return null;
	}

}



// name=EsterelID "(" (type=EsterelID|type=BaseType) ")"
protected class Sensor_Group_1 extends GroupToken {
	
	public Sensor_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSensorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=EsterelID
protected class Sensor_NameAssignment_1_0 extends AssignmentToken  {
	
	public Sensor_NameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getNameEsterelIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class Sensor_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public Sensor_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_NameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID|type=BaseType
protected class Sensor_Alternatives_1_2 extends AlternativesToken {

	public Sensor_Alternatives_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSensorAccess().getAlternatives_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_TypeAssignment_1_2_0(parent, this, 0, inst);
			case 1: return new Sensor_TypeAssignment_1_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=EsterelID
protected class Sensor_TypeAssignment_1_2_0 extends AssignmentToken  {
	
	public Sensor_TypeAssignment_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getTypeAssignment_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_LeftParenthesisKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getTypeEsterelIDTerminalRuleCall_1_2_0_0();
			return obj;
		}
		return null;
	}

}

// type=BaseType
protected class Sensor_TypeAssignment_1_2_1 extends AssignmentToken  {
	
	public Sensor_TypeAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSensorAccess().getTypeAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_LeftParenthesisKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class Sensor_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public Sensor_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSensorAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sensor_Alternatives_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Sensor ****************/

}
