/*
* generated by Xtext
*/
grammar InternalEsterel;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.esterel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.esterel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private EsterelGrammarAccess grammarAccess;
 	
    public InternalEsterelParser(TokenStream input, EsterelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected EsterelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ESTEREL_SL_COMMENT", "RULE_ESTEREL_ML_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ESTEREL_SL_COMMENT", "RULE_ESTEREL_ML_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getModulesModuleParserRuleCall_0()); 
	    }
		lv_modules_0_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_0_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getInterfaceModuleInterfaceParserRuleCall_3_0()); 
	    }
		lv_interface_3_0=ruleModuleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_3_0, 
        		"ModuleInterface");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getBodyModuleBodyParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleModuleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"ModuleBody");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getEndEndModuleParserRuleCall_5_0()); 
	    }
		lv_end_5_0=ruleEndModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_5_0, 
        		"EndModule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEndModule
entryRuleEndModule returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndModuleRule()); } 
	 iv_ruleEndModule=ruleEndModule 
	 { $current=$iv_ruleEndModule.current.getText(); }  
	 EOF 
;

// Rule EndModule
ruleEndModule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndModuleAccess().getEndKeyword_0_0()); 
    }

	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndModuleAccess().getModuleKeyword_0_1()); 
    }
)
    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndModuleAccess().getFullStopKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleModuleBody
entryRuleModuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleBodyRule()); }
	 iv_ruleModuleBody=ruleModuleBody 
	 { $current=$iv_ruleModuleBody.current; } 
	 EOF 
;

// Rule ModuleBody
ruleModuleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleBodyAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleBodyRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleModuleInterface
entryRuleModuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleInterfaceRule()); }
	 iv_ruleModuleInterface=ruleModuleInterface 
	 { $current=$iv_ruleModuleInterface.current; } 
	 EOF 
;

// Rule ModuleInterface
ruleModuleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSignalDeclsInterfaceSignalDeclParserRuleCall_0_0()); 
	    }
		lv_intSignalDecls_0_0=ruleInterfaceSignalDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intSignalDecls",
        		lv_intSignalDecls_0_0, 
        		"InterfaceSignalDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntTypeDeclsTypeDeclParserRuleCall_1_0()); 
	    }
		lv_intTypeDecls_1_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intTypeDecls",
        		lv_intTypeDecls_1_0, 
        		"TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSensorDeclsSensorDeclParserRuleCall_2_0()); 
	    }
		lv_intSensorDecls_2_0=ruleSensorDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intSensorDecls",
        		lv_intSensorDecls_2_0, 
        		"SensorDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntConstantDeclsConstantDeclsParserRuleCall_3_0()); 
	    }
		lv_intConstantDecls_3_0=ruleConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intConstantDecls",
        		lv_intConstantDecls_3_0, 
        		"ConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntRelationDeclsRelationDeclParserRuleCall_4_0()); 
	    }
		lv_intRelationDecls_4_0=ruleRelationDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intRelationDecls",
        		lv_intRelationDecls_4_0, 
        		"RelationDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntTaskDeclsTaskDeclParserRuleCall_5_0()); 
	    }
		lv_intTaskDecls_5_0=ruleTaskDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intTaskDecls",
        		lv_intTaskDecls_5_0, 
        		"TaskDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntFunctionDeclsFunctionDeclParserRuleCall_6_0()); 
	    }
		lv_intFunctionDecls_6_0=ruleFunctionDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intFunctionDecls",
        		lv_intFunctionDecls_6_0, 
        		"FunctionDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntProcedureDeclsProcedureDeclParserRuleCall_7_0()); 
	    }
		lv_intProcedureDecls_7_0=ruleProcedureDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleInterfaceRule());
	        }
       		add(
       			$current, 
       			"intProcedureDecls",
        		lv_intProcedureDecls_7_0, 
        		"ProcedureDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))+
;





// Entry rule entryRuleChannelDescription
entryRuleChannelDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelDescriptionRule()); }
	 iv_ruleChannelDescription=ruleChannelDescription 
	 { $current=$iv_ruleChannelDescription.current; } 
	 EOF 
;

// Rule ChannelDescription
ruleChannelDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeEsterelTypeIdentifierParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleEsterelTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDescriptionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"EsterelTypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeEsterelTypeIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleEsterelTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDescriptionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"EsterelTypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2());
    }
)
    |(	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDescriptionAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDescriptionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeEsterelTypeIdentifierParserRuleCall_2_3_0()); 
	    }
		lv_type_8_0=ruleEsterelTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDescriptionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"EsterelTypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleEsterelTypeIdentifier
entryRuleEsterelTypeIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterelTypeIdentifierRule()); }
	 iv_ruleEsterelTypeIdentifier=ruleEsterelTypeIdentifier 
	 { $current=$iv_ruleEsterelTypeIdentifier.current; } 
	 EOF 
;

// Rule EsterelTypeIdentifier
ruleEsterelTypeIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_1_0=RULE_ID
		{
			newLeafNode(lv_typeID_1_0, grammarAccess.getEsterelTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterelTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_1_0, 
        		"ID");
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEsterelTypeIdentifierAccess().getEsterelTypeIdentifierAction_2_0(),
            $current);
    }
)(	otherlv_3='combine' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEsterelTypeIdentifierAccess().getCombineKeyword_2_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_2_1_1_0_0()); 
	    }
		lv_type_4_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_5_0=RULE_ID
		{
			newLeafNode(lv_typeID_5_0, grammarAccess.getEsterelTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterelTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_5_0, 
        		"ID");
	    }

)
))	otherlv_6='with' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEsterelTypeIdentifierAccess().getWithKeyword_2_1_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterelTypeIdentifierRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getEsterelTypeIdentifierAccess().getFuncFunctionCrossReference_2_1_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelTypeIdentifierAccess().getOperatorCombineOperatorEnumRuleCall_2_1_3_1_0()); 
	    }
		lv_operator_8_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_8_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))))
;





// Entry rule entryRuleTypeIdentifier
entryRuleTypeIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdentifierRule()); }
	 iv_ruleTypeIdentifier=ruleTypeIdentifier 
	 { $current=$iv_ruleTypeIdentifier.current; } 
	 EOF 
;

// Rule TypeIdentifier
ruleTypeIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_1_0=RULE_ID
		{
			newLeafNode(lv_typeID_1_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_1_0, 
        		"ID");
	    }

)
)
    |(	otherlv_2='combine' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeIdentifierAccess().getCombineKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeValueTypeEnumRuleCall_2_1_0_0()); 
	    }
		lv_type_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_4_0=RULE_ID
		{
			newLeafNode(lv_typeID_4_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_4_0, 
        		"ID");
	    }

)
))	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeIdentifierAccess().getWithKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getOperatorCombineOperatorEnumRuleCall_2_3_0()); 
	    }
		lv_operator_6_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeIdentifierAccess().getEsterelTypeAction_3_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getTypeIdentifierAccess().getEstTypeTypeCrossReference_3_1_0()); 
	}

)
)))
;





// Entry rule entryRuleLocalSignalDecl
entryRuleLocalSignalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalSignalDeclRule()); }
	 iv_ruleLocalSignalDecl=ruleLocalSignalDecl 
	 { $current=$iv_ruleLocalSignalDecl.current; } 
	 EOF 
;

// Rule LocalSignalDecl
ruleLocalSignalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='signal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getSignalListLocalSignalListParserRuleCall_1_0()); 
	    }
		lv_signalList_1_0=ruleLocalSignalList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		set(
       			$current, 
       			"signalList",
        		lv_signalList_1_0, 
        		"LocalSignalList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalSignalDeclAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalSignalDeclAccess().getEndKeyword_4());
    }
(
(
		lv_optEnd_5_0=	'signal' 
    {
        newLeafNode(lv_optEnd_5_0, grammarAccess.getLocalSignalDeclAccess().getOptEndSignalKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalSignalDeclRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_5_0, "signal");
	    }

)
)?)
;





// Entry rule entryRuleLocalSignalList
entryRuleLocalSignalList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalSignalListRule()); }
	 iv_ruleLocalSignalList=ruleLocalSignalList 
	 { $current=$iv_ruleLocalSignalList.current; } 
	 EOF 
;

// Rule LocalSignalList
ruleLocalSignalList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalISignalParserRuleCall_1_0()); 
	    }
		lv_signal_1_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalListRule());
	        }
       		add(
       			$current, 
       			"signal",
        		lv_signal_1_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalSignalListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalISignalParserRuleCall_2_1_0()); 
	    }
		lv_signal_3_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalListRule());
	        }
       		add(
       			$current, 
       			"signal",
        		lv_signal_3_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSensorDecl
entryRuleSensorDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorDeclRule()); }
	 iv_ruleSensorDecl=ruleSensorDecl 
	 { $current=$iv_ruleSensorDecl.current; } 
	 EOF 
;

// Rule SensorDecl
ruleSensorDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorDeclAccess().getSensorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDeclAccess().getSensorsSensorWithTypeParserRuleCall_1_0()); 
	    }
		lv_sensors_1_0=ruleSensorWithType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDeclRule());
	        }
       		add(
       			$current, 
       			"sensors",
        		lv_sensors_1_0, 
        		"SensorWithType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSensorDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDeclAccess().getSensorsSensorWithTypeParserRuleCall_2_1_0()); 
	    }
		lv_sensors_3_0=ruleSensorWithType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDeclRule());
	        }
       		add(
       			$current, 
       			"sensors",
        		lv_sensors_3_0, 
        		"SensorWithType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleSensorWithType
entryRuleSensorWithType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorWithTypeRule()); }
	 iv_ruleSensorWithType=ruleSensorWithType 
	 { $current=$iv_ruleSensorWithType.current; } 
	 EOF 
;

// Rule SensorWithType
ruleSensorWithType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getSensorSensorParserRuleCall_0_0_0()); 
	    }
		lv_sensor_0_0=ruleSensor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"sensor",
        		lv_sensor_0_0, 
        		"Sensor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSensorWithTypeAccess().getColonKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getTypeTypeIdentifierParserRuleCall_0_1_1_0()); 
	    }
		lv_type_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getSensorSensorParserRuleCall_1_0_0()); 
	    }
		lv_sensor_3_0=ruleSensor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"sensor",
        		lv_sensor_3_0, 
        		"Sensor");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorWithTypeAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getTypeTypeIdentifierParserRuleCall_1_2_0()); 
	    }
		lv_type_5_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorWithTypeAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	 iv_ruleSensor=ruleSensor 
	 { $current=$iv_ruleSensor.current; } 
	 EOF 
;

// Rule Sensor
ruleSensor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleRelationDecl
entryRuleRelationDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationDeclRule()); }
	 iv_ruleRelationDecl=ruleRelationDecl 
	 { $current=$iv_ruleRelationDecl.current; } 
	 EOF 
;

// Rule RelationDecl
ruleRelationDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRelationDeclAccess().getRelationAction_0(),
            $current);
    }
)	otherlv_1='relation' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRelationDeclAccess().getRelationKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationDeclAccess().getRelationsRelationTypeParserRuleCall_2_0()); 
	    }
		lv_relations_2_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationDeclRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_2_0, 
        		"RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelationDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationDeclAccess().getRelationsRelationTypeParserRuleCall_3_1_0()); 
	    }
		lv_relations_4_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationDeclRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_4_0, 
        		"RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRelationDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleRelationType
entryRuleRelationType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationTypeRule()); }
	 iv_ruleRelationType=ruleRelationType 
	 { $current=$iv_ruleRelationType.current; } 
	 EOF 
;

// Rule RelationType
ruleRelationType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationTypeAccess().getRelationImplicationParserRuleCall_0()); 
    }
    this_RelationImplication_0=ruleRelationImplication
    { 
        $current = $this_RelationImplication_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationTypeAccess().getRelationIncompatibilityParserRuleCall_1()); 
    }
    this_RelationIncompatibility_1=ruleRelationIncompatibility
    { 
        $current = $this_RelationIncompatibility_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelationImplication
entryRuleRelationImplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationImplicationRule()); }
	 iv_ruleRelationImplication=ruleRelationImplication 
	 { $current=$iv_ruleRelationImplication.current; } 
	 EOF 
;

// Rule RelationImplication
ruleRelationImplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationImplicationAccess().getFirstISignalCrossReference_0_0()); 
	}

)
)(
(
		lv_type_1_0=	'=>' 
    {
        newLeafNode(lv_type_1_0, grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_0, "=>");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRelationImplicationAccess().getSecondISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleRelationIncompatibility
entryRuleRelationIncompatibility returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationIncompatibilityRule()); }
	 iv_ruleRelationIncompatibility=ruleRelationIncompatibility 
	 { $current=$iv_ruleRelationIncompatibility.current; } 
	 EOF 
;

// Rule RelationIncompatibility
ruleRelationIncompatibility returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_0_0()); 
	}

)
)(
(
		lv_type_1_0=	'#' 
    {
        newLeafNode(lv_type_1_0, grammarAccess.getRelationIncompatibilityAccess().getTypeNumberSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_0, "#");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_2_0()); 
	}

)
)(	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelationIncompatibilityAccess().getNumberSignKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_3_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypesTypeParserRuleCall_1_0()); 
	    }
		lv_types_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypesTypeParserRuleCall_2_1_0()); 
	    }
		lv_types_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConstantDecls
entryRuleConstantDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclsRule()); }
	 iv_ruleConstantDecls=ruleConstantDecls 
	 { $current=$iv_ruleConstantDecls.current; } 
	 EOF 
;

// Rule ConstantDecls
ruleConstantDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclsAccess().getConstantKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclsAccess().getConstantsOneTypeConstantDeclsParserRuleCall_1_0()); 
	    }
		lv_constants_1_0=ruleOneTypeConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_1_0, 
        		"OneTypeConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclsAccess().getConstantsOneTypeConstantDeclsParserRuleCall_2_1_0()); 
	    }
		lv_constants_3_0=ruleOneTypeConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_3_0, 
        		"OneTypeConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDeclsAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleOneTypeConstantDecls
entryRuleOneTypeConstantDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOneTypeConstantDeclsRule()); }
	 iv_ruleOneTypeConstantDecls=ruleOneTypeConstantDecls 
	 { $current=$iv_ruleOneTypeConstantDecls.current; } 
	 EOF 
;

// Rule OneTypeConstantDecls
ruleOneTypeConstantDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getConstantsConstantWithValueParserRuleCall_0_0()); 
	    }
		lv_constants_0_0=ruleConstantWithValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_0_0, 
        		"ConstantWithValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOneTypeConstantDeclsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getConstantsConstantWithValueParserRuleCall_1_1_0()); 
	    }
		lv_constants_2_0=ruleConstantWithValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_2_0, 
        		"ConstantWithValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOneTypeConstantDeclsAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getTypeTypeIdentifierParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantWithValue
entryRuleConstantWithValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantWithValueRule()); }
	 iv_ruleConstantWithValue=ruleConstantWithValue 
	 { $current=$iv_ruleConstantWithValue.current; } 
	 EOF 
;

// Rule ConstantWithValue
ruleConstantWithValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantWithValueAccess().getConstantConstantParserRuleCall_0_0()); 
	    }
		lv_constant_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantWithValueRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantWithValueAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantWithValueAccess().getValueConstantAtomParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleConstantAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantWithValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ConstantAtom");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantAccess().getConstantAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConstantAtom
entryRuleConstantAtom returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantAtomRule()); } 
	 iv_ruleConstantAtom=ruleConstantAtom 
	 { $current=$iv_ruleConstantAtom.current.getText(); }  
	 EOF 
;

// Rule ConstantAtom
ruleConstantAtom returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getConstantAtomAccess().getINTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAtomAccess().getConstantLiteralParserRuleCall_1()); 
    }
    this_ConstantLiteral_1=ruleConstantLiteral    {
		$current.merge(this_ConstantLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConstantLiteral
entryRuleConstantLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantLiteralRule()); } 
	 iv_ruleConstantLiteral=ruleConstantLiteral 
	 { $current=$iv_ruleConstantLiteral.current.getText(); }  
	 EOF 
;

// Rule ConstantLiteral
ruleConstantLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_FLOAT_0=RULE_FLOAT    {
		$current.merge(this_FLOAT_0);
    }

    { 
    newLeafNode(this_FLOAT_0, grammarAccess.getConstantLiteralAccess().getFLOATTerminalRuleCall_0()); 
    }

    |    this_BOOLEAN_1=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_1);
    }

    { 
    newLeafNode(this_BOOLEAN_1, grammarAccess.getConstantLiteralAccess().getBOOLEANTerminalRuleCall_1()); 
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getConstantLiteralAccess().getIDTerminalRuleCall_2()); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getConstantLiteralAccess().getSTRINGTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	 iv_ruleFunctionDecl=ruleFunctionDecl 
	 { $current=$iv_ruleFunctionDecl.current; } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionsFunctionParserRuleCall_1_0()); 
	    }
		lv_functions_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_1_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionsFunctionParserRuleCall_2_1_0()); 
	    }
		lv_functions_3_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_3_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getIdListTypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_idList_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"idList",
        		lv_idList_2_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getIdListTypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_idList_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"idList",
        		lv_idList_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getTypeTypeIdentifierParserRuleCall_5_0()); 
	    }
		lv_type_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedureDecl
entryRuleProcedureDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureDeclRule()); }
	 iv_ruleProcedureDecl=ruleProcedureDecl 
	 { $current=$iv_ruleProcedureDecl.current; } 
	 EOF 
;

// Rule ProcedureDecl
ruleProcedureDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureDeclAccess().getProcedureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclAccess().getProceduresProcedureParserRuleCall_1_0()); 
	    }
		lv_procedures_1_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_1_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcedureDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclAccess().getProceduresProcedureParserRuleCall_2_1_0()); 
	    }
		lv_procedures_3_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_3_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getIdList1TypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_idList1_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"idList1",
        		lv_idList1_2_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getIdList1TypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_idList1_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"idList1",
        		lv_idList1_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getIdList2TypeIdentifierParserRuleCall_5_0_0()); 
	    }
		lv_idList2_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"idList2",
        		lv_idList2_7_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getIdList2TypeIdentifierParserRuleCall_5_1_1_0()); 
	    }
		lv_idList2_9_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"idList2",
        		lv_idList2_9_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleTaskDecl
entryRuleTaskDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskDeclRule()); }
	 iv_ruleTaskDecl=ruleTaskDecl 
	 { $current=$iv_ruleTaskDecl.current; } 
	 EOF 
;

// Rule TaskDecl
ruleTaskDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='task' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskDeclAccess().getTaskKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskDeclAccess().getTasksTaskParserRuleCall_1_0()); 
	    }
		lv_tasks_1_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskDeclRule());
	        }
       		add(
       			$current, 
       			"tasks",
        		lv_tasks_1_0, 
        		"Task");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTaskDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskDeclAccess().getTasksTaskParserRuleCall_2_1_0()); 
	    }
		lv_tasks_3_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskDeclRule());
	        }
       		add(
       			$current, 
       			"tasks",
        		lv_tasks_3_0, 
        		"Task");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTaskDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getIdList1TypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_idList1_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"idList1",
        		lv_idList1_2_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getIdList1TypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_idList1_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"idList1",
        		lv_idList1_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTaskAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getIdList2TypeIdentifierParserRuleCall_5_0_0()); 
	    }
		lv_idList2_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"idList2",
        		lv_idList2_7_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getIdList2TypeIdentifierParserRuleCall_5_1_1_0()); 
	    }
		lv_idList2_9_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"idList2",
        		lv_idList2_9_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getRightParenthesisKeyword_6());
    }
)
;









// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSequenceParserRuleCall_0()); 
    }
    this_Sequence_0=ruleSequence
    { 
        $current = $this_Sequence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getStatementAccess().getParallelListAction_1_0(),
            $current);
    }
)(	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getVerticalLineVerticalLineKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getListSequenceParserRuleCall_1_1_1_0()); 
	    }
		lv_list_3_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_3_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAtomicStatement
entryRuleAtomicStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicStatementRule()); }
	 iv_ruleAtomicStatement=ruleAtomicStatement 
	 { $current=$iv_ruleAtomicStatement.current; } 
	 EOF 
;

// Rule AtomicStatement
ruleAtomicStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getAbortParserRuleCall_0()); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getAwaitParserRuleCall_2()); 
    }
    this_Await_2=ruleAwait
    { 
        $current = $this_Await_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getBlockParserRuleCall_3()); 
    }
    this_Block_3=ruleBlock
    { 
        $current = $this_Block_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getProcCallParserRuleCall_4()); 
    }
    this_ProcCall_4=ruleProcCall
    { 
        $current = $this_ProcCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getDoParserRuleCall_5()); 
    }
    this_Do_5=ruleDo
    { 
        $current = $this_Do_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getEmitParserRuleCall_6()); 
    }
    this_Emit_6=ruleEmit
    { 
        $current = $this_Emit_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getEveryDoParserRuleCall_7()); 
    }
    this_EveryDo_7=ruleEveryDo
    { 
        $current = $this_EveryDo_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getExitParserRuleCall_8()); 
    }
    this_Exit_8=ruleExit
    { 
        $current = $this_Exit_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getExecParserRuleCall_9()); 
    }
    this_Exec_9=ruleExec
    { 
        $current = $this_Exec_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getHaltParserRuleCall_10()); 
    }
    this_Halt_10=ruleHalt
    { 
        $current = $this_Halt_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getIfTestParserRuleCall_11()); 
    }
    this_IfTest_11=ruleIfTest
    { 
        $current = $this_IfTest_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalSignalDeclParserRuleCall_12()); 
    }
    this_LocalSignalDecl_12=ruleLocalSignalDecl
    { 
        $current = $this_LocalSignalDecl_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLoopParserRuleCall_13()); 
    }
    this_Loop_13=ruleLoop
    { 
        $current = $this_Loop_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getNothingParserRuleCall_14()); 
    }
    this_Nothing_14=ruleNothing
    { 
        $current = $this_Nothing_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getPauseParserRuleCall_15()); 
    }
    this_Pause_15=rulePause
    { 
        $current = $this_Pause_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getPresentParserRuleCall_16()); 
    }
    this_Present_16=rulePresent
    { 
        $current = $this_Present_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getRepeatParserRuleCall_17()); 
    }
    this_Repeat_17=ruleRepeat
    { 
        $current = $this_Repeat_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getRunParserRuleCall_18()); 
    }
    this_Run_18=ruleRun
    { 
        $current = $this_Run_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getSuspendParserRuleCall_19()); 
    }
    this_Suspend_19=ruleSuspend
    { 
        $current = $this_Suspend_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getSustainParserRuleCall_20()); 
    }
    this_Sustain_20=ruleSustain
    { 
        $current = $this_Sustain_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getTrapParserRuleCall_21()); 
    }
    this_Trap_21=ruleTrap
    { 
        $current = $this_Trap_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalVariableParserRuleCall_22()); 
    }
    this_LocalVariable_22=ruleLocalVariable
    { 
        $current = $this_LocalVariable_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getWeakAbortParserRuleCall_23()); 
    }
    this_WeakAbort_23=ruleWeakAbort
    { 
        $current = $this_WeakAbort_23.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequenceAccess().getAtomicStatementParserRuleCall_0()); 
    }
    this_AtomicStatement_0=ruleAtomicStatement
    { 
        $current = $this_AtomicStatement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSequenceAccess().getSequenceListAction_1_0(),
            $current);
    }
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceAccess().getSemicolonKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getListAtomicStatementParserRuleCall_1_1_1_0()); 
	    }
		lv_list_3_0=ruleAtomicStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_3_0, 
        		"AtomicStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getVarIVariableCrossReference_0_0()); 
	}

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortRule()); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='abort' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbortAccess().getAbortKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='when' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbortAccess().getWhenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getBodyAbortBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleAbortBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"AbortBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbortBody
entryRuleAbortBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortBodyRule()); }
	 iv_ruleAbortBody=ruleAbortBody 
	 { $current=$iv_ruleAbortBody.current; } 
	 EOF 
;

// Rule AbortBody
ruleAbortBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbortBodyAccess().getAbortInstanceParserRuleCall_0()); 
    }
    this_AbortInstance_0=ruleAbortInstance
    { 
        $current = $this_AbortInstance_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbortBodyAccess().getAbortCaseParserRuleCall_1()); 
    }
    this_AbortCase_1=ruleAbortCase
    { 
        $current = $this_AbortCase_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAbortInstance
entryRuleAbortInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortInstanceRule()); }
	 iv_ruleAbortInstance=ruleAbortInstance 
	 { $current=$iv_ruleAbortInstance.current; } 
	 EOF 
;

// Rule AbortInstance
ruleAbortInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0()); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortInstanceRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_0_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbortInstanceAccess().getDoKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortInstanceRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbortInstanceAccess().getEndKeyword_1_2());
    }
(
(
		lv_optEnd_4_0=	'abort' 
    {
        newLeafNode(lv_optEnd_4_0, grammarAccess.getAbortInstanceAccess().getOptEndAbortKeyword_1_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbortInstanceRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_4_0, "abort");
	    }

)
)?)?)
;





// Entry rule entryRuleAbortCase
entryRuleAbortCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortCaseRule()); }
	 iv_ruleAbortCase=ruleAbortCase 
	 { $current=$iv_ruleAbortCase.current; } 
	 EOF 
;

// Rule AbortCase
ruleAbortCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0()); 
	    }
		lv_cases_0_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_0_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0()); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_1_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbortCaseAccess().getEndKeyword_2());
    }
(
(
		lv_optEnd_3_0=	'abort' 
    {
        newLeafNode(lv_optEnd_3_0, grammarAccess.getAbortCaseAccess().getOptEndAbortKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbortCaseRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_3_0, "abort");
	    }

)
)?)
;





// Entry rule entryRuleAbortCaseSingle
entryRuleAbortCaseSingle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortCaseSingleRule()); }
	 iv_ruleAbortCaseSingle=ruleAbortCaseSingle 
	 { $current=$iv_ruleAbortCaseSingle.current; } 
	 EOF 
;

// Rule AbortCaseSingle
ruleAbortCaseSingle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbortCaseSingleAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortCaseSingleAccess().getDelayDelayExprParserRuleCall_1_0()); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortCaseSingleRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_1_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbortCaseSingleAccess().getDoKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortCaseSingleAccess().getStatementStatementParserRuleCall_2_1_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortCaseSingleRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWeakAbort
entryRuleWeakAbort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortRule()); }
	 iv_ruleWeakAbort=ruleWeakAbort 
	 { $current=$iv_ruleWeakAbort.current; } 
	 EOF 
;

// Rule WeakAbort
ruleWeakAbort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWeakAbortAccess().getWeakAbortAction_0(),
            $current);
    }
)	otherlv_1='weak' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWeakAbortAccess().getWeakKeyword_1());
    }
	otherlv_2='abort' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWeakAbortAccess().getAbortKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='when' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWeakAbortAccess().getWhenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortAccess().getBodyWeakAbortBodyParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleWeakAbortBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"WeakAbortBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWeakAbortBody
entryRuleWeakAbortBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortBodyRule()); }
	 iv_ruleWeakAbortBody=ruleWeakAbortBody 
	 { $current=$iv_ruleWeakAbortBody.current; } 
	 EOF 
;

// Rule WeakAbortBody
ruleWeakAbortBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortInstanceParserRuleCall_0()); 
    }
    this_WeakAbortInstance_0=ruleWeakAbortInstance
    { 
        $current = $this_WeakAbortInstance_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortCaseParserRuleCall_1()); 
    }
    this_WeakAbortCase_1=ruleWeakAbortCase
    { 
        $current = $this_WeakAbortCase_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWeakAbortEnd
entryRuleWeakAbortEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortEndRule()); }
	 iv_ruleWeakAbortEnd=ruleWeakAbortEnd 
	 { $current=$iv_ruleWeakAbortEnd.current; } 
	 EOF 
;

// Rule WeakAbortEnd
ruleWeakAbortEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWeakAbortEndAccess().getWeakAbortEndAction_0(),
            $current);
    }
)	otherlv_1='end' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWeakAbortEndAccess().getEndKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortEndAccess().getOptEndWeakAbortEndAltParserRuleCall_2_0()); 
	    }
		lv_optEnd_2_0=ruleWeakAbortEndAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortEndRule());
	        }
       		set(
       			$current, 
       			"optEnd",
        		lv_optEnd_2_0, 
        		"WeakAbortEndAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleWeakAbortEndAlt
entryRuleWeakAbortEndAlt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortEndAltRule()); }
	 iv_ruleWeakAbortEndAlt=ruleWeakAbortEndAlt 
	 { $current=$iv_ruleWeakAbortEndAlt.current; } 
	 EOF 
;

// Rule WeakAbortEndAlt
ruleWeakAbortEndAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_end_0_0=	'weak' 
    {
        newLeafNode(lv_end_0_0, grammarAccess.getWeakAbortEndAltAccess().getEndWeakKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWeakAbortEndAltRule());
	        }
       		setWithLastConsumed($current, "end", lv_end_0_0, "weak");
	    }

)
)?(
(
		lv_endA_1_0=	'abort' 
    {
        newLeafNode(lv_endA_1_0, grammarAccess.getWeakAbortEndAltAccess().getEndAAbortKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWeakAbortEndAltRule());
	        }
       		setWithLastConsumed($current, "endA", lv_endA_1_0, "abort");
	    }

)
))
;





// Entry rule entryRuleWeakAbortInstance
entryRuleWeakAbortInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortInstanceRule()); }
	 iv_ruleWeakAbortInstance=ruleWeakAbortInstance 
	 { $current=$iv_ruleWeakAbortInstance.current; } 
	 EOF 
;

// Rule WeakAbortInstance
ruleWeakAbortInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWeakAbortInstanceAccess().getWeakAbortInstanceAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getDelayDelayExprParserRuleCall_1_0()); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortInstanceRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_1_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWeakAbortInstanceAccess().getDoKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getStatementStatementParserRuleCall_2_1_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortInstanceRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getEndWeakAbortEndParserRuleCall_2_2_0()); 
	    }
		lv_end_4_0=ruleWeakAbortEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortInstanceRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"WeakAbortEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWeakAbortCase
entryRuleWeakAbortCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakAbortCaseRule()); }
	 iv_ruleWeakAbortCase=ruleWeakAbortCase 
	 { $current=$iv_ruleWeakAbortCase.current; } 
	 EOF 
;

// Rule WeakAbortCase
ruleWeakAbortCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWeakAbortCaseAccess().getWeakAbortCaseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0()); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_1_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_2_0()); 
	    }
		lv_cases_2_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_2_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getWeakAbortCaseAccess().getEndWeakAbortEndParserRuleCall_3_0()); 
	    }
		lv_end_3_0=ruleWeakAbortEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeakAbortCaseRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"WeakAbortEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitRule()); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='await' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAwaitAccess().getAwaitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getBodyAwaitBodyParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleAwaitBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"AwaitBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAwaitBody
entryRuleAwaitBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitBodyRule()); }
	 iv_ruleAwaitBody=ruleAwaitBody 
	 { $current=$iv_ruleAwaitBody.current; } 
	 EOF 
;

// Rule AwaitBody
ruleAwaitBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitInstanceParserRuleCall_0()); 
    }
    this_AwaitInstance_0=ruleAwaitInstance
    { 
        $current = $this_AwaitInstance_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitCaseParserRuleCall_1()); 
    }
    this_AwaitCase_1=ruleAwaitCase
    { 
        $current = $this_AwaitCase_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAwaitInstance
entryRuleAwaitInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitInstanceRule()); }
	 iv_ruleAwaitInstance=ruleAwaitInstance 
	 { $current=$iv_ruleAwaitInstance.current; } 
	 EOF 
;

// Rule AwaitInstance
ruleAwaitInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitInstanceAccess().getDelayDelayExprParserRuleCall_0_0()); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitInstanceRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_0_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAwaitInstanceAccess().getDoKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitInstanceAccess().getStatementStatementParserRuleCall_1_1_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitInstanceRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitInstanceAccess().getEndAwaitEndParserRuleCall_1_2_0()); 
	    }
		lv_end_3_0=ruleAwaitEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitInstanceRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"AwaitEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAwaitCase
entryRuleAwaitCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitCaseRule()); }
	 iv_ruleAwaitCase=ruleAwaitCase 
	 { $current=$iv_ruleAwaitCase.current; } 
	 EOF 
;

// Rule AwaitCase
ruleAwaitCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0()); 
	    }
		lv_cases_0_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_0_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0()); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitCaseRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_1_0, 
        		"AbortCaseSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitCaseAccess().getEndAwaitEndParserRuleCall_2_0()); 
	    }
		lv_end_2_0=ruleAwaitEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitCaseRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_2_0, 
        		"AwaitEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAwaitEnd
entryRuleAwaitEnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitEndRule()); } 
	 iv_ruleAwaitEnd=ruleAwaitEnd 
	 { $current=$iv_ruleAwaitEnd.current.getText(); }  
	 EOF 
;

// Rule AwaitEnd
ruleAwaitEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAwaitEndAccess().getEndKeyword_0()); 
    }
(
	kw='await' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAwaitEndAccess().getAwaitKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleProcCall
entryRuleProcCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcCallRule()); }
	 iv_ruleProcCall=ruleProcCall 
	 { $current=$iv_ruleProcCall.current; } 
	 EOF 
;

// Rule ProcCall
ruleProcCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcCallAccess().getCallKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getProcCallAccess().getProcProcedureCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getProcCallAccess().getVarListIVariableCrossReference_3_0_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getProcCallAccess().getVarListIVariableCrossReference_3_1_1_0()); 
	}

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcCallAccess().getKexpressionsExpressionParserRuleCall_6_0_0()); 
	    }
		lv_kexpressions_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcCallRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProcCallAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcCallAccess().getKexpressionsExpressionParserRuleCall_6_1_1_0()); 
	    }
		lv_kexpressions_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcCallRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleDo
entryRuleDo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoRule()); }
	 iv_ruleDo=ruleDo 
	 { $current=$iv_ruleDo.current; } 
	 EOF 
;

// Rule Do
ruleDo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getEndDoUptoParserRuleCall_2_0_0()); 
	    }
		lv_end_2_0=ruleDoUpto		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_2_0, 
        		"DoUpto");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getEndDoWatchingParserRuleCall_2_1_0()); 
	    }
		lv_end_3_0=ruleDoWatching		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"DoWatching");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDoUpto
entryRuleDoUpto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoUptoRule()); }
	 iv_ruleDoUpto=ruleDoUpto 
	 { $current=$iv_ruleDoUpto.current; } 
	 EOF 
;

// Rule DoUpto
ruleDoUpto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='upto' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoUptoAccess().getUptoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoUptoAccess().getExprDelayExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoUptoRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWatching
entryRuleDoWatching returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWatchingRule()); }
	 iv_ruleDoWatching=ruleDoWatching 
	 { $current=$iv_ruleDoWatching.current; } 
	 EOF 
;

// Rule DoWatching
ruleDoWatching returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='watching' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWatchingAccess().getWatchingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWatchingAccess().getDelayDelayExprParserRuleCall_1_0()); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWatchingRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_1_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWatchingAccess().getEndDoWatchingEndParserRuleCall_2_0()); 
	    }
		lv_end_2_0=ruleDoWatchingEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWatchingRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_2_0, 
        		"DoWatchingEnd");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDoWatchingEnd
entryRuleDoWatchingEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWatchingEndRule()); }
	 iv_ruleDoWatchingEnd=ruleDoWatchingEnd 
	 { $current=$iv_ruleDoWatchingEnd.current; } 
	 EOF 
;

// Rule DoWatchingEnd
ruleDoWatchingEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='timeout' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWatchingEndAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWatchingEndRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWatchingEndAccess().getEndKeyword_2());
    }
(
(
		lv_optEnd_3_0=	'timeout' 
    {
        newLeafNode(lv_optEnd_3_0, grammarAccess.getDoWatchingEndAccess().getOptEndTimeoutKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoWatchingEndRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_3_0, "timeout");
	    }

)
)?)
;





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmitRule()); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='emit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEmitAccess().getEmitKeyword_0());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmitRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEmitAccess().getSignalISignalCrossReference_1_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEmitAccess().getTickTickParserRuleCall_1_1_0()); 
	    }
		lv_tick_2_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmitRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_2_0, 
        		"Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmitAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmitAccess().getExprExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmitRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEmitAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleEveryDo
entryRuleEveryDo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEveryDoRule()); }
	 iv_ruleEveryDo=ruleEveryDo 
	 { $current=$iv_ruleEveryDo.current; } 
	 EOF 
;

// Rule EveryDo
ruleEveryDo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='every' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEveryDoAccess().getEveryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getDelayDelayExprParserRuleCall_1_0()); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_1_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEveryDoAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEveryDoAccess().getEndKeyword_4());
    }
(
(
		lv_optEnd_5_0=	'every' 
    {
        newLeafNode(lv_optEnd_5_0, grammarAccess.getEveryDoAccess().getOptEndEveryKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEveryDoRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_5_0, "every");
	    }

)
)?)
;





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitRule()); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExitAccess().getExitKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getExitAccess().getTrapTrapDeclCrossReference_1_0()); 
	}

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExitAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExitAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleHalt
entryRuleHalt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHaltRule()); }
	 iv_ruleHalt=ruleHalt 
	 { $current=$iv_ruleHalt.current; } 
	 EOF 
;

// Rule Halt
ruleHalt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getHaltAccess().getHaltAction_0(),
            $current);
    }
)	otherlv_1='halt' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHaltAccess().getHaltKeyword_1());
    }
)
;





// Entry rule entryRuleIfTest
entryRuleIfTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfTestRule()); }
	 iv_ruleIfTest=ruleIfTest 
	 { $current=$iv_ruleIfTest.current; } 
	 EOF 
;

// Rule IfTest
ruleIfTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfTestAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getThenPartThenPartParserRuleCall_2_0()); 
	    }
		lv_thenPart_2_0=ruleThenPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		set(
       			$current, 
       			"thenPart",
        		lv_thenPart_2_0, 
        		"ThenPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElsifElsIfParserRuleCall_3_0()); 
	    }
		lv_elsif_3_0=ruleElsIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elsif",
        		lv_elsif_3_0, 
        		"ElsIf");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElsePartElsePartParserRuleCall_4_0()); 
	    }
		lv_elsePart_4_0=ruleElsePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		set(
       			$current, 
       			"elsePart",
        		lv_elsePart_4_0, 
        		"ElsePart");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfTestAccess().getEndKeyword_5());
    }
(
(
		lv_optEnd_6_0=	'if' 
    {
        newLeafNode(lv_optEnd_6_0, grammarAccess.getIfTestAccess().getOptEndIfKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfTestRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_6_0, "if");
	    }

)
)?)
;





// Entry rule entryRuleElsIf
entryRuleElsIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElsIfRule()); }
	 iv_ruleElsIf=ruleElsIf 
	 { $current=$iv_ruleElsIf.current; } 
	 EOF 
;

// Rule ElsIf
ruleElsIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elsif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElsIfAccess().getElsifKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getThenPartThenPartParserRuleCall_2_0()); 
	    }
		lv_thenPart_2_0=ruleThenPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		set(
       			$current, 
       			"thenPart",
        		lv_thenPart_2_0, 
        		"ThenPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleThenPart
entryRuleThenPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThenPartRule()); }
	 iv_ruleThenPart=ruleThenPart 
	 { $current=$iv_ruleThenPart.current; } 
	 EOF 
;

// Rule ThenPart
ruleThenPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='then' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getThenPartAccess().getThenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThenPartAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThenPartRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElsePart
entryRuleElsePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElsePartRule()); }
	 iv_ruleElsePart=ruleElsePart 
	 { $current=$iv_ruleElsePart.current; } 
	 EOF 
;

// Rule ElsePart
ruleElsePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='else' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElsePartAccess().getElseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElsePartAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsePartRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='loop' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getLoopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getBodyLoopBodyParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleLoopBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"LoopBody");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getEnd1EndLoopParserRuleCall_2_0_0()); 
	    }
		lv_end1_2_0=ruleEndLoop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"end1",
        		lv_end1_2_0, 
        		"EndLoop");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getEndLoopEachParserRuleCall_2_1_0()); 
	    }
		lv_end_3_0=ruleLoopEach		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"LoopEach");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleEndLoop
entryRuleEndLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndLoopRule()); }
	 iv_ruleEndLoop=ruleEndLoop 
	 { $current=$iv_ruleEndLoop.current; } 
	 EOF 
;

// Rule EndLoop
ruleEndLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEndLoopAccess().getEndLoopAction_0(),
            $current);
    }
)	otherlv_1='end' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEndLoopAccess().getEndKeyword_1());
    }
(
(
		lv_endOpt_2_0=	'loop' 
    {
        newLeafNode(lv_endOpt_2_0, grammarAccess.getEndLoopAccess().getEndOptLoopKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEndLoopRule());
	        }
       		setWithLastConsumed($current, "endOpt", lv_endOpt_2_0, "loop");
	    }

)
)?)
;





// Entry rule entryRuleLoopEach
entryRuleLoopEach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopEachRule()); }
	 iv_ruleLoopEach=ruleLoopEach 
	 { $current=$iv_ruleLoopEach.current; } 
	 EOF 
;

// Rule LoopEach
ruleLoopEach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='each' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopEachAccess().getEachKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLoopEachAccess().getLoopDelayParserRuleCall_1()); 
    }
    this_LoopDelay_1=ruleLoopDelay
    { 
        $current = $this_LoopDelay_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLoopDelay
entryRuleLoopDelay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopDelayRule()); }
	 iv_ruleLoopDelay=ruleLoopDelay 
	 { $current=$iv_ruleLoopDelay.current; } 
	 EOF 
;

// Rule LoopDelay
ruleLoopDelay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopDelayAccess().getDelayDelayExprParserRuleCall_0()); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopDelayRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_0_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLoopBody
entryRuleLoopBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopBodyRule()); }
	 iv_ruleLoopBody=ruleLoopBody 
	 { $current=$iv_ruleLoopBody.current; } 
	 EOF 
;

// Rule LoopBody
ruleLoopBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopBodyAccess().getStatementStatementParserRuleCall_0()); 
	    }
		lv_statement_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopBodyRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNothing
entryRuleNothing returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNothingRule()); }
	 iv_ruleNothing=ruleNothing 
	 { $current=$iv_ruleNothing.current; } 
	 EOF 
;

// Rule Nothing
ruleNothing returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='nothing' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNothingAccess().getNothingKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNothingAccess().getNothingAction_1(),
            $current);
    }
))
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPauseRule()); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pause' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPauseAccess().getPauseKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPauseAccess().getPauseAction_1(),
            $current);
    }
))
;





// Entry rule entryRulePresent
entryRulePresent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentRule()); }
	 iv_rulePresent=rulePresent 
	 { $current=$iv_rulePresent.current; } 
	 EOF 
;

// Rule Present
rulePresent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='present' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPresentAccess().getPresentKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getBodyPresentBodyParserRuleCall_1_0()); 
	    }
		lv_body_1_0=rulePresentBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"PresentBody");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getElsePartElsePartParserRuleCall_2_0()); 
	    }
		lv_elsePart_2_0=ruleElsePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		set(
       			$current, 
       			"elsePart",
        		lv_elsePart_2_0, 
        		"ElsePart");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPresentAccess().getEndKeyword_3());
    }
(
(
		lv_optEnd_4_0=	'present' 
    {
        newLeafNode(lv_optEnd_4_0, grammarAccess.getPresentAccess().getOptEndPresentKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPresentRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_4_0, "present");
	    }

)
)?)
;





// Entry rule entryRulePresentBody
entryRulePresentBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentBodyRule()); }
	 iv_rulePresentBody=rulePresentBody 
	 { $current=$iv_rulePresentBody.current; } 
	 EOF 
;

// Rule PresentBody
rulePresentBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPresentBodyAccess().getPresentEventBodyParserRuleCall_0()); 
    }
    this_PresentEventBody_0=rulePresentEventBody
    { 
        $current = $this_PresentEventBody_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPresentBodyAccess().getPresentCaseListParserRuleCall_1()); 
    }
    this_PresentCaseList_1=rulePresentCaseList
    { 
        $current = $this_PresentCaseList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePresentEventBody
entryRulePresentEventBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentEventBodyRule()); }
	 iv_rulePresentEventBody=rulePresentEventBody 
	 { $current=$iv_rulePresentEventBody.current; } 
	 EOF 
;

// Rule PresentEventBody
rulePresentEventBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentEventBodyAccess().getEventPresentEventParserRuleCall_0_0()); 
	    }
		lv_event_0_0=rulePresentEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentEventBodyRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"PresentEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentEventBodyAccess().getThenPartThenPartParserRuleCall_1_0()); 
	    }
		lv_thenPart_1_0=ruleThenPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentEventBodyRule());
	        }
       		set(
       			$current, 
       			"thenPart",
        		lv_thenPart_1_0, 
        		"ThenPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePresentCaseList
entryRulePresentCaseList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentCaseListRule()); }
	 iv_rulePresentCaseList=rulePresentCaseList 
	 { $current=$iv_rulePresentCaseList.current; } 
	 EOF 
;

// Rule PresentCaseList
rulePresentCaseList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseListAccess().getCasesPresentCaseParserRuleCall_0_0()); 
	    }
		lv_cases_0_0=rulePresentCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseListRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_0_0, 
        		"PresentCase");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseListAccess().getCasesPresentCaseParserRuleCall_1_0()); 
	    }
		lv_cases_1_0=rulePresentCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseListRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_1_0, 
        		"PresentCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePresentCase
entryRulePresentCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentCaseRule()); }
	 iv_rulePresentCase=rulePresentCase 
	 { $current=$iv_rulePresentCase.current; } 
	 EOF 
;

// Rule PresentCase
rulePresentCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPresentCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getEventPresentEventParserRuleCall_1_0()); 
	    }
		lv_event_1_0=rulePresentEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"PresentEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPresentCaseAccess().getDoKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getStatementStatementParserRuleCall_2_1_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePresentEvent
entryRulePresentEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentEventRule()); }
	 iv_rulePresentEvent=rulePresentEvent 
	 { $current=$iv_rulePresentEvent.current; } 
	 EOF 
;

// Rule PresentEvent
rulePresentEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSignalExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentEventRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_fB_1_0=	'[' 
    {
        newLeafNode(lv_fB_1_0, grammarAccess.getPresentEventAccess().getFBLeftSquareBracketKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPresentEventRule());
	        }
       		setWithLastConsumed($current, "fB", lv_fB_1_0, "[");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSignalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentEventRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_eB_3_0=	']' 
    {
        newLeafNode(lv_eB_3_0, grammarAccess.getPresentEventAccess().getEBRightSquareBracketKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPresentEventRule());
	        }
       		setWithLastConsumed($current, "eB", lv_eB_3_0, "]");
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentEventAccess().getTickTickParserRuleCall_2_0()); 
	    }
		lv_tick_4_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentEventRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_4_0, 
        		"Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	 iv_ruleRepeat=ruleRepeat 
	 { $current=$iv_ruleRepeat.current; } 
	 EOF 
;

// Rule Repeat
ruleRepeat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_positive_0_0=	'positive' 
    {
        newLeafNode(lv_positive_0_0, grammarAccess.getRepeatAccess().getPositivePositiveKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepeatRule());
	        }
       		setWithLastConsumed($current, "positive", true, "positive");
	    }

)
)?	otherlv_1='repeat' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRepeatAccess().getRepeatKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='times' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRepeatAccess().getTimesKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRepeatAccess().getEndKeyword_5());
    }
(
(
		lv_optEnd_6_0=	'repeat' 
    {
        newLeafNode(lv_optEnd_6_0, grammarAccess.getRepeatAccess().getOptEndRepeatKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepeatRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_6_0, "repeat");
	    }

)
)?)
;





// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current; } 
	 EOF 
;

// Rule Run
ruleRun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='run' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRunAccess().getRunKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_0_1_0()); 
	    }
		lv_module_1_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_1_0, 
        		"ModuleRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRunAccess().getLeftSquareBracketKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_0_2_1_0()); 
	    }
		lv_list_3_0=ruleRenamingList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_3_0, 
        		"RenamingList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRunAccess().getRightSquareBracketKeyword_0_2_2());
    }
)?)
    |(	otherlv_5='copymodule' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRunAccess().getCopymoduleKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_1_0()); 
	    }
		lv_module_6_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_6_0, 
        		"ModuleRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_1_2_1_0()); 
	    }
		lv_list_8_0=ruleRenamingList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_8_0, 
        		"RenamingList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_2_2());
    }
)?))
;





// Entry rule entryRuleModuleRenaming
entryRuleModuleRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRenamingRule()); }
	 iv_ruleModuleRenaming=ruleModuleRenaming 
	 { $current=$iv_ruleModuleRenaming.current; } 
	 EOF 
;

// Rule ModuleRenaming
ruleModuleRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0()); 
	}

)
)
    |((
(
		lv_newName_1_0=RULE_ID
		{
			newLeafNode(lv_newName_1_0, grammarAccess.getModuleRenamingAccess().getNewNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"newName",
        		lv_newName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleRenamingAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_1_2_0()); 
	}

)
)))
;





// Entry rule entryRuleRenamingList
entryRuleRenamingList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRenamingListRule()); }
	 iv_ruleRenamingList=ruleRenamingList 
	 { $current=$iv_ruleRenamingList.current; } 
	 EOF 
;

// Rule RenamingList
ruleRenamingList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_0_0()); 
	    }
		lv_list_0_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingListRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRenamingListAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_1_1_0()); 
	    }
		lv_list_2_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingListRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRenaming
entryRuleRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRenamingRule()); }
	 iv_ruleRenaming=ruleRenaming 
	 { $current=$iv_ruleRenaming.current; } 
	 EOF 
;

// Rule Renaming
ruleRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRenamingAccess().getTypeKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTypeRenamingParserRuleCall_0_1_0()); 
	    }
		lv_renamings_1_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_1_0, 
        		"TypeRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRenamingAccess().getCommaKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTypeRenamingParserRuleCall_0_2_1_0()); 
	    }
		lv_renamings_3_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_3_0, 
        		"TypeRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_4='constant' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRenamingAccess().getConstantKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsConstantRenamingParserRuleCall_1_1_0()); 
	    }
		lv_renamings_5_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_5_0, 
        		"ConstantRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRenamingAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsConstantRenamingParserRuleCall_1_2_1_0()); 
	    }
		lv_renamings_7_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_7_0, 
        		"ConstantRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_8='function' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRenamingAccess().getFunctionKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsFunctionRenamingParserRuleCall_2_1_0()); 
	    }
		lv_renamings_9_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_9_0, 
        		"FunctionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRenamingAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsFunctionRenamingParserRuleCall_2_2_1_0()); 
	    }
		lv_renamings_11_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_11_0, 
        		"FunctionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_12='procedure' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRenamingAccess().getProcedureKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsProcedureRenamingParserRuleCall_3_1_0()); 
	    }
		lv_renamings_13_0=ruleProcedureRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_13_0, 
        		"ProcedureRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRenamingAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsProcedureRenamingParserRuleCall_3_2_1_0()); 
	    }
		lv_renamings_15_0=ruleProcedureRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_15_0, 
        		"ProcedureRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_16='task' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRenamingAccess().getTaskKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTaskRenamingParserRuleCall_4_1_0()); 
	    }
		lv_renamings_17_0=ruleTaskRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_17_0, 
        		"TaskRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getRenamingAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTaskRenamingParserRuleCall_4_2_1_0()); 
	    }
		lv_renamings_19_0=ruleTaskRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_19_0, 
        		"TaskRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_20='signal' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRenamingAccess().getSignalKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsSignalRenamingParserRuleCall_5_1_0()); 
	    }
		lv_renamings_21_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_21_0, 
        		"SignalRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_22=',' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getRenamingAccess().getCommaKeyword_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsSignalRenamingParserRuleCall_5_2_1_0()); 
	    }
		lv_renamings_23_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_23_0, 
        		"SignalRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleTypeRenaming
entryRuleTypeRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRenamingRule()); }
	 iv_ruleTypeRenaming=ruleTypeRenaming 
	 { $current=$iv_ruleTypeRenaming.current; } 
	 EOF 
;

// Rule TypeRenaming
ruleTypeRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeRenamingAccess().getNewNameTypeCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeRenamingAccess().getNewTypeValueTypeEnumRuleCall_0_1_0()); 
	    }
		lv_newType_1_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRenamingRule());
	        }
       		set(
       			$current, 
       			"newType",
        		lv_newType_1_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleConstantRenaming
entryRuleConstantRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRenamingRule()); }
	 iv_ruleConstantRenaming=ruleConstantRenaming 
	 { $current=$iv_ruleConstantRenaming.current; } 
	 EOF 
;

// Rule ConstantRenaming
ruleConstantRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantRenamingAccess().getNewNameValuedObjectCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantRenamingAccess().getNewValueConstantAtomParserRuleCall_0_1_0()); 
	    }
		lv_newValue_1_0=ruleConstantAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRenamingRule());
	        }
       		set(
       			$current, 
       			"newValue",
        		lv_newValue_1_0, 
        		"ConstantAtom");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getConstantRenamingAccess().getOldNameValuedObjectCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFunctionRenaming
entryRuleFunctionRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRenamingRule()); }
	 iv_ruleFunctionRenaming=ruleFunctionRenaming 
	 { $current=$iv_ruleFunctionRenaming.current; } 
	 EOF 
;

// Rule FunctionRenaming
ruleFunctionRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFunctionRenamingAccess().getNewNameFunctionCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionRenamingAccess().getNewFuncBuildInFunctionParserRuleCall_0_1_0()); 
	    }
		lv_newFunc_1_0=ruleBuildInFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRenamingRule());
	        }
       		set(
       			$current, 
       			"newFunc",
        		lv_newFunc_1_0, 
        		"BuildInFunction");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleProcedureRenaming
entryRuleProcedureRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRenamingRule()); }
	 iv_ruleProcedureRenaming=ruleProcedureRenaming 
	 { $current=$iv_ruleProcedureRenaming.current; } 
	 EOF 
;

// Rule ProcedureRenaming
ruleProcedureRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getProcedureRenamingAccess().getNewNameProcedureCrossReference_0_0()); 
	}

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRenamingRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getProcedureRenamingAccess().getOldNameProcedureCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleTaskRenaming
entryRuleTaskRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRenamingRule()); }
	 iv_ruleTaskRenaming=ruleTaskRenaming 
	 { $current=$iv_ruleTaskRenaming.current; } 
	 EOF 
;

// Rule TaskRenaming
ruleTaskRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTaskRenamingAccess().getNewNameTaskCrossReference_0_0()); 
	}

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRenamingRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTaskRenamingAccess().getOldNameTaskCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleSignalRenaming
entryRuleSignalRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalRenamingRule()); }
	 iv_ruleSignalRenaming=ruleSignalRenaming 
	 { $current=$iv_ruleSignalRenaming.current; } 
	 EOF 
;

// Rule SignalRenaming
ruleSignalRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalRenamingAccess().getNewNameISignalCrossReference_0_0_0()); 
	}

)
)
    |	otherlv_1='tick' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalRenamingAccess().getTickKeyword_0_1());
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSignalRenamingAccess().getOldNameISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleBuildInFunction
entryRuleBuildInFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuildInFunctionRule()); } 
	 iv_ruleBuildInFunction=ruleBuildInFunction 
	 { $current=$iv_ruleBuildInFunction.current.getText(); }  
	 EOF 
;

// Rule BuildInFunction
ruleBuildInFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getSolidusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getPlusSignKeyword_2()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getHyphenMinusKeyword_3()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getModKeyword_4()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getEqualsSignKeyword_5()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignGreaterThanSignKeyword_6()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getGreaterThanSignKeyword_7()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignKeyword_8()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignEqualsSignKeyword_9()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getGreaterThanSignEqualsSignKeyword_10()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getNotKeyword_11()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getAndKeyword_12()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getOrKeyword_13()); 
    }
)
    ;





// Entry rule entryRuleSuspend
entryRuleSuspend returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuspendRule()); }
	 iv_ruleSuspend=ruleSuspend 
	 { $current=$iv_ruleSuspend.current; } 
	 EOF 
;

// Rule Suspend
ruleSuspend returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='suspend' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuspendAccess().getSuspendKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='when' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuspendAccess().getWhenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getDelayDelayExprParserRuleCall_3_0()); 
	    }
		lv_delay_3_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_3_0, 
        		"DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSustain
entryRuleSustain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSustainRule()); }
	 iv_ruleSustain=ruleSustain 
	 { $current=$iv_ruleSustain.current; } 
	 EOF 
;

// Rule Sustain
ruleSustain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sustain' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSustainAccess().getSustainKeyword_0());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSustainRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSustainAccess().getSignalISignalCrossReference_1_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSustainAccess().getTickTickParserRuleCall_1_1_0()); 
	    }
		lv_tick_2_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSustainRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_2_0, 
        		"Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSustainAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSustainAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSustainRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSustainAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleTrap
entryRuleTrap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapRule()); }
	 iv_ruleTrap=ruleTrap 
	 { $current=$iv_ruleTrap.current; } 
	 EOF 
;

// Rule Trap
ruleTrap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='trap' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTrapAccess().getTrapKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getTrapDeclListTrapDeclListParserRuleCall_1_0()); 
	    }
		lv_trapDeclList_1_0=ruleTrapDeclList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		set(
       			$current, 
       			"trapDeclList",
        		lv_trapDeclList_1_0, 
        		"TrapDeclList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTrapAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getTrapHandlerTrapHandlerParserRuleCall_4_0()); 
	    }
		lv_trapHandler_4_0=ruleTrapHandler		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"trapHandler",
        		lv_trapHandler_4_0, 
        		"TrapHandler");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTrapAccess().getEndKeyword_5());
    }
(
(
		lv_optEnd_6_0=	'trap' 
    {
        newLeafNode(lv_optEnd_6_0, grammarAccess.getTrapAccess().getOptEndTrapKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_6_0, "trap");
	    }

)
)?)
;





// Entry rule entryRuleTrapDeclList
entryRuleTrapDeclList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapDeclListRule()); }
	 iv_ruleTrapDeclList=ruleTrapDeclList 
	 { $current=$iv_ruleTrapDeclList.current; } 
	 EOF 
;

// Rule TrapDeclList
ruleTrapDeclList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclsTrapDeclParserRuleCall_0_0()); 
	    }
		lv_trapDecls_0_0=ruleTrapDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapDeclListRule());
	        }
       		add(
       			$current, 
       			"trapDecls",
        		lv_trapDecls_0_0, 
        		"TrapDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrapDeclListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclsTrapDeclParserRuleCall_1_1_0()); 
	    }
		lv_trapDecls_2_0=ruleTrapDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapDeclListRule());
	        }
       		add(
       			$current, 
       			"trapDecls",
        		lv_trapDecls_2_0, 
        		"TrapDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTrapDecl
entryRuleTrapDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapDeclRule()); }
	 iv_ruleTrapDecl=ruleTrapDecl 
	 { $current=$iv_ruleTrapDecl.current; } 
	 EOF 
;

// Rule TrapDecl
ruleTrapDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapDeclAccess().getTrapDeclAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTrapDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapDeclAccess().getChannelDescrChannelDescriptionParserRuleCall_2_0()); 
	    }
		lv_channelDescr_2_0=ruleChannelDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapDeclRule());
	        }
       		set(
       			$current, 
       			"channelDescr",
        		lv_channelDescr_2_0, 
        		"ChannelDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTrapHandler
entryRuleTrapHandler returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapHandlerRule()); }
	 iv_ruleTrapHandler=ruleTrapHandler 
	 { $current=$iv_ruleTrapHandler.current; } 
	 EOF 
;

// Rule TrapHandler
ruleTrapHandler returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='handle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTrapHandlerAccess().getHandleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getTrapExprTrapExprParserRuleCall_1_0()); 
	    }
		lv_trapExpr_1_0=ruleTrapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		set(
       			$current, 
       			"trapExpr",
        		lv_trapExpr_1_0, 
        		"TrapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTrapHandlerAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	 iv_ruleLocalVariable=ruleLocalVariable 
	 { $current=$iv_ruleLocalVariable.current; } 
	 EOF 
;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getVarInterfaceVariableDeclParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleInterfaceVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"InterfaceVariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVariableAccess().getInKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalVariableAccess().getEndKeyword_3());
    }
(
(
		lv_optEnd_4_0=	'var' 
    {
        newLeafNode(lv_optEnd_4_0, grammarAccess.getLocalVariableAccess().getOptEndVarKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_4_0, "var");
	    }

)
)?)
;





// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	 iv_ruleAtomicExpression=ruleAtomicExpression 
	 { $current=$iv_ruleAtomicExpression.current; } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getFunctionExpressionParserRuleCall_0()); 
    }
    this_FunctionExpression_0=ruleFunctionExpression
    { 
        $current = $this_FunctionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTrapExpressionParserRuleCall_1()); 
    }
    this_TrapExpression_1=ruleTrapExpression
    { 
        $current = $this_TrapExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_2()); 
    }
    this_BooleanValue_2=ruleBooleanValue
    { 
        $current = $this_BooleanValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_3()); 
    }
    this_ValuedObjectTestExpression_3=ruleValuedObjectTestExpression
    { 
        $current = $this_ValuedObjectTestExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_4()); 
    }
    this_TextExpression_4=ruleTextExpression
    { 
        $current = $this_TextExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_5_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_5_1()); 
    }
    this_BooleanExpression_6=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_5_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_6()); 
    }
    this_ConstantExpression_8=ruleConstantExpression
    { 
        $current = $this_ConstantExpression_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTrapExpression
entryRuleTrapExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapExpressionRule()); }
	 iv_ruleTrapExpression=ruleTrapExpression 
	 { $current=$iv_ruleTrapExpression.current; } 
	 EOF 
;

// Rule TrapExpression
ruleTrapExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapExpressionAccess().getTrapExpressionAction_0(),
            $current);
    }
)	otherlv_1='??' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrapExpressionAccess().getQuestionMarkQuestionMarkKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTrapExpressionAccess().getTrapISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFunctionExpression
entryRuleFunctionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionExpressionRule()); }
	 iv_ruleFunctionExpression=ruleFunctionExpression 
	 { $current=$iv_ruleFunctionExpression.current; } 
	 EOF 
;

// Rule FunctionExpression
ruleFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getFunctionExpressionAccess().getFunctionFunctionCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getKexpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_kexpressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getKexpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_kexpressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	 iv_ruleConstantExpression=ruleConstantExpression 
	 { $current=$iv_ruleConstantExpression.current; } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantExpressionAccess().getConstantExpressionAction_0(),
            $current);
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getConstantExpressionAccess().getConstantConstantCrossReference_1_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantExpressionAccess().getValueConstantAtomParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleConstantAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ConstantAtom");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTrapExpr
entryRuleTrapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapExprRule()); }
	 iv_ruleTrapExpr=ruleTrapExpr 
	 { $current=$iv_ruleTrapExpr.current; } 
	 EOF 
;

// Rule TrapExpr
ruleTrapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTrapExprAccess().getSignalExpressionParserRuleCall()); 
    }
    this_SignalExpression_0=ruleSignalExpression
    { 
        $current = $this_SignalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSignalExpression
entryRuleSignalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalExpressionRule()); }
	 iv_ruleSignalExpression=ruleSignalExpression 
	 { $current=$iv_ruleSignalExpression.current; } 
	 EOF 
;

// Rule SignalExpression
ruleSignalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalExpressionAccess().getSignalAndExpressionParserRuleCall_0()); 
    }
    this_SignalAndExpression_0=ruleSignalAndExpression
    { 
        $current = $this_SignalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSignalExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalExpressionAccess().getSubExpressionsSignalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SignalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSignalAndExpression
entryRuleSignalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalAndExpressionRule()); }
	 iv_ruleSignalAndExpression=ruleSignalAndExpression 
	 { $current=$iv_ruleSignalAndExpression.current; } 
	 EOF 
;

// Rule SignalAndExpression
ruleSignalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getSignalNotExpressionParserRuleCall_0()); 
    }
    this_SignalNotExpression_0=ruleSignalNotExpression
    { 
        $current = $this_SignalNotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSignalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getSubExpressionsSignalNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SignalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSignalNotExpression
entryRuleSignalNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalNotExpressionRule()); }
	 iv_ruleSignalNotExpression=ruleSignalNotExpression 
	 { $current=$iv_ruleSignalNotExpression.current; } 
	 EOF 
;

// Rule SignalNotExpression
ruleSignalNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignalNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getSubExpressionsSignalNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleSignalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"SignalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getSignalAtomicExpressionParserRuleCall_1()); 
    }
    this_SignalAtomicExpression_3=ruleSignalAtomicExpression
    { 
        $current = $this_SignalAtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignalAtomicExpression
entryRuleSignalAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalAtomicExpressionRule()); }
	 iv_ruleSignalAtomicExpression=ruleSignalAtomicExpression 
	 { $current=$iv_ruleSignalAtomicExpression.current; } 
	 EOF 
;

// Rule SignalAtomicExpression
ruleSignalAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalReferenceExprParserRuleCall_0()); 
    }
    this_SignalReferenceExpr_0=ruleSignalReferenceExpr
    { 
        $current = $this_SignalReferenceExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalAtomicExpressionAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalExpressionParserRuleCall_1_1()); 
    }
    this_SignalExpression_2=ruleSignalExpression
    { 
        $current = $this_SignalExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignalAtomicExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalPreExprParserRuleCall_2()); 
    }
    this_SignalPreExpr_4=ruleSignalPreExpr
    { 
        $current = $this_SignalPreExpr_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getTrapReferenceExprParserRuleCall_3()); 
    }
    this_TrapReferenceExpr_5=ruleTrapReferenceExpr
    { 
        $current = $this_TrapReferenceExpr_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignalReferenceExpr
entryRuleSignalReferenceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalReferenceExprRule()); }
	 iv_ruleSignalReferenceExpr=ruleSignalReferenceExpr 
	 { $current=$iv_ruleSignalReferenceExpr.current; } 
	 EOF 
;

// Rule SignalReferenceExpr
ruleSignalReferenceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalReferenceExprRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalReferenceExprAccess().getValuedObjectISignalCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleSignalPreExpr
entryRuleSignalPreExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalPreExprRule()); }
	 iv_ruleSignalPreExpr=ruleSignalPreExpr 
	 { $current=$iv_ruleSignalPreExpr.current; } 
	 EOF 
;

// Rule SignalPreExpr
ruleSignalPreExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignalPreExprAccess().getOperatorExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalPreExprAccess().getOperatorPreOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=rulePreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalPreExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"PreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalPreExprAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalPreExprAccess().getSubExpressionsSignalReferenceExprParserRuleCall_3_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalPreExprRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignalPreExprAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleTrapReferenceExpr
entryRuleTrapReferenceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapReferenceExprRule()); }
	 iv_ruleTrapReferenceExpr=ruleTrapReferenceExpr 
	 { $current=$iv_ruleTrapReferenceExpr.current; } 
	 EOF 
;

// Rule TrapReferenceExpr
ruleTrapReferenceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapReferenceExprAccess().getTrapReferenceExprAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapReferenceExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTrapReferenceExprAccess().getValuedObjectTrapDeclCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleDelayExpr
entryRuleDelayExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayExprRule()); }
	 iv_ruleDelayExpr=ruleDelayExpr 
	 { $current=$iv_ruleDelayExpr.current; } 
	 EOF 
;

// Rule DelayExpr
ruleDelayExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getExprExpressionParserRuleCall_0_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_0_1_0()); 
	    }
		lv_event_1_0=ruleDelayEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"DelayEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_1_0()); 
	    }
		lv_event_2_0=ruleDelayEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_2_0, 
        		"DelayEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_isImmediate_3_0=	'immediate' 
    {
        newLeafNode(lv_isImmediate_3_0, grammarAccess.getDelayExprAccess().getIsImmediateImmediateKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayExprRule());
	        }
       		setWithLastConsumed($current, "isImmediate", true, "immediate");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_2_1_0()); 
	    }
		lv_event_4_0=ruleDelayEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_4_0, 
        		"DelayEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDelayEvent
entryRuleDelayEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayEventRule()); }
	 iv_ruleDelayEvent=ruleDelayEvent 
	 { $current=$iv_ruleDelayEvent.current; } 
	 EOF 
;

// Rule DelayEvent
ruleDelayEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayEventAccess().getTickTickParserRuleCall_0_0()); 
	    }
		lv_tick_0_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayEventRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_0_0, 
        		"Tick");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayEventAccess().getExprSignalReferenceExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayEventRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_fB_2_0=	'[' 
    {
        newLeafNode(lv_fB_2_0, grammarAccess.getDelayEventAccess().getFBLeftSquareBracketKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayEventRule());
	        }
       		setWithLastConsumed($current, "fB", lv_fB_2_0, "[");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayEventAccess().getExprSignalExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expr_3_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayEventRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_eB_4_0=	']' 
    {
        newLeafNode(lv_eB_4_0, grammarAccess.getDelayEventAccess().getEBRightSquareBracketKeyword_2_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayEventRule());
	        }
       		setWithLastConsumed($current, "eB", lv_eB_4_0, "]");
	    }

)
)))
;





// Entry rule entryRuleExec
entryRuleExec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecRule()); }
	 iv_ruleExec=ruleExec 
	 { $current=$iv_ruleExec.current; } 
	 EOF 
;

// Rule Exec
ruleExec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='exec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExecAccess().getExecKeyword_0_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getExecAccess().getTaskTaskCrossReference_0_0_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getBodyExecBodyParserRuleCall_0_0_2_0()); 
	    }
		lv_body_2_0=ruleExecBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"ExecBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='return' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExecAccess().getReturnKeyword_0_0_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExecAccess().getRetSignalISignalCrossReference_0_0_4_0()); 
	}

)
)(	otherlv_5='do' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExecAccess().getDoKeyword_0_0_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getStatementStatementParserRuleCall_0_0_5_1_0()); 
	    }
		lv_statement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_7='exec' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExecAccess().getExecKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getExecCaseListExecCaseParserRuleCall_0_1_1_0()); 
	    }
		lv_execCaseList_8_0=ruleExecCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"execCaseList",
        		lv_execCaseList_8_0, 
        		"ExecCase");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getExecCaseListExecCaseParserRuleCall_0_1_2_0()); 
	    }
		lv_execCaseList_9_0=ruleExecCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"execCaseList",
        		lv_execCaseList_9_0, 
        		"ExecCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*))	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExecAccess().getEndKeyword_1());
    }
(
(
		lv_optEnd_11_0=	'exec' 
    {
        newLeafNode(lv_optEnd_11_0, grammarAccess.getExecAccess().getOptEndExecKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
       		setWithLastConsumed($current, "optEnd", lv_optEnd_11_0, "exec");
	    }

)
)?)
;





// Entry rule entryRuleExecBody
entryRuleExecBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecBodyRule()); }
	 iv_ruleExecBody=ruleExecBody 
	 { $current=$iv_ruleExecBody.current; } 
	 EOF 
;

// Rule ExecBody
ruleExecBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExecBodyAccess().getExecBodyAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExecBodyAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecBodyRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExecBodyAccess().getVarsIVariableCrossReference_2_0_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExecBodyAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecBodyRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExecBodyAccess().getVarsIVariableCrossReference_2_1_1_0()); 
	}

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExecBodyAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExecBodyAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecBodyAccess().getKexpressionsExpressionParserRuleCall_5_0_0()); 
	    }
		lv_kexpressions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecBodyRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExecBodyAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecBodyAccess().getKexpressionsExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_kexpressions_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecBodyRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExecBodyAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleExecCase
entryRuleExecCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecCaseRule()); }
	 iv_ruleExecCase=ruleExecCase 
	 { $current=$iv_ruleExecCase.current; } 
	 EOF 
;

// Rule ExecCase
ruleExecCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExecCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getExecCaseAccess().getTaskTaskCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getBodyExecBodyParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleExecBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"ExecBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='return' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExecCaseAccess().getReturnKeyword_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExecCaseAccess().getRetSignalISignalCrossReference_4_0()); 
	}

)
)(	otherlv_5='do' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExecCaseAccess().getDoKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_statement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTick
entryRuleTick returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTickRule()); } 
	 iv_ruleTick=ruleTick 
	 { $current=$iv_ruleTick.current.getText(); }  
	 EOF 
;

// Rule Tick
ruleTick returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='tick' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTickAccess().getTickKeyword()); 
    }

    ;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleBooleanExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); 
    }
    this_ValuedExpression_1=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((	ruleNotOrValuedExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); 
    }
    this_NotOrValuedExpression_0=ruleNotOrValuedExpression
    { 
        $current = $this_NotOrValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleNotOrValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"NotOrValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_4=ruleNotExpression
    { 
        $current = $this_NotExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOrValuedExpressionRule()); }
	 iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression 
	 { $current=$iv_ruleNotOrValuedExpression.current; } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleValuedExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); 
    }
    this_AtomicExpression_3=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedExpressionRule()); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); 
    }
    this_SubExpression_0=ruleSubExpression
    { 
        $current = $this_SubExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAddOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AddOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); 
    }
    this_MultExpression_0=ruleMultExpression
    { 
        $current = $this_MultExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleMultExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"MultExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	 iv_ruleMultExpression=ruleMultExpression 
	 { $current=$iv_ruleMultExpression.current; } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); 
    }
    this_DivExpression_0=ruleDivExpression
    { 
        $current = $this_DivExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleDivExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"DivExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivExpression
entryRuleDivExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivExpressionRule()); }
	 iv_ruleDivExpression=ruleDivExpression 
	 { $current=$iv_ruleDivExpression.current; } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); 
    }
    this_ModExpression_0=ruleModExpression
    { 
        $current = $this_ModExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleDivOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"DivOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleModExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ModExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModExpressionRule()); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); 
    }
    this_NegExpression_0=ruleNegExpression
    { 
        $current = $this_NegExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleModOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ModOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"AtomicValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegExpression
entryRuleNegExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegExpressionRule()); }
	 iv_ruleNegExpression=ruleNegExpression 
	 { $current=$iv_ruleNegExpression.current; } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNegExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NegExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); 
    }
    this_AtomicValuedExpression_3=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicValuedExpressionRule()); }
	 iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression 
	 { $current=$iv_ruleAtomicValuedExpression.current; } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0());
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_2_1()); 
    }
    this_ValuedExpression_3=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_3()); 
    }
    this_AtomicExpression_5=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectTestExpressionRule()); }
	 iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression 
	 { $current=$iv_ruleValuedObjectTestExpression.current; } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=rulePreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"PreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); 
	    }
		lv_subExpressions_3_0=ruleValuedObjectTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ValuedObjectTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValueTestOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_6_0=ruleValueTestOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"ValueTestOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_7_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_7_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_2()); 
    }
    this_ValuedObjectReference_8=ruleValuedObjectReference
    { 
        $current = $this_ValuedObjectReference_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectReferenceRule()); }
	 iv_ruleValuedObjectReference=ruleValuedObjectReference 
	 { $current=$iv_ruleValuedObjectReference.current; } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_code_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_code_0_0, grammarAccess.getTextExpressionAccess().getCodeHOSTCODETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_0_0, 
        		"HOSTCODE");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;







// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	 iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration 
	 { $current=$iv_ruleInterfaceDeclaration.current; } 
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getInterfaceSignalDeclParserRuleCall_0()); 
    }
    this_InterfaceSignalDecl_0=ruleInterfaceSignalDecl
    { 
        $current = $this_InterfaceSignalDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getInterfaceVariableDeclParserRuleCall_1()); 
    }
    this_InterfaceVariableDecl_1=ruleInterfaceVariableDecl
    { 
        $current = $this_InterfaceVariableDecl_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleISignal
entryRuleISignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getISignalRule()); }
	 iv_ruleISignal=ruleISignal 
	 { $current=$iv_ruleISignal.current; } 
	 EOF 
;

// Rule ISignal
ruleISignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getISignalAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getChannelDescrChannelDescriptionParserRuleCall_1_0()); 
	    }
		lv_channelDescr_1_0=ruleChannelDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"channelDescr",
        		lv_channelDescr_1_0, 
        		"ChannelDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleInterfaceSignalDecl
entryRuleInterfaceSignalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceSignalDeclRule()); }
	 iv_ruleInterfaceSignalDecl=ruleInterfaceSignalDecl 
	 { $current=$iv_ruleInterfaceSignalDecl.current; } 
	 EOF 
;

// Rule InterfaceSignalDecl
ruleInterfaceSignalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputAction_0_0(),
            $current);
    }
)	otherlv_1='input' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceSignalDeclAccess().getInputKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_2_0()); 
	    }
		lv_signals_2_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_2_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_3_1_0()); 
	    }
		lv_signals_4_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_4_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getOutputAction_1_0(),
            $current);
    }
)	otherlv_7='output' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceSignalDeclAccess().getOutputKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_2_0()); 
	    }
		lv_signals_8_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_8_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_3_1_0()); 
	    }
		lv_signals_10_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_10_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_1_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputOutputAction_2_0(),
            $current);
    }
)	otherlv_13='inputoutput' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInterfaceSignalDeclAccess().getInputoutputKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_2_0()); 
	    }
		lv_signals_14_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_14_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_3_1_0()); 
	    }
		lv_signals_16_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_16_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_2_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getReturnAction_3_0(),
            $current);
    }
)	otherlv_19='return' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getInterfaceSignalDeclAccess().getReturnKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_2_0()); 
	    }
		lv_signals_20_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_20_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_3_1_0()); 
	    }
		lv_signals_22_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_22_0, 
        		"ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_3_4());
    }
))
;





// Entry rule entryRuleInterfaceVariableDecl
entryRuleInterfaceVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceVariableDeclRule()); }
	 iv_ruleInterfaceVariableDecl=ruleInterfaceVariableDecl 
	 { $current=$iv_ruleInterfaceVariableDecl.current; } 
	 EOF 
;

// Rule InterfaceVariableDecl
ruleInterfaceVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceVariableDeclAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_1_0()); 
	    }
		lv_varDecls_1_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_1_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceVariableDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclAccess().getVarDeclsVariableDeclParserRuleCall_2_1_0()); 
	    }
		lv_varDecls_3_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_3_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getTypeTypeIdentifierParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIVariable
entryRuleIVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIVariableRule()); }
	 iv_ruleIVariable=ruleIVariable 
	 { $current=$iv_ruleIVariable.current; } 
	 EOF 
;

// Rule IVariable
ruleIVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIVariableAccess().getColonEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_1()); 
    }
    this_TagAnnotation_1=ruleTagAnnotation
    { 
        $current = $this_TagAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); 
    }
    this_KeyStringValueAnnotation_2=ruleKeyStringValueAnnotation
    { 
        $current = $this_KeyStringValueAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); 
    }
    this_TypedKeyStringValueAnnotation_3=ruleTypedKeyStringValueAnnotation
    { 
        $current = $this_TypedKeyStringValueAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_4()); 
    }
    this_KeyBooleanValueAnnotation_4=ruleKeyBooleanValueAnnotation
    { 
        $current = $this_KeyBooleanValueAnnotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_5()); 
    }
    this_KeyIntValueAnnotation_5=ruleKeyIntValueAnnotation
    { 
        $current = $this_KeyIntValueAnnotation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_6()); 
    }
    this_KeyFloatValueAnnotation_6=ruleKeyFloatValueAnnotation
    { 
        $current = $this_KeyFloatValueAnnotation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentAnnotationRule()); }
	 iv_ruleCommentAnnotation=ruleCommentAnnotation 
	 { $current=$iv_ruleCommentAnnotation.current; } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_COMMENT_ANNOTATION
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"COMMENT_ANNOTATION");
	    }

)
)
;





// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagAnnotationRule()); }
	 iv_ruleTagAnnotation=ruleTagAnnotation 
	 { $current=$iv_ruleTagAnnotation.current; } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTagAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_3_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTagAnnotationAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyStringValueAnnotationRule()); }
	 iv_ruleKeyStringValueAnnotation=ruleKeyStringValueAnnotation 
	 { $current=$iv_ruleKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyStringValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 iv_ruleTypedKeyStringValueAnnotation=ruleTypedKeyStringValueAnnotation 
	 { $current=$iv_ruleTypedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_6_1_0()); 
	    }
		lv_annotations_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_7_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightParenthesisKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleKeyBooleanValueAnnotation
entryRuleKeyBooleanValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationRule()); }
	 iv_ruleKeyBooleanValueAnnotation=ruleKeyBooleanValueAnnotation 
	 { $current=$iv_ruleKeyBooleanValueAnnotation.current; } 
	 EOF 
;

// Rule KeyBooleanValueAnnotation
ruleKeyBooleanValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBOOLEANTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"BOOLEAN");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyBooleanValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyBooleanValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyIntValueAnnotation
entryRuleKeyIntValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyIntValueAnnotationRule()); }
	 iv_ruleKeyIntValueAnnotation=ruleKeyIntValueAnnotation 
	 { $current=$iv_ruleKeyIntValueAnnotation.current; } 
	 EOF 
;

// Rule KeyIntValueAnnotation
ruleKeyIntValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyIntValueAnnotationAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyIntValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyIntValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyFloatValueAnnotation
entryRuleKeyFloatValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyFloatValueAnnotationRule()); }
	 iv_ruleKeyFloatValueAnnotation=ruleKeyFloatValueAnnotation 
	 { $current=$iv_ruleKeyFloatValueAnnotation.current; } 
	 EOF 
;

// Rule KeyFloatValueAnnotation
ruleKeyFloatValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_FLOAT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyFloatValueAnnotationAccess().getValueFLOATTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"FLOAT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyFloatValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyFloatValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;







// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule PreOperator
rulePreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='pre' 
	{
        $current = grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); 
    }
);



// Rule OrOperator
ruleOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule AndOperator
ruleAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule NotOperator
ruleNotOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not' 
	{
        $current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); 
    }
);



// Rule AddOperator
ruleAddOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); 
    }
);



// Rule SubOperator
ruleSubOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='-' 
	{
        $current = grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); 
    }
);



// Rule MultOperator
ruleMultOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); 
    }
);



// Rule ModOperator
ruleModOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='mod' 
	{
        $current = grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); 
    }
);



// Rule DivOperator
ruleDivOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='/' 
	{
        $current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); 
    }
);



// Rule ValueTestOperator
ruleValueTestOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='?' 
	{
        $current = grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTestOperatorAccess().getVALEnumLiteralDeclaration()); 
    }
);



// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='boolean' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='unsigned' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='integer' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='double' 
	{
        $current = grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='string' 
	{
        $current = grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='or' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='and' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



RULE_ESTEREL_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ESTEREL_ML_COMMENT : '%' '{' ( options {greedy=false;} : . )*'}' '%';

RULE_STRING : '"' (~('"')|'"' '"')* '"';

RULE_HOSTCODE : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_INT : '-'? ('0'..'9')+;

RULE_FLOAT : ('-'? ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? 'f'?|'-'? ('0'..'9')+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


