/*
* generated by Xtext
*/
grammar InternalEsterel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.esterel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.esterel.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;

}

@parser::members {

 	private EsterelGrammarAccess grammarAccess;
 	
    public InternalEsterelParser(TokenStream input, IAstFactory factory, EsterelGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/esterel/parser/antlr/internal/InternalEsterel.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected EsterelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ESTEREL_SL_COMMENT", "RULE_ESTEREL_ML_COMMENT", "RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ESTEREL_SL_COMMENT", "RULE_ESTEREL_ML_COMMENT", "RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getModuleModuleParserRuleCall_0_0(), currentNode); 
	    }
		lv_module_0_0=ruleModule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"module",
	        		lv_module_0_0, 
	        		"Module", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getModuleModuleParserRuleCall_1_0(), currentNode); 
	    }
		lv_module_1_0=ruleModule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"module",
	        		lv_module_1_0, 
	        		"Module", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'module' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getModuleKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getModuleAccess().getNameEsterelIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModIntModuleInterfaceParserRuleCall_3_0(), currentNode); 
	    }
		lv_modInt_3_0=ruleModuleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modInt",
	        		lv_modInt_3_0, 
	        		"ModuleInterface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModBodyModuleBodyParserRuleCall_4_0(), currentNode); 
	    }
		lv_modBody_4_0=ruleModuleBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modBody",
	        		lv_modBody_4_0, 
	        		"ModuleBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)ruleEndModule)
;





// Entry rule entryRuleEndModule
entryRuleEndModule returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEndModuleRule(), currentNode); } 
	 iv_ruleEndModule=ruleEndModule 
	 { $current=$iv_ruleEndModule.current.getText(); }  
	 EOF 
;

// Rule EndModule
ruleEndModule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getEndKeyword_0_0(), null); 
    }

	kw='module' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getModuleKeyword_0_1(), null); 
    }
)
    |
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getFullStopKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleModuleBody
entryRuleModuleBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleBodyRule(), currentNode); }
	 iv_ruleModuleBody=ruleModuleBody 
	 { $current=$iv_ruleModuleBody.current; } 
	 EOF 
;

// Rule ModuleBody
ruleModuleBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleBodyAccess().getStatementStatementParserRuleCall_0(), currentNode); 
	    }
		lv_statement_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statement",
	        		lv_statement_0_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleModuleInterface
entryRuleModuleInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleInterfaceRule(), currentNode); }
	 iv_ruleModuleInterface=ruleModuleInterface 
	 { $current=$iv_ruleModuleInterface.current; } 
	 EOF 
;

// Rule ModuleInterface
ruleModuleInterface returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSignalDeclSignalDeclParserRuleCall_0_0(), currentNode); 
	    }
		lv_intSignalDecl_0_0=ruleSignalDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intSignalDecl",
	        		lv_intSignalDecl_0_0, 
	        		"SignalDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntTypeDeclTypeDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_intTypeDecl_1_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intTypeDecl",
	        		lv_intTypeDecl_1_0, 
	        		"TypeDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSensorDeclSensorDeclParserRuleCall_2_0(), currentNode); 
	    }
		lv_intSensorDecl_2_0=ruleSensorDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intSensorDecl",
	        		lv_intSensorDecl_2_0, 
	        		"SensorDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntConstantDeclConstantDeclParserRuleCall_3_0(), currentNode); 
	    }
		lv_intConstantDecl_3_0=ruleConstantDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intConstantDecl",
	        		lv_intConstantDecl_3_0, 
	        		"ConstantDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntRelationDeclRelationDeclParserRuleCall_4_0(), currentNode); 
	    }
		lv_intRelationDecl_4_0=ruleRelationDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intRelationDecl",
	        		lv_intRelationDecl_4_0, 
	        		"RelationDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntFunctionDeclFunctionDeclParserRuleCall_5_0(), currentNode); 
	    }
		lv_intFunctionDecl_5_0=ruleFunctionDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intFunctionDecl",
	        		lv_intFunctionDecl_5_0, 
	        		"FunctionDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntProcedureDeclProcedureDeclParserRuleCall_6_0(), currentNode); 
	    }
		lv_intProcedureDecl_6_0=ruleProcedureDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"intProcedureDecl",
	        		lv_intProcedureDecl_6_0, 
	        		"ProcedureDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+
;





// Entry rule entryRuleSignalDecl
entryRuleSignalDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalDeclRule(), currentNode); }
	 iv_ruleSignalDecl=ruleSignalDecl 
	 { $current=$iv_ruleSignalDecl.current; } 
	 EOF 
;

// Rule SignalDecl
ruleSignalDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getInputAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getInputAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'input' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getInputKeyword_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_signal_2_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_2_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_0_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_3_1_0(), currentNode); 
	    }
		lv_signal_4_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_4_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_0_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getOutputAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getOutputAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'output' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getOutputKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_signal_8_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_8_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_signal_10_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_10_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_1_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'inputoutput' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getInputoutputKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_signal_14_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_14_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_2_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_3_1_0(), currentNode); 
	    }
		lv_signal_16_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_16_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_2_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getReturnAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getReturnAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'return' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getReturnKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_signal_20_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_20_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_3_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_3_1_0(), currentNode); 
	    }
		lv_signal_22_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_22_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_3_4(), null); 
    }
))
;





// Entry rule entryRuleSensorDecl
entryRuleSensorDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSensorDeclRule(), currentNode); }
	 iv_ruleSensorDecl=ruleSensorDecl 
	 { $current=$iv_ruleSensorDecl.current; } 
	 EOF 
;

// Rule SensorDecl
ruleSensorDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sensor' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getSensorKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_1_0(), currentNode); 
	    }
		lv_sensor_1_0=ruleSensor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sensor",
	        		lv_sensor_1_0, 
	        		"Sensor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_sensor_3_0=ruleSensor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sensor",
	        		lv_sensor_3_0, 
	        		"Sensor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleRelationDecl
entryRuleRelationDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationDeclRule(), currentNode); }
	 iv_ruleRelationDecl=ruleRelationDecl 
	 { $current=$iv_ruleRelationDecl.current; } 
	 EOF 
;

// Rule RelationDecl
ruleRelationDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRelationDeclAccess().getRelationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationDeclAccess().getRelationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'relation' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getRelationKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationDeclAccess().getRelationRelationTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_relation_2_0=ruleRelationType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relation",
	        		lv_relation_2_0, 
	        		"RelationType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationDeclAccess().getRelationRelationTypeParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_relation_4_0=ruleRelationType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relation",
	        		lv_relation_4_0, 
	        		"RelationType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleRelationType
entryRuleRelationType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationTypeRule(), currentNode); }
	 iv_ruleRelationType=ruleRelationType 
	 { $current=$iv_ruleRelationType.current; } 
	 EOF 
;

// Rule RelationType
ruleRelationType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getRelationImplicationParserRuleCall_0(), currentNode); 
    }
    this_RelationImplication_0=ruleRelationImplication
    { 
        $current = $this_RelationImplication_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getRelationIncompatibilityParserRuleCall_1(), currentNode); 
    }
    this_RelationIncompatibility_1=ruleRelationIncompatibility
    { 
        $current = $this_RelationIncompatibility_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRelationImplication
entryRuleRelationImplication returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationImplicationRule(), currentNode); }
	 iv_ruleRelationImplication=ruleRelationImplication 
	 { $current=$iv_ruleRelationImplication.current; } 
	 EOF 
;

// Rule RelationImplication
ruleRelationImplication returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getRelationImplicationAccess().getFirstSignalCrossReference_0_0(), "first"); 
	}

)
)(
(
		lv_type_1_0=	'=>' 
    {
        createLeafNode(grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "=>", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getRelationImplicationAccess().getSecondSignalCrossReference_2_0(), "second"); 
	}

)
))
;





// Entry rule entryRuleRelationIncompatibility
entryRuleRelationIncompatibility returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationIncompatibilityRule(), currentNode); }
	 iv_ruleRelationIncompatibility=ruleRelationIncompatibility 
	 { $current=$iv_ruleRelationIncompatibility.current; } 
	 EOF 
;

// Rule RelationIncompatibility
ruleRelationIncompatibility returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_0_0(), "incomp"); 
	}

)
)(
(
		lv_type_1_0=	'#' 
    {
        createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getTypeNumberSignKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "#", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_2_0(), "incomp"); 
	}

)
)(	'#' 
    {
        createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getNumberSignKeyword_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_3_1_0(), "incomp"); 
	}

)
))*)
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeDeclRule(), currentNode); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'type' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getTypeAccess().getNameEsterelIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleConstantDecl
entryRuleConstantDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantDeclRule(), currentNode); }
	 iv_ruleConstantDecl=ruleConstantDecl 
	 { $current=$iv_ruleConstantDecl.current; } 
	 EOF 
;

// Rule ConstantDecl
ruleConstantDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'constant' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getConstantKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_constant_1_0=ruleOneTypeConstantDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constant",
	        		lv_constant_1_0, 
	        		"OneTypeConstantDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_constant_3_0=ruleOneTypeConstantDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constant",
	        		lv_constant_3_0, 
	        		"OneTypeConstantDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleOneTypeConstantDecl
entryRuleOneTypeConstantDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOneTypeConstantDeclRule(), currentNode); }
	 iv_ruleOneTypeConstantDecl=ruleOneTypeConstantDecl 
	 { $current=$iv_ruleOneTypeConstantDecl.current; } 
	 EOF 
;

// Rule OneTypeConstantDecl
ruleOneTypeConstantDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_0_0(), currentNode); 
	    }
		lv_constant_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constant",
	        		lv_constant_0_0, 
	        		"Constant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_constant_2_0=ruleConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constant",
	        		lv_constant_2_0, 
	        		"Constant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	':' 
    {
        createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getColonKeyword_2(), null); 
    }
((
(
		lv_type_4_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getTypeEsterelIDTerminalRuleCall_3_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_4_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_5_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getTypeBaseTypeTerminalRuleCall_3_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_5_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getConstantAccess().getNameEsterelIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getValueConstantValueParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"ConstantValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantValueRule(), currentNode); } 
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current.getText(); }  
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_EsterelID_0=RULE_ESTERELID    {
		$current.merge(this_EsterelID_0);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getEsterelIDTerminalRuleCall_0(), null); 
    }

    |((
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConstantValueAccess().getHyphenMinusKeyword_1_0(), null); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)
    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getSTRINGTerminalRuleCall_2(), null); 
    }

    |    this_Float_4=RULE_FLOAT    {
		$current.merge(this_Float_4);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getFloatTerminalRuleCall_3(), null); 
    }

    |    this_Boolean_5=RULE_BOOLEAN    {
		$current.merge(this_Boolean_5);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getBooleanTerminalRuleCall_4(), null); 
    }
)
    ;





// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDeclRule(), currentNode); }
	 iv_ruleFunctionDecl=ruleFunctionDecl 
	 { $current=$iv_ruleFunctionDecl.current; } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'function' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getFunctionKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_1_0(), currentNode); 
	    }
		lv_function_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"function",
	        		lv_function_1_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_function_3_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"function",
	        		lv_function_3_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getNameEsterelIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
(
		lv_idList_2_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getIdListEsterelIDTerminalRuleCall_2_0_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_2_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_2_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_0_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_2_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
(
		lv_idList_4_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getIdListEsterelIDTerminalRuleCall_2_1_1_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_4_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_4_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_1_1_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_4_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getColonKeyword_4(), null); 
    }
((
(
		lv_type_7_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getTypeEsterelIDTerminalRuleCall_5_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_8_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getFunctionAccess().getTypeBaseTypeTerminalRuleCall_5_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleProcedureDecl
entryRuleProcedureDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureDeclRule(), currentNode); }
	 iv_ruleProcedureDecl=ruleProcedureDecl 
	 { $current=$iv_ruleProcedureDecl.current; } 
	 EOF 
;

// Rule ProcedureDecl
ruleProcedureDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'procedure' 
    {
        createLeafNode(grammarAccess.getProcedureDeclAccess().getProcedureKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureDeclAccess().getProcedureProcedureParserRuleCall_1_0(), currentNode); 
	    }
		lv_procedure_1_0=ruleProcedure		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"procedure",
	        		lv_procedure_1_0, 
	        		"Procedure", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProcedureDeclAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureDeclAccess().getProcedureProcedureParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_procedure_3_0=ruleProcedure		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"procedure",
	        		lv_procedure_3_0, 
	        		"Procedure", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureRule(), currentNode); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getNameEsterelIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
(
		lv_idList_2_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_2_0_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_2_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_2_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_2_0_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_2_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
(
		lv_idList_4_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_2_1_1_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_4_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_4_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_2_1_1_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_4_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4(), null); 
    }
((
(
(
		lv_idList_7_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_5_0_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_7_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_7_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_5_0_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_7_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0(), null); 
    }
(
(
(
		lv_idList_9_1=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListEsterelIDTerminalRuleCall_5_1_1_0_0(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_9_1, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_idList_9_2=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getProcedureAccess().getIdListBaseTypeTerminalRuleCall_5_1_1_0_1(), "idList"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"idList",
	        		lv_idList_9_2, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSequenceParserRuleCall_0(), currentNode); 
    }
    this_Sequence_0=ruleSequence
    { 
        $current = $this_Sequence_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getParallelListAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "list", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getParallelListAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'||' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getVerticalLineVerticalLineKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getListSequenceParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_list_3_0=ruleSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_3_0, 
	        		"Sequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAtomicStatement
entryRuleAtomicStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomicStatementRule(), currentNode); }
	 iv_ruleAtomicStatement=ruleAtomicStatement 
	 { $current=$iv_ruleAtomicStatement.current; } 
	 EOF 
;

// Rule AtomicStatement
ruleAtomicStatement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAbortParserRuleCall_0(), currentNode); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAssignmentParserRuleCall_1(), currentNode); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAwaitParserRuleCall_2(), currentNode); 
    }
    this_Await_2=ruleAwait
    { 
        $current = $this_Await_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getBlockParserRuleCall_3(), currentNode); 
    }
    this_Block_3=ruleBlock
    { 
        $current = $this_Block_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getDoParserRuleCall_4(), currentNode); 
    }
    this_Do_4=ruleDo
    { 
        $current = $this_Do_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getEmitParserRuleCall_5(), currentNode); 
    }
    this_Emit_5=ruleEmit
    { 
        $current = $this_Emit_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getEveryDoParserRuleCall_6(), currentNode); 
    }
    this_EveryDo_6=ruleEveryDo
    { 
        $current = $this_EveryDo_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getExitParserRuleCall_7(), currentNode); 
    }
    this_Exit_7=ruleExit
    { 
        $current = $this_Exit_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getHaltParserRuleCall_8(), currentNode); 
    }
    this_Halt_8=ruleHalt
    { 
        $current = $this_Halt_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getIfTestParserRuleCall_9(), currentNode); 
    }
    this_IfTest_9=ruleIfTest
    { 
        $current = $this_IfTest_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalSignalDeclParserRuleCall_10(), currentNode); 
    }
    this_LocalSignalDecl_10=ruleLocalSignalDecl
    { 
        $current = $this_LocalSignalDecl_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getLoopParserRuleCall_11(), currentNode); 
    }
    this_Loop_11=ruleLoop
    { 
        $current = $this_Loop_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getNothingParserRuleCall_12(), currentNode); 
    }
    this_Nothing_12=ruleNothing
    { 
        $current = $this_Nothing_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getPauseParserRuleCall_13(), currentNode); 
    }
    this_Pause_13=rulePause
    { 
        $current = $this_Pause_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getPresentParserRuleCall_14(), currentNode); 
    }
    this_Present_14=rulePresent
    { 
        $current = $this_Present_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getRepeatParserRuleCall_15(), currentNode); 
    }
    this_Repeat_15=ruleRepeat
    { 
        $current = $this_Repeat_15.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getRunParserRuleCall_16(), currentNode); 
    }
    this_Run_16=ruleRun
    { 
        $current = $this_Run_16.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getSuspendParserRuleCall_17(), currentNode); 
    }
    this_Suspend_17=ruleSuspend
    { 
        $current = $this_Suspend_17.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getSustainParserRuleCall_18(), currentNode); 
    }
    this_Sustain_18=ruleSustain
    { 
        $current = $this_Sustain_18.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getTrapParserRuleCall_19(), currentNode); 
    }
    this_Trap_19=ruleTrap
    { 
        $current = $this_Trap_19.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getVariableParserRuleCall_20(), currentNode); 
    }
    this_Variable_20=ruleVariable
    { 
        $current = $this_Variable_20.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getWeakAbortParserRuleCall_21(), currentNode); 
    }
    this_WeakAbort_21=ruleWeakAbort
    { 
        $current = $this_WeakAbort_21.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceRule(), currentNode); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceAccess().getAtomicStatementParserRuleCall_0(), currentNode); 
    }
    this_AtomicStatement_0=ruleAtomicStatement
    { 
        $current = $this_AtomicStatement_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getSequenceAccess().getSequenceListAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "list", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSequenceAccess().getSequenceListAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	';' 
    {
        createLeafNode(grammarAccess.getSequenceAccess().getSemicolonKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceAccess().getListAtomicStatementParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_list_3_0=ruleAtomicStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_3_0, 
	        		"AtomicStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	';' 
    {
        createLeafNode(grammarAccess.getSequenceAccess().getSemicolonKeyword_2(), null); 
    }
)?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_variable_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getAssignmentAccess().getVariableEsterelIDTerminalRuleCall_0_0(), "variable"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExprDataExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortRule(), currentNode); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'abort' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getAbortKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'when' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getWhenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getBodyAbortBodyParserRuleCall_3_0(), currentNode); 
	    }
		lv_body_3_0=ruleAbortBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_3_0, 
	        		"AbortBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAbortBody
entryRuleAbortBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortBodyRule(), currentNode); }
	 iv_ruleAbortBody=ruleAbortBody 
	 { $current=$iv_ruleAbortBody.current; } 
	 EOF 
;

// Rule AbortBody
ruleAbortBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbortBodyAccess().getAbortInstanceParserRuleCall_0(), currentNode); 
    }
    this_AbortInstance_0=ruleAbortInstance
    { 
        $current = $this_AbortInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbortBodyAccess().getAbortCaseParserRuleCall_1(), currentNode); 
    }
    this_AbortCase_1=ruleAbortCase
    { 
        $current = $this_AbortCase_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAbortEnd
entryRuleAbortEnd returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortEndRule(), currentNode); } 
	 iv_ruleAbortEnd=ruleAbortEnd 
	 { $current=$iv_ruleAbortEnd.current.getText(); }  
	 EOF 
;

// Rule AbortEnd
ruleAbortEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAbortEndAccess().getEndKeyword_0(), null); 
    }
(
	kw='abort' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAbortEndAccess().getAbortKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleAbortInstance
entryRuleAbortInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortInstanceRule(), currentNode); }
	 iv_ruleAbortInstance=ruleAbortInstance 
	 { $current=$iv_ruleAbortInstance.current; } 
	 EOF 
;

// Rule AbortInstance
ruleAbortInstance returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(), currentNode); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_0_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'do' 
    {
        createLeafNode(grammarAccess.getAbortInstanceAccess().getDoKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getEndAbortEndParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_end_3_0=ruleAbortEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_3_0, 
	        		"AbortEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAbortCase
entryRuleAbortCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortCaseRule(), currentNode); }
	 iv_ruleAbortCase=ruleAbortCase 
	 { $current=$iv_ruleAbortCase.current; } 
	 EOF 
;

// Rule AbortCase
ruleAbortCase returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
		lv_cases_0_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_0_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_1_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getEndAbortEndParserRuleCall_2_0(), currentNode); 
	    }
		lv_end_2_0=ruleAbortEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_2_0, 
	        		"AbortEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAbortCaseSingle
entryRuleAbortCaseSingle returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbortCaseSingleRule(), currentNode); }
	 iv_ruleAbortCaseSingle=ruleAbortCaseSingle 
	 { $current=$iv_ruleAbortCaseSingle.current; } 
	 EOF 
;

// Rule AbortCaseSingle
ruleAbortCaseSingle returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'case' 
    {
        createLeafNode(grammarAccess.getAbortCaseSingleAccess().getCaseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseSingleAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseSingleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_1_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'do' 
    {
        createLeafNode(grammarAccess.getAbortCaseSingleAccess().getDoKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseSingleAccess().getStatementStatementParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseSingleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitRule(), currentNode); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'await' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getAwaitKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitAccess().getBodyAwaitBodyParserRuleCall_1_0(), currentNode); 
	    }
		lv_body_1_0=ruleAwaitBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_1_0, 
	        		"AwaitBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAwaitBody
entryRuleAwaitBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitBodyRule(), currentNode); }
	 iv_ruleAwaitBody=ruleAwaitBody 
	 { $current=$iv_ruleAwaitBody.current; } 
	 EOF 
;

// Rule AwaitBody
ruleAwaitBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitInstanceParserRuleCall_0(), currentNode); 
    }
    this_AwaitInstance_0=ruleAwaitInstance
    { 
        $current = $this_AwaitInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitCaseParserRuleCall_1(), currentNode); 
    }
    this_AwaitCase_1=ruleAwaitCase
    { 
        $current = $this_AwaitCase_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAwaitEnd
entryRuleAwaitEnd returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitEndRule(), currentNode); } 
	 iv_ruleAwaitEnd=ruleAwaitEnd 
	 { $current=$iv_ruleAwaitEnd.current.getText(); }  
	 EOF 
;

// Rule AwaitEnd
ruleAwaitEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAwaitEndAccess().getEndKeyword_0(), null); 
    }
(
	kw='await' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAwaitEndAccess().getAwaitKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleAwaitInstance
entryRuleAwaitInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitInstanceRule(), currentNode); }
	 iv_ruleAwaitInstance=ruleAwaitInstance 
	 { $current=$iv_ruleAwaitInstance.current; } 
	 EOF 
;

// Rule AwaitInstance
ruleAwaitInstance returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getDelayDelayExprParserRuleCall_0_0(), currentNode); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_0_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'do' 
    {
        createLeafNode(grammarAccess.getAwaitInstanceAccess().getDoKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getEndAwaitEndParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_end_3_0=ruleAwaitEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_3_0, 
	        		"AwaitEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAwaitCase
entryRuleAwaitCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAwaitCaseRule(), currentNode); }
	 iv_ruleAwaitCase=ruleAwaitCase 
	 { $current=$iv_ruleAwaitCase.current; } 
	 EOF 
;

// Rule AwaitCase
ruleAwaitCase returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
		lv_cases_0_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_0_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_1_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getEndAwaitEndParserRuleCall_2_0(), currentNode); 
	    }
		lv_end_2_0=ruleAwaitEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_2_0, 
	        		"AwaitEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDo
entryRuleDo returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoRule(), currentNode); }
	 iv_ruleDo=ruleDo 
	 { $current=$iv_ruleDo.current; } 
	 EOF 
;

// Rule Do
ruleDo returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'do' 
    {
        createLeafNode(grammarAccess.getDoAccess().getDoKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getEndUpDoUptoParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_endUp_2_0=ruleDoUpto		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endUp",
	        		lv_endUp_2_0, 
	        		"DoUpto", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getEndWatchDoWatchingParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_endWatch_3_0=ruleDoWatching		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endWatch",
	        		lv_endWatch_3_0, 
	        		"DoWatching", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDoUpto
entryRuleDoUpto returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoUptoRule(), currentNode); }
	 iv_ruleDoUpto=ruleDoUpto 
	 { $current=$iv_ruleDoUpto.current; } 
	 EOF 
;

// Rule DoUpto
ruleDoUpto returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'upto' 
    {
        createLeafNode(grammarAccess.getDoUptoAccess().getUptoKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoUptoAccess().getExprDelayExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoUptoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDoWatching
entryRuleDoWatching returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoWatchingRule(), currentNode); }
	 iv_ruleDoWatching=ruleDoWatching 
	 { $current=$iv_ruleDoWatching.current; } 
	 EOF 
;

// Rule DoWatching
ruleDoWatching returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'watching' 
    {
        createLeafNode(grammarAccess.getDoWatchingAccess().getWatchingKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_1_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingAccess().getEndDoWatchingEndParserRuleCall_2_0(), currentNode); 
	    }
		lv_end_2_0=ruleDoWatchingEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_2_0, 
	        		"DoWatchingEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleDoWatchingEnd
entryRuleDoWatchingEnd returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoWatchingEndRule(), currentNode); }
	 iv_ruleDoWatchingEnd=ruleDoWatchingEnd 
	 { $current=$iv_ruleDoWatchingEnd.current; } 
	 EOF 
;

// Rule DoWatchingEnd
ruleDoWatchingEnd returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'timeout' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingEndAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingEndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getEndKeyword_2(), null); 
    }
(	'timeout' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_3(), null); 
    }
)?)
;





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmitRule(), currentNode); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'emit' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getEmitKeyword_0(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getEmitAccess().getSignalSignalCrossReference_1_0_0(), "signal"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getTickTickParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tick_2_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tick",
	        		lv_tick_2_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	'(' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_expr_4_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_4_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleEveryDo
entryRuleEveryDo returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEveryDoRule(), currentNode); }
	 iv_ruleEveryDo=ruleEveryDo 
	 { $current=$iv_ruleEveryDo.current; } 
	 EOF 
;

// Rule EveryDo
ruleEveryDo returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'every' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEveryKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEveryDoAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_delay_1_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEveryDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_1_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'do' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getDoKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEveryDoAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEveryDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEndKeyword_4(), null); 
    }
(	'every' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEveryKeyword_5(), null); 
    }
)?)
;





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitRule(), currentNode); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'exit' 
    {
        createLeafNode(grammarAccess.getExitAccess().getExitKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getExitAccess().getTrapTrapDeclCrossReference_1_0(), "trap"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getExitAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExitAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dataExpr_3_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_3_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getExitAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleHalt
entryRuleHalt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHaltRule(), currentNode); }
	 iv_ruleHalt=ruleHalt 
	 { $current=$iv_ruleHalt.current; } 
	 EOF 
;

// Rule Halt
ruleHalt returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'halt' 
    {
        createLeafNode(grammarAccess.getHaltAccess().getHaltKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getHaltAccess().getHaltAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getHaltAccess().getHaltAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
))
;





// Entry rule entryRuleIfTest
entryRuleIfTest returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfTestRule(), currentNode); }
	 iv_ruleIfTest=ruleIfTest 
	 { $current=$iv_ruleIfTest.current; } 
	 EOF 
;

// Rule IfTest
ruleIfTest returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getExprDataExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getThenPartThenPartParserRuleCall_2_0(), currentNode); 
	    }
		lv_thenPart_2_0=ruleThenPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenPart",
	        		lv_thenPart_2_0, 
	        		"ThenPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getElseIfElsIfPartParserRuleCall_3_0(), currentNode); 
	    }
		lv_elseIf_3_0=ruleElsIfPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseIf",
	        		lv_elseIf_3_0, 
	        		"ElsIfPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getElsePartElsePartParserRuleCall_4_0(), currentNode); 
	    }
		lv_elsePart_4_0=ruleElsePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elsePart",
	        		lv_elsePart_4_0, 
	        		"ElsePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'end' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getEndKeyword_5(), null); 
    }
(	'if' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getIfKeyword_6(), null); 
    }
)?)
;





// Entry rule entryRuleElsIfPart
entryRuleElsIfPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElsIfPartRule(), currentNode); }
	 iv_ruleElsIfPart=ruleElsIfPart 
	 { $current=$iv_ruleElsIfPart.current; } 
	 EOF 
;

// Rule ElsIfPart
ruleElsIfPart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_0_0(), currentNode); 
	    }
		lv_elsif_0_0=ruleElsIf		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elsif",
	        		lv_elsif_0_0, 
	        		"ElsIf", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_1_0(), currentNode); 
	    }
		lv_elsif_1_0=ruleElsIf		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elsif",
	        		lv_elsif_1_0, 
	        		"ElsIf", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleElsIf
entryRuleElsIf returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElsIfRule(), currentNode); }
	 iv_ruleElsIf=ruleElsIf 
	 { $current=$iv_ruleElsIf.current; } 
	 EOF 
;

// Rule ElsIf
ruleElsIf returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'elsif' 
    {
        createLeafNode(grammarAccess.getElsIfAccess().getElsifKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElsIfAccess().getExprDataExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElsIfAccess().getThenPartThenPartParserRuleCall_2_0(), currentNode); 
	    }
		lv_thenPart_2_0=ruleThenPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenPart",
	        		lv_thenPart_2_0, 
	        		"ThenPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleThenPart
entryRuleThenPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThenPartRule(), currentNode); }
	 iv_ruleThenPart=ruleThenPart 
	 { $current=$iv_ruleThenPart.current; } 
	 EOF 
;

// Rule ThenPart
ruleThenPart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'then' 
    {
        createLeafNode(grammarAccess.getThenPartAccess().getThenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getThenPartAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThenPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleElsePart
entryRuleElsePart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElsePartRule(), currentNode); }
	 iv_ruleElsePart=ruleElsePart 
	 { $current=$iv_ruleElsePart.current; } 
	 EOF 
;

// Rule ElsePart
ruleElsePart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'else' 
    {
        createLeafNode(grammarAccess.getElsePartAccess().getElseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElsePartAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopRule(), currentNode); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'loop' 
    {
        createLeafNode(grammarAccess.getLoopAccess().getLoopKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopAccess().getBodyLoopBodyParserRuleCall_1_0(), currentNode); 
	    }
		lv_body_1_0=ruleLoopBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_1_0, 
	        		"LoopBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(ruleEndLoop
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopAccess().getEndLoopEachParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_end_3_0=ruleLoopEach		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_3_0, 
	        		"LoopEach", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleEndLoop
entryRuleEndLoop returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEndLoopRule(), currentNode); } 
	 iv_ruleEndLoop=ruleEndLoop 
	 { $current=$iv_ruleEndLoop.current.getText(); }  
	 EOF 
;

// Rule EndLoop
ruleEndLoop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndLoopAccess().getEndKeyword_0(), null); 
    }
(
	kw='loop' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndLoopAccess().getLoopKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleLoopEach
entryRuleLoopEach returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopEachRule(), currentNode); }
	 iv_ruleLoopEach=ruleLoopEach 
	 { $current=$iv_ruleLoopEach.current; } 
	 EOF 
;

// Rule LoopEach
ruleLoopEach returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'each' 
    {
        createLeafNode(grammarAccess.getLoopEachAccess().getEachKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getLoopEachAccess().getLoopDelayParserRuleCall_1(), currentNode); 
    }
    this_LoopDelay_1=ruleLoopDelay
    { 
        $current = $this_LoopDelay_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLoopDelay
entryRuleLoopDelay returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopDelayRule(), currentNode); }
	 iv_ruleLoopDelay=ruleLoopDelay 
	 { $current=$iv_ruleLoopDelay.current; } 
	 EOF 
;

// Rule LoopDelay
ruleLoopDelay returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopDelayAccess().getDelayDelayExprParserRuleCall_0(), currentNode); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopDelayRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_0_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleLoopBody
entryRuleLoopBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopBodyRule(), currentNode); }
	 iv_ruleLoopBody=ruleLoopBody 
	 { $current=$iv_ruleLoopBody.current; } 
	 EOF 
;

// Rule LoopBody
ruleLoopBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopBodyAccess().getStatementStatementParserRuleCall_0(), currentNode); 
	    }
		lv_statement_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_0_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleNothing
entryRuleNothing returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNothingRule(), currentNode); }
	 iv_ruleNothing=ruleNothing 
	 { $current=$iv_ruleNothing.current; } 
	 EOF 
;

// Rule Nothing
ruleNothing returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'nothing' 
    {
        createLeafNode(grammarAccess.getNothingAccess().getNothingKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getNothingAccess().getNothingAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNothingAccess().getNothingAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
))
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPauseRule(), currentNode); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'pause' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getPauseKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getPauseAccess().getPauseAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPauseAccess().getPauseAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
))
;





// Entry rule entryRulePresent
entryRulePresent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentRule(), currentNode); }
	 iv_rulePresent=rulePresent 
	 { $current=$iv_rulePresent.current; } 
	 EOF 
;

// Rule Present
rulePresent returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'present' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getPresentKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getBodyPresentBodyParserRuleCall_1_0(), currentNode); 
	    }
		lv_body_1_0=rulePresentBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_1_0, 
	        		"PresentBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getElsePartElsePartParserRuleCall_2_0(), currentNode); 
	    }
		lv_elsePart_2_0=ruleElsePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elsePart",
	        		lv_elsePart_2_0, 
	        		"ElsePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'end' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getEndKeyword_3(), null); 
    }
(	'present' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getPresentKeyword_4(), null); 
    }
)?)
;





// Entry rule entryRulePresentBody
entryRulePresentBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentBodyRule(), currentNode); }
	 iv_rulePresentBody=rulePresentBody 
	 { $current=$iv_rulePresentBody.current; } 
	 EOF 
;

// Rule PresentBody
rulePresentBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPresentBodyAccess().getPresentEventBodyParserRuleCall_0(), currentNode); 
    }
    this_PresentEventBody_0=rulePresentEventBody
    { 
        $current = $this_PresentEventBody_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPresentBodyAccess().getPresentCaseListParserRuleCall_1(), currentNode); 
    }
    this_PresentCaseList_1=rulePresentCaseList
    { 
        $current = $this_PresentCaseList_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePresentEventBody
entryRulePresentEventBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentEventBodyRule(), currentNode); }
	 iv_rulePresentEventBody=rulePresentEventBody 
	 { $current=$iv_rulePresentEventBody.current; } 
	 EOF 
;

// Rule PresentEventBody
rulePresentEventBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventBodyAccess().getEventPresentEventParserRuleCall_0_0(), currentNode); 
	    }
		lv_event_0_0=rulePresentEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_0_0, 
	        		"PresentEvent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventBodyAccess().getThenPartThenPartParserRuleCall_1_0(), currentNode); 
	    }
		lv_thenPart_1_0=ruleThenPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenPart",
	        		lv_thenPart_1_0, 
	        		"ThenPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulePresentCaseList
entryRulePresentCaseList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentCaseListRule(), currentNode); }
	 iv_rulePresentCaseList=rulePresentCaseList 
	 { $current=$iv_rulePresentCaseList.current; } 
	 EOF 
;

// Rule PresentCaseList
rulePresentCaseList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_case_0_0=rulePresentCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"case",
	        		lv_case_0_0, 
	        		"PresentCase", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_1_0(), currentNode); 
	    }
		lv_case_1_0=rulePresentCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"case",
	        		lv_case_1_0, 
	        		"PresentCase", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRulePresentCase
entryRulePresentCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentCaseRule(), currentNode); }
	 iv_rulePresentCase=rulePresentCase 
	 { $current=$iv_rulePresentCase.current; } 
	 EOF 
;

// Rule PresentCase
rulePresentCase returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'case' 
    {
        createLeafNode(grammarAccess.getPresentCaseAccess().getCaseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseAccess().getEventPresentEventParserRuleCall_1_0(), currentNode); 
	    }
		lv_event_1_0=rulePresentEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_1_0, 
	        		"PresentEvent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'do' 
    {
        createLeafNode(grammarAccess.getPresentCaseAccess().getDoKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseAccess().getStatementStatementParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePresentEvent
entryRulePresentEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresentEventRule(), currentNode); }
	 iv_rulePresentEvent=rulePresentEvent 
	 { $current=$iv_rulePresentEvent.current; } 
	 EOF 
;

// Rule PresentEvent
rulePresentEvent returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression_0_0=ruleSigExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"SigExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getPresentEventAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression_2_0=ruleSigExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"SigExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getPresentEventAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRepeatRule(), currentNode); }
	 iv_ruleRepeat=ruleRepeat 
	 { $current=$iv_ruleRepeat.current; } 
	 EOF 
;

// Rule Repeat
ruleRepeat returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_positive_0_0=	'positive' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getPositivePositiveKeyword_0_0(), "positive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "positive", true, "positive", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'repeat' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getRepeatKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRepeatAccess().getDataExprDataExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataExpr_2_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_2_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'times' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getTimesKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRepeatAccess().getStatementStatementParserRuleCall_4_0(), currentNode); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_4_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getEndKeyword_5(), null); 
    }
(	'repeat' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getRepeatKeyword_6(), null); 
    }
)?)
;





// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRunRule(), currentNode); }
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current; } 
	 EOF 
;

// Rule Run
ruleRun returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'run' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRunKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_module_1_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"module",
	        		lv_module_1_0, 
	        		"ModuleRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getRunAccess().getLeftSquareBracketKeyword_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_list_3_0=ruleRenamingList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"list",
	        		lv_list_3_0, 
	        		"RenamingList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRightSquareBracketKeyword_0_2_2(), null); 
    }
)?)
    |(	'copymodule' 
    {
        createLeafNode(grammarAccess.getRunAccess().getCopymoduleKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_module_6_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"module",
	        		lv_module_6_0, 
	        		"ModuleRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_list_8_0=ruleRenamingList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"list",
	        		lv_list_8_0, 
	        		"RenamingList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_2_2(), null); 
    }
)?))
;





// Entry rule entryRuleModuleRenaming
entryRuleModuleRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleRenamingRule(), currentNode); }
	 iv_ruleModuleRenaming=ruleModuleRenaming 
	 { $current=$iv_ruleModuleRenaming.current; } 
	 EOF 
;

// Rule ModuleRenaming
ruleModuleRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0(), "module"); 
	}

)
)((
(
		lv_renamed_1_0=	'/' 
    {
        createLeafNode(grammarAccess.getModuleRenamingAccess().getRenamedSolidusKeyword_1_0_0(), "renamed"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "renamed", true, "/", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_newName_2_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getModuleRenamingAccess().getNewNameEsterelIDTerminalRuleCall_1_1_0(), "newName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newName",
	        		lv_newName_2_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleRenamingList
entryRuleRenamingList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRenamingListRule(), currentNode); }
	 iv_ruleRenamingList=ruleRenamingList 
	 { $current=$iv_ruleRenamingList.current; } 
	 EOF 
;

// Rule RenamingList
ruleRenamingList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_0_0(), currentNode); 
	    }
		lv_list_0_0=ruleRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_0_0, 
	        		"Renaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getRenamingListAccess().getSemicolonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_list_2_0=ruleRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_2_0, 
	        		"Renaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleRenaming
entryRuleRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRenamingRule(), currentNode); }
	 iv_ruleRenaming=ruleRenaming 
	 { $current=$iv_ruleRenaming.current; } 
	 EOF 
;

// Rule Renaming
ruleRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'type' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getTypeKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_renaming_1_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_1_0, 
	        		"TypeRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_renaming_3_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_3_0, 
	        		"TypeRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'constant' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getConstantKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_renaming_5_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_5_0, 
	        		"ConstantRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_renaming_7_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_7_0, 
	        		"ConstantRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'function' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getFunctionKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_renaming_9_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_9_0, 
	        		"FunctionRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_renaming_11_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_11_0, 
	        		"FunctionRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'signal' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getSignalKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_renaming_13_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_13_0, 
	        		"SignalRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_renaming_15_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"renaming",
	        		lv_renaming_15_0, 
	        		"SignalRenaming", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*))
;





// Entry rule entryRuleTypeRenaming
entryRuleTypeRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRenamingRule(), currentNode); }
	 iv_ruleTypeRenaming=ruleTypeRenaming 
	 { $current=$iv_ruleTypeRenaming.current; } 
	 EOF 
;

// Rule TypeRenaming
ruleTypeRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getTypeRenamingAccess().getNewNameTypeCrossReference_0_0(), "newName"); 
	}

)
)	'/' 
    {
        createLeafNode(grammarAccess.getTypeRenamingAccess().getSolidusKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_2_0(), "oldName"); 
	}

)
))
;





// Entry rule entryRuleConstantRenaming
entryRuleConstantRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantRenamingRule(), currentNode); }
	 iv_ruleConstantRenaming=ruleConstantRenaming 
	 { $current=$iv_ruleConstantRenaming.current; } 
	 EOF 
;

// Rule ConstantRenaming
ruleConstantRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getConstantRenamingAccess().getNewNameConstantCrossReference_0_0(), "newName"); 
	}

)
)	'/' 
    {
        createLeafNode(grammarAccess.getConstantRenamingAccess().getSolidusKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getConstantRenamingAccess().getOldNameConstantCrossReference_2_0(), "oldName"); 
	}

)
))
;





// Entry rule entryRuleFunctionRenaming
entryRuleFunctionRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRenamingRule(), currentNode); }
	 iv_ruleFunctionRenaming=ruleFunctionRenaming 
	 { $current=$iv_ruleFunctionRenaming.current; } 
	 EOF 
;

// Rule FunctionRenaming
ruleFunctionRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getFunctionRenamingAccess().getNewNameFunctionCrossReference_0_0(), "newName"); 
	}

)
)	'/' 
    {
        createLeafNode(grammarAccess.getFunctionRenamingAccess().getSolidusKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_2_0(), "oldName"); 
	}

)
))
;







// Entry rule entryRuleSignalRenaming
entryRuleSignalRenaming returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRenamingRule(), currentNode); }
	 iv_ruleSignalRenaming=ruleSignalRenaming 
	 { $current=$iv_ruleSignalRenaming.current; } 
	 EOF 
;

// Rule SignalRenaming
ruleSignalRenaming returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getSignalRenamingAccess().getNewNameSignalCrossReference_0_0(), "newName"); 
	}

)
)	'/' 
    {
        createLeafNode(grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getSignalRenamingAccess().getOldNameSignalCrossReference_2_0(), "oldName"); 
	}

)
))
;





// Entry rule entryRuleLocalSignalDecl
entryRuleLocalSignalDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalSignalDeclRule(), currentNode); }
	 iv_ruleLocalSignalDecl=ruleLocalSignalDecl 
	 { $current=$iv_ruleLocalSignalDecl.current; } 
	 EOF 
;

// Rule LocalSignalDecl
ruleLocalSignalDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'signal' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalDeclAccess().getSignalListLocalSignalListParserRuleCall_1_0(), currentNode); 
	    }
		lv_signalList_1_0=ruleLocalSignalList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signalList",
	        		lv_signalList_1_0, 
	        		"LocalSignalList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'in' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getInKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getEndKeyword_4(), null); 
    }
(	'signal' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_5(), null); 
    }
)?)
;





// Entry rule entryRuleLocalSignalList
entryRuleLocalSignalList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalSignalListRule(), currentNode); }
	 iv_ruleLocalSignalList=ruleLocalSignalList 
	 { $current=$iv_ruleLocalSignalList.current; } 
	 EOF 
;

// Rule LocalSignalList
ruleLocalSignalList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_1_0(), currentNode); 
	    }
		lv_signal_1_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_1_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLocalSignalListAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_signal_3_0=ruleSignal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signal",
	        		lv_signal_3_0, 
	        		"Signal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSuspend
entryRuleSuspend returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSuspendRule(), currentNode); }
	 iv_ruleSuspend=ruleSuspend 
	 { $current=$iv_ruleSuspend.current; } 
	 EOF 
;

// Rule Suspend
ruleSuspend returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'suspend' 
    {
        createLeafNode(grammarAccess.getSuspendAccess().getSuspendKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSuspendAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuspendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'when' 
    {
        createLeafNode(grammarAccess.getSuspendAccess().getWhenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSuspendAccess().getDelayDelayExprParserRuleCall_3_0(), currentNode); 
	    }
		lv_delay_3_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuspendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_3_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSustain
entryRuleSustain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSustainRule(), currentNode); }
	 iv_ruleSustain=ruleSustain 
	 { $current=$iv_ruleSustain.current; } 
	 EOF 
;

// Rule Sustain
ruleSustain returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sustain' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getSustainKeyword_0(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSustainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getSustainAccess().getSignalSignalCrossReference_1_0_0(), "signal"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSustainAccess().getTickTickParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tick_2_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSustainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tick",
	        		lv_tick_2_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	'(' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSustainAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dataExpr_4_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSustainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_4_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleTrap
entryRuleTrap returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapRule(), currentNode); }
	 iv_ruleTrap=ruleTrap 
	 { $current=$iv_ruleTrap.current; } 
	 EOF 
;

// Rule Trap
ruleTrap returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'trap' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getTrapKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getTrapDeclListTrapDeclListParserRuleCall_1_0(), currentNode); 
	    }
		lv_trapDeclList_1_0=ruleTrapDeclList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trapDeclList",
	        		lv_trapDeclList_1_0, 
	        		"TrapDeclList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'in' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getInKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getTrapHandlerListTrapHandlerListParserRuleCall_4_0(), currentNode); 
	    }
		lv_trapHandlerList_4_0=ruleTrapHandlerList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trapHandlerList",
	        		lv_trapHandlerList_4_0, 
	        		"TrapHandlerList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'end' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getEndKeyword_5(), null); 
    }
(	'trap' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getTrapKeyword_6(), null); 
    }
)?)
;





// Entry rule entryRuleTrapDeclList
entryRuleTrapDeclList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapDeclListRule(), currentNode); }
	 iv_ruleTrapDeclList=ruleTrapDeclList 
	 { $current=$iv_ruleTrapDeclList.current; } 
	 EOF 
;

// Rule TrapDeclList
ruleTrapDeclList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_0_0(), currentNode); 
	    }
		lv_trapDecl_0_0=ruleTrapDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"trapDecl",
	        		lv_trapDecl_0_0, 
	        		"TrapDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTrapDeclListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_trapDecl_2_0=ruleTrapDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"trapDecl",
	        		lv_trapDecl_2_0, 
	        		"TrapDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleTrapDecl
entryRuleTrapDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapDeclRule(), currentNode); }
	 iv_ruleTrapDecl=ruleTrapDecl 
	 { $current=$iv_ruleTrapDecl.current; } 
	 EOF 
;

// Rule TrapDecl
ruleTrapDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getTrapDeclAccess().getNameEsterelIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclAccess().getChannelDescChannelDescriptionParserRuleCall_1_0(), currentNode); 
	    }
		lv_channelDesc_1_0=ruleChannelDescription		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"channelDesc",
	        		lv_channelDesc_1_0, 
	        		"ChannelDescription", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleTrapHandlerList
entryRuleTrapHandlerList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapHandlerListRule(), currentNode); }
	 iv_ruleTrapHandlerList=ruleTrapHandlerList 
	 { $current=$iv_ruleTrapHandlerList.current; } 
	 EOF 
;

// Rule TrapHandlerList
ruleTrapHandlerList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_0_0(), currentNode); 
	    }
		lv_trapHandler_0_0=ruleTrapHandler		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"trapHandler",
	        		lv_trapHandler_0_0, 
	        		"TrapHandler", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_1_0(), currentNode); 
	    }
		lv_trapHandler_1_0=ruleTrapHandler		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"trapHandler",
	        		lv_trapHandler_1_0, 
	        		"TrapHandler", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleTrapHandler
entryRuleTrapHandler returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapHandlerRule(), currentNode); }
	 iv_ruleTrapHandler=ruleTrapHandler 
	 { $current=$iv_ruleTrapHandler.current; } 
	 EOF 
;

// Rule TrapHandler
ruleTrapHandler returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'handle' 
    {
        createLeafNode(grammarAccess.getTrapHandlerAccess().getHandleKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerAccess().getTrapExprTrapExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_trapExpr_1_0=ruleTrapExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trapExpr",
	        		lv_trapExpr_1_0, 
	        		"TrapExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'do' 
    {
        createLeafNode(grammarAccess.getTrapHandlerAccess().getDoKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getVarDeclVariableDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_varDecl_1_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varDecl",
	        		lv_varDecl_1_0, 
	        		"VariableDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'in' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getInKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'end' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getEndKeyword_4(), null); 
    }
(	'var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_5(), null); 
    }
)?)
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclRule(), currentNode); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_0_0(), currentNode); 
	    }
		lv_varList_0_0=ruleVariableList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varList",
	        		lv_varList_0_0, 
	        		"VariableList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getColonKeyword_1(), null); 
    }
((
(
		lv_type_2_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getVariableDeclAccess().getTypeEsterelIDTerminalRuleCall_2_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_3_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_2_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))((
    { 
        temp=factory.create(grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	',' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getCommaKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_varList_6_0=ruleVariableList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varList",
	        		lv_varList_6_0, 
	        		"VariableList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getColonKeyword_3_3(), null); 
    }
((
(
		lv_type_8_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getVariableDeclAccess().getTypeEsterelIDTerminalRuleCall_3_4_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_9_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_3_4_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_9_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))*)
;





// Entry rule entryRuleVariableList
entryRuleVariableList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableListRule(), currentNode); }
	 iv_ruleVariableList=ruleVariableList 
	 { $current=$iv_ruleVariableList.current; } 
	 EOF 
;

// Rule VariableList
ruleVariableList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_variable_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getVariableListAccess().getVariableEsterelIDTerminalRuleCall_0_0(), "variable"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression_2_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((
    { 
        temp=factory.create(grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	',' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getCommaKeyword_2_1(), null); 
    }
(
(
		lv_variable_5_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getVariableListAccess().getVariableEsterelIDTerminalRuleCall_2_2_0(), "variable"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_5_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':=' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_2_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_2_3_1_0(), currentNode); 
	    }
		lv_expression_7_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_7_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)*)
;





// Entry rule entryRuleWeakAbort
entryRuleWeakAbort returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortRule(), currentNode); }
	 iv_ruleWeakAbort=ruleWeakAbort 
	 { $current=$iv_ruleWeakAbort.current; } 
	 EOF 
;

// Rule WeakAbort
ruleWeakAbort returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'weak' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getWeakKeyword_0(), null); 
    }
	'abort' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getAbortKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortAccess().getStatementStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'when' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getWhenKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortAccess().getWeakAbortBodyWeakAbortBodyParserRuleCall_4_0(), currentNode); 
	    }
		lv_weakAbortBody_4_0=ruleWeakAbortBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"weakAbortBody",
	        		lv_weakAbortBody_4_0, 
	        		"WeakAbortBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWeakAbortBody
entryRuleWeakAbortBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortBodyRule(), currentNode); }
	 iv_ruleWeakAbortBody=ruleWeakAbortBody 
	 { $current=$iv_ruleWeakAbortBody.current; } 
	 EOF 
;

// Rule WeakAbortBody
ruleWeakAbortBody returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortInstanceParserRuleCall_0(), currentNode); 
    }
    this_WeakAbortInstance_0=ruleWeakAbortInstance
    { 
        $current = $this_WeakAbortInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortCaseParserRuleCall_1(), currentNode); 
    }
    this_WeakAbortCase_1=ruleWeakAbortCase
    { 
        $current = $this_WeakAbortCase_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleWeakAbortEnd
entryRuleWeakAbortEnd returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortEndRule(), currentNode); } 
	 iv_ruleWeakAbortEnd=ruleWeakAbortEnd 
	 { $current=$iv_ruleWeakAbortEnd.current.getText(); }  
	 EOF 
;

// Rule WeakAbortEnd
ruleWeakAbortEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getEndKeyword_0(), null); 
    }
((
	kw='weak' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getWeakKeyword_1_0(), null); 
    }
)?
	kw='abort' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getAbortKeyword_1_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleWeakAbortInstance
entryRuleWeakAbortInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortInstanceRule(), currentNode); }
	 iv_ruleWeakAbortInstance=ruleWeakAbortInstance 
	 { $current=$iv_ruleWeakAbortInstance.current; } 
	 EOF 
;

// Rule WeakAbortInstance
ruleWeakAbortInstance returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(), currentNode); 
	    }
		lv_delay_0_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_0_0, 
	        		"DelayExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'do' 
    {
        createLeafNode(grammarAccess.getWeakAbortInstanceAccess().getDoKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getEndWeakAbortEndParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_end_3_0=ruleWeakAbortEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_3_0, 
	        		"WeakAbortEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleWeakAbortCase
entryRuleWeakAbortCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortCaseRule(), currentNode); }
	 iv_ruleWeakAbortCase=ruleWeakAbortCase 
	 { $current=$iv_ruleWeakAbortCase.current; } 
	 EOF 
;

// Rule WeakAbortCase
ruleWeakAbortCase returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
		lv_cases_0_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_0_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
		lv_cases_1_0=ruleAbortCaseSingle		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cases",
	        		lv_cases_1_0, 
	        		"AbortCaseSingle", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getEndWeakAbortEndParserRuleCall_2_0(), currentNode); 
	    }
		lv_end_2_0=ruleWeakAbortEnd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_2_0, 
	        		"WeakAbortEnd", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDataExpr
entryRuleDataExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataExprRule(), currentNode); }
	 iv_ruleDataExpr=ruleDataExpr 
	 { $current=$iv_ruleDataExpr.current; } 
	 EOF 
;

// Rule DataExpr
ruleDataExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getDataUnaryExprParserRuleCall_0_0(), currentNode); 
    }
    this_DataUnaryExpr_0=ruleDataUnaryExpr
    { 
        $current = $this_DataUnaryExpr_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getDataExprAccess().getDataExprLeftAction_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDataExprAccess().getDataExprLeftAction_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_op_2_0=ruleDataOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"DataOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getRightDataExprParserRuleCall_0_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_op_4_0=ruleDataOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_4_0, 
	        		"DataOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getExprDataExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expr_5_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_5_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDataOp
entryRuleDataOp returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataOpRule(), currentNode); } 
	 iv_ruleDataOp=ruleDataOp 
	 { $current=$iv_ruleDataOp.current.getText(); }  
	 EOF 
;

// Rule DataOp
ruleDataOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getAndKeyword_0(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getOrKeyword_1(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getNotKeyword_2(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignKeyword_3(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getGreaterThanSignKeyword_4(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignEqualsSignKeyword_5(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getGreaterThanSignEqualsSignKeyword_6(), null); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignGreaterThanSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getPlusSignKeyword_9(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getHyphenMinusKeyword_10(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getAsteriskKeyword_11(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getSolidusKeyword_12(), null); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getModKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleDataUnaryExpr
entryRuleDataUnaryExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataUnaryExprRule(), currentNode); }
	 iv_ruleDataUnaryExpr=ruleDataUnaryExpr 
	 { $current=$iv_ruleDataUnaryExpr.current; } 
	 EOF 
;

// Rule DataUnaryExpr
ruleDataUnaryExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataValueFloatParserRuleCall_0(), currentNode); 
    }
    this_DataValueFloat_0=ruleDataValueFloat
    { 
        $current = $this_DataValueFloat_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataValueBooleanParserRuleCall_1(), currentNode); 
    }
    this_DataValueBoolean_1=ruleDataValueBoolean
    { 
        $current = $this_DataValueBoolean_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataValueIntParserRuleCall_2(), currentNode); 
    }
    this_DataValueInt_2=ruleDataValueInt
    { 
        $current = $this_DataValueInt_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataValueStringParserRuleCall_3(), currentNode); 
    }
    this_DataValueString_3=ruleDataValueString
    { 
        $current = $this_DataValueString_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataValueIDParserRuleCall_4(), currentNode); 
    }
    this_DataValueID_4=ruleDataValueID
    { 
        $current = $this_DataValueID_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataBlockParserRuleCall_5(), currentNode); 
    }
    this_DataBlock_5=ruleDataBlock
    { 
        $current = $this_DataBlock_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataCurrentParserRuleCall_6(), currentNode); 
    }
    this_DataCurrent_6=ruleDataCurrent
    { 
        $current = $this_DataCurrent_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataPreParserRuleCall_7(), currentNode); 
    }
    this_DataPre_7=ruleDataPre
    { 
        $current = $this_DataPre_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataTrapParserRuleCall_8(), currentNode); 
    }
    this_DataTrap_8=ruleDataTrap
    { 
        $current = $this_DataTrap_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataFunctionParserRuleCall_9(), currentNode); 
    }
    this_DataFunction_9=ruleDataFunction
    { 
        $current = $this_DataFunction_9.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDataValueID
entryRuleDataValueID returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataValueIDRule(), currentNode); }
	 iv_ruleDataValueID=ruleDataValueID 
	 { $current=$iv_ruleDataValueID.current; } 
	 EOF 
;

// Rule DataValueID
ruleDataValueID returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getDataValueIDAccess().getValueEsterelIDTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataValueIDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDataValueFloat
entryRuleDataValueFloat returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataValueFloatRule(), currentNode); }
	 iv_ruleDataValueFloat=ruleDataValueFloat 
	 { $current=$iv_ruleDataValueFloat.current; } 
	 EOF 
;

// Rule DataValueFloat
ruleDataValueFloat returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			createLeafNode(grammarAccess.getDataValueFloatAccess().getValueFloatTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataValueFloatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Float", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDataValueBoolean
entryRuleDataValueBoolean returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataValueBooleanRule(), currentNode); }
	 iv_ruleDataValueBoolean=ruleDataValueBoolean 
	 { $current=$iv_ruleDataValueBoolean.current; } 
	 EOF 
;

// Rule DataValueBoolean
ruleDataValueBoolean returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getDataValueBooleanAccess().getValueBooleanTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataValueBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Boolean", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDataValueInt
entryRuleDataValueInt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataValueIntRule(), currentNode); }
	 iv_ruleDataValueInt=ruleDataValueInt 
	 { $current=$iv_ruleDataValueInt.current; } 
	 EOF 
;

// Rule DataValueInt
ruleDataValueInt returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDataValueIntAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataValueIntRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDataValueString
entryRuleDataValueString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataValueStringRule(), currentNode); }
	 iv_ruleDataValueString=ruleDataValueString 
	 { $current=$iv_ruleDataValueString.current; } 
	 EOF 
;

// Rule DataValueString
ruleDataValueString returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDataValueStringAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataValueStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDataBlock
entryRuleDataBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataBlockRule(), currentNode); }
	 iv_ruleDataBlock=ruleDataBlock 
	 { $current=$iv_ruleDataBlock.current; } 
	 EOF 
;

// Rule DataBlock
ruleDataBlock returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getDataBlockAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataBlockAccess().getDataExprDataExprParserRuleCall_1_0(), currentNode); 
	    }
		lv_dataExpr_1_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_1_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDataBlockAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleDataCurrent
entryRuleDataCurrent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataCurrentRule(), currentNode); }
	 iv_ruleDataCurrent=ruleDataCurrent 
	 { $current=$iv_ruleDataCurrent.current; } 
	 EOF 
;

// Rule DataCurrent
ruleDataCurrent returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'?' 
    {
        createLeafNode(grammarAccess.getDataCurrentAccess().getQuestionMarkKeyword_0(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataCurrentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getDataCurrentAccess().getSignalSignalCrossReference_1_0_0(), "signal"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataCurrentAccess().getTickTickParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tick_2_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataCurrentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tick",
	        		lv_tick_2_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDataPre
entryRuleDataPre returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataPreRule(), currentNode); }
	 iv_ruleDataPre=ruleDataPre 
	 { $current=$iv_ruleDataPre.current; } 
	 EOF 
;

// Rule DataPre
ruleDataPre returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'pre' 
    {
        createLeafNode(grammarAccess.getDataPreAccess().getPreKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getDataPreAccess().getLeftParenthesisKeyword_1(), null); 
    }
	'?' 
    {
        createLeafNode(grammarAccess.getDataPreAccess().getQuestionMarkKeyword_2(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataPreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getDataPreAccess().getSignalSignalCrossReference_3_0_0(), "signal"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataPreAccess().getTickTickParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_tick_4_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataPreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tick",
	        		lv_tick_4_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getDataPreAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDataTrap
entryRuleDataTrap returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTrapRule(), currentNode); }
	 iv_ruleDataTrap=ruleDataTrap 
	 { $current=$iv_ruleDataTrap.current; } 
	 EOF 
;

// Rule DataTrap
ruleDataTrap returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'??' 
    {
        createLeafNode(grammarAccess.getDataTrapAccess().getQuestionMarkQuestionMarkKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getDataTrapAccess().getTrapTrapDeclCrossReference_1_0(), "trap"); 
	}

)
))
;





// Entry rule entryRuleDataFunction
entryRuleDataFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataFunctionRule(), currentNode); }
	 iv_ruleDataFunction=ruleDataFunction 
	 { $current=$iv_ruleDataFunction.current; } 
	 EOF 
;

// Rule DataFunction
ruleDataFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getDataFunctionAccess().getFunctionFunctionCrossReference_0_0(), "function"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getDataFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataFunctionAccess().getDataExprDataExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataExpr_2_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_2_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDataFunctionAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataFunctionAccess().getDataExprDataExprParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_dataExpr_4_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_4_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getDataFunctionAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleTrapExpr
entryRuleTrapExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTrapExprRule(), currentNode); }
	 iv_ruleTrapExpr=ruleTrapExpr 
	 { $current=$iv_ruleTrapExpr.current; } 
	 EOF 
;

// Rule TrapExpr
ruleTrapExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getTrapExprAccess().getSigExprParserRuleCall(), currentNode); 
    }
    this_SigExpr_0=ruleSigExpr
    { 
        $current = $this_SigExpr_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleSigExpr
entryRuleSigExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigExprRule(), currentNode); }
	 iv_ruleSigExpr=ruleSigExpr 
	 { $current=$iv_ruleSigExpr.current; } 
	 EOF 
;

// Rule SigExpr
ruleSigExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_0_0(), currentNode); 
	    }
		lv_andExpr_0_0=ruleSigExprAND		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"andExpr",
	        		lv_andExpr_0_0, 
	        		"SigExprAND", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'or' 
    {
        createLeafNode(grammarAccess.getSigExprAccess().getOrKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_andExpr_2_0=ruleSigExprAND		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"andExpr",
	        		lv_andExpr_2_0, 
	        		"SigExprAND", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSigExprAND
entryRuleSigExprAND returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigExprANDRule(), currentNode); }
	 iv_ruleSigExprAND=ruleSigExprAND 
	 { $current=$iv_ruleSigExprAND.current; } 
	 EOF 
;

// Rule SigExprAND
ruleSigExprAND returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_0_0(), currentNode); 
	    }
		lv_unaExpr_0_0=ruleSigExprUnary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprANDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"unaExpr",
	        		lv_unaExpr_0_0, 
	        		"SigExprUnary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'and' 
    {
        createLeafNode(grammarAccess.getSigExprANDAccess().getAndKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_unaExpr_2_0=ruleSigExprUnary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprANDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"unaExpr",
	        		lv_unaExpr_2_0, 
	        		"SigExprUnary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSigExprUnary
entryRuleSigExprUnary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigExprUnaryRule(), currentNode); }
	 iv_ruleSigExprUnary=ruleSigExprUnary 
	 { $current=$iv_ruleSigExprUnary.current; } 
	 EOF 
;

// Rule SigExprUnary
ruleSigExprUnary returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_expr_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSigExprUnaryAccess().getExprEsterelIDTerminalRuleCall_0_0(), "expr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprUnaryAccess().getSigExprSigExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_sigExpr_2_0=ruleSigExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sigExpr",
	        		lv_sigExpr_2_0, 
	        		"SigExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)
    |(	'not' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getNotKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExprUnaryAccess().getSigExprSigExprUnaryParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_sigExpr_5_0=ruleSigExprUnary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sigExpr",
	        		lv_sigExpr_5_0, 
	        		"SigExprUnary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDelayExpr
entryRuleDelayExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDelayExprRule(), currentNode); }
	 iv_ruleDelayExpr=ruleDelayExpr 
	 { $current=$iv_ruleDelayExpr.current; } 
	 EOF 
;

// Rule DelayExpr
ruleDelayExpr returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_0_0(), currentNode); 
	    }
		lv_event_0_0=ruleDelayEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_0_0, 
	        		"DelayEvent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getExprDataExprParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_expr_1_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_event_2_0=ruleDelayEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_2_0, 
	        		"DelayEvent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDelayEvent
entryRuleDelayEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDelayEventRule(), currentNode); }
	 iv_ruleDelayEvent=ruleDelayEvent 
	 { $current=$iv_ruleDelayEvent.current; } 
	 EOF 
;

// Rule DelayEvent
ruleDelayEvent returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getDelayEventAccess().getSignalSignalCrossReference_0_0_0(), "signal"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayEventAccess().getTickTickParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_tick_1_0=ruleTick		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tick",
	        		lv_tick_1_0, 
	        		"Tick", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'pre' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getPreKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayEventAccess().getPreSigExprSigExprParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_preSigExpr_4_0=ruleSigExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"preSigExpr",
	        		lv_preSigExpr_4_0, 
	        		"SigExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayEventAccess().getBlockSigExprSigExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_blockSigExpr_7_0=ruleSigExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"blockSigExpr",
	        		lv_blockSigExpr_7_0, 
	        		"SigExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getRightSquareBracketKeyword_2_2(), null); 
    }
))
;





// Entry rule entryRuleChannelDescription
entryRuleChannelDescription returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChannelDescriptionRule(), currentNode); }
	 iv_ruleChannelDescription=ruleChannelDescription 
	 { $current=$iv_ruleChannelDescription.current; } 
	 EOF 
;

// Rule ChannelDescription
ruleChannelDescription returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	':' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleChannelType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"ChannelType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'(' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleChannelType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"ChannelType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)
    |(	':=' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChannelDescriptionAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dataExpr_6_0=ruleDataExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataExpr",
	        		lv_dataExpr_6_0, 
	        		"DataExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChannelDescriptionAccess().getTypeChannelTypeParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_type_8_0=ruleChannelType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"ChannelType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleChannelType
entryRuleChannelType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChannelTypeRule(), currentNode); }
	 iv_ruleChannelType=ruleChannelType 
	 { $current=$iv_ruleChannelType.current; } 
	 EOF 
;

// Rule ChannelType
ruleChannelType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_type_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getChannelTypeAccess().getTypeEsterelIDTerminalRuleCall_0_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_1_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getChannelTypeAccess().getTypeBaseTypeTerminalRuleCall_0_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(	'combine' 
    {
        createLeafNode(grammarAccess.getChannelTypeAccess().getCombineKeyword_1_0(), null); 
    }
((
(
		lv_type_3_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getChannelTypeAccess().getTypeEsterelIDTerminalRuleCall_1_1_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_4_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getChannelTypeAccess().getTypeBaseTypeTerminalRuleCall_1_1_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_4_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'with' 
    {
        createLeafNode(grammarAccess.getChannelTypeAccess().getWithKeyword_1_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ESTERELID
	{
		createLeafNode(grammarAccess.getChannelTypeAccess().getFuncFunctionCrossReference_1_3_0(), "func"); 
	}

)
)))
;





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSignalAccess().getNameEsterelIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getChannelChannelDescriptionParserRuleCall_1_0(), currentNode); 
	    }
		lv_channel_1_0=ruleChannelDescription		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"channel",
	        		lv_channel_1_0, 
	        		"ChannelDescription", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleTick
entryRuleTick returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTickRule(), currentNode); } 
	 iv_ruleTick=ruleTick 
	 { $current=$iv_ruleTick.current.getText(); }  
	 EOF 
;

// Rule Tick
ruleTick returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='tick' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getTickAccess().getTickKeyword(), null); 
    }

    ;





// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSensorRule(), currentNode); }
	 iv_ruleSensor=ruleSensor 
	 { $current=$iv_ruleSensor.current; } 
	 EOF 
;

// Rule Sensor
ruleSensor returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_name_0_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSensorAccess().getNameEsterelIDTerminalRuleCall_0_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getColonKeyword_0_1(), null); 
    }
((
(
		lv_type_2_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSensorAccess().getTypeEsterelIDTerminalRuleCall_0_2_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_3_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_0_2_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
    |((
(
		lv_name_4_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSensorAccess().getNameEsterelIDTerminalRuleCall_1_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((
(
		lv_type_6_0=RULE_ESTERELID
		{
			createLeafNode(grammarAccess.getSensorAccess().getTypeEsterelIDTerminalRuleCall_1_2_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_6_0, 
	        		"EsterelID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_type_7_0=RULE_BASETYPE
		{
			createLeafNode(grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_1_2_1_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"BaseType", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getRightParenthesisKeyword_1_3(), null); 
    }
))
;





RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') ('-'|'+')? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_BASETYPE : ('boolean'|'integer'|'float'|'double'|'string');

RULE_ESTEREL_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ESTEREL_ML_COMMENT : '%' '{' ( options {greedy=false;} : . )*'}' '%';

RULE_ESTERELID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


