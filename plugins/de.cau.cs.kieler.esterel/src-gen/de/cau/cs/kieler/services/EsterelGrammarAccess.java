/*
* generated by Xtext
*/

package de.cau.cs.kieler.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EsterelGrammarAccess implements IGrammarAccess {
	
	
	public class ProgrammElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Programm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleMainModuleParserRuleCall_0_0 = (RuleCall)cModuleAssignment_0.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModuleParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		
		//Programm hidden ( Esterel_SL_Comment , Esterel_ML_Comment , WS ):
		//  module+=MainModule module+=Module*; 
		//
		//// TODO : replace ID with proper build strings		
		//
		//// ==============================================
		//// ===              B.5 Modules               ===
		//// ==============================================
		//
		////	help function to allow multiple modules in one document
		public ParserRule getRule() { return rule; }

		//module+=MainModule module+=Module*
		public Group getGroup() { return cGroup; }

		//module+=MainModule
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//MainModule
		public RuleCall getModuleMainModuleParserRuleCall_0_0() { return cModuleMainModuleParserRuleCall_0_0; }

		//module+=Module*
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_1_0() { return cModuleModuleParserRuleCall_1_0; }
	}

	public class MainModuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModIntAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModIntModuleInterfaceParserRuleCall_3_0 = (RuleCall)cModIntAssignment_3.eContents().get(0);
		private final Assignment cModBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModBodyModuleBodyParserRuleCall_4_0 = (RuleCall)cModBodyAssignment_4.eContents().get(0);
		private final RuleCall cEndModuleParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MainModule:
		//  "module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule;
		public ParserRule getRule() { return rule; }

		//"module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//modInt=ModuleInterface?
		public Assignment getModIntAssignment_3() { return cModIntAssignment_3; }

		//ModuleInterface
		public RuleCall getModIntModuleInterfaceParserRuleCall_3_0() { return cModIntModuleInterfaceParserRuleCall_3_0; }

		//modBody=ModuleBody
		public Assignment getModBodyAssignment_4() { return cModBodyAssignment_4; }

		//ModuleBody
		public RuleCall getModBodyModuleBodyParserRuleCall_4_0() { return cModBodyModuleBodyParserRuleCall_4_0; }

		//EndModule
		public RuleCall getEndModuleParserRuleCall_5() { return cEndModuleParserRuleCall_5; }
	}

	public class ModuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModIntAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModIntModuleInterfaceParserRuleCall_3_0 = (RuleCall)cModIntAssignment_3.eContents().get(0);
		private final Assignment cModBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModBodyModuleBodyParserRuleCall_4_0 = (RuleCall)cModBodyAssignment_4.eContents().get(0);
		private final RuleCall cEndModuleParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Module:
		//  "module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule;
		public ParserRule getRule() { return rule; }

		//"module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//modInt=ModuleInterface?
		public Assignment getModIntAssignment_3() { return cModIntAssignment_3; }

		//ModuleInterface
		public RuleCall getModIntModuleInterfaceParserRuleCall_3_0() { return cModIntModuleInterfaceParserRuleCall_3_0; }

		//modBody=ModuleBody
		public Assignment getModBodyAssignment_4() { return cModBodyAssignment_4; }

		//ModuleBody
		public RuleCall getModBodyModuleBodyParserRuleCall_4_0() { return cModBodyModuleBodyParserRuleCall_4_0; }

		//EndModule
		public RuleCall getEndModuleParserRuleCall_5() { return cEndModuleParserRuleCall_5; }
	}

	public class EndModuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndModule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEndKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cModuleKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EndModule returns ecore::EString:
		//  "end" "module"|"."; 
		//
		//
		//	  
		//		   //deprecated
		//
		//// help function to clearly divide a Module into interface and body
		public ParserRule getRule() { return rule; }

		//"end" "module"|"." 
		//
		//
		//	  
		//		   //deprecated
		//
		//// help function to clearly divide a Module into interface and body
		public Alternatives getAlternatives() { return cAlternatives; }

		//"end" "module"
		public Group getGroup_0() { return cGroup_0; }

		//"end"
		public Keyword getEndKeyword_0_0() { return cEndKeyword_0_0; }

		//"module"
		public Keyword getModuleKeyword_0_1() { return cModuleKeyword_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ModuleBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleBody");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//ModuleBody:
		//  statement+=Statement;   //deprecated
		//
		//// help function to clearly divide a Module into interface and body
		public ParserRule getRule() { return rule; }

		//statement+=Statement
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_0() { return cStatementStatementParserRuleCall_0; }
	}

	public class ModuleInterfaceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleInterface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntSignalDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntSignalDeclSignalDeclParserRuleCall_0_0 = (RuleCall)cIntSignalDeclAssignment_0.eContents().get(0);
		private final Assignment cIntTypeDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntTypeDeclTypeDeclParserRuleCall_1_0 = (RuleCall)cIntTypeDeclAssignment_1.eContents().get(0);
		private final Assignment cIntSensorDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntSensorDeclSensorDeclParserRuleCall_2_0 = (RuleCall)cIntSensorDeclAssignment_2.eContents().get(0);
		private final Assignment cIntConstantDeclAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIntConstantDeclConstantDeclParserRuleCall_3_0 = (RuleCall)cIntConstantDeclAssignment_3.eContents().get(0);
		private final Assignment cIntRelationDeclAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIntRelationDeclRelationDeclParserRuleCall_4_0 = (RuleCall)cIntRelationDeclAssignment_4.eContents().get(0);
		private final Assignment cIntFunctionDeclAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cIntFunctionDeclFunctionDeclParserRuleCall_5_0 = (RuleCall)cIntFunctionDeclAssignment_5.eContents().get(0);
		
		//ModuleInterface:
		//  (intSignalDecl+=SignalDecl|intTypeDecl+=TypeDecl|intSensorDecl+=SensorDecl|
		//  intConstantDecl+=ConstantDecl|intRelationDecl+=RelationDecl|intFunctionDecl+=
		//  FunctionDecl)+; 
		//
		//
		//	
		//		 
		//		 
		//		 
		//		 
		//		 
		//
		//// ----------------------------------------------
		////            Interface Declarations
		//// ----------------------------------------------
		//	
		//// ==> Signals and Sensors <==
		public ParserRule getRule() { return rule; }

		//(intSignalDecl+=SignalDecl|intTypeDecl+=TypeDecl|intSensorDecl+=SensorDecl|
		//intConstantDecl+=ConstantDecl|intRelationDecl+=RelationDecl|intFunctionDecl+=
		//FunctionDecl)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//intSignalDecl+=SignalDecl
		public Assignment getIntSignalDeclAssignment_0() { return cIntSignalDeclAssignment_0; }

		//SignalDecl
		public RuleCall getIntSignalDeclSignalDeclParserRuleCall_0_0() { return cIntSignalDeclSignalDeclParserRuleCall_0_0; }

		//intTypeDecl+=TypeDecl
		public Assignment getIntTypeDeclAssignment_1() { return cIntTypeDeclAssignment_1; }

		//TypeDecl
		public RuleCall getIntTypeDeclTypeDeclParserRuleCall_1_0() { return cIntTypeDeclTypeDeclParserRuleCall_1_0; }

		//intSensorDecl+=SensorDecl
		public Assignment getIntSensorDeclAssignment_2() { return cIntSensorDeclAssignment_2; }

		//SensorDecl
		public RuleCall getIntSensorDeclSensorDeclParserRuleCall_2_0() { return cIntSensorDeclSensorDeclParserRuleCall_2_0; }

		//intConstantDecl+=ConstantDecl
		public Assignment getIntConstantDeclAssignment_3() { return cIntConstantDeclAssignment_3; }

		//ConstantDecl
		public RuleCall getIntConstantDeclConstantDeclParserRuleCall_3_0() { return cIntConstantDeclConstantDeclParserRuleCall_3_0; }

		//intRelationDecl+=RelationDecl
		public Assignment getIntRelationDeclAssignment_4() { return cIntRelationDeclAssignment_4; }

		//RelationDecl
		public RuleCall getIntRelationDeclRelationDeclParserRuleCall_4_0() { return cIntRelationDeclRelationDeclParserRuleCall_4_0; }

		//intFunctionDecl+=FunctionDecl
		public Assignment getIntFunctionDeclAssignment_5() { return cIntFunctionDeclAssignment_5; }

		//FunctionDecl
		public RuleCall getIntFunctionDeclFunctionDeclParserRuleCall_5_0() { return cIntFunctionDeclFunctionDeclParserRuleCall_5_0; }
	}

	public class SignalDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInputKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSignalAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSignalSignalParserRuleCall_0_2_0 = (RuleCall)cSignalAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cSignalAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_0_3_1_0 = (RuleCall)cSignalAssignment_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutputKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSignalAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSignalSignalParserRuleCall_1_2_0 = (RuleCall)cSignalAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cSignalAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_1_3_1_0 = (RuleCall)cSignalAssignment_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInputOutputAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInputoutputKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSignalAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSignalSignalParserRuleCall_2_2_0 = (RuleCall)cSignalAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cSignalAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_2_3_1_0 = (RuleCall)cSignalAssignment_2_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReturnAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cReturnKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSignalAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSignalSignalParserRuleCall_3_2_0 = (RuleCall)cSignalAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSignalAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_3_3_1_0 = (RuleCall)cSignalAssignment_3_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//SignalDecl:
		//  {Input} "input" signal+=Signal ("," signal+=Signal)* ";"|{Output} "output" signal+=
		//  Signal ("," signal+=Signal)* ";"|{InputOutput} "inputoutput" signal+=Signal ("," signal
		//  +=Signal)* ";"|{Return} "return" signal+=Signal ("," signal+=Signal)* ";"; 
		//
		//// ----------------------------------------------
		////            Interface Declarations
		//// ----------------------------------------------
		//	
		//// ==> Signals and Sensors <==
		//
		//
		//	          
		//		           
		//		           
		//		           
		//
		//	
		////ChannelType:
		////	//make reference to declared types
		//	 //Problem: Need reference OR BaseType
		public ParserRule getRule() { return rule; }

		//{Input} "input" signal+=Signal ("," signal+=Signal)* ";"|{Output} "output" signal+=
		//Signal ("," signal+=Signal)* ";"|{InputOutput} "inputoutput" signal+=Signal ("," signal
		//+=Signal)* ";"|{Return} "return" signal+=Signal ("," signal+=Signal)* ";" 
		//
		//// ----------------------------------------------
		////            Interface Declarations
		//// ----------------------------------------------
		//	
		//// ==> Signals and Sensors <==
		//
		//
		//	          
		//		           
		//		           
		//		           
		//
		//	
		////ChannelType:
		////	//make reference to declared types
		//	 //Problem: Need reference OR BaseType
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Input} "input" signal+=Signal ("," signal+=Signal)* ";"
		public Group getGroup_0() { return cGroup_0; }

		//{Input}
		public Action getInputAction_0_0() { return cInputAction_0_0; }

		//"input"
		public Keyword getInputKeyword_0_1() { return cInputKeyword_0_1; }

		//signal+=Signal
		public Assignment getSignalAssignment_0_2() { return cSignalAssignment_0_2; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_0_2_0() { return cSignalSignalParserRuleCall_0_2_0; }

		//("," signal+=Signal)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_0_3_1() { return cSignalAssignment_0_3_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_0_3_1_0() { return cSignalSignalParserRuleCall_0_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//{Output} "output" signal+=Signal ("," signal+=Signal)* ";"
		public Group getGroup_1() { return cGroup_1; }

		//{Output}
		public Action getOutputAction_1_0() { return cOutputAction_1_0; }

		//"output"
		public Keyword getOutputKeyword_1_1() { return cOutputKeyword_1_1; }

		//signal+=Signal
		public Assignment getSignalAssignment_1_2() { return cSignalAssignment_1_2; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_1_2_0() { return cSignalSignalParserRuleCall_1_2_0; }

		//("," signal+=Signal)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_1_3_1() { return cSignalAssignment_1_3_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_1_3_1_0() { return cSignalSignalParserRuleCall_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }

		//{InputOutput} "inputoutput" signal+=Signal ("," signal+=Signal)* ";"
		public Group getGroup_2() { return cGroup_2; }

		//{InputOutput}
		public Action getInputOutputAction_2_0() { return cInputOutputAction_2_0; }

		//"inputoutput"
		public Keyword getInputoutputKeyword_2_1() { return cInputoutputKeyword_2_1; }

		//signal+=Signal
		public Assignment getSignalAssignment_2_2() { return cSignalAssignment_2_2; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_2_2_0() { return cSignalSignalParserRuleCall_2_2_0; }

		//("," signal+=Signal)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_2_3_1() { return cSignalAssignment_2_3_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_2_3_1_0() { return cSignalSignalParserRuleCall_2_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }

		//{Return} "return" signal+=Signal ("," signal+=Signal)* ";"
		public Group getGroup_3() { return cGroup_3; }

		//{Return}
		public Action getReturnAction_3_0() { return cReturnAction_3_0; }

		//"return"
		public Keyword getReturnKeyword_3_1() { return cReturnKeyword_3_1; }

		//signal+=Signal
		public Assignment getSignalAssignment_3_2() { return cSignalAssignment_3_2; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_3_2_0() { return cSignalSignalParserRuleCall_3_2_0; }

		//("," signal+=Signal)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_3_3_1() { return cSignalAssignment_3_3_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_3_3_1_0() { return cSignalSignalParserRuleCall_3_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
	}

	public class SensorDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SensorDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_1_0 = (RuleCall)cSensorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_2_1_0 = (RuleCall)cSensorAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SensorDecl:
		//  "sensor" sensor+=Sensor ("," sensor+=Sensor)* ";"; 
		//
		//	
		////ChannelType:
		////	//make reference to declared types
		//	 //Problem: Need reference OR BaseType
		//	
		//
		//	        
		//	
		//// ==> Relations
		public ParserRule getRule() { return rule; }

		//"sensor" sensor+=Sensor ("," sensor+=Sensor)* ";"
		public Group getGroup() { return cGroup; }

		//"sensor"
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }

		//sensor+=Sensor
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }

		//Sensor
		public RuleCall getSensorSensorParserRuleCall_1_0() { return cSensorSensorParserRuleCall_1_0; }

		//("," sensor+=Sensor)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//sensor+=Sensor
		public Assignment getSensorAssignment_2_1() { return cSensorAssignment_2_1; }

		//Sensor
		public RuleCall getSensorSensorParserRuleCall_2_1_0() { return cSensorSensorParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RelationDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationRelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRelationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRelationRelationParserRuleCall_2_1_0 = (RuleCall)cRelationAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RelationDecl:
		//  "relation" relation+=Relation ("," relation+=Relation)* ";"; 
		//	
		//// ==> Relations
		public ParserRule getRule() { return rule; }

		//"relation" relation+=Relation ("," relation+=Relation)* ";"
		public Group getGroup() { return cGroup; }

		//"relation"
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }

		//relation+=Relation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//Relation
		public RuleCall getRelationRelationParserRuleCall_1_0() { return cRelationRelationParserRuleCall_1_0; }

		//("," relation+=Relation)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//relation+=Relation
		public Assignment getRelationAssignment_2_1() { return cRelationAssignment_2_1; }

		//Relation
		public RuleCall getRelationRelationParserRuleCall_2_1_0() { return cRelationRelationParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RelationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationImplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationIncompatibilityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Relation:
		//  RelationImplication|RelationIncompatibility;
		public ParserRule getRule() { return rule; }

		//RelationImplication|RelationIncompatibility
		public Alternatives getAlternatives() { return cAlternatives; }

		//RelationImplication
		public RuleCall getRelationImplicationParserRuleCall_0() { return cRelationImplicationParserRuleCall_0; }

		//RelationIncompatibility
		public RuleCall getRelationIncompatibilityParserRuleCall_1() { return cRelationIncompatibilityParserRuleCall_1; }
	}

	public class RelationImplicationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstSignalCrossReference_0_0 = (CrossReference)cFirstAssignment_0.eContents().get(0);
		private final RuleCall cFirstSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cFirstSignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondSignalCrossReference_2_0 = (CrossReference)cSecondAssignment_2.eContents().get(0);
		private final RuleCall cSecondSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSecondSignalCrossReference_2_0.eContents().get(1);
		
		//RelationImplication returns Relation:
		//  first=[Signal] type="=>" second=[Signal];
		public ParserRule getRule() { return rule; }

		//first=[Signal] type="=>" second=[Signal]
		public Group getGroup() { return cGroup; }

		//first=[Signal]
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//[Signal]
		public CrossReference getFirstSignalCrossReference_0_0() { return cFirstSignalCrossReference_0_0; }

		//ID
		public RuleCall getFirstSignalIDTerminalRuleCall_0_0_1() { return cFirstSignalIDTerminalRuleCall_0_0_1; }

		//type="=>"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"=>"
		public Keyword getTypeEqualsSignGreaterThanSignKeyword_1_0() { return cTypeEqualsSignGreaterThanSignKeyword_1_0; }

		//second=[Signal]
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }

		//[Signal]
		public CrossReference getSecondSignalCrossReference_2_0() { return cSecondSignalCrossReference_2_0; }

		//ID
		public RuleCall getSecondSignalIDTerminalRuleCall_2_0_1() { return cSecondSignalIDTerminalRuleCall_2_0_1; }
	}

	public class RelationIncompatibilityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationIncompatibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncompAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIncompSignalCrossReference_0_0 = (CrossReference)cIncompAssignment_0.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cIncompSignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeNumberSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cIncompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncompSignalCrossReference_2_0 = (CrossReference)cIncompAssignment_2.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cIncompSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIncompAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIncompSignalCrossReference_3_1_0 = (CrossReference)cIncompAssignment_3_1.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_3_1_0_1 = (RuleCall)cIncompSignalCrossReference_3_1_0.eContents().get(1);
		
		//RelationIncompatibility returns Relation:
		//  incomp+=[Signal] type="#" incomp+=[Signal] ("#" incomp+=[Signal])*; 
		//	
		//    
		//	        
		//
		//// ==> Types
		public ParserRule getRule() { return rule; }

		//incomp+=[Signal] type="#" incomp+=[Signal] ("#" incomp+=[Signal])*
		public Group getGroup() { return cGroup; }

		//incomp+=[Signal]
		public Assignment getIncompAssignment_0() { return cIncompAssignment_0; }

		//[Signal]
		public CrossReference getIncompSignalCrossReference_0_0() { return cIncompSignalCrossReference_0_0; }

		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_0_0_1() { return cIncompSignalIDTerminalRuleCall_0_0_1; }

		//type="#"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"#"
		public Keyword getTypeNumberSignKeyword_1_0() { return cTypeNumberSignKeyword_1_0; }

		//incomp+=[Signal]
		public Assignment getIncompAssignment_2() { return cIncompAssignment_2; }

		//[Signal]
		public CrossReference getIncompSignalCrossReference_2_0() { return cIncompSignalCrossReference_2_0; }

		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_2_0_1() { return cIncompSignalIDTerminalRuleCall_2_0_1; }

		//("#" incomp+=[Signal])*
		public Group getGroup_3() { return cGroup_3; }

		//"#"
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }

		//incomp+=[Signal]
		public Assignment getIncompAssignment_3_1() { return cIncompAssignment_3_1; }

		//[Signal]
		public CrossReference getIncompSignalCrossReference_3_1_0() { return cIncompSignalCrossReference_3_1_0; }

		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_3_1_0_1() { return cIncompSignalIDTerminalRuleCall_3_1_0_1; }
	}

	public class TypeDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeDecl:
		//  "type" type+=Type ("," type+=Type)* ";"; 
		//
		//// ==> Types
		public ParserRule getRule() { return rule; }

		//"type" type+=Type ("," type+=Type)* ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//type+=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//("," type+=Type)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//type+=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//  name=ID;  
		//
		//
		//	
		//
		//	
		//// ==> Constants
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConstantDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantOneTypeConstantDeclParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantOneTypeConstantDeclParserRuleCall_2_1_0 = (RuleCall)cConstantAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantDecl:
		//  "constant" constant+=OneTypeConstantDecl ("," constant+=OneTypeConstantDecl)* ";"; 
		//
		//	
		//// ==> Constants
		public ParserRule getRule() { return rule; }

		//"constant" constant+=OneTypeConstantDecl ("," constant+=OneTypeConstantDecl)* ";"
		public Group getGroup() { return cGroup; }

		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//constant+=OneTypeConstantDecl
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//OneTypeConstantDecl
		public RuleCall getConstantOneTypeConstantDeclParserRuleCall_1_0() { return cConstantOneTypeConstantDeclParserRuleCall_1_0; }

		//("," constant+=OneTypeConstantDecl)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//constant+=OneTypeConstantDecl
		public Assignment getConstantAssignment_2_1() { return cConstantAssignment_2_1; }

		//OneTypeConstantDecl
		public RuleCall getConstantOneTypeConstantDeclParserRuleCall_2_1_0() { return cConstantOneTypeConstantDeclParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OneTypeConstantDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneTypeConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_1_0 = (RuleCall)cConstantAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//OneTypeConstantDecl:
		//  constant+=Constant ("," constant+=Constant)* ":" (type=ID|type=BaseType);
		public ParserRule getRule() { return rule; }

		//constant+=Constant ("," constant+=Constant)* ":" (type=ID|type=BaseType)
		public Group getGroup() { return cGroup; }

		//constant+=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }

		//("," constant+=Constant)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//constant+=Constant
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_1_0() { return cConstantConstantParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//type=ID
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0_0() { return cTypeIDTerminalRuleCall_3_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_3_1_0() { return cTypeBaseTypeTerminalRuleCall_3_1_0; }
	}

	public class ConstantElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueConstantValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Constant:
		//  name=ID ("=" value=ConstantValue)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" value=ConstantValue)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" value=ConstantValue)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=ConstantValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_1_1_0() { return cValueConstantValueParserRuleCall_1_1_0; }
	}

	public class ConstantValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFloatTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ConstantValue returns ecore::EString:
		//  ID|Number|INT|STRING|Float|Boolean; 
		//
		//
		//	
		//	  
		//	  
		//	  
		//	  
		//	  
		//	
		//// ==> Functions
		public ParserRule getRule() { return rule; }

		//ID|Number|INT|STRING|Float|Boolean 
		//
		//
		//	
		//	  
		//	  
		//	  
		//	  
		//	  
		//	
		//// ==> Functions
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberTerminalRuleCall_1() { return cNumberTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//Float
		public RuleCall getFloatTerminalRuleCall_4() { return cFloatTerminalRuleCall_4; }

		//Boolean
		public RuleCall getBooleanTerminalRuleCall_5() { return cBooleanTerminalRuleCall_5; }
	}

	public class FunctionDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFunctionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_2_1_0 = (RuleCall)cFunctionAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionDecl:
		//  "function" function+=Function ("," function+=Function)* ";"; 
		//	
		//// ==> Functions
		public ParserRule getRule() { return rule; }

		//"function" function+=Function ("," function+=Function)* ";"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//function+=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }

		//("," function+=Function)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//function+=Function
		public Assignment getFunctionAssignment_2_1() { return cFunctionAssignment_2_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_1_0() { return cFunctionFunctionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FunctionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cIdListAlternatives_2_0_0 = (Alternatives)cIdListAssignment_2_0.eContents().get(0);
		private final RuleCall cIdListIDTerminalRuleCall_2_0_0_0 = (RuleCall)cIdListAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cIdListBaseTypeTerminalRuleCall_2_0_0_1 = (RuleCall)cIdListAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cIdListAlternatives_2_1_1_0 = (Alternatives)cIdListAssignment_2_1_1.eContents().get(0);
		private final RuleCall cIdListIDTerminalRuleCall_2_1_1_0_0 = (RuleCall)cIdListAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cIdListBaseTypeTerminalRuleCall_2_1_1_0_1 = (RuleCall)cIdListAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_5_0_0 = (RuleCall)cTypeAssignment_5_0.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		
		//Function:
		//  name=ID "(" (idList+=( ID | BaseType ) ("," idList+=( ID | BaseType ))*)? ")" ":" (type=ID|type
		//  =BaseType); 
		//	
		//
		//	                  
		//
		//// ==============================================
		//// ===            B.4 Statements              ===
		//// ==============================================
		public ParserRule getRule() { return rule; }

		//name=ID "(" (idList+=( ID | BaseType ) ("," idList+=( ID | BaseType ))*)? ")" ":" (type=ID|type
		//=BaseType)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(idList+=( ID | BaseType ) ("," idList+=( ID | BaseType ))*)?
		public Group getGroup_2() { return cGroup_2; }

		//idList+=( ID | BaseType )
		public Assignment getIdListAssignment_2_0() { return cIdListAssignment_2_0; }

		//ID|BaseType
		public Alternatives getIdListAlternatives_2_0_0() { return cIdListAlternatives_2_0_0; }

		//ID
		public RuleCall getIdListIDTerminalRuleCall_2_0_0_0() { return cIdListIDTerminalRuleCall_2_0_0_0; }

		//BaseType
		public RuleCall getIdListBaseTypeTerminalRuleCall_2_0_0_1() { return cIdListBaseTypeTerminalRuleCall_2_0_0_1; }

		//("," idList+=( ID | BaseType ))*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//idList+=( ID | BaseType )
		public Assignment getIdListAssignment_2_1_1() { return cIdListAssignment_2_1_1; }

		//ID|BaseType
		public Alternatives getIdListAlternatives_2_1_1_0() { return cIdListAlternatives_2_1_1_0; }

		//ID
		public RuleCall getIdListIDTerminalRuleCall_2_1_1_0_0() { return cIdListIDTerminalRuleCall_2_1_1_0_0; }

		//BaseType
		public RuleCall getIdListBaseTypeTerminalRuleCall_2_1_1_0_1() { return cIdListBaseTypeTerminalRuleCall_2_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//type=ID
		public Assignment getTypeAssignment_5_0() { return cTypeAssignment_5_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_5_0_0() { return cTypeIDTerminalRuleCall_5_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_5_1_0() { return cTypeBaseTypeTerminalRuleCall_5_1_0; }
	}

	public class StatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cParallelLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSequenceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Statement:
		//  Sequence ({Parallel.left=current} "||" right=Sequence)*; 
		//
		//// ==============================================
		//// ===            B.4 Statements              ===
		//// ==============================================
		public ParserRule getRule() { return rule; }

		//Sequence ({Parallel.left=current} "||" right=Sequence)*
		public Group getGroup() { return cGroup; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_0() { return cSequenceParserRuleCall_0; }

		//({Parallel.left=current} "||" right=Sequence)*
		public Group getGroup_1() { return cGroup_1; }

		//{Parallel.left=current}
		public Action getParallelLeftAction_1_0() { return cParallelLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=Sequence
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Sequence
		public RuleCall getRightSequenceParserRuleCall_1_2_0() { return cRightSequenceParserRuleCall_1_2_0; }
	}

	public class AtomicStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAwaitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEveryDoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHaltParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfTestParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLocalSignalDeclParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLoopParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cNothingParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cPauseParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPresentParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRepeatParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRunParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSuspendParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSustainParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTrapParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cVariableParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cWeakAbortParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		
		//AtomicStatement returns Statement:
		//  Abort|Assignment|Await|Block|Do|Emit|EveryDo|Exit|Halt|IfTest|LocalSignalDecl|
		//  Loop|Nothing|Pause|Present|Repeat|Run|Suspend|Sustain|Trap|Variable|WeakAbort; 
		//	
		//    
		//	 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//	
		//// --> B.4.1 Control Flow Operators <--
		public ParserRule getRule() { return rule; }

		//Abort|Assignment|Await|Block|Do|Emit|EveryDo|Exit|Halt|IfTest|LocalSignalDecl|
		//Loop|Nothing|Pause|Present|Repeat|Run|Suspend|Sustain|Trap|Variable|WeakAbort 
		//	
		//    
		//	 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//	
		//// --> B.4.1 Control Flow Operators <--
		public Alternatives getAlternatives() { return cAlternatives; }

		//Abort
		public RuleCall getAbortParserRuleCall_0() { return cAbortParserRuleCall_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }

		//Await
		public RuleCall getAwaitParserRuleCall_2() { return cAwaitParserRuleCall_2; }

		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }

		//Do
		public RuleCall getDoParserRuleCall_4() { return cDoParserRuleCall_4; }

		//Emit
		public RuleCall getEmitParserRuleCall_5() { return cEmitParserRuleCall_5; }

		//EveryDo
		public RuleCall getEveryDoParserRuleCall_6() { return cEveryDoParserRuleCall_6; }

		//Exit
		public RuleCall getExitParserRuleCall_7() { return cExitParserRuleCall_7; }

		//Halt
		public RuleCall getHaltParserRuleCall_8() { return cHaltParserRuleCall_8; }

		//IfTest
		public RuleCall getIfTestParserRuleCall_9() { return cIfTestParserRuleCall_9; }

		//LocalSignalDecl
		public RuleCall getLocalSignalDeclParserRuleCall_10() { return cLocalSignalDeclParserRuleCall_10; }

		//Loop
		public RuleCall getLoopParserRuleCall_11() { return cLoopParserRuleCall_11; }

		//Nothing
		public RuleCall getNothingParserRuleCall_12() { return cNothingParserRuleCall_12; }

		//Pause
		public RuleCall getPauseParserRuleCall_13() { return cPauseParserRuleCall_13; }

		//Present
		public RuleCall getPresentParserRuleCall_14() { return cPresentParserRuleCall_14; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_15() { return cRepeatParserRuleCall_15; }

		//Run
		public RuleCall getRunParserRuleCall_16() { return cRunParserRuleCall_16; }

		//Suspend
		public RuleCall getSuspendParserRuleCall_17() { return cSuspendParserRuleCall_17; }

		//Sustain
		public RuleCall getSustainParserRuleCall_18() { return cSustainParserRuleCall_18; }

		//Trap
		public RuleCall getTrapParserRuleCall_19() { return cTrapParserRuleCall_19; }

		//Variable
		public RuleCall getVariableParserRuleCall_20() { return cVariableParserRuleCall_20; }

		//WeakAbort
		public RuleCall getWeakAbortParserRuleCall_21() { return cWeakAbortParserRuleCall_21; }
	}

	public class SequenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSequenceLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicStatementParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Sequence returns Statement:
		//  AtomicStatement ({Sequence.left=current} ";" right=AtomicStatement)* ";"?; 
		//	
		//// --> B.4.1 Control Flow Operators <--
		public ParserRule getRule() { return rule; }

		//AtomicStatement ({Sequence.left=current} ";" right=AtomicStatement)* ";"?
		public Group getGroup() { return cGroup; }

		//AtomicStatement
		public RuleCall getAtomicStatementParserRuleCall_0() { return cAtomicStatementParserRuleCall_0; }

		//({Sequence.left=current} ";" right=AtomicStatement)*
		public Group getGroup_1() { return cGroup_1; }

		//{Sequence.left=current}
		public Action getSequenceLeftAction_1_0() { return cSequenceLeftAction_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//right=AtomicStatement
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AtomicStatement
		public RuleCall getRightAtomicStatementParserRuleCall_1_2_0() { return cRightAtomicStatementParserRuleCall_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BlockElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//  "[" statement=Statement "]";
		public ParserRule getRule() { return rule; }

		//"[" statement=Statement "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class AssignmentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprDataExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//Assignment:
		//  variable=ID ":=" expr=DataExpr; 
		//	
		//
		//	    
		//
		//// --> B.4.2 abort: Strong Preemption
		public ParserRule getRule() { return rule; }

		//variable=ID ":=" expr=DataExpr
		public Group getGroup() { return cGroup; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expr=DataExpr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_2_0() { return cExprDataExprParserRuleCall_2_0; }
	}

	public class AbortElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyAbortBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Abort:
		//  "abort" statement=Statement "when" body=AbortBody; 
		//
		//// --> B.4.2 abort: Strong Preemption
		public ParserRule getRule() { return rule; }

		//"abort" statement=Statement "when" body=AbortBody
		public Group getGroup() { return cGroup; }

		//"abort"
		public Keyword getAbortKeyword_0() { return cAbortKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//body=AbortBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//AbortBody
		public RuleCall getBodyAbortBodyParserRuleCall_3_0() { return cBodyAbortBodyParserRuleCall_3_0; }
	}

	public class AbortBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbortBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbortCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbortBody:
		//  AbortInstance|AbortCase;
		public ParserRule getRule() { return rule; }

		//AbortInstance|AbortCase
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbortInstance
		public RuleCall getAbortInstanceParserRuleCall_0() { return cAbortInstanceParserRuleCall_0; }

		//AbortCase
		public RuleCall getAbortCaseParserRuleCall_1() { return cAbortCaseParserRuleCall_1; }
	}

	public class AbortEndElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbortEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAbortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AbortEnd returns ecore::EString:
		//  "end" "abort"?;
		public ParserRule getRule() { return rule; }

		//"end" "abort"?
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//"abort"?
		public Keyword getAbortKeyword_1() { return cAbortKeyword_1; }
	}

	public class AbortInstanceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbortInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDelayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_0_0 = (RuleCall)cDelayAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndAbortEndParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//AbortInstance:
		//  delay=DelayExpr ("do" statement=Statement end=AbortEnd)?;
		public ParserRule getRule() { return rule; }

		//delay=DelayExpr ("do" statement=Statement end=AbortEnd)?
		public Group getGroup() { return cGroup; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_0() { return cDelayAssignment_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_0_0() { return cDelayDelayExprParserRuleCall_0_0; }

		//("do" statement=Statement end=AbortEnd)?
		public Group getGroup_1() { return cGroup_1; }

		//"do"
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }

		//end=AbortEnd
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//AbortEnd
		public RuleCall getEndAbortEndParserRuleCall_1_2_0() { return cEndAbortEndParserRuleCall_1_2_0; }
	}

	public class AbortCaseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbortCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_0_0 = (RuleCall)cCasesAssignment_0.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndAbortEndParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//AbortCase:
		//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AbortEnd;
		public ParserRule getRule() { return rule; }

		//cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AbortEnd
		public Group getGroup() { return cGroup; }

		//cases+=AbortCaseSingle
		public Assignment getCasesAssignment_0() { return cCasesAssignment_0; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_0_0() { return cCasesAbortCaseSingleParserRuleCall_0_0; }

		//cases+=AbortCaseSingle*
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_1_0() { return cCasesAbortCaseSingleParserRuleCall_1_0; }

		//end=AbortEnd
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }

		//AbortEnd
		public RuleCall getEndAbortEndParserRuleCall_2_0() { return cEndAbortEndParserRuleCall_2_0; }
	}

	public class AbortCaseSingleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbortCaseSingle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_2_1_0 = (RuleCall)cStatementAssignment_2_1.eContents().get(0);
		
		//AbortCaseSingle:
		//  "case" delay=DelayExpr ("do" statement=Statement)?; 
		//	
		//
		//	      
		//	
		//// --> B.4.3 await: Strong Preemption
		public ParserRule getRule() { return rule; }

		//"case" delay=DelayExpr ("do" statement=Statement)?
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_1_0() { return cDelayDelayExprParserRuleCall_1_0; }

		//("do" statement=Statement)?
		public Group getGroup_2() { return cGroup_2; }

		//"do"
		public Keyword getDoKeyword_2_0() { return cDoKeyword_2_0; }

		//statement=Statement
		public Assignment getStatementAssignment_2_1() { return cStatementAssignment_2_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_1_0() { return cStatementStatementParserRuleCall_2_1_0; }
	}

	public class AwaitElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAwaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyAwaitBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Await:
		//  "await" body=AwaitBody; 
		//	
		//// --> B.4.3 await: Strong Preemption
		public ParserRule getRule() { return rule; }

		//"await" body=AwaitBody
		public Group getGroup() { return cGroup; }

		//"await"
		public Keyword getAwaitKeyword_0() { return cAwaitKeyword_0; }

		//body=AwaitBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//AwaitBody
		public RuleCall getBodyAwaitBodyParserRuleCall_1_0() { return cBodyAwaitBodyParserRuleCall_1_0; }
	}

	public class AwaitBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AwaitBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAwaitInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAwaitCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AwaitBody:
		//  AwaitInstance|AwaitCase;
		public ParserRule getRule() { return rule; }

		//AwaitInstance|AwaitCase
		public Alternatives getAlternatives() { return cAlternatives; }

		//AwaitInstance
		public RuleCall getAwaitInstanceParserRuleCall_0() { return cAwaitInstanceParserRuleCall_0; }

		//AwaitCase
		public RuleCall getAwaitCaseParserRuleCall_1() { return cAwaitCaseParserRuleCall_1; }
	}

	public class AwaitEndElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AwaitEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAwaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AwaitEnd returns ecore::EString:
		//  "end" "await"?;
		public ParserRule getRule() { return rule; }

		//"end" "await"?
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//"await"?
		public Keyword getAwaitKeyword_1() { return cAwaitKeyword_1; }
	}

	public class AwaitInstanceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AwaitInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDelayExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndAwaitEndParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//AwaitInstance:
		//  DelayExpr ("do" statement=Statement end=AwaitEnd)?;
		public ParserRule getRule() { return rule; }

		//DelayExpr ("do" statement=Statement end=AwaitEnd)?
		public Group getGroup() { return cGroup; }

		//DelayExpr
		public RuleCall getDelayExprParserRuleCall_0() { return cDelayExprParserRuleCall_0; }

		//("do" statement=Statement end=AwaitEnd)?
		public Group getGroup_1() { return cGroup_1; }

		//"do"
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }

		//end=AwaitEnd
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//AwaitEnd
		public RuleCall getEndAwaitEndParserRuleCall_1_2_0() { return cEndAwaitEndParserRuleCall_1_2_0; }
	}

	public class AwaitCaseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AwaitCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_0_0 = (RuleCall)cCasesAssignment_0.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndAwaitEndParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//AwaitCase:
		//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AwaitEnd;  
		//	
		//
		//	    
		//	
		//// --> B.4.5 do-upto: Conditional Iteration (deprecated)
		//// --> B.4.6 do-watching: Strong Preemption (deprecated)
		public ParserRule getRule() { return rule; }

		//cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AwaitEnd
		public Group getGroup() { return cGroup; }

		//cases+=AbortCaseSingle
		public Assignment getCasesAssignment_0() { return cCasesAssignment_0; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_0_0() { return cCasesAbortCaseSingleParserRuleCall_0_0; }

		//cases+=AbortCaseSingle*
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_1_0() { return cCasesAbortCaseSingleParserRuleCall_1_0; }

		//end=AwaitEnd
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }

		//AwaitEnd
		public RuleCall getEndAwaitEndParserRuleCall_2_0() { return cEndAwaitEndParserRuleCall_2_0; }
	}

	public class DoElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cEndDoUptoParserRuleCall_2_0_0 = (RuleCall)cEndAssignment_2_0.eContents().get(0);
		private final Assignment cEndAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cEndDoWatchingParserRuleCall_2_1_0 = (RuleCall)cEndAssignment_2_1.eContents().get(0);
		
		//Do:
		//  "do" statement=Statement (end=DoUpto|end=DoWatching); 
		//	
		//// --> B.4.5 do-upto: Conditional Iteration (deprecated)
		//// --> B.4.6 do-watching: Strong Preemption (deprecated)
		public ParserRule getRule() { return rule; }

		//"do" statement=Statement (end=DoUpto|end=DoWatching)
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//end=DoUpto|end=DoWatching
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//end=DoUpto
		public Assignment getEndAssignment_2_0() { return cEndAssignment_2_0; }

		//DoUpto
		public RuleCall getEndDoUptoParserRuleCall_2_0_0() { return cEndDoUptoParserRuleCall_2_0_0; }

		//end=DoWatching
		public Assignment getEndAssignment_2_1() { return cEndAssignment_2_1; }

		//DoWatching
		public RuleCall getEndDoWatchingParserRuleCall_2_1_0() { return cEndDoWatchingParserRuleCall_2_1_0; }
	}

	public class DoUptoElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoUpto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUptoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprDelayExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//DoUpto:
		//  "upto" expr=DelayExpr;
		public ParserRule getRule() { return rule; }

		//"upto" expr=DelayExpr
		public Group getGroup() { return cGroup; }

		//"upto"
		public Keyword getUptoKeyword_0() { return cUptoKeyword_0; }

		//expr=DelayExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//DelayExpr
		public RuleCall getExprDelayExprParserRuleCall_1_0() { return cExprDelayExprParserRuleCall_1_0; }
	}

	public class DoWatchingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWatchingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndDoWatchingEndParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//DoWatching:
		//  "watching" delay=DelayExpr end=DoWatchingEnd?;
		public ParserRule getRule() { return rule; }

		//"watching" delay=DelayExpr end=DoWatchingEnd?
		public Group getGroup() { return cGroup; }

		//"watching"
		public Keyword getWatchingKeyword_0() { return cWatchingKeyword_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_1_0() { return cDelayDelayExprParserRuleCall_1_0; }

		//end=DoWatchingEnd?
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }

		//DoWatchingEnd
		public RuleCall getEndDoWatchingEndParserRuleCall_2_0() { return cEndDoWatchingEndParserRuleCall_2_0; }
	}

	public class DoWatchingEndElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWatchingEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTimeoutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DoWatchingEnd:
		//  "timeout" statement=Statement "end" "timeout"?; 
		//
		//
		//	      
		//	
		//// --> B.4.7 emit: Signal Emission <--
		//	
		//// a help function to force an "emit" object into the model
		public ParserRule getRule() { return rule; }

		//"timeout" statement=Statement "end" "timeout"?
		public Group getGroup() { return cGroup; }

		//"timeout"
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }

		//"timeout"?
		public Keyword getTimeoutKeyword_3() { return cTimeoutKeyword_3; }
	}

	public class EmitElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_1_0 = (CrossReference)cSignalAssignment_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cSignalSignalCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprDataExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Emit:
		//  "emit" signal=[Signal] ("(" expr=DataExpr ")")?; 
		//	
		//// --> B.4.7 emit: Signal Emission <--
		//	
		//// a help function to force an "emit" object into the model
		// 
		//	        //("(" expr=DataExpr ")")?;
		//	
		//// --> B.4.8 every-do: Conditional Iteration
		public ParserRule getRule() { return rule; }

		//"emit" signal=[Signal] ("(" expr=DataExpr ")")?
		public Group getGroup() { return cGroup; }

		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }

		//signal=[Signal]
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_1_0() { return cSignalSignalCrossReference_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_1_0_1() { return cSignalSignalIDTerminalRuleCall_1_0_1; }

		//("(" expr=DataExpr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expr=DataExpr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_2_1_0() { return cExprDataExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class EveryDoElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EveryDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEveryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EveryDo:
		//  "every" delay=DelayExpr "do" statement=Statement "end" "every"?;   //("(" expr=DataExpr ")")?;
		//	
		//// --> B.4.8 every-do: Conditional Iteration
		//
		//	          
		//
		//// --> B.4.10 exit: Trap Exit
		public ParserRule getRule() { return rule; }

		//"every" delay=DelayExpr "do" statement=Statement "end" "every"?
		public Group getGroup() { return cGroup; }

		//"every"
		public Keyword getEveryKeyword_0() { return cEveryKeyword_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_1_0() { return cDelayDelayExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"every"?
		public Keyword getEveryKeyword_5() { return cEveryKeyword_5; }
	}

	public class ExitElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrapAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTrapTrapCrossReference_1_0 = (CrossReference)cTrapAssignment_1.eContents().get(0);
		private final RuleCall cTrapTrapIDTerminalRuleCall_1_0_1 = (RuleCall)cTrapTrapCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDataExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDataExprDataExprParserRuleCall_2_1_0 = (RuleCall)cDataExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Exit:
		//  "exit" trap=[Trap] ("(" dataExpr=DataExpr ")")?; 
		//
		//// --> B.4.10 exit: Trap Exit
		//
		//	        
		//	
		//// --> B.4.11 halt: Wait Forever
		public ParserRule getRule() { return rule; }

		//"exit" trap=[Trap] ("(" dataExpr=DataExpr ")")?
		public Group getGroup() { return cGroup; }

		//"exit"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }

		//trap=[Trap]
		public Assignment getTrapAssignment_1() { return cTrapAssignment_1; }

		//[Trap]
		public CrossReference getTrapTrapCrossReference_1_0() { return cTrapTrapCrossReference_1_0; }

		//ID
		public RuleCall getTrapTrapIDTerminalRuleCall_1_0_1() { return cTrapTrapIDTerminalRuleCall_1_0_1; }

		//("(" dataExpr=DataExpr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//dataExpr=DataExpr
		public Assignment getDataExprAssignment_2_1() { return cDataExprAssignment_2_1; }

		//DataExpr
		public RuleCall getDataExprDataExprParserRuleCall_2_1_0() { return cDataExprDataExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class HaltElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Halt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cHaltAction_1 = (Action)cGroup.eContents().get(1);
		
		//Halt:
		//  "halt" {Halt}; 
		//	
		//// --> B.4.11 halt: Wait Forever
		//
		//	  
		//	
		//// --> B.4.12: if: Conditional for Data
		public ParserRule getRule() { return rule; }

		//"halt" {Halt}
		public Group getGroup() { return cGroup; }

		//"halt"
		public Keyword getHaltKeyword_0() { return cHaltKeyword_0; }

		//{Halt}
		public Action getHaltAction_1() { return cHaltAction_1; }
	}

	public class IfTestElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprDataExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenThenPartParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		private final Assignment cElseIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseIfElsIfPartParserRuleCall_3_0 = (RuleCall)cElseIfAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseElsePartParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cIfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfTest:
		//  "if" expr=DataExpr then=ThenPart? elseIf=ElsIfPart? else=ElsePart? "end" "if"?; 
		//	
		//// --> B.4.12: if: Conditional for Data
		public ParserRule getRule() { return rule; }

		//"if" expr=DataExpr then=ThenPart? elseIf=ElsIfPart? else=ElsePart? "end" "if"?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expr=DataExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_1_0() { return cExprDataExprParserRuleCall_1_0; }

		//then=ThenPart?
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }

		//ThenPart
		public RuleCall getThenThenPartParserRuleCall_2_0() { return cThenThenPartParserRuleCall_2_0; }

		//elseIf=ElsIfPart?
		public Assignment getElseIfAssignment_3() { return cElseIfAssignment_3; }

		//ElsIfPart
		public RuleCall getElseIfElsIfPartParserRuleCall_3_0() { return cElseIfElsIfPartParserRuleCall_3_0; }

		//else=ElsePart?
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }

		//ElsePart
		public RuleCall getElseElsePartParserRuleCall_4_0() { return cElseElsePartParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"if"?
		public Keyword getIfKeyword_6() { return cIfKeyword_6; }
	}

	public class ElsIfPartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElsIfPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElsifAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElsifElsIfParserRuleCall_0_0 = (RuleCall)cElsifAssignment_0.eContents().get(0);
		private final Assignment cElsifAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElsifElsIfParserRuleCall_1_0 = (RuleCall)cElsifAssignment_1.eContents().get(0);
		
		//ElsIfPart:
		//  elsif+=ElsIf elsif+=ElsIf*;
		public ParserRule getRule() { return rule; }

		//elsif+=ElsIf elsif+=ElsIf*
		public Group getGroup() { return cGroup; }

		//elsif+=ElsIf
		public Assignment getElsifAssignment_0() { return cElsifAssignment_0; }

		//ElsIf
		public RuleCall getElsifElsIfParserRuleCall_0_0() { return cElsifElsIfParserRuleCall_0_0; }

		//elsif+=ElsIf*
		public Assignment getElsifAssignment_1() { return cElsifAssignment_1; }

		//ElsIf
		public RuleCall getElsifElsIfParserRuleCall_1_0() { return cElsifElsIfParserRuleCall_1_0; }
	}

	public class ElsIfElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElsIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprDataExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenThenPartParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		
		//ElsIf:
		//  "elsif" expr=DataExpr then=ThenPart?;
		public ParserRule getRule() { return rule; }

		//"elsif" expr=DataExpr then=ThenPart?
		public Group getGroup() { return cGroup; }

		//"elsif"
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }

		//expr=DataExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_1_0() { return cExprDataExprParserRuleCall_1_0; }

		//then=ThenPart?
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }

		//ThenPart
		public RuleCall getThenThenPartParserRuleCall_2_0() { return cThenThenPartParserRuleCall_2_0; }
	}

	public class ThenPartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThenPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//ThenPart:
		//  "then" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"then" statement=Statement
		public Group getGroup() { return cGroup; }

		//"then"
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}

	public class ElsePartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElsePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//ElsePart:
		//  "else" statement=Statement; 
		//
		//
		//	  
		//	
		//// --> B.4.13 loop: Infinite Loop
		//// --> B.4.14 loop-each: Condition Iteration
		public ParserRule getRule() { return rule; }

		//"else" statement=Statement
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}

	public class LoopElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyLoopBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEndLoopParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cEndAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cEndLoopEachParserRuleCall_2_1_0 = (RuleCall)cEndAssignment_2_1.eContents().get(0);
		
		//Loop:
		//  "loop" body=LoopBody (EndLoop|end=LoopEach); 
		//	
		//// --> B.4.13 loop: Infinite Loop
		//// --> B.4.14 loop-each: Condition Iteration
		public ParserRule getRule() { return rule; }

		//"loop" body=LoopBody (EndLoop|end=LoopEach)
		public Group getGroup() { return cGroup; }

		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }

		//body=LoopBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//LoopBody
		public RuleCall getBodyLoopBodyParserRuleCall_1_0() { return cBodyLoopBodyParserRuleCall_1_0; }

		//EndLoop|end=LoopEach
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//EndLoop
		public RuleCall getEndLoopParserRuleCall_2_0() { return cEndLoopParserRuleCall_2_0; }

		//end=LoopEach
		public Assignment getEndAssignment_2_1() { return cEndAssignment_2_1; }

		//LoopEach
		public RuleCall getEndLoopEachParserRuleCall_2_1_0() { return cEndLoopEachParserRuleCall_2_1_0; }
	}

	public class EndLoopElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLoopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndLoop returns ecore::EString:
		//  "end" "loop"?;
		public ParserRule getRule() { return rule; }

		//"end" "loop"?
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//"loop"?
		public Keyword getLoopKeyword_1() { return cLoopKeyword_1; }
	}

	public class LoopEachElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLoopDelayParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LoopEach:
		//  "each" LoopDelay;
		public ParserRule getRule() { return rule; }

		//"each" LoopDelay
		public Group getGroup() { return cGroup; }

		//"each"
		public Keyword getEachKeyword_0() { return cEachKeyword_0; }

		//LoopDelay
		public RuleCall getLoopDelayParserRuleCall_1() { return cLoopDelayParserRuleCall_1; }
	}

	public class LoopDelayElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopDelay");
		private final Assignment cDelayAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_0 = (RuleCall)cDelayAssignment.eContents().get(0);
		
		//LoopDelay:
		//  delay=DelayExpr;
		public ParserRule getRule() { return rule; }

		//delay=DelayExpr
		public Assignment getDelayAssignment() { return cDelayAssignment; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_0() { return cDelayDelayExprParserRuleCall_0; }
	}

	public class LoopBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopBody");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//LoopBody:
		//  statement=Statement; 
		//	 
		//
		//	
		//	
		//// --> B.4.15 nothing: No Operation
		public ParserRule getRule() { return rule; }

		//statement=Statement
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_0() { return cStatementStatementParserRuleCall_0; }
	}

	public class NothingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nothing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNothingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNothingAction_1 = (Action)cGroup.eContents().get(1);
		
		//Nothing:
		//  "nothing" {Nothing}; 
		//	
		//// --> B.4.15 nothing: No Operation
		//
		//	  
		//
		//// --> B.4.16 pause: Unit Delay
		public ParserRule getRule() { return rule; }

		//"nothing" {Nothing}
		public Group getGroup() { return cGroup; }

		//"nothing"
		public Keyword getNothingKeyword_0() { return cNothingKeyword_0; }

		//{Nothing}
		public Action getNothingAction_1() { return cNothingAction_1; }
	}

	public class PauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPauseAction_1 = (Action)cGroup.eContents().get(1);
		
		//Pause:
		//  "pause" {Pause}; 
		//
		//// --> B.4.16 pause: Unit Delay
		// 
		//	  
		//	
		//// --> B.4.17 present: Conditional for Signals
		public ParserRule getRule() { return rule; }

		//"pause" {Pause}
		public Group getGroup() { return cGroup; }

		//"pause"
		public Keyword getPauseKeyword_0() { return cPauseKeyword_0; }

		//{Pause}
		public Action getPauseAction_1() { return cPauseAction_1; }
	}

	public class PresentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyPresentBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Assignment cElsePartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElsePartElsePartParserRuleCall_2_0 = (RuleCall)cElsePartAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPresentKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Present:
		//  "present" body=PresentBody elsePart=ElsePart? "end" "present"?; 
		//	
		//// --> B.4.17 present: Conditional for Signals
		public ParserRule getRule() { return rule; }

		//"present" body=PresentBody elsePart=ElsePart? "end" "present"?
		public Group getGroup() { return cGroup; }

		//"present"
		public Keyword getPresentKeyword_0() { return cPresentKeyword_0; }

		//body=PresentBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//PresentBody
		public RuleCall getBodyPresentBodyParserRuleCall_1_0() { return cBodyPresentBodyParserRuleCall_1_0; }

		//elsePart=ElsePart?
		public Assignment getElsePartAssignment_2() { return cElsePartAssignment_2; }

		//ElsePart
		public RuleCall getElsePartElsePartParserRuleCall_2_0() { return cElsePartElsePartParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"present"?
		public Keyword getPresentKeyword_4() { return cPresentKeyword_4; }
	}

	public class PresentBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPresentEventBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPresentCaseListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PresentBody:
		//  PresentEventBody|PresentCaseList;
		public ParserRule getRule() { return rule; }

		//PresentEventBody|PresentCaseList
		public Alternatives getAlternatives() { return cAlternatives; }

		//PresentEventBody
		public RuleCall getPresentEventBodyParserRuleCall_0() { return cPresentEventBodyParserRuleCall_0; }

		//PresentCaseList
		public RuleCall getPresentCaseListParserRuleCall_1() { return cPresentCaseListParserRuleCall_1; }
	}

	public class PresentEventBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentEventBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventPresentEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Assignment cThenPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThenPartThenPartParserRuleCall_1_0 = (RuleCall)cThenPartAssignment_1.eContents().get(0);
		
		//PresentEventBody:
		//  event=PresentEvent thenPart=ThenPart?;
		public ParserRule getRule() { return rule; }

		//event=PresentEvent thenPart=ThenPart?
		public Group getGroup() { return cGroup; }

		//event=PresentEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//PresentEvent
		public RuleCall getEventPresentEventParserRuleCall_0_0() { return cEventPresentEventParserRuleCall_0_0; }

		//thenPart=ThenPart?
		public Assignment getThenPartAssignment_1() { return cThenPartAssignment_1; }

		//ThenPart
		public RuleCall getThenPartThenPartParserRuleCall_1_0() { return cThenPartThenPartParserRuleCall_1_0; }
	}

	public class PresentCaseListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentCaseList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasePresentCaseParserRuleCall_0_0 = (RuleCall)cCaseAssignment_0.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasePresentCaseParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		
		//PresentCaseList:
		//  case+=PresentCase case+=PresentCase*;
		public ParserRule getRule() { return rule; }

		//case+=PresentCase case+=PresentCase*
		public Group getGroup() { return cGroup; }

		//case+=PresentCase
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }

		//PresentCase
		public RuleCall getCasePresentCaseParserRuleCall_0_0() { return cCasePresentCaseParserRuleCall_0_0; }

		//case+=PresentCase*
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//PresentCase
		public RuleCall getCasePresentCaseParserRuleCall_1_0() { return cCasePresentCaseParserRuleCall_1_0; }
	}

	public class PresentCaseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPresentEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_2_1_0 = (RuleCall)cStatementAssignment_2_1.eContents().get(0);
		
		//PresentCase:
		//  "case" event=PresentEvent ("do" statement=Statement)?;
		public ParserRule getRule() { return rule; }

		//"case" event=PresentEvent ("do" statement=Statement)?
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//event=PresentEvent
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//PresentEvent
		public RuleCall getEventPresentEventParserRuleCall_1_0() { return cEventPresentEventParserRuleCall_1_0; }

		//("do" statement=Statement)?
		public Group getGroup_2() { return cGroup_2; }

		//"do"
		public Keyword getDoKeyword_2_0() { return cDoKeyword_2_0; }

		//statement=Statement
		public Assignment getStatementAssignment_2_1() { return cStatementAssignment_2_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_1_0() { return cStatementStatementParserRuleCall_2_1_0; }
	}

	public class PresentEventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionSigExprParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionSigExprParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PresentEvent:
		//  expression=SigExpr|"[" expression=SigExpr "]"; 
		//
		//
		//	
		//		     
		//
		//// --> B.4.18 repeat: Iterate a Fixed Number of Times
		public ParserRule getRule() { return rule; }

		//expression=SigExpr|"[" expression=SigExpr "]" 
		//
		//
		//	
		//		     
		//
		//// --> B.4.18 repeat: Iterate a Fixed Number of Times
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression=SigExpr
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//SigExpr
		public RuleCall getExpressionSigExprParserRuleCall_0_0() { return cExpressionSigExprParserRuleCall_0_0; }

		//"[" expression=SigExpr "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//expression=SigExpr
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//SigExpr
		public RuleCall getExpressionSigExprParserRuleCall_1_1_0() { return cExpressionSigExprParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class RepeatElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPositiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPositivePositiveKeyword_0_0 = (Keyword)cPositiveAssignment_0.eContents().get(0);
		private final Keyword cRepeatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataExprDataExprParserRuleCall_2_0 = (RuleCall)cDataExprAssignment_2.eContents().get(0);
		private final Keyword cTimesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Repeat:
		//  positive?="positive"? "repeat" dataExpr=DataExpr "times" statement=Statement "end"
		//  "repeat"?; 
		//
		//// --> B.4.18 repeat: Iterate a Fixed Number of Times
		//
		//	            
		//// --> B.4.19 run: Module Instantiation
		public ParserRule getRule() { return rule; }

		//positive?="positive"? "repeat" dataExpr=DataExpr "times" statement=Statement "end"
		//"repeat"?
		public Group getGroup() { return cGroup; }

		//positive?="positive"?
		public Assignment getPositiveAssignment_0() { return cPositiveAssignment_0; }

		//"positive"
		public Keyword getPositivePositiveKeyword_0_0() { return cPositivePositiveKeyword_0_0; }

		//"repeat"
		public Keyword getRepeatKeyword_1() { return cRepeatKeyword_1; }

		//dataExpr=DataExpr
		public Assignment getDataExprAssignment_2() { return cDataExprAssignment_2; }

		//DataExpr
		public RuleCall getDataExprDataExprParserRuleCall_2_0() { return cDataExprDataExprParserRuleCall_2_0; }

		//"times"
		public Keyword getTimesKeyword_3() { return cTimesKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"repeat"?
		public Keyword getRepeatKeyword_6() { return cRepeatKeyword_6; }
	}

	public class RunElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Run");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRunKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cModuleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_0_1_0 = (RuleCall)cModuleAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cListAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cListRenamingListParserRuleCall_0_2_1_0 = (RuleCall)cListAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCopymoduleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cModuleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_1_1_0 = (RuleCall)cModuleAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cListRenamingListParserRuleCall_1_2_1_0 = (RuleCall)cListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//Run:
		//  "run" module=ModuleRenaming ("[" list=RenamingList "]")?|"copymodule" module=
		//  ModuleRenaming ("[" list=RenamingList "]")?; 
		//// --> B.4.19 run: Module Instantiation
		//
		//
		//	      
		//		         //deprecated
		public ParserRule getRule() { return rule; }

		//"run" module=ModuleRenaming ("[" list=RenamingList "]")?|"copymodule" module=
		//ModuleRenaming ("[" list=RenamingList "]")? 
		//// --> B.4.19 run: Module Instantiation
		//
		//
		//	      
		//		         //deprecated
		public Alternatives getAlternatives() { return cAlternatives; }

		//"run" module=ModuleRenaming ("[" list=RenamingList "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"run"
		public Keyword getRunKeyword_0_0() { return cRunKeyword_0_0; }

		//module=ModuleRenaming
		public Assignment getModuleAssignment_0_1() { return cModuleAssignment_0_1; }

		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_0_1_0() { return cModuleModuleRenamingParserRuleCall_0_1_0; }

		//("[" list=RenamingList "]")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }

		//list=RenamingList
		public Assignment getListAssignment_0_2_1() { return cListAssignment_0_2_1; }

		//RenamingList
		public RuleCall getListRenamingListParserRuleCall_0_2_1_0() { return cListRenamingListParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_2() { return cRightSquareBracketKeyword_0_2_2; }

		//"copymodule" module=ModuleRenaming ("[" list=RenamingList "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"copymodule"
		public Keyword getCopymoduleKeyword_1_0() { return cCopymoduleKeyword_1_0; }

		//module=ModuleRenaming
		public Assignment getModuleAssignment_1_1() { return cModuleAssignment_1_1; }

		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_1_1_0() { return cModuleModuleRenamingParserRuleCall_1_1_0; }

		//("[" list=RenamingList "]")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//list=RenamingList
		public Assignment getListAssignment_1_2_1() { return cListAssignment_1_2_1; }

		//RenamingList
		public RuleCall getListRenamingListParserRuleCall_1_2_1_0() { return cListRenamingListParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}

	public class ModuleRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModuleModuleCrossReference_0_0 = (CrossReference)cModuleAssignment_0.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_0_0_1 = (RuleCall)cModuleModuleCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRenamedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cRenamedSolidusKeyword_1_0_0 = (Keyword)cRenamedAssignment_1_0.eContents().get(0);
		private final Assignment cNewNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNewNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNewNameAssignment_1_1.eContents().get(0);
		
		//ModuleRenaming:
		//  module=[Module] (renamed?="/" newName=ID)?;   //deprecated
		public ParserRule getRule() { return rule; }

		//module=[Module] (renamed?="/" newName=ID)?
		public Group getGroup() { return cGroup; }

		//module=[Module]
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//[Module]
		public CrossReference getModuleModuleCrossReference_0_0() { return cModuleModuleCrossReference_0_0; }

		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_0_0_1() { return cModuleModuleIDTerminalRuleCall_0_0_1; }

		//(renamed?="/" newName=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//renamed?="/"
		public Assignment getRenamedAssignment_1_0() { return cRenamedAssignment_1_0; }

		//"/"
		public Keyword getRenamedSolidusKeyword_1_0_0() { return cRenamedSolidusKeyword_1_0_0; }

		//newName=ID
		public Assignment getNewNameAssignment_1_1() { return cNewNameAssignment_1_1; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_1_1_0() { return cNewNameIDTerminalRuleCall_1_1_0; }
	}

	public class RenamingListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenamingList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListRenamingParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListRenamingParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//RenamingList:
		//  list+=Renaming (";" list+=Renaming)*;
		public ParserRule getRule() { return rule; }

		//list+=Renaming (";" list+=Renaming)*
		public Group getGroup() { return cGroup; }

		//list+=Renaming
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_0_0() { return cListRenamingParserRuleCall_0_0; }

		//(";" list+=Renaming)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//list+=Renaming
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_1_1_0() { return cListRenamingParserRuleCall_1_1_0; }
	}

	public class RenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Renaming");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRenamingAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRenamingTypeRenamingParserRuleCall_0_1_0 = (RuleCall)cRenamingAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cRenamingAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cRenamingTypeRenamingParserRuleCall_0_2_1_0 = (RuleCall)cRenamingAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstantKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenamingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenamingConstantRenamingParserRuleCall_1_1_0 = (RuleCall)cRenamingAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRenamingAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRenamingConstantRenamingParserRuleCall_1_2_1_0 = (RuleCall)cRenamingAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFunctionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenamingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenamingFunctionRenamingParserRuleCall_2_1_0 = (RuleCall)cRenamingAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRenamingAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cRenamingFunctionRenamingParserRuleCall_2_2_1_0 = (RuleCall)cRenamingAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSignalKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRenamingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRenamingSignalRenamingParserRuleCall_3_1_0 = (RuleCall)cRenamingAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRenamingAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cRenamingSignalRenamingParserRuleCall_3_2_1_0 = (RuleCall)cRenamingAssignment_3_2_1.eContents().get(0);
		
		//Renaming:
		//  "type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*|"constant" renaming+=
		//  ConstantRenaming ("," renaming+=ConstantRenaming)*|"function" renaming+=
		//  FunctionRenaming ("," renaming+=FunctionRenaming)*|"signal" renaming+=
		//  SignalRenaming ("," renaming+=SignalRenaming)*;
		public ParserRule getRule() { return rule; }

		//"type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*|"constant" renaming+=
		//ConstantRenaming ("," renaming+=ConstantRenaming)*|"function" renaming+=
		//FunctionRenaming ("," renaming+=FunctionRenaming)*|"signal" renaming+=
		//SignalRenaming ("," renaming+=SignalRenaming)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*
		public Group getGroup_0() { return cGroup_0; }

		//"type"
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }

		//renaming+=TypeRenaming
		public Assignment getRenamingAssignment_0_1() { return cRenamingAssignment_0_1; }

		//TypeRenaming
		public RuleCall getRenamingTypeRenamingParserRuleCall_0_1_0() { return cRenamingTypeRenamingParserRuleCall_0_1_0; }

		//("," renaming+=TypeRenaming)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//renaming+=TypeRenaming
		public Assignment getRenamingAssignment_0_2_1() { return cRenamingAssignment_0_2_1; }

		//TypeRenaming
		public RuleCall getRenamingTypeRenamingParserRuleCall_0_2_1_0() { return cRenamingTypeRenamingParserRuleCall_0_2_1_0; }

		//"constant" renaming+=ConstantRenaming ("," renaming+=ConstantRenaming)*
		public Group getGroup_1() { return cGroup_1; }

		//"constant"
		public Keyword getConstantKeyword_1_0() { return cConstantKeyword_1_0; }

		//renaming+=ConstantRenaming
		public Assignment getRenamingAssignment_1_1() { return cRenamingAssignment_1_1; }

		//ConstantRenaming
		public RuleCall getRenamingConstantRenamingParserRuleCall_1_1_0() { return cRenamingConstantRenamingParserRuleCall_1_1_0; }

		//("," renaming+=ConstantRenaming)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//renaming+=ConstantRenaming
		public Assignment getRenamingAssignment_1_2_1() { return cRenamingAssignment_1_2_1; }

		//ConstantRenaming
		public RuleCall getRenamingConstantRenamingParserRuleCall_1_2_1_0() { return cRenamingConstantRenamingParserRuleCall_1_2_1_0; }

		//"function" renaming+=FunctionRenaming ("," renaming+=FunctionRenaming)*
		public Group getGroup_2() { return cGroup_2; }

		//"function"
		public Keyword getFunctionKeyword_2_0() { return cFunctionKeyword_2_0; }

		//renaming+=FunctionRenaming
		public Assignment getRenamingAssignment_2_1() { return cRenamingAssignment_2_1; }

		//FunctionRenaming
		public RuleCall getRenamingFunctionRenamingParserRuleCall_2_1_0() { return cRenamingFunctionRenamingParserRuleCall_2_1_0; }

		//("," renaming+=FunctionRenaming)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//renaming+=FunctionRenaming
		public Assignment getRenamingAssignment_2_2_1() { return cRenamingAssignment_2_2_1; }

		//FunctionRenaming
		public RuleCall getRenamingFunctionRenamingParserRuleCall_2_2_1_0() { return cRenamingFunctionRenamingParserRuleCall_2_2_1_0; }

		//"signal" renaming+=SignalRenaming ("," renaming+=SignalRenaming)*
		public Group getGroup_3() { return cGroup_3; }

		//"signal"
		public Keyword getSignalKeyword_3_0() { return cSignalKeyword_3_0; }

		//renaming+=SignalRenaming
		public Assignment getRenamingAssignment_3_1() { return cRenamingAssignment_3_1; }

		//SignalRenaming
		public RuleCall getRenamingSignalRenamingParserRuleCall_3_1_0() { return cRenamingSignalRenamingParserRuleCall_3_1_0; }

		//("," renaming+=SignalRenaming)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//renaming+=SignalRenaming
		public Assignment getRenamingAssignment_3_2_1() { return cRenamingAssignment_3_2_1; }

		//SignalRenaming
		public RuleCall getRenamingSignalRenamingParserRuleCall_3_2_1_0() { return cRenamingSignalRenamingParserRuleCall_3_2_1_0; }
	}

	public class TypeRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOldNameTypeCrossReference_0_0 = (CrossReference)cOldNameAssignment_0.eContents().get(0);
		private final RuleCall cOldNameTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cOldNameTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//TypeRenaming:
		//  oldName=[Type] "/" newName=ID;
		public ParserRule getRule() { return rule; }

		//oldName=[Type] "/" newName=ID
		public Group getGroup() { return cGroup; }

		//oldName=[Type]
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }

		//[Type]
		public CrossReference getOldNameTypeCrossReference_0_0() { return cOldNameTypeCrossReference_0_0; }

		//ID
		public RuleCall getOldNameTypeIDTerminalRuleCall_0_0_1() { return cOldNameTypeIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//newName=ID
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_2_0() { return cNewNameIDTerminalRuleCall_2_0; }
	}

	public class ConstantRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueConstantValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//ConstantRenaming:
		//  value=ConstantValue "/" newName=ID;
		public ParserRule getRule() { return rule; }

		//value=ConstantValue "/" newName=ID
		public Group getGroup() { return cGroup; }

		//value=ConstantValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_0_0() { return cValueConstantValueParserRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//newName=ID
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_2_0() { return cNewNameIDTerminalRuleCall_2_0; }
	}

	public class FunctionRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOldNameFunctionCrossReference_0_0 = (CrossReference)cOldNameAssignment_0.eContents().get(0);
		private final RuleCall cOldNameFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cOldNameFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//FunctionRenaming:
		//  oldName=[Function] "/" newName=ID;
		public ParserRule getRule() { return rule; }

		//oldName=[Function] "/" newName=ID
		public Group getGroup() { return cGroup; }

		//oldName=[Function]
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }

		//[Function]
		public CrossReference getOldNameFunctionCrossReference_0_0() { return cOldNameFunctionCrossReference_0_0; }

		//ID
		public RuleCall getOldNameFunctionIDTerminalRuleCall_0_0_1() { return cOldNameFunctionIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//newName=ID
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_2_0() { return cNewNameIDTerminalRuleCall_2_0; }
	}

	public class SignalRenamingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOldNameSignalCrossReference_0_0 = (CrossReference)cOldNameAssignment_0.eContents().get(0);
		private final RuleCall cOldNameSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cOldNameSignalCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//SignalRenaming:
		//  oldName=[Signal] "/" newName=ID; 
		//
		//
		//	    
		//	
		//// --> B.4.20 signal: Local Signal Declaration <--
		public ParserRule getRule() { return rule; }

		//oldName=[Signal] "/" newName=ID
		public Group getGroup() { return cGroup; }

		//oldName=[Signal]
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }

		//[Signal]
		public CrossReference getOldNameSignalCrossReference_0_0() { return cOldNameSignalCrossReference_0_0; }

		//ID
		public RuleCall getOldNameSignalIDTerminalRuleCall_0_0_1() { return cOldNameSignalIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//newName=ID
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_2_0() { return cNewNameIDTerminalRuleCall_2_0; }
	}

	public class LocalSignalDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalSignalDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalListLocalSignalListParserRuleCall_1_0 = (RuleCall)cSignalListAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSignalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocalSignalDecl:
		//  "signal" signalList=LocalSignalList "in" statement=Statement "end" "signal"?; 
		//	
		//// --> B.4.20 signal: Local Signal Declaration <--
		public ParserRule getRule() { return rule; }

		//"signal" signalList=LocalSignalList "in" statement=Statement "end" "signal"?
		public Group getGroup() { return cGroup; }

		//"signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//signalList=LocalSignalList
		public Assignment getSignalListAssignment_1() { return cSignalListAssignment_1; }

		//LocalSignalList
		public RuleCall getSignalListLocalSignalListParserRuleCall_1_0() { return cSignalListLocalSignalListParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"signal"?
		public Keyword getSignalKeyword_5() { return cSignalKeyword_5; }
	}

	public class LocalSignalListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalSignalList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_1_0 = (RuleCall)cSignalAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSignalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_2_1_0 = (RuleCall)cSignalAssignment_2_1.eContents().get(0);
		
		//LocalSignalList:
		//  {LocalSignal} signal+=Signal ("," signal+=Signal)*; 
		//	
		//
		//	   
		//	  
		//	
		//// --> B.4.21 suspend: Preemption with State Freeze
		public ParserRule getRule() { return rule; }

		//{LocalSignal} signal+=Signal ("," signal+=Signal)*
		public Group getGroup() { return cGroup; }

		//{LocalSignal}
		public Action getLocalSignalAction_0() { return cLocalSignalAction_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_1_0() { return cSignalSignalParserRuleCall_1_0; }

		//("," signal+=Signal)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//signal+=Signal
		public Assignment getSignalAssignment_2_1() { return cSignalAssignment_2_1; }

		//Signal
		public RuleCall getSignalSignalParserRuleCall_2_1_0() { return cSignalSignalParserRuleCall_2_1_0; }
	}

	public class SuspendElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Suspend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuspendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDelayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDelayDelayExprParserRuleCall_3_0 = (RuleCall)cDelayAssignment_3.eContents().get(0);
		
		//Suspend:
		//  "suspend" statement=Statement "when" delay=DelayExpr; 
		//	
		//// --> B.4.21 suspend: Preemption with State Freeze
		//
		//	      
		//
		//// --> B.4.22 sustain: Emit a Signal Indefinitely
		public ParserRule getRule() { return rule; }

		//"suspend" statement=Statement "when" delay=DelayExpr
		public Group getGroup() { return cGroup; }

		//"suspend"
		public Keyword getSuspendKeyword_0() { return cSuspendKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_3() { return cDelayAssignment_3; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_3_0() { return cDelayDelayExprParserRuleCall_3_0; }
	}

	public class SustainElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sustain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSustainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_1_0 = (CrossReference)cSignalAssignment_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cSignalSignalCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDataExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDataExprDataExprParserRuleCall_2_1_0 = (RuleCall)cDataExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Sustain:
		//  "sustain" signal=[Signal] ("(" dataExpr=DataExpr ")")?; 
		//
		//// --> B.4.22 sustain: Emit a Signal Indefinitely
		//
		//	        
		//	
		//// --> B.4.23 trap: TrapDeclaration and Handling
		public ParserRule getRule() { return rule; }

		//"sustain" signal=[Signal] ("(" dataExpr=DataExpr ")")?
		public Group getGroup() { return cGroup; }

		//"sustain"
		public Keyword getSustainKeyword_0() { return cSustainKeyword_0; }

		//signal=[Signal]
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_1_0() { return cSignalSignalCrossReference_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_1_0_1() { return cSignalSignalIDTerminalRuleCall_1_0_1; }

		//("(" dataExpr=DataExpr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//dataExpr=DataExpr
		public Assignment getDataExprAssignment_2_1() { return cDataExprAssignment_2_1; }

		//DataExpr
		public RuleCall getDataExprDataExprParserRuleCall_2_1_0() { return cDataExprDataExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TrapElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrapDeclListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrapDeclListTrapDeclListParserRuleCall_1_0 = (RuleCall)cTrapDeclListAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Assignment cTrapHandlerListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrapHandlerListTrapHandlerListParserRuleCall_4_0 = (RuleCall)cTrapHandlerListAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTrapKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Trap:
		//  "trap" trapDeclList=TrapDeclList "in" statement=Statement trapHandlerList=
		//  TrapHandlerList? "end" "trap"?; 
		//	
		//// --> B.4.23 trap: TrapDeclaration and Handling
		public ParserRule getRule() { return rule; }

		//"trap" trapDeclList=TrapDeclList "in" statement=Statement trapHandlerList=
		//TrapHandlerList? "end" "trap"?
		public Group getGroup() { return cGroup; }

		//"trap"
		public Keyword getTrapKeyword_0() { return cTrapKeyword_0; }

		//trapDeclList=TrapDeclList
		public Assignment getTrapDeclListAssignment_1() { return cTrapDeclListAssignment_1; }

		//TrapDeclList
		public RuleCall getTrapDeclListTrapDeclListParserRuleCall_1_0() { return cTrapDeclListTrapDeclListParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }

		//trapHandlerList=TrapHandlerList?
		public Assignment getTrapHandlerListAssignment_4() { return cTrapHandlerListAssignment_4; }

		//TrapHandlerList
		public RuleCall getTrapHandlerListTrapHandlerListParserRuleCall_4_0() { return cTrapHandlerListTrapHandlerListParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"trap"?
		public Keyword getTrapKeyword_6() { return cTrapKeyword_6; }
	}

	public class TrapDeclListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrapDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrapDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrapDeclTrapDeclParserRuleCall_0_0 = (RuleCall)cTrapDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTrapDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTrapDeclTrapDeclParserRuleCall_1_1_0 = (RuleCall)cTrapDeclAssignment_1_1.eContents().get(0);
		
		//TrapDeclList:
		//  trapDecl+=TrapDecl ("," trapDecl+=TrapDecl)*;
		public ParserRule getRule() { return rule; }

		//trapDecl+=TrapDecl ("," trapDecl+=TrapDecl)*
		public Group getGroup() { return cGroup; }

		//trapDecl+=TrapDecl
		public Assignment getTrapDeclAssignment_0() { return cTrapDeclAssignment_0; }

		//TrapDecl
		public RuleCall getTrapDeclTrapDeclParserRuleCall_0_0() { return cTrapDeclTrapDeclParserRuleCall_0_0; }

		//("," trapDecl+=TrapDecl)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//trapDecl+=TrapDecl
		public Assignment getTrapDeclAssignment_1_1() { return cTrapDeclAssignment_1_1; }

		//TrapDecl
		public RuleCall getTrapDeclTrapDeclParserRuleCall_1_1_0() { return cTrapDeclTrapDeclParserRuleCall_1_1_0; }
	}

	public class TrapDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrapDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cChannelDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChannelDescChannelDescriptionParserRuleCall_1_0 = (RuleCall)cChannelDescAssignment_1.eContents().get(0);
		
		//TrapDecl:
		//  name=ID channelDesc=ChannelDescription?;
		public ParserRule getRule() { return rule; }

		//name=ID channelDesc=ChannelDescription?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//channelDesc=ChannelDescription?
		public Assignment getChannelDescAssignment_1() { return cChannelDescAssignment_1; }

		//ChannelDescription
		public RuleCall getChannelDescChannelDescriptionParserRuleCall_1_0() { return cChannelDescChannelDescriptionParserRuleCall_1_0; }
	}

	public class TrapHandlerListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrapHandlerList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrapHandlerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrapHandlerTrapHandlerParserRuleCall_0_0 = (RuleCall)cTrapHandlerAssignment_0.eContents().get(0);
		private final Assignment cTrapHandlerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrapHandlerTrapHandlerParserRuleCall_1_0 = (RuleCall)cTrapHandlerAssignment_1.eContents().get(0);
		
		//TrapHandlerList:
		//  trapHandler+=TrapHandler trapHandler+=TrapHandler*;
		public ParserRule getRule() { return rule; }

		//trapHandler+=TrapHandler trapHandler+=TrapHandler*
		public Group getGroup() { return cGroup; }

		//trapHandler+=TrapHandler
		public Assignment getTrapHandlerAssignment_0() { return cTrapHandlerAssignment_0; }

		//TrapHandler
		public RuleCall getTrapHandlerTrapHandlerParserRuleCall_0_0() { return cTrapHandlerTrapHandlerParserRuleCall_0_0; }

		//trapHandler+=TrapHandler*
		public Assignment getTrapHandlerAssignment_1() { return cTrapHandlerAssignment_1; }

		//TrapHandler
		public RuleCall getTrapHandlerTrapHandlerParserRuleCall_1_0() { return cTrapHandlerTrapHandlerParserRuleCall_1_0; }
	}

	public class TrapHandlerElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrapHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrapExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrapExprTrapExprParserRuleCall_1_0 = (RuleCall)cTrapExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//TrapHandler:
		//  "handle" trapExpr=TrapExpr "do" statement=Statement; 
		//	
		//
		//	      
		//	
		//// --> B.4.24 var: Local Variable Declaration
		public ParserRule getRule() { return rule; }

		//"handle" trapExpr=TrapExpr "do" statement=Statement
		public Group getGroup() { return cGroup; }

		//"handle"
		public Keyword getHandleKeyword_0() { return cHandleKeyword_0; }

		//trapExpr=TrapExpr
		public Assignment getTrapExprAssignment_1() { return cTrapExprAssignment_1; }

		//TrapExpr
		public RuleCall getTrapExprTrapExprParserRuleCall_1_0() { return cTrapExprTrapExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
	}

	public class VariableElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclVariableDeclParserRuleCall_1_0 = (RuleCall)cVarDeclAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Variable:
		//  "var" varDecl=VariableDecl "in" statement=Statement "end" "var"?; 
		//	
		//// --> B.4.24 var: Local Variable Declaration
		public ParserRule getRule() { return rule; }

		//"var" varDecl=VariableDecl "in" statement=Statement "end" "var"?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//varDecl=VariableDecl
		public Assignment getVarDeclAssignment_1() { return cVarDeclAssignment_1; }

		//VariableDecl
		public RuleCall getVarDeclVariableDeclParserRuleCall_1_0() { return cVarDeclVariableDeclParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"var"?
		public Keyword getVarKeyword_5() { return cVarKeyword_5; }
	}

	public class VariableDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListVariableListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Action cVariableDeclLeftAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cVarListAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cVarListVariableListParserRuleCall_3_2_0 = (RuleCall)cVarListAssignment_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cGroup_3.eContents().get(4);
		private final Assignment cTypeAssignment_3_4_0 = (Assignment)cAlternatives_3_4.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_3_4_0_0 = (RuleCall)cTypeAssignment_3_4_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_4_1 = (Assignment)cAlternatives_3_4.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_3_4_1_0 = (RuleCall)cTypeAssignment_3_4_1.eContents().get(0);
		
		//VariableDecl:
		//  varList=VariableList ":" (type=ID|type=BaseType) ({VariableDecl.left=current} ","
		//  varList=VariableList ":" (type=ID|type=BaseType))*;
		public ParserRule getRule() { return rule; }

		//varList=VariableList ":" (type=ID|type=BaseType) ({VariableDecl.left=current} ","
		//varList=VariableList ":" (type=ID|type=BaseType))*
		public Group getGroup() { return cGroup; }

		//varList=VariableList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }

		//VariableList
		public RuleCall getVarListVariableListParserRuleCall_0_0() { return cVarListVariableListParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=ID
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0_0() { return cTypeIDTerminalRuleCall_2_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_2_1_0() { return cTypeBaseTypeTerminalRuleCall_2_1_0; }

		//({VariableDecl.left=current} "," varList=VariableList ":" (type=ID|type=BaseType))*
		public Group getGroup_3() { return cGroup_3; }

		//{VariableDecl.left=current}
		public Action getVariableDeclLeftAction_3_0() { return cVariableDeclLeftAction_3_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }

		//varList=VariableList
		public Assignment getVarListAssignment_3_2() { return cVarListAssignment_3_2; }

		//VariableList
		public RuleCall getVarListVariableListParserRuleCall_3_2_0() { return cVarListVariableListParserRuleCall_3_2_0; }

		//":"
		public Keyword getColonKeyword_3_3() { return cColonKeyword_3_3; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }

		//type=ID
		public Assignment getTypeAssignment_3_4_0() { return cTypeAssignment_3_4_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_4_0_0() { return cTypeIDTerminalRuleCall_3_4_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_3_4_1() { return cTypeAssignment_3_4_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_3_4_1_0() { return cTypeBaseTypeTerminalRuleCall_3_4_1_0; }
	}

	public class VariableListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionDataExprParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cVariableListLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVariableAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_2_0 = (RuleCall)cVariableAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cExpressionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cExpressionDataExprParserRuleCall_2_3_1_0 = (RuleCall)cExpressionAssignment_2_3_1.eContents().get(0);
		
		//VariableList:
		//  variable=ID (":=" expression=DataExpr)? ({VariableList.left=current} "," variable=ID (
		//  ":=" expression=DataExpr)?)*; 
		//	
		//
		//	     
		//	        
		//
		//// --> B.4.25 weak abort: Weak Preemption
		public ParserRule getRule() { return rule; }

		//variable=ID (":=" expression=DataExpr)? ({VariableList.left=current} "," variable=ID (
		//":=" expression=DataExpr)?)*
		public Group getGroup() { return cGroup; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//(":=" expression=DataExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_0() { return cColonEqualsSignKeyword_1_0; }

		//expression=DataExpr
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//DataExpr
		public RuleCall getExpressionDataExprParserRuleCall_1_1_0() { return cExpressionDataExprParserRuleCall_1_1_0; }

		//({VariableList.left=current} "," variable=ID (":=" expression=DataExpr)?)*
		public Group getGroup_2() { return cGroup_2; }

		//{VariableList.left=current}
		public Action getVariableListLeftAction_2_0() { return cVariableListLeftAction_2_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//variable=ID
		public Assignment getVariableAssignment_2_2() { return cVariableAssignment_2_2; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_2_0() { return cVariableIDTerminalRuleCall_2_2_0; }

		//(":=" expression=DataExpr)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_3_0() { return cColonEqualsSignKeyword_2_3_0; }

		//expression=DataExpr
		public Assignment getExpressionAssignment_2_3_1() { return cExpressionAssignment_2_3_1; }

		//DataExpr
		public RuleCall getExpressionDataExprParserRuleCall_2_3_1_0() { return cExpressionDataExprParserRuleCall_2_3_1_0; }
	}

	public class WeakAbortElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakAbort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAbortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWeakAbortBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeakAbortBodyWeakAbortBodyParserRuleCall_4_0 = (RuleCall)cWeakAbortBodyAssignment_4.eContents().get(0);
		
		//WeakAbort:
		//  "weak" "abort" statement=Statement "when" weakAbortBody=WeakAbortBody; 
		//
		//// --> B.4.25 weak abort: Weak Preemption
		public ParserRule getRule() { return rule; }

		//"weak" "abort" statement=Statement "when" weakAbortBody=WeakAbortBody
		public Group getGroup() { return cGroup; }

		//"weak"
		public Keyword getWeakKeyword_0() { return cWeakKeyword_0; }

		//"abort"
		public Keyword getAbortKeyword_1() { return cAbortKeyword_1; }

		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }

		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//weakAbortBody=WeakAbortBody
		public Assignment getWeakAbortBodyAssignment_4() { return cWeakAbortBodyAssignment_4; }

		//WeakAbortBody
		public RuleCall getWeakAbortBodyWeakAbortBodyParserRuleCall_4_0() { return cWeakAbortBodyWeakAbortBodyParserRuleCall_4_0; }
	}

	public class WeakAbortBodyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakAbortBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWeakAbortInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWeakAbortCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WeakAbortBody:
		//  WeakAbortInstance|WeakAbortCase;
		public ParserRule getRule() { return rule; }

		//WeakAbortInstance|WeakAbortCase
		public Alternatives getAlternatives() { return cAlternatives; }

		//WeakAbortInstance
		public RuleCall getWeakAbortInstanceParserRuleCall_0() { return cWeakAbortInstanceParserRuleCall_0; }

		//WeakAbortCase
		public RuleCall getWeakAbortCaseParserRuleCall_1() { return cWeakAbortCaseParserRuleCall_1; }
	}

	public class WeakAbortEndElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakAbortEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWeakKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAbortKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//WeakAbortEnd returns ecore::EString:
		//  "end" ("weak"? "abort")?;
		public ParserRule getRule() { return rule; }

		//"end" ("weak"? "abort")?
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//("weak"? "abort")?
		public Group getGroup_1() { return cGroup_1; }

		//"weak"?
		public Keyword getWeakKeyword_1_0() { return cWeakKeyword_1_0; }

		//"abort"
		public Keyword getAbortKeyword_1_1() { return cAbortKeyword_1_1; }
	}

	public class WeakAbortInstanceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakAbortInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDelayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_0_0 = (RuleCall)cDelayAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndWeakAbortEndParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//WeakAbortInstance:
		//  delay=DelayExpr ("do" statement=Statement end=WeakAbortEnd)?;
		public ParserRule getRule() { return rule; }

		//delay=DelayExpr ("do" statement=Statement end=WeakAbortEnd)?
		public Group getGroup() { return cGroup; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_0() { return cDelayAssignment_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_0_0() { return cDelayDelayExprParserRuleCall_0_0; }

		//("do" statement=Statement end=WeakAbortEnd)?
		public Group getGroup_1() { return cGroup_1; }

		//"do"
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }

		//end=WeakAbortEnd
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//WeakAbortEnd
		public RuleCall getEndWeakAbortEndParserRuleCall_1_2_0() { return cEndWeakAbortEndParserRuleCall_1_2_0; }
	}

	public class WeakAbortCaseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakAbortCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_0_0 = (RuleCall)cCasesAssignment_0.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesAbortCaseSingleParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndWeakAbortEndParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//WeakAbortCase:
		//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=WeakAbortEnd;  
		//	
		//
		//	    
		//
		//
		//// ==============================================
		//// ===            B.3 Expressions             ===
		//// ==============================================
		//
		//// --> B.3.1 Data Expressions
		public ParserRule getRule() { return rule; }

		//cases+=AbortCaseSingle cases+=AbortCaseSingle* end=WeakAbortEnd
		public Group getGroup() { return cGroup; }

		//cases+=AbortCaseSingle
		public Assignment getCasesAssignment_0() { return cCasesAssignment_0; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_0_0() { return cCasesAbortCaseSingleParserRuleCall_0_0; }

		//cases+=AbortCaseSingle*
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//AbortCaseSingle
		public RuleCall getCasesAbortCaseSingleParserRuleCall_1_0() { return cCasesAbortCaseSingleParserRuleCall_1_0; }

		//end=WeakAbortEnd
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }

		//WeakAbortEnd
		public RuleCall getEndWeakAbortEndParserRuleCall_2_0() { return cEndWeakAbortEndParserRuleCall_2_0; }
	}

	public class DataExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOpDataOpParserRuleCall_0_0_0 = (RuleCall)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprDataExprParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprDataUnaryExprParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cDataExprLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOpDataOpParserRuleCall_1_1_1_0 = (RuleCall)cOpAssignment_1_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExprDataExprParserRuleCall_1_1_2_0 = (RuleCall)cExprAssignment_1_1_2.eContents().get(0);
		
		//DataExpr:
		//  op=DataOp expr=DataExpr|expr=DataUnaryExpr ({DataExpr.left=current} op=DataOp expr=
		//  DataExpr)?; 
		//
		//
		//// ==============================================
		//// ===            B.3 Expressions             ===
		//// ==============================================
		//
		//// --> B.3.1 Data Expressions
		public ParserRule getRule() { return rule; }

		//op=DataOp expr=DataExpr|expr=DataUnaryExpr ({DataExpr.left=current} op=DataOp expr=
		//DataExpr)? 
		//
		//
		//// ==============================================
		//// ===            B.3 Expressions             ===
		//// ==============================================
		//
		//// --> B.3.1 Data Expressions
		public Alternatives getAlternatives() { return cAlternatives; }

		//op=DataOp expr=DataExpr
		public Group getGroup_0() { return cGroup_0; }

		//op=DataOp
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }

		//DataOp
		public RuleCall getOpDataOpParserRuleCall_0_0_0() { return cOpDataOpParserRuleCall_0_0_0; }

		//expr=DataExpr
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_0_1_0() { return cExprDataExprParserRuleCall_0_1_0; }

		//expr=DataUnaryExpr ({DataExpr.left=current} op=DataOp expr=DataExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//expr=DataUnaryExpr
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }

		//DataUnaryExpr
		public RuleCall getExprDataUnaryExprParserRuleCall_1_0_0() { return cExprDataUnaryExprParserRuleCall_1_0_0; }

		//({DataExpr.left=current} op=DataOp expr=DataExpr)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{DataExpr.left=current}
		public Action getDataExprLeftAction_1_1_0() { return cDataExprLeftAction_1_1_0; }

		//op=DataOp
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//DataOp
		public RuleCall getOpDataOpParserRuleCall_1_1_1_0() { return cOpDataOpParserRuleCall_1_1_1_0; }

		//expr=DataExpr
		public Assignment getExprAssignment_1_1_2() { return cExprAssignment_1_1_2; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_1_1_2_0() { return cExprDataExprParserRuleCall_1_1_2_0; }
	}

	public class DataUnaryExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataUnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cDataExprParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cQuestionMarkKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSignalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_6_1_0 = (CrossReference)cSignalAssignment_6_1.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSignalSignalCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cPreKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSignalAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final CrossReference cSignalSignalCrossReference_7_3_0 = (CrossReference)cSignalAssignment_7_3.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_7_3_0_1 = (RuleCall)cSignalSignalCrossReference_7_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cQuestionMarkQuestionMarkKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTrapAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTrapTrapCrossReference_8_1_0 = (CrossReference)cTrapAssignment_8_1.eContents().get(0);
		private final RuleCall cTrapTrapIDTerminalRuleCall_8_1_0_1 = (RuleCall)cTrapTrapCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cFunctionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_9_0_0 = (CrossReference)cFunctionAssignment_9_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_9_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_9_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressionDataExprParserRuleCall_9_2_0 = (RuleCall)cExpressionAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cExpressionAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cExpressionDataExprParserRuleCall_9_3_1_0 = (RuleCall)cExpressionAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//DataUnaryExpr:
		//  ID|Float|Boolean|INT|STRING|"(" DataExpr ")"|"?" signal=[Signal]|"pre" "(" "?" signal=
		//  [Signal] ")"|"??" trap=[Trap]|function=[Function] "(" expression+=DataExpr (","
		//  expression+=DataExpr)* ")";
		public ParserRule getRule() { return rule; }

		//ID|Float|Boolean|INT|STRING|"(" DataExpr ")"|"?" signal=[Signal]|"pre" "(" "?" signal=
		//[Signal] ")"|"??" trap=[Trap]|function=[Function] "(" expression+=DataExpr (","
		//expression+=DataExpr)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Float
		public RuleCall getFloatTerminalRuleCall_1() { return cFloatTerminalRuleCall_1; }

		//Boolean
		public RuleCall getBooleanTerminalRuleCall_2() { return cBooleanTerminalRuleCall_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }

		//"(" DataExpr ")"
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//DataExpr
		public RuleCall getDataExprParserRuleCall_5_1() { return cDataExprParserRuleCall_5_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//"?" signal=[Signal]
		public Group getGroup_6() { return cGroup_6; }

		//"?"
		public Keyword getQuestionMarkKeyword_6_0() { return cQuestionMarkKeyword_6_0; }

		//signal=[Signal]
		public Assignment getSignalAssignment_6_1() { return cSignalAssignment_6_1; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_6_1_0() { return cSignalSignalCrossReference_6_1_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_6_1_0_1() { return cSignalSignalIDTerminalRuleCall_6_1_0_1; }

		//"pre" "(" "?" signal=[Signal] ")"
		public Group getGroup_7() { return cGroup_7; }

		//"pre"
		public Keyword getPreKeyword_7_0() { return cPreKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_7_2() { return cQuestionMarkKeyword_7_2; }

		//signal=[Signal]
		public Assignment getSignalAssignment_7_3() { return cSignalAssignment_7_3; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_7_3_0() { return cSignalSignalCrossReference_7_3_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_7_3_0_1() { return cSignalSignalIDTerminalRuleCall_7_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//"??" trap=[Trap]
		public Group getGroup_8() { return cGroup_8; }

		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_8_0() { return cQuestionMarkQuestionMarkKeyword_8_0; }

		//trap=[Trap]
		public Assignment getTrapAssignment_8_1() { return cTrapAssignment_8_1; }

		//[Trap]
		public CrossReference getTrapTrapCrossReference_8_1_0() { return cTrapTrapCrossReference_8_1_0; }

		//ID
		public RuleCall getTrapTrapIDTerminalRuleCall_8_1_0_1() { return cTrapTrapIDTerminalRuleCall_8_1_0_1; }

		//function=[Function] "(" expression+=DataExpr ("," expression+=DataExpr)* ")"
		public Group getGroup_9() { return cGroup_9; }

		//function=[Function]
		public Assignment getFunctionAssignment_9_0() { return cFunctionAssignment_9_0; }

		//[Function]
		public CrossReference getFunctionFunctionCrossReference_9_0_0() { return cFunctionFunctionCrossReference_9_0_0; }

		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_9_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_9_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//expression+=DataExpr
		public Assignment getExpressionAssignment_9_2() { return cExpressionAssignment_9_2; }

		//DataExpr
		public RuleCall getExpressionDataExprParserRuleCall_9_2_0() { return cExpressionDataExprParserRuleCall_9_2_0; }

		//("," expression+=DataExpr)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//expression+=DataExpr
		public Assignment getExpressionAssignment_9_3_1() { return cExpressionAssignment_9_3_1; }

		//DataExpr
		public RuleCall getExpressionDataExprParserRuleCall_9_3_1_0() { return cExpressionDataExprParserRuleCall_9_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }
	}

	public class DataOpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cHyphenMinusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAsteriskKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSolidusKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cModKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//DataOp returns ecore::EString:
		//  "and"|"or"|"not"|"<"|">"|"<="|">="|"<>"|"="|"+"|"-"|"*"|"/"|"mod"; 
		//		
		//
		//	
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 	
		//
		//// --> B.3.3 Signal Expressions <--
		//// --> B.3.5 Trap Expressions <--
		public ParserRule getRule() { return rule; }

		//"and"|"or"|"not"|"<"|">"|"<="|">="|"<>"|"="|"+"|"-"|"*"|"/"|"mod" 
		//		
		//
		//	
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 
		//		 	
		//
		//// --> B.3.3 Signal Expressions <--
		//// --> B.3.5 Trap Expressions <--
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//"not"
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_7() { return cLessThanSignGreaterThanSignKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//"+"
		public Keyword getPlusSignKeyword_9() { return cPlusSignKeyword_9; }

		//"-"
		public Keyword getHyphenMinusKeyword_10() { return cHyphenMinusKeyword_10; }

		//"*"
		public Keyword getAsteriskKeyword_11() { return cAsteriskKeyword_11; }

		//"/"
		public Keyword getSolidusKeyword_12() { return cSolidusKeyword_12; }

		//"mod"
		public Keyword getModKeyword_13() { return cModKeyword_13; }
	}

	public class TrapExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrapExpr");
		private final RuleCall cSigExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TrapExpr:
		//  SigExpr; 	
		//
		//// --> B.3.3 Signal Expressions <--
		//// --> B.3.5 Trap Expressions <--
		public ParserRule getRule() { return rule; }

		//SigExpr
		public RuleCall getSigExprParserRuleCall() { return cSigExprParserRuleCall; }
	}

	public class SigExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAndExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAndExprSigExprANDParserRuleCall_0_0 = (RuleCall)cAndExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndExprSigExprANDParserRuleCall_1_1_0 = (RuleCall)cAndExprAssignment_1_1.eContents().get(0);
		
		//SigExpr:
		//  andExpr+=SigExprAND ("or" andExpr+=SigExprAND)*;
		public ParserRule getRule() { return rule; }

		//andExpr+=SigExprAND ("or" andExpr+=SigExprAND)*
		public Group getGroup() { return cGroup; }

		//andExpr+=SigExprAND
		public Assignment getAndExprAssignment_0() { return cAndExprAssignment_0; }

		//SigExprAND
		public RuleCall getAndExprSigExprANDParserRuleCall_0_0() { return cAndExprSigExprANDParserRuleCall_0_0; }

		//("or" andExpr+=SigExprAND)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//andExpr+=SigExprAND
		public Assignment getAndExprAssignment_1_1() { return cAndExprAssignment_1_1; }

		//SigExprAND
		public RuleCall getAndExprSigExprANDParserRuleCall_1_1_0() { return cAndExprSigExprANDParserRuleCall_1_1_0; }
	}

	public class SigExprANDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigExprAND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaExprSigExprUnaryParserRuleCall_0_0 = (RuleCall)cUnaExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnaExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaExprSigExprUnaryParserRuleCall_1_1_0 = (RuleCall)cUnaExprAssignment_1_1.eContents().get(0);
		
		//SigExprAND:
		//  unaExpr+=SigExprUnary ("and" unaExpr+=SigExprUnary)*;
		public ParserRule getRule() { return rule; }

		//unaExpr+=SigExprUnary ("and" unaExpr+=SigExprUnary)*
		public Group getGroup() { return cGroup; }

		//unaExpr+=SigExprUnary
		public Assignment getUnaExprAssignment_0() { return cUnaExprAssignment_0; }

		//SigExprUnary
		public RuleCall getUnaExprSigExprUnaryParserRuleCall_0_0() { return cUnaExprSigExprUnaryParserRuleCall_0_0; }

		//("and" unaExpr+=SigExprUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//unaExpr+=SigExprUnary
		public Assignment getUnaExprAssignment_1_1() { return cUnaExprAssignment_1_1; }

		//SigExprUnary
		public RuleCall getUnaExprSigExprUnaryParserRuleCall_1_1_0() { return cUnaExprSigExprUnaryParserRuleCall_1_1_0; }
	}

	public class SigExprUnaryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigExprUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprIDTerminalRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSigExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSigExprSigExprParserRuleCall_1_1_0 = (RuleCall)cSigExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNotKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSigExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSigExprSigExprUnaryParserRuleCall_2_1_0 = (RuleCall)cSigExprAssignment_2_1.eContents().get(0);
		
		//SigExprUnary:
		//  expr=ID|"(" sigExpr=SigExpr ")"|"not" sigExpr=SigExprUnary; 
		//
		//
		//	
		//		     
		//		   
		//	
		//// --> B.3.4 Delay Expressions <--
		public ParserRule getRule() { return rule; }

		//expr=ID|"(" sigExpr=SigExpr ")"|"not" sigExpr=SigExprUnary 
		//
		//
		//	
		//		     
		//		   
		//	
		//// --> B.3.4 Delay Expressions <--
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=ID
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//ID
		public RuleCall getExprIDTerminalRuleCall_0_0() { return cExprIDTerminalRuleCall_0_0; }

		//"(" sigExpr=SigExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//sigExpr=SigExpr
		public Assignment getSigExprAssignment_1_1() { return cSigExprAssignment_1_1; }

		//SigExpr
		public RuleCall getSigExprSigExprParserRuleCall_1_1_0() { return cSigExprSigExprParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"not" sigExpr=SigExprUnary
		public Group getGroup_2() { return cGroup_2; }

		//"not"
		public Keyword getNotKeyword_2_0() { return cNotKeyword_2_0; }

		//sigExpr=SigExprUnary
		public Assignment getSigExprAssignment_2_1() { return cSigExprAssignment_2_1; }

		//SigExprUnary
		public RuleCall getSigExprSigExprUnaryParserRuleCall_2_1_0() { return cSigExprSigExprUnaryParserRuleCall_2_1_0; }
	}

	public class DelayExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelayExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEventDelayEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprDataExprParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cEventAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventDelayEventParserRuleCall_1_1_0 = (RuleCall)cEventAssignment_1_1.eContents().get(0);
		
		//DelayExpr:
		//  event=DelayEvent|expr=DataExpr event=DelayEvent; 
		//	
		//// --> B.3.4 Delay Expressions <--
		public ParserRule getRule() { return rule; }

		//event=DelayEvent|expr=DataExpr event=DelayEvent 
		//	
		//// --> B.3.4 Delay Expressions <--
		public Alternatives getAlternatives() { return cAlternatives; }

		//event=DelayEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//DelayEvent
		public RuleCall getEventDelayEventParserRuleCall_0_0() { return cEventDelayEventParserRuleCall_0_0; }

		//expr=DataExpr event=DelayEvent
		public Group getGroup_1() { return cGroup_1; }

		//expr=DataExpr
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }

		//DataExpr
		public RuleCall getExprDataExprParserRuleCall_1_0_0() { return cExprDataExprParserRuleCall_1_0_0; }

		//event=DelayEvent
		public Assignment getEventAssignment_1_1() { return cEventAssignment_1_1; }

		//DelayEvent
		public RuleCall getEventDelayEventParserRuleCall_1_1_0() { return cEventDelayEventParserRuleCall_1_1_0; }
	}

	public class DelayEventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelayEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSignalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cSignalSignalCrossReference_0_0 = (CrossReference)cSignalAssignment_0.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cSignalSignalCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPreKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSigExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSigExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DelayEvent:
		//  signal=[Signal]|"pre" "(" SigExpr ")"|"[" SigExpr "]"; 
		//	
		//
		//	
		//		       
		//		   
		//	
		//
		//
		//	
		//// ==============================================
		//// === B.2 Namespaces and Predefined Objects  ===
		//// ==============================================
		//
		//// ==> Signals <==
		public ParserRule getRule() { return rule; }

		//signal=[Signal]|"pre" "(" SigExpr ")"|"[" SigExpr "]" 
		//	
		//
		//	
		//		       
		//		   
		//	
		//
		//
		//	
		//// ==============================================
		//// === B.2 Namespaces and Predefined Objects  ===
		//// ==============================================
		//
		//// ==> Signals <==
		public Alternatives getAlternatives() { return cAlternatives; }

		//signal=[Signal]
		public Assignment getSignalAssignment_0() { return cSignalAssignment_0; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_0_0() { return cSignalSignalCrossReference_0_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_0_1() { return cSignalSignalIDTerminalRuleCall_0_0_1; }

		//"pre" "(" SigExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"pre"
		public Keyword getPreKeyword_1_0() { return cPreKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//SigExpr
		public RuleCall getSigExprParserRuleCall_1_2() { return cSigExprParserRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"[" SigExpr "]"
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//SigExpr
		public RuleCall getSigExprParserRuleCall_2_1() { return cSigExprParserRuleCall_2_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class ChannelDescriptionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChannelDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_1_0_0 = (RuleCall)cTypeAssignment_0_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_0_1_1_0 = (RuleCall)cTypeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDataExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDataExprDataExprParserRuleCall_2_1_0 = (RuleCall)cDataExprAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_2_3_0_0 = (RuleCall)cTypeAssignment_2_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_3_1 = (Assignment)cAlternatives_2_3.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_2_3_1_0 = (RuleCall)cTypeAssignment_2_3_1.eContents().get(0);
		
		//ChannelDescription:
		//  ":" (type=ID|type=BaseType)|"(" (type=ID|type=BaseType) ")"|":=" dataExpr=DataExpr
		//  ":" (type=ID|type=BaseType); 
		//	
		//
		//
		//	
		//// ==============================================
		//// === B.2 Namespaces and Predefined Objects  ===
		//// ==============================================
		//
		//// ==> Signals <==
		public ParserRule getRule() { return rule; }

		//":" (type=ID|type=BaseType)|"(" (type=ID|type=BaseType) ")"|":=" dataExpr=DataExpr
		//":" (type=ID|type=BaseType) 
		//	
		//
		//
		//	
		//// ==============================================
		//// === B.2 Namespaces and Predefined Objects  ===
		//// ==============================================
		//
		//// ==> Signals <==
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" (type=ID|type=BaseType)
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//type=ID
		public Assignment getTypeAssignment_0_1_0() { return cTypeAssignment_0_1_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_1_0_0() { return cTypeIDTerminalRuleCall_0_1_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_0_1_1() { return cTypeAssignment_0_1_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_0_1_1_0() { return cTypeBaseTypeTerminalRuleCall_0_1_1_0; }

		//"(" (type=ID|type=BaseType) ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//type=ID
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0_0() { return cTypeIDTerminalRuleCall_1_1_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_1_1_1_0() { return cTypeBaseTypeTerminalRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//":=" dataExpr=DataExpr ":" (type=ID|type=BaseType)
		public Group getGroup_2() { return cGroup_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }

		//dataExpr=DataExpr
		public Assignment getDataExprAssignment_2_1() { return cDataExprAssignment_2_1; }

		//DataExpr
		public RuleCall getDataExprDataExprParserRuleCall_2_1_0() { return cDataExprDataExprParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//type=ID
		public Assignment getTypeAssignment_2_3_0() { return cTypeAssignment_2_3_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_3_0_0() { return cTypeIDTerminalRuleCall_2_3_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_2_3_1() { return cTypeAssignment_2_3_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_2_3_1_0() { return cTypeBaseTypeTerminalRuleCall_2_3_1_0; }
	}

	public class SignalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cChannelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChannelChannelDescriptionParserRuleCall_1_0 = (RuleCall)cChannelAssignment_1.eContents().get(0);
		
		//Signal:
		//  name=ID channel=ChannelDescription?;
		public ParserRule getRule() { return rule; }

		//name=ID channel=ChannelDescription?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//channel=ChannelDescription?
		public Assignment getChannelAssignment_1() { return cChannelAssignment_1; }

		//ChannelDescription
		public RuleCall getChannelChannelDescriptionParserRuleCall_1_0() { return cChannelChannelDescriptionParserRuleCall_1_0; }
	}

	public class TickElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTickAction_1 = (Action)cGroup.eContents().get(1);
		
		//Tick:
		//  "tick" {Tick};
		public ParserRule getRule() { return rule; }

		//"tick" {Tick}
		public Group getGroup() { return cGroup; }

		//"tick"
		public Keyword getTickKeyword_0() { return cTickKeyword_0; }

		//{Tick}
		public Action getTickAction_1() { return cTickAction_1; }
	}

	public class SensorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_2_0_0 = (RuleCall)cTypeAssignment_0_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_0_2_1_0 = (RuleCall)cTypeAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_1_2_0_0 = (RuleCall)cTypeAssignment_1_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cTypeBaseTypeTerminalRuleCall_1_2_1_0 = (RuleCall)cTypeAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Sensor:
		//  name=ID ":" (type=ID|type=BaseType)|name=ID "(" (type=ID|type=BaseType) ")";
		public ParserRule getRule() { return rule; }

		//name=ID ":" (type=ID|type=BaseType)|name=ID "(" (type=ID|type=BaseType) ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID ":" (type=ID|type=BaseType)
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//type=ID
		public Assignment getTypeAssignment_0_2_0() { return cTypeAssignment_0_2_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_2_0_0() { return cTypeIDTerminalRuleCall_0_2_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_0_2_1() { return cTypeAssignment_0_2_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_0_2_1_0() { return cTypeBaseTypeTerminalRuleCall_0_2_1_0; }

		//name=ID "(" (type=ID|type=BaseType) ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//type=ID|type=BaseType
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//type=ID
		public Assignment getTypeAssignment_1_2_0() { return cTypeAssignment_1_2_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_2_0_0() { return cTypeIDTerminalRuleCall_1_2_0_0; }

		//type=BaseType
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//BaseType
		public RuleCall getTypeBaseTypeTerminalRuleCall_1_2_1_0() { return cTypeBaseTypeTerminalRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	private ProgrammElements pProgramm;
	private MainModuleElements pMainModule;
	private ModuleElements pModule;
	private EndModuleElements pEndModule;
	private ModuleBodyElements pModuleBody;
	private ModuleInterfaceElements pModuleInterface;
	private SignalDeclElements pSignalDecl;
	private SensorDeclElements pSensorDecl;
	private RelationDeclElements pRelationDecl;
	private RelationElements pRelation;
	private RelationImplicationElements pRelationImplication;
	private RelationIncompatibilityElements pRelationIncompatibility;
	private TypeDeclElements pTypeDecl;
	private TypeElements pType;
	private ConstantDeclElements pConstantDecl;
	private OneTypeConstantDeclElements pOneTypeConstantDecl;
	private ConstantElements pConstant;
	private ConstantValueElements pConstantValue;
	private FunctionDeclElements pFunctionDecl;
	private FunctionElements pFunction;
	private StatementElements pStatement;
	private AtomicStatementElements pAtomicStatement;
	private SequenceElements pSequence;
	private BlockElements pBlock;
	private AssignmentElements pAssignment;
	private AbortElements pAbort;
	private AbortBodyElements pAbortBody;
	private AbortEndElements pAbortEnd;
	private AbortInstanceElements pAbortInstance;
	private AbortCaseElements pAbortCase;
	private AbortCaseSingleElements pAbortCaseSingle;
	private AwaitElements pAwait;
	private AwaitBodyElements pAwaitBody;
	private AwaitEndElements pAwaitEnd;
	private AwaitInstanceElements pAwaitInstance;
	private AwaitCaseElements pAwaitCase;
	private DoElements pDo;
	private DoUptoElements pDoUpto;
	private DoWatchingElements pDoWatching;
	private DoWatchingEndElements pDoWatchingEnd;
	private EmitElements pEmit;
	private EveryDoElements pEveryDo;
	private ExitElements pExit;
	private HaltElements pHalt;
	private IfTestElements pIfTest;
	private ElsIfPartElements pElsIfPart;
	private ElsIfElements pElsIf;
	private ThenPartElements pThenPart;
	private ElsePartElements pElsePart;
	private LoopElements pLoop;
	private EndLoopElements pEndLoop;
	private LoopEachElements pLoopEach;
	private LoopDelayElements pLoopDelay;
	private LoopBodyElements pLoopBody;
	private NothingElements pNothing;
	private PauseElements pPause;
	private PresentElements pPresent;
	private PresentBodyElements pPresentBody;
	private PresentEventBodyElements pPresentEventBody;
	private PresentCaseListElements pPresentCaseList;
	private PresentCaseElements pPresentCase;
	private PresentEventElements pPresentEvent;
	private RepeatElements pRepeat;
	private RunElements pRun;
	private ModuleRenamingElements pModuleRenaming;
	private RenamingListElements pRenamingList;
	private RenamingElements pRenaming;
	private TypeRenamingElements pTypeRenaming;
	private ConstantRenamingElements pConstantRenaming;
	private FunctionRenamingElements pFunctionRenaming;
	private SignalRenamingElements pSignalRenaming;
	private LocalSignalDeclElements pLocalSignalDecl;
	private LocalSignalListElements pLocalSignalList;
	private SuspendElements pSuspend;
	private SustainElements pSustain;
	private TrapElements pTrap;
	private TrapDeclListElements pTrapDeclList;
	private TrapDeclElements pTrapDecl;
	private TrapHandlerListElements pTrapHandlerList;
	private TrapHandlerElements pTrapHandler;
	private VariableElements pVariable;
	private VariableDeclElements pVariableDecl;
	private VariableListElements pVariableList;
	private WeakAbortElements pWeakAbort;
	private WeakAbortBodyElements pWeakAbortBody;
	private WeakAbortEndElements pWeakAbortEnd;
	private WeakAbortInstanceElements pWeakAbortInstance;
	private WeakAbortCaseElements pWeakAbortCase;
	private DataExprElements pDataExpr;
	private DataUnaryExprElements pDataUnaryExpr;
	private DataOpElements pDataOp;
	private TrapExprElements pTrapExpr;
	private SigExprElements pSigExpr;
	private SigExprANDElements pSigExprAND;
	private SigExprUnaryElements pSigExprUnary;
	private DelayExprElements pDelayExpr;
	private DelayEventElements pDelayEvent;
	private ChannelDescriptionElements pChannelDescription;
	private SignalElements pSignal;
	private TickElements pTick;
	private SensorElements pSensor;
	private TerminalRule tFloat;
	private TerminalRule tBoolean;
	private TerminalRule tBaseType;
	private TerminalRule tEsterel_SL_Comment;
	private TerminalRule tEsterel_ML_Comment;
	private TerminalRule tNumber;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EsterelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programm hidden ( Esterel_SL_Comment , Esterel_ML_Comment , WS ):
	//  module+=MainModule module+=Module*; 
	//
	//// TODO : replace ID with proper build strings		
	//
	//// ==============================================
	//// ===              B.5 Modules               ===
	//// ==============================================
	//
	////	help function to allow multiple modules in one document
	public ProgrammElements getProgrammAccess() {
		return (pProgramm != null) ? pProgramm : (pProgramm = new ProgrammElements());
	}
	
	public ParserRule getProgrammRule() {
		return getProgrammAccess().getRule();
	}

	//MainModule:
	//  "module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule;
	public MainModuleElements getMainModuleAccess() {
		return (pMainModule != null) ? pMainModule : (pMainModule = new MainModuleElements());
	}
	
	public ParserRule getMainModuleRule() {
		return getMainModuleAccess().getRule();
	}

	//Module:
	//  "module" name=ID ":" modInt=ModuleInterface? modBody=ModuleBody EndModule;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//EndModule returns ecore::EString:
	//  "end" "module"|"."; 
	//
	//
	//	  
	//		   //deprecated
	//
	//// help function to clearly divide a Module into interface and body
	public EndModuleElements getEndModuleAccess() {
		return (pEndModule != null) ? pEndModule : (pEndModule = new EndModuleElements());
	}
	
	public ParserRule getEndModuleRule() {
		return getEndModuleAccess().getRule();
	}

	//ModuleBody:
	//  statement+=Statement;   //deprecated
	//
	//// help function to clearly divide a Module into interface and body
	public ModuleBodyElements getModuleBodyAccess() {
		return (pModuleBody != null) ? pModuleBody : (pModuleBody = new ModuleBodyElements());
	}
	
	public ParserRule getModuleBodyRule() {
		return getModuleBodyAccess().getRule();
	}

	//ModuleInterface:
	//  (intSignalDecl+=SignalDecl|intTypeDecl+=TypeDecl|intSensorDecl+=SensorDecl|
	//  intConstantDecl+=ConstantDecl|intRelationDecl+=RelationDecl|intFunctionDecl+=
	//  FunctionDecl)+; 
	//
	//
	//	
	//		 
	//		 
	//		 
	//		 
	//		 
	//
	//// ----------------------------------------------
	////            Interface Declarations
	//// ----------------------------------------------
	//	
	//// ==> Signals and Sensors <==
	public ModuleInterfaceElements getModuleInterfaceAccess() {
		return (pModuleInterface != null) ? pModuleInterface : (pModuleInterface = new ModuleInterfaceElements());
	}
	
	public ParserRule getModuleInterfaceRule() {
		return getModuleInterfaceAccess().getRule();
	}

	//SignalDecl:
	//  {Input} "input" signal+=Signal ("," signal+=Signal)* ";"|{Output} "output" signal+=
	//  Signal ("," signal+=Signal)* ";"|{InputOutput} "inputoutput" signal+=Signal ("," signal
	//  +=Signal)* ";"|{Return} "return" signal+=Signal ("," signal+=Signal)* ";"; 
	//
	//// ----------------------------------------------
	////            Interface Declarations
	//// ----------------------------------------------
	//	
	//// ==> Signals and Sensors <==
	//
	//
	//	          
	//		           
	//		           
	//		           
	//
	//	
	////ChannelType:
	////	//make reference to declared types
	//	 //Problem: Need reference OR BaseType
	public SignalDeclElements getSignalDeclAccess() {
		return (pSignalDecl != null) ? pSignalDecl : (pSignalDecl = new SignalDeclElements());
	}
	
	public ParserRule getSignalDeclRule() {
		return getSignalDeclAccess().getRule();
	}

	//SensorDecl:
	//  "sensor" sensor+=Sensor ("," sensor+=Sensor)* ";"; 
	//
	//	
	////ChannelType:
	////	//make reference to declared types
	//	 //Problem: Need reference OR BaseType
	//	
	//
	//	        
	//	
	//// ==> Relations
	public SensorDeclElements getSensorDeclAccess() {
		return (pSensorDecl != null) ? pSensorDecl : (pSensorDecl = new SensorDeclElements());
	}
	
	public ParserRule getSensorDeclRule() {
		return getSensorDeclAccess().getRule();
	}

	//RelationDecl:
	//  "relation" relation+=Relation ("," relation+=Relation)* ";"; 
	//	
	//// ==> Relations
	public RelationDeclElements getRelationDeclAccess() {
		return (pRelationDecl != null) ? pRelationDecl : (pRelationDecl = new RelationDeclElements());
	}
	
	public ParserRule getRelationDeclRule() {
		return getRelationDeclAccess().getRule();
	}

	//Relation:
	//  RelationImplication|RelationIncompatibility;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//RelationImplication returns Relation:
	//  first=[Signal] type="=>" second=[Signal];
	public RelationImplicationElements getRelationImplicationAccess() {
		return (pRelationImplication != null) ? pRelationImplication : (pRelationImplication = new RelationImplicationElements());
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}

	//RelationIncompatibility returns Relation:
	//  incomp+=[Signal] type="#" incomp+=[Signal] ("#" incomp+=[Signal])*; 
	//	
	//    
	//	        
	//
	//// ==> Types
	public RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return (pRelationIncompatibility != null) ? pRelationIncompatibility : (pRelationIncompatibility = new RelationIncompatibilityElements());
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}

	//TypeDecl:
	//  "type" type+=Type ("," type+=Type)* ";"; 
	//
	//// ==> Types
	public TypeDeclElements getTypeDeclAccess() {
		return (pTypeDecl != null) ? pTypeDecl : (pTypeDecl = new TypeDeclElements());
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//Type:
	//  name=ID;  
	//
	//
	//	
	//
	//	
	//// ==> Constants
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ConstantDecl:
	//  "constant" constant+=OneTypeConstantDecl ("," constant+=OneTypeConstantDecl)* ";"; 
	//
	//	
	//// ==> Constants
	public ConstantDeclElements getConstantDeclAccess() {
		return (pConstantDecl != null) ? pConstantDecl : (pConstantDecl = new ConstantDeclElements());
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}

	//OneTypeConstantDecl:
	//  constant+=Constant ("," constant+=Constant)* ":" (type=ID|type=BaseType);
	public OneTypeConstantDeclElements getOneTypeConstantDeclAccess() {
		return (pOneTypeConstantDecl != null) ? pOneTypeConstantDecl : (pOneTypeConstantDecl = new OneTypeConstantDeclElements());
	}
	
	public ParserRule getOneTypeConstantDeclRule() {
		return getOneTypeConstantDeclAccess().getRule();
	}

	//Constant:
	//  name=ID ("=" value=ConstantValue)?;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ConstantValue returns ecore::EString:
	//  ID|Number|INT|STRING|Float|Boolean; 
	//
	//
	//	
	//	  
	//	  
	//	  
	//	  
	//	  
	//	
	//// ==> Functions
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//FunctionDecl:
	//  "function" function+=Function ("," function+=Function)* ";"; 
	//	
	//// ==> Functions
	public FunctionDeclElements getFunctionDeclAccess() {
		return (pFunctionDecl != null) ? pFunctionDecl : (pFunctionDecl = new FunctionDeclElements());
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}

	//Function:
	//  name=ID "(" (idList+=( ID | BaseType ) ("," idList+=( ID | BaseType ))*)? ")" ":" (type=ID|type
	//  =BaseType); 
	//	
	//
	//	                  
	//
	//// ==============================================
	//// ===            B.4 Statements              ===
	//// ==============================================
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Statement:
	//  Sequence ({Parallel.left=current} "||" right=Sequence)*; 
	//
	//// ==============================================
	//// ===            B.4 Statements              ===
	//// ==============================================
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//AtomicStatement returns Statement:
	//  Abort|Assignment|Await|Block|Do|Emit|EveryDo|Exit|Halt|IfTest|LocalSignalDecl|
	//  Loop|Nothing|Pause|Present|Repeat|Run|Suspend|Sustain|Trap|Variable|WeakAbort; 
	//	
	//    
	//	 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//	
	//// --> B.4.1 Control Flow Operators <--
	public AtomicStatementElements getAtomicStatementAccess() {
		return (pAtomicStatement != null) ? pAtomicStatement : (pAtomicStatement = new AtomicStatementElements());
	}
	
	public ParserRule getAtomicStatementRule() {
		return getAtomicStatementAccess().getRule();
	}

	//Sequence returns Statement:
	//  AtomicStatement ({Sequence.left=current} ";" right=AtomicStatement)* ";"?; 
	//	
	//// --> B.4.1 Control Flow Operators <--
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Block:
	//  "[" statement=Statement "]";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Assignment:
	//  variable=ID ":=" expr=DataExpr; 
	//	
	//
	//	    
	//
	//// --> B.4.2 abort: Strong Preemption
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Abort:
	//  "abort" statement=Statement "when" body=AbortBody; 
	//
	//// --> B.4.2 abort: Strong Preemption
	public AbortElements getAbortAccess() {
		return (pAbort != null) ? pAbort : (pAbort = new AbortElements());
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//AbortBody:
	//  AbortInstance|AbortCase;
	public AbortBodyElements getAbortBodyAccess() {
		return (pAbortBody != null) ? pAbortBody : (pAbortBody = new AbortBodyElements());
	}
	
	public ParserRule getAbortBodyRule() {
		return getAbortBodyAccess().getRule();
	}

	//AbortEnd returns ecore::EString:
	//  "end" "abort"?;
	public AbortEndElements getAbortEndAccess() {
		return (pAbortEnd != null) ? pAbortEnd : (pAbortEnd = new AbortEndElements());
	}
	
	public ParserRule getAbortEndRule() {
		return getAbortEndAccess().getRule();
	}

	//AbortInstance:
	//  delay=DelayExpr ("do" statement=Statement end=AbortEnd)?;
	public AbortInstanceElements getAbortInstanceAccess() {
		return (pAbortInstance != null) ? pAbortInstance : (pAbortInstance = new AbortInstanceElements());
	}
	
	public ParserRule getAbortInstanceRule() {
		return getAbortInstanceAccess().getRule();
	}

	//AbortCase:
	//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AbortEnd;
	public AbortCaseElements getAbortCaseAccess() {
		return (pAbortCase != null) ? pAbortCase : (pAbortCase = new AbortCaseElements());
	}
	
	public ParserRule getAbortCaseRule() {
		return getAbortCaseAccess().getRule();
	}

	//AbortCaseSingle:
	//  "case" delay=DelayExpr ("do" statement=Statement)?; 
	//	
	//
	//	      
	//	
	//// --> B.4.3 await: Strong Preemption
	public AbortCaseSingleElements getAbortCaseSingleAccess() {
		return (pAbortCaseSingle != null) ? pAbortCaseSingle : (pAbortCaseSingle = new AbortCaseSingleElements());
	}
	
	public ParserRule getAbortCaseSingleRule() {
		return getAbortCaseSingleAccess().getRule();
	}

	//Await:
	//  "await" body=AwaitBody; 
	//	
	//// --> B.4.3 await: Strong Preemption
	public AwaitElements getAwaitAccess() {
		return (pAwait != null) ? pAwait : (pAwait = new AwaitElements());
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//AwaitBody:
	//  AwaitInstance|AwaitCase;
	public AwaitBodyElements getAwaitBodyAccess() {
		return (pAwaitBody != null) ? pAwaitBody : (pAwaitBody = new AwaitBodyElements());
	}
	
	public ParserRule getAwaitBodyRule() {
		return getAwaitBodyAccess().getRule();
	}

	//AwaitEnd returns ecore::EString:
	//  "end" "await"?;
	public AwaitEndElements getAwaitEndAccess() {
		return (pAwaitEnd != null) ? pAwaitEnd : (pAwaitEnd = new AwaitEndElements());
	}
	
	public ParserRule getAwaitEndRule() {
		return getAwaitEndAccess().getRule();
	}

	//AwaitInstance:
	//  DelayExpr ("do" statement=Statement end=AwaitEnd)?;
	public AwaitInstanceElements getAwaitInstanceAccess() {
		return (pAwaitInstance != null) ? pAwaitInstance : (pAwaitInstance = new AwaitInstanceElements());
	}
	
	public ParserRule getAwaitInstanceRule() {
		return getAwaitInstanceAccess().getRule();
	}

	//AwaitCase:
	//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=AwaitEnd;  
	//	
	//
	//	    
	//	
	//// --> B.4.5 do-upto: Conditional Iteration (deprecated)
	//// --> B.4.6 do-watching: Strong Preemption (deprecated)
	public AwaitCaseElements getAwaitCaseAccess() {
		return (pAwaitCase != null) ? pAwaitCase : (pAwaitCase = new AwaitCaseElements());
	}
	
	public ParserRule getAwaitCaseRule() {
		return getAwaitCaseAccess().getRule();
	}

	//Do:
	//  "do" statement=Statement (end=DoUpto|end=DoWatching); 
	//	
	//// --> B.4.5 do-upto: Conditional Iteration (deprecated)
	//// --> B.4.6 do-watching: Strong Preemption (deprecated)
	public DoElements getDoAccess() {
		return (pDo != null) ? pDo : (pDo = new DoElements());
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}

	//DoUpto:
	//  "upto" expr=DelayExpr;
	public DoUptoElements getDoUptoAccess() {
		return (pDoUpto != null) ? pDoUpto : (pDoUpto = new DoUptoElements());
	}
	
	public ParserRule getDoUptoRule() {
		return getDoUptoAccess().getRule();
	}

	//DoWatching:
	//  "watching" delay=DelayExpr end=DoWatchingEnd?;
	public DoWatchingElements getDoWatchingAccess() {
		return (pDoWatching != null) ? pDoWatching : (pDoWatching = new DoWatchingElements());
	}
	
	public ParserRule getDoWatchingRule() {
		return getDoWatchingAccess().getRule();
	}

	//DoWatchingEnd:
	//  "timeout" statement=Statement "end" "timeout"?; 
	//
	//
	//	      
	//	
	//// --> B.4.7 emit: Signal Emission <--
	//	
	//// a help function to force an "emit" object into the model
	public DoWatchingEndElements getDoWatchingEndAccess() {
		return (pDoWatchingEnd != null) ? pDoWatchingEnd : (pDoWatchingEnd = new DoWatchingEndElements());
	}
	
	public ParserRule getDoWatchingEndRule() {
		return getDoWatchingEndAccess().getRule();
	}

	//Emit:
	//  "emit" signal=[Signal] ("(" expr=DataExpr ")")?; 
	//	
	//// --> B.4.7 emit: Signal Emission <--
	//	
	//// a help function to force an "emit" object into the model
	// 
	//	        //("(" expr=DataExpr ")")?;
	//	
	//// --> B.4.8 every-do: Conditional Iteration
	public EmitElements getEmitAccess() {
		return (pEmit != null) ? pEmit : (pEmit = new EmitElements());
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//EveryDo:
	//  "every" delay=DelayExpr "do" statement=Statement "end" "every"?;   //("(" expr=DataExpr ")")?;
	//	
	//// --> B.4.8 every-do: Conditional Iteration
	//
	//	          
	//
	//// --> B.4.10 exit: Trap Exit
	public EveryDoElements getEveryDoAccess() {
		return (pEveryDo != null) ? pEveryDo : (pEveryDo = new EveryDoElements());
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}

	//Exit:
	//  "exit" trap=[Trap] ("(" dataExpr=DataExpr ")")?; 
	//
	//// --> B.4.10 exit: Trap Exit
	//
	//	        
	//	
	//// --> B.4.11 halt: Wait Forever
	public ExitElements getExitAccess() {
		return (pExit != null) ? pExit : (pExit = new ExitElements());
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//Halt:
	//  "halt" {Halt}; 
	//	
	//// --> B.4.11 halt: Wait Forever
	//
	//	  
	//	
	//// --> B.4.12: if: Conditional for Data
	public HaltElements getHaltAccess() {
		return (pHalt != null) ? pHalt : (pHalt = new HaltElements());
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//IfTest:
	//  "if" expr=DataExpr then=ThenPart? elseIf=ElsIfPart? else=ElsePart? "end" "if"?; 
	//	
	//// --> B.4.12: if: Conditional for Data
	public IfTestElements getIfTestAccess() {
		return (pIfTest != null) ? pIfTest : (pIfTest = new IfTestElements());
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}

	//ElsIfPart:
	//  elsif+=ElsIf elsif+=ElsIf*;
	public ElsIfPartElements getElsIfPartAccess() {
		return (pElsIfPart != null) ? pElsIfPart : (pElsIfPart = new ElsIfPartElements());
	}
	
	public ParserRule getElsIfPartRule() {
		return getElsIfPartAccess().getRule();
	}

	//ElsIf:
	//  "elsif" expr=DataExpr then=ThenPart?;
	public ElsIfElements getElsIfAccess() {
		return (pElsIf != null) ? pElsIf : (pElsIf = new ElsIfElements());
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}

	//ThenPart:
	//  "then" statement=Statement;
	public ThenPartElements getThenPartAccess() {
		return (pThenPart != null) ? pThenPart : (pThenPart = new ThenPartElements());
	}
	
	public ParserRule getThenPartRule() {
		return getThenPartAccess().getRule();
	}

	//ElsePart:
	//  "else" statement=Statement; 
	//
	//
	//	  
	//	
	//// --> B.4.13 loop: Infinite Loop
	//// --> B.4.14 loop-each: Condition Iteration
	public ElsePartElements getElsePartAccess() {
		return (pElsePart != null) ? pElsePart : (pElsePart = new ElsePartElements());
	}
	
	public ParserRule getElsePartRule() {
		return getElsePartAccess().getRule();
	}

	//Loop:
	//  "loop" body=LoopBody (EndLoop|end=LoopEach); 
	//	
	//// --> B.4.13 loop: Infinite Loop
	//// --> B.4.14 loop-each: Condition Iteration
	public LoopElements getLoopAccess() {
		return (pLoop != null) ? pLoop : (pLoop = new LoopElements());
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//EndLoop returns ecore::EString:
	//  "end" "loop"?;
	public EndLoopElements getEndLoopAccess() {
		return (pEndLoop != null) ? pEndLoop : (pEndLoop = new EndLoopElements());
	}
	
	public ParserRule getEndLoopRule() {
		return getEndLoopAccess().getRule();
	}

	//LoopEach:
	//  "each" LoopDelay;
	public LoopEachElements getLoopEachAccess() {
		return (pLoopEach != null) ? pLoopEach : (pLoopEach = new LoopEachElements());
	}
	
	public ParserRule getLoopEachRule() {
		return getLoopEachAccess().getRule();
	}

	//LoopDelay:
	//  delay=DelayExpr;
	public LoopDelayElements getLoopDelayAccess() {
		return (pLoopDelay != null) ? pLoopDelay : (pLoopDelay = new LoopDelayElements());
	}
	
	public ParserRule getLoopDelayRule() {
		return getLoopDelayAccess().getRule();
	}

	//LoopBody:
	//  statement=Statement; 
	//	 
	//
	//	
	//	
	//// --> B.4.15 nothing: No Operation
	public LoopBodyElements getLoopBodyAccess() {
		return (pLoopBody != null) ? pLoopBody : (pLoopBody = new LoopBodyElements());
	}
	
	public ParserRule getLoopBodyRule() {
		return getLoopBodyAccess().getRule();
	}

	//Nothing:
	//  "nothing" {Nothing}; 
	//	
	//// --> B.4.15 nothing: No Operation
	//
	//	  
	//
	//// --> B.4.16 pause: Unit Delay
	public NothingElements getNothingAccess() {
		return (pNothing != null) ? pNothing : (pNothing = new NothingElements());
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}

	//Pause:
	//  "pause" {Pause}; 
	//
	//// --> B.4.16 pause: Unit Delay
	// 
	//	  
	//	
	//// --> B.4.17 present: Conditional for Signals
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Present:
	//  "present" body=PresentBody elsePart=ElsePart? "end" "present"?; 
	//	
	//// --> B.4.17 present: Conditional for Signals
	public PresentElements getPresentAccess() {
		return (pPresent != null) ? pPresent : (pPresent = new PresentElements());
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//PresentBody:
	//  PresentEventBody|PresentCaseList;
	public PresentBodyElements getPresentBodyAccess() {
		return (pPresentBody != null) ? pPresentBody : (pPresentBody = new PresentBodyElements());
	}
	
	public ParserRule getPresentBodyRule() {
		return getPresentBodyAccess().getRule();
	}

	//PresentEventBody:
	//  event=PresentEvent thenPart=ThenPart?;
	public PresentEventBodyElements getPresentEventBodyAccess() {
		return (pPresentEventBody != null) ? pPresentEventBody : (pPresentEventBody = new PresentEventBodyElements());
	}
	
	public ParserRule getPresentEventBodyRule() {
		return getPresentEventBodyAccess().getRule();
	}

	//PresentCaseList:
	//  case+=PresentCase case+=PresentCase*;
	public PresentCaseListElements getPresentCaseListAccess() {
		return (pPresentCaseList != null) ? pPresentCaseList : (pPresentCaseList = new PresentCaseListElements());
	}
	
	public ParserRule getPresentCaseListRule() {
		return getPresentCaseListAccess().getRule();
	}

	//PresentCase:
	//  "case" event=PresentEvent ("do" statement=Statement)?;
	public PresentCaseElements getPresentCaseAccess() {
		return (pPresentCase != null) ? pPresentCase : (pPresentCase = new PresentCaseElements());
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}

	//PresentEvent:
	//  expression=SigExpr|"[" expression=SigExpr "]"; 
	//
	//
	//	
	//		     
	//
	//// --> B.4.18 repeat: Iterate a Fixed Number of Times
	public PresentEventElements getPresentEventAccess() {
		return (pPresentEvent != null) ? pPresentEvent : (pPresentEvent = new PresentEventElements());
	}
	
	public ParserRule getPresentEventRule() {
		return getPresentEventAccess().getRule();
	}

	//Repeat:
	//  positive?="positive"? "repeat" dataExpr=DataExpr "times" statement=Statement "end"
	//  "repeat"?; 
	//
	//// --> B.4.18 repeat: Iterate a Fixed Number of Times
	//
	//	            
	//// --> B.4.19 run: Module Instantiation
	public RepeatElements getRepeatAccess() {
		return (pRepeat != null) ? pRepeat : (pRepeat = new RepeatElements());
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//Run:
	//  "run" module=ModuleRenaming ("[" list=RenamingList "]")?|"copymodule" module=
	//  ModuleRenaming ("[" list=RenamingList "]")?; 
	//// --> B.4.19 run: Module Instantiation
	//
	//
	//	      
	//		         //deprecated
	public RunElements getRunAccess() {
		return (pRun != null) ? pRun : (pRun = new RunElements());
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}

	//ModuleRenaming:
	//  module=[Module] (renamed?="/" newName=ID)?;   //deprecated
	public ModuleRenamingElements getModuleRenamingAccess() {
		return (pModuleRenaming != null) ? pModuleRenaming : (pModuleRenaming = new ModuleRenamingElements());
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}

	//RenamingList:
	//  list+=Renaming (";" list+=Renaming)*;
	public RenamingListElements getRenamingListAccess() {
		return (pRenamingList != null) ? pRenamingList : (pRenamingList = new RenamingListElements());
	}
	
	public ParserRule getRenamingListRule() {
		return getRenamingListAccess().getRule();
	}

	//Renaming:
	//  "type" renaming+=TypeRenaming ("," renaming+=TypeRenaming)*|"constant" renaming+=
	//  ConstantRenaming ("," renaming+=ConstantRenaming)*|"function" renaming+=
	//  FunctionRenaming ("," renaming+=FunctionRenaming)*|"signal" renaming+=
	//  SignalRenaming ("," renaming+=SignalRenaming)*;
	public RenamingElements getRenamingAccess() {
		return (pRenaming != null) ? pRenaming : (pRenaming = new RenamingElements());
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}

	//TypeRenaming:
	//  oldName=[Type] "/" newName=ID;
	public TypeRenamingElements getTypeRenamingAccess() {
		return (pTypeRenaming != null) ? pTypeRenaming : (pTypeRenaming = new TypeRenamingElements());
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}

	//ConstantRenaming:
	//  value=ConstantValue "/" newName=ID;
	public ConstantRenamingElements getConstantRenamingAccess() {
		return (pConstantRenaming != null) ? pConstantRenaming : (pConstantRenaming = new ConstantRenamingElements());
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}

	//FunctionRenaming:
	//  oldName=[Function] "/" newName=ID;
	public FunctionRenamingElements getFunctionRenamingAccess() {
		return (pFunctionRenaming != null) ? pFunctionRenaming : (pFunctionRenaming = new FunctionRenamingElements());
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}

	//SignalRenaming:
	//  oldName=[Signal] "/" newName=ID; 
	//
	//
	//	    
	//	
	//// --> B.4.20 signal: Local Signal Declaration <--
	public SignalRenamingElements getSignalRenamingAccess() {
		return (pSignalRenaming != null) ? pSignalRenaming : (pSignalRenaming = new SignalRenamingElements());
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}

	//LocalSignalDecl:
	//  "signal" signalList=LocalSignalList "in" statement=Statement "end" "signal"?; 
	//	
	//// --> B.4.20 signal: Local Signal Declaration <--
	public LocalSignalDeclElements getLocalSignalDeclAccess() {
		return (pLocalSignalDecl != null) ? pLocalSignalDecl : (pLocalSignalDecl = new LocalSignalDeclElements());
	}
	
	public ParserRule getLocalSignalDeclRule() {
		return getLocalSignalDeclAccess().getRule();
	}

	//LocalSignalList:
	//  {LocalSignal} signal+=Signal ("," signal+=Signal)*; 
	//	
	//
	//	   
	//	  
	//	
	//// --> B.4.21 suspend: Preemption with State Freeze
	public LocalSignalListElements getLocalSignalListAccess() {
		return (pLocalSignalList != null) ? pLocalSignalList : (pLocalSignalList = new LocalSignalListElements());
	}
	
	public ParserRule getLocalSignalListRule() {
		return getLocalSignalListAccess().getRule();
	}

	//Suspend:
	//  "suspend" statement=Statement "when" delay=DelayExpr; 
	//	
	//// --> B.4.21 suspend: Preemption with State Freeze
	//
	//	      
	//
	//// --> B.4.22 sustain: Emit a Signal Indefinitely
	public SuspendElements getSuspendAccess() {
		return (pSuspend != null) ? pSuspend : (pSuspend = new SuspendElements());
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}

	//Sustain:
	//  "sustain" signal=[Signal] ("(" dataExpr=DataExpr ")")?; 
	//
	//// --> B.4.22 sustain: Emit a Signal Indefinitely
	//
	//	        
	//	
	//// --> B.4.23 trap: TrapDeclaration and Handling
	public SustainElements getSustainAccess() {
		return (pSustain != null) ? pSustain : (pSustain = new SustainElements());
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}

	//Trap:
	//  "trap" trapDeclList=TrapDeclList "in" statement=Statement trapHandlerList=
	//  TrapHandlerList? "end" "trap"?; 
	//	
	//// --> B.4.23 trap: TrapDeclaration and Handling
	public TrapElements getTrapAccess() {
		return (pTrap != null) ? pTrap : (pTrap = new TrapElements());
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}

	//TrapDeclList:
	//  trapDecl+=TrapDecl ("," trapDecl+=TrapDecl)*;
	public TrapDeclListElements getTrapDeclListAccess() {
		return (pTrapDeclList != null) ? pTrapDeclList : (pTrapDeclList = new TrapDeclListElements());
	}
	
	public ParserRule getTrapDeclListRule() {
		return getTrapDeclListAccess().getRule();
	}

	//TrapDecl:
	//  name=ID channelDesc=ChannelDescription?;
	public TrapDeclElements getTrapDeclAccess() {
		return (pTrapDecl != null) ? pTrapDecl : (pTrapDecl = new TrapDeclElements());
	}
	
	public ParserRule getTrapDeclRule() {
		return getTrapDeclAccess().getRule();
	}

	//TrapHandlerList:
	//  trapHandler+=TrapHandler trapHandler+=TrapHandler*;
	public TrapHandlerListElements getTrapHandlerListAccess() {
		return (pTrapHandlerList != null) ? pTrapHandlerList : (pTrapHandlerList = new TrapHandlerListElements());
	}
	
	public ParserRule getTrapHandlerListRule() {
		return getTrapHandlerListAccess().getRule();
	}

	//TrapHandler:
	//  "handle" trapExpr=TrapExpr "do" statement=Statement; 
	//	
	//
	//	      
	//	
	//// --> B.4.24 var: Local Variable Declaration
	public TrapHandlerElements getTrapHandlerAccess() {
		return (pTrapHandler != null) ? pTrapHandler : (pTrapHandler = new TrapHandlerElements());
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}

	//Variable:
	//  "var" varDecl=VariableDecl "in" statement=Statement "end" "var"?; 
	//	
	//// --> B.4.24 var: Local Variable Declaration
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableDecl:
	//  varList=VariableList ":" (type=ID|type=BaseType) ({VariableDecl.left=current} ","
	//  varList=VariableList ":" (type=ID|type=BaseType))*;
	public VariableDeclElements getVariableDeclAccess() {
		return (pVariableDecl != null) ? pVariableDecl : (pVariableDecl = new VariableDeclElements());
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//VariableList:
	//  variable=ID (":=" expression=DataExpr)? ({VariableList.left=current} "," variable=ID (
	//  ":=" expression=DataExpr)?)*; 
	//	
	//
	//	     
	//	        
	//
	//// --> B.4.25 weak abort: Weak Preemption
	public VariableListElements getVariableListAccess() {
		return (pVariableList != null) ? pVariableList : (pVariableList = new VariableListElements());
	}
	
	public ParserRule getVariableListRule() {
		return getVariableListAccess().getRule();
	}

	//WeakAbort:
	//  "weak" "abort" statement=Statement "when" weakAbortBody=WeakAbortBody; 
	//
	//// --> B.4.25 weak abort: Weak Preemption
	public WeakAbortElements getWeakAbortAccess() {
		return (pWeakAbort != null) ? pWeakAbort : (pWeakAbort = new WeakAbortElements());
	}
	
	public ParserRule getWeakAbortRule() {
		return getWeakAbortAccess().getRule();
	}

	//WeakAbortBody:
	//  WeakAbortInstance|WeakAbortCase;
	public WeakAbortBodyElements getWeakAbortBodyAccess() {
		return (pWeakAbortBody != null) ? pWeakAbortBody : (pWeakAbortBody = new WeakAbortBodyElements());
	}
	
	public ParserRule getWeakAbortBodyRule() {
		return getWeakAbortBodyAccess().getRule();
	}

	//WeakAbortEnd returns ecore::EString:
	//  "end" ("weak"? "abort")?;
	public WeakAbortEndElements getWeakAbortEndAccess() {
		return (pWeakAbortEnd != null) ? pWeakAbortEnd : (pWeakAbortEnd = new WeakAbortEndElements());
	}
	
	public ParserRule getWeakAbortEndRule() {
		return getWeakAbortEndAccess().getRule();
	}

	//WeakAbortInstance:
	//  delay=DelayExpr ("do" statement=Statement end=WeakAbortEnd)?;
	public WeakAbortInstanceElements getWeakAbortInstanceAccess() {
		return (pWeakAbortInstance != null) ? pWeakAbortInstance : (pWeakAbortInstance = new WeakAbortInstanceElements());
	}
	
	public ParserRule getWeakAbortInstanceRule() {
		return getWeakAbortInstanceAccess().getRule();
	}

	//WeakAbortCase:
	//  cases+=AbortCaseSingle cases+=AbortCaseSingle* end=WeakAbortEnd;  
	//	
	//
	//	    
	//
	//
	//// ==============================================
	//// ===            B.3 Expressions             ===
	//// ==============================================
	//
	//// --> B.3.1 Data Expressions
	public WeakAbortCaseElements getWeakAbortCaseAccess() {
		return (pWeakAbortCase != null) ? pWeakAbortCase : (pWeakAbortCase = new WeakAbortCaseElements());
	}
	
	public ParserRule getWeakAbortCaseRule() {
		return getWeakAbortCaseAccess().getRule();
	}

	//DataExpr:
	//  op=DataOp expr=DataExpr|expr=DataUnaryExpr ({DataExpr.left=current} op=DataOp expr=
	//  DataExpr)?; 
	//
	//
	//// ==============================================
	//// ===            B.3 Expressions             ===
	//// ==============================================
	//
	//// --> B.3.1 Data Expressions
	public DataExprElements getDataExprAccess() {
		return (pDataExpr != null) ? pDataExpr : (pDataExpr = new DataExprElements());
	}
	
	public ParserRule getDataExprRule() {
		return getDataExprAccess().getRule();
	}

	//DataUnaryExpr:
	//  ID|Float|Boolean|INT|STRING|"(" DataExpr ")"|"?" signal=[Signal]|"pre" "(" "?" signal=
	//  [Signal] ")"|"??" trap=[Trap]|function=[Function] "(" expression+=DataExpr (","
	//  expression+=DataExpr)* ")";
	public DataUnaryExprElements getDataUnaryExprAccess() {
		return (pDataUnaryExpr != null) ? pDataUnaryExpr : (pDataUnaryExpr = new DataUnaryExprElements());
	}
	
	public ParserRule getDataUnaryExprRule() {
		return getDataUnaryExprAccess().getRule();
	}

	//DataOp returns ecore::EString:
	//  "and"|"or"|"not"|"<"|">"|"<="|">="|"<>"|"="|"+"|"-"|"*"|"/"|"mod"; 
	//		
	//
	//	
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 
	//		 	
	//
	//// --> B.3.3 Signal Expressions <--
	//// --> B.3.5 Trap Expressions <--
	public DataOpElements getDataOpAccess() {
		return (pDataOp != null) ? pDataOp : (pDataOp = new DataOpElements());
	}
	
	public ParserRule getDataOpRule() {
		return getDataOpAccess().getRule();
	}

	//TrapExpr:
	//  SigExpr; 	
	//
	//// --> B.3.3 Signal Expressions <--
	//// --> B.3.5 Trap Expressions <--
	public TrapExprElements getTrapExprAccess() {
		return (pTrapExpr != null) ? pTrapExpr : (pTrapExpr = new TrapExprElements());
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}

	//SigExpr:
	//  andExpr+=SigExprAND ("or" andExpr+=SigExprAND)*;
	public SigExprElements getSigExprAccess() {
		return (pSigExpr != null) ? pSigExpr : (pSigExpr = new SigExprElements());
	}
	
	public ParserRule getSigExprRule() {
		return getSigExprAccess().getRule();
	}

	//SigExprAND:
	//  unaExpr+=SigExprUnary ("and" unaExpr+=SigExprUnary)*;
	public SigExprANDElements getSigExprANDAccess() {
		return (pSigExprAND != null) ? pSigExprAND : (pSigExprAND = new SigExprANDElements());
	}
	
	public ParserRule getSigExprANDRule() {
		return getSigExprANDAccess().getRule();
	}

	//SigExprUnary:
	//  expr=ID|"(" sigExpr=SigExpr ")"|"not" sigExpr=SigExprUnary; 
	//
	//
	//	
	//		     
	//		   
	//	
	//// --> B.3.4 Delay Expressions <--
	public SigExprUnaryElements getSigExprUnaryAccess() {
		return (pSigExprUnary != null) ? pSigExprUnary : (pSigExprUnary = new SigExprUnaryElements());
	}
	
	public ParserRule getSigExprUnaryRule() {
		return getSigExprUnaryAccess().getRule();
	}

	//DelayExpr:
	//  event=DelayEvent|expr=DataExpr event=DelayEvent; 
	//	
	//// --> B.3.4 Delay Expressions <--
	public DelayExprElements getDelayExprAccess() {
		return (pDelayExpr != null) ? pDelayExpr : (pDelayExpr = new DelayExprElements());
	}
	
	public ParserRule getDelayExprRule() {
		return getDelayExprAccess().getRule();
	}

	//DelayEvent:
	//  signal=[Signal]|"pre" "(" SigExpr ")"|"[" SigExpr "]"; 
	//	
	//
	//	
	//		       
	//		   
	//	
	//
	//
	//	
	//// ==============================================
	//// === B.2 Namespaces and Predefined Objects  ===
	//// ==============================================
	//
	//// ==> Signals <==
	public DelayEventElements getDelayEventAccess() {
		return (pDelayEvent != null) ? pDelayEvent : (pDelayEvent = new DelayEventElements());
	}
	
	public ParserRule getDelayEventRule() {
		return getDelayEventAccess().getRule();
	}

	//ChannelDescription:
	//  ":" (type=ID|type=BaseType)|"(" (type=ID|type=BaseType) ")"|":=" dataExpr=DataExpr
	//  ":" (type=ID|type=BaseType); 
	//	
	//
	//
	//	
	//// ==============================================
	//// === B.2 Namespaces and Predefined Objects  ===
	//// ==============================================
	//
	//// ==> Signals <==
	public ChannelDescriptionElements getChannelDescriptionAccess() {
		return (pChannelDescription != null) ? pChannelDescription : (pChannelDescription = new ChannelDescriptionElements());
	}
	
	public ParserRule getChannelDescriptionRule() {
		return getChannelDescriptionAccess().getRule();
	}

	//Signal:
	//  name=ID channel=ChannelDescription?;
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Tick:
	//  "tick" {Tick};
	public TickElements getTickAccess() {
		return (pTick != null) ? pTick : (pTick = new TickElements());
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	//Sensor:
	//  name=ID ":" (type=ID|type=BaseType)|name=ID "(" (type=ID|type=BaseType) ")";
	public SensorElements getSensorAccess() {
		return (pSensor != null) ? pSensor : (pSensor = new SensorElements());
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//terminal Float:
	//  (INT "." INT | INT ("." INT)? ("e" | "E") ("-" | "+")? INT) "f"? | INT "f";
	public TerminalRule getFloatRule() {
		return (tFloat != null) ? tFloat : (tFloat = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Float"));
	} 

	//terminal Boolean:
	//  "true" | "false";
	public TerminalRule getBooleanRule() {
		return (tBoolean != null) ? tBoolean : (tBoolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean"));
	} 

	//terminal BaseType:
	//  "boolean" | "integer" | "float" | "double" | "string";
	public TerminalRule getBaseTypeRule() {
		return (tBaseType != null) ? tBaseType : (tBaseType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BaseType"));
	} 

	//terminal Esterel_SL_Comment:
	//  "%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getEsterel_SL_CommentRule() {
		return (tEsterel_SL_Comment != null) ? tEsterel_SL_Comment : (tEsterel_SL_Comment = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Esterel_SL_Comment"));
	} 

	//terminal Esterel_ML_Comment:
	//  ("%" "{")->("}" "%");
	public TerminalRule getEsterel_ML_CommentRule() {
		return (tEsterel_ML_Comment != null) ? tEsterel_ML_Comment : (tEsterel_ML_Comment = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Esterel_ML_Comment"));
	} 

	//terminal Number:
	//  ("+" | "-") " "? INT;
	public TerminalRule getNumberRule() {
		return (tNumber != null) ? tNumber : (tNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Number"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
