/*
* generated by Xtext
*/
grammar InternalEsterel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.cau.cs.kieler.services.EsterelGrammarAccess;

}

@parser::members {
 
 	private EsterelGrammarAccess grammarAccess;
 	
    public InternalEsterelParser(TokenStream input, IAstFactory factory, EsterelGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/cau/cs/kieler/parser/antlr/internal/InternalEsterel.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Programm";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgramm
entryRuleProgramm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProgrammRule(), currentNode); }
	 iv_ruleProgramm=ruleProgramm 
	 { $current=$iv_ruleProgramm.current; } 
	 EOF 
;

// Rule Programm
ruleProgramm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ESTEREL_SL_COMMENT", "RULE_ESTEREL_ML_COMMENT", "RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
		myHiddenTokenState.restore();
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProgrammAccess().getModuleMainModuleParserRuleCall_0_0(), currentNode); 
	    }
	    lv_module_0=ruleMainModule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgrammRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "module", lv_module_0, "MainModule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProgrammAccess().getModuleModuleParserRuleCall_1_0(), currentNode); 
	    }
	    lv_module_1=ruleModule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgrammRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "module", lv_module_1, "Module", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleMainModule
entryRuleMainModule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMainModuleRule(), currentNode); }
	 iv_ruleMainModule=ruleMainModule 
	 { $current=$iv_ruleMainModule.current; } 
	 EOF 
;

// Rule MainModule
ruleMainModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('module' 
    {
        createLeafNode(grammarAccess.getMainModuleAccess().getModuleKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getMainModuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getMainModuleAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMainModuleAccess().getModIntModuleInterfaceParserRuleCall_3_0(), currentNode); 
	    }
	    lv_modInt_3=ruleModuleInterface 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modInt", lv_modInt_3, "ModuleInterface", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMainModuleAccess().getModBodyModuleBodyParserRuleCall_4_0(), currentNode); 
	    }
	    lv_modBody_4=ruleModuleBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modBody", lv_modBody_4, "ModuleBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)ruleEndModule);





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('module' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getModuleKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModIntModuleInterfaceParserRuleCall_3_0(), currentNode); 
	    }
	    lv_modInt_3=ruleModuleInterface 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modInt", lv_modInt_3, "ModuleInterface", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModBodyModuleBodyParserRuleCall_4_0(), currentNode); 
	    }
	    lv_modBody_4=ruleModuleBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "modBody", lv_modBody_4, "ModuleBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)ruleEndModule);





// Entry rule entryRuleEndModule
entryRuleEndModule returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEndModuleRule(), currentNode); } 
	 iv_ruleEndModule=ruleEndModule 
	 { $current=$iv_ruleEndModule.current.getText(); }  
	 EOF 
;

// Rule EndModule
ruleEndModule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getEndKeyword_0_0(), null); 
    }

	kw='module' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getModuleKeyword_0_1(), null); 
    }
)
    |
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndModuleAccess().getFullStopKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleModuleBody
entryRuleModuleBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModuleBodyRule(), currentNode); }
	 iv_ruleModuleBody=ruleModuleBody 
	 { $current=$iv_ruleModuleBody.current; } 
	 EOF 
;

// Rule ModuleBody
ruleModuleBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleBodyAccess().getStatementStatementParserRuleCall_0(), currentNode); 
	    }
	    lv_statement_0=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statement", lv_statement_0, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleModuleInterface
entryRuleModuleInterface returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModuleInterfaceRule(), currentNode); }
	 iv_ruleModuleInterface=ruleModuleInterface 
	 { $current=$iv_ruleModuleInterface.current; } 
	 EOF 
;

// Rule ModuleInterface
ruleModuleInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSignalDeclSignalDeclParserRuleCall_0_0(), currentNode); 
	    }
	    lv_intSignalDecl_0=ruleSignalDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intSignalDecl", lv_intSignalDecl_0, "SignalDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntTypeDeclTypeDeclParserRuleCall_1_0(), currentNode); 
	    }
	    lv_intTypeDecl_1=ruleTypeDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intTypeDecl", lv_intTypeDecl_1, "TypeDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntSensorDeclSensorDeclParserRuleCall_2_0(), currentNode); 
	    }
	    lv_intSensorDecl_2=ruleSensorDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intSensorDecl", lv_intSensorDecl_2, "SensorDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntConstantDeclConstantDeclParserRuleCall_3_0(), currentNode); 
	    }
	    lv_intConstantDecl_3=ruleConstantDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intConstantDecl", lv_intConstantDecl_3, "ConstantDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntRelationDeclRelationDeclParserRuleCall_4_0(), currentNode); 
	    }
	    lv_intRelationDecl_4=ruleRelationDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intRelationDecl", lv_intRelationDecl_4, "RelationDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleInterfaceAccess().getIntFunctionDeclFunctionDeclParserRuleCall_5_0(), currentNode); 
	    }
	    lv_intFunctionDecl_5=ruleFunctionDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intFunctionDecl", lv_intFunctionDecl_5, "FunctionDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+;





// Entry rule entryRuleSignalDecl
entryRuleSignalDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalDeclRule(), currentNode); }
	 iv_ruleSignalDecl=ruleSignalDecl 
	 { $current=$iv_ruleSignalDecl.current; } 
	 EOF 
;

// Rule SignalDecl
ruleSignalDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getInputAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getInputAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'input' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getInputKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_signal_2=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_2, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_0_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_signal_4=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_4, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_0_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getOutputAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getOutputAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'output' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getOutputKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_signal_8=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_8, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_1_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_1_3_1_0(), currentNode); 
	    }
	    lv_signal_10=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_10, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_1_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getInputOutputAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'inputoutput' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getInputoutputKeyword_2_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_2_0(), currentNode); 
	    }
	    lv_signal_14=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_14, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_2_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_2_3_1_0(), currentNode); 
	    }
	    lv_signal_16=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_16, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_2_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getSignalDeclAccess().getReturnAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSignalDeclAccess().getReturnAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'return' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getReturnKeyword_3_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_2_0(), currentNode); 
	    }
	    lv_signal_20=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_20, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getCommaKeyword_3_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalDeclAccess().getSignalSignalParserRuleCall_3_3_1_0(), currentNode); 
	    }
	    lv_signal_22=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_22, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getSignalDeclAccess().getSemicolonKeyword_3_4(), null); 
    }
));





// Entry rule entryRuleSensorDecl
entryRuleSensorDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSensorDeclRule(), currentNode); }
	 iv_ruleSensorDecl=ruleSensorDecl 
	 { $current=$iv_ruleSensorDecl.current; } 
	 EOF 
;

// Rule SensorDecl
ruleSensorDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('sensor' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getSensorKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_1_0(), currentNode); 
	    }
	    lv_sensor_1=ruleSensor 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "sensor", lv_sensor_1, "Sensor", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSensorDeclAccess().getSensorSensorParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_sensor_3=ruleSensor 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "sensor", lv_sensor_3, "Sensor", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getSensorDeclAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleRelationDecl
entryRuleRelationDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationDeclRule(), currentNode); }
	 iv_ruleRelationDecl=ruleRelationDecl 
	 { $current=$iv_ruleRelationDecl.current; } 
	 EOF 
;

// Rule RelationDecl
ruleRelationDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('relation' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getRelationKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationDeclAccess().getRelationRelationParserRuleCall_1_0(), currentNode); 
	    }
	    lv_relation_1=ruleRelation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "relation", lv_relation_1, "Relation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationDeclAccess().getRelationRelationParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_relation_3=ruleRelation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "relation", lv_relation_3, "Relation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getRelationDeclAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationRule(), currentNode); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getRelationImplicationParserRuleCall_0(), currentNode); 
    }
    this_RelationImplication_0=ruleRelationImplication
    { 
        $current = $this_RelationImplication_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationAccess().getRelationIncompatibilityParserRuleCall_1(), currentNode); 
    }
    this_RelationIncompatibility_1=ruleRelationIncompatibility
    { 
        $current = $this_RelationIncompatibility_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleRelationImplication
entryRuleRelationImplication returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationImplicationRule(), currentNode); }
	 iv_ruleRelationImplication=ruleRelationImplication 
	 { $current=$iv_ruleRelationImplication.current; } 
	 EOF 
;

// Rule RelationImplication
ruleRelationImplication returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationImplicationAccess().getFirstSignalCrossReference_0_0(), "first"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_type_1='=>' 
    {
        createLeafNode(grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0(), "type"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", /* lv_type_1 */ input.LT(-1), "=>", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationImplicationAccess().getSecondSignalCrossReference_2_0(), "second"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleRelationIncompatibility
entryRuleRelationIncompatibility returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationIncompatibilityRule(), currentNode); }
	 iv_ruleRelationIncompatibility=ruleRelationIncompatibility 
	 { $current=$iv_ruleRelationIncompatibility.current; } 
	 EOF 
;

// Rule RelationIncompatibility
ruleRelationIncompatibility returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_0_0(), "incomp"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_type_1='#' 
    {
        createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getTypeNumberSignKeyword_1_0(), "type"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", /* lv_type_1 */ input.LT(-1), "#", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_2_0(), "incomp"); 
	}

		// TODO assign feature to currentNode
	
)('#' 
    {
        createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getNumberSignKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationIncompatibilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationIncompatibilityAccess().getIncompSignalCrossReference_3_1_0(), "incomp"); 
	}

		// TODO assign feature to currentNode
	
))*);





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeDeclRule(), currentNode); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('type' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getTypeKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0(), currentNode); 
	    }
	    lv_type_1=ruleType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "type", lv_type_1, "Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_type_3=ruleType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "type", lv_type_3, "Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleConstantDecl
entryRuleConstantDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstantDeclRule(), currentNode); }
	 iv_ruleConstantDecl=ruleConstantDecl 
	 { $current=$iv_ruleConstantDecl.current; } 
	 EOF 
;

// Rule ConstantDecl
ruleConstantDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('constant' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getConstantKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_1_0(), currentNode); 
	    }
	    lv_constant_1=ruleOneTypeConstantDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "constant", lv_constant_1, "OneTypeConstantDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstantDeclAccess().getConstantOneTypeConstantDeclParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_constant_3=ruleOneTypeConstantDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "constant", lv_constant_3, "OneTypeConstantDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getConstantDeclAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleOneTypeConstantDecl
entryRuleOneTypeConstantDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOneTypeConstantDeclRule(), currentNode); }
	 iv_ruleOneTypeConstantDecl=ruleOneTypeConstantDecl 
	 { $current=$iv_ruleOneTypeConstantDecl.current; } 
	 EOF 
;

// Rule OneTypeConstantDecl
ruleOneTypeConstantDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_0_0(), currentNode); 
	    }
	    lv_constant_0=ruleConstant 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "constant", lv_constant_0, "Constant", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOneTypeConstantDeclAccess().getConstantConstantParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_constant_2=ruleConstant 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "constant", lv_constant_2, "Constant", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*':' 
    {
        createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getColonKeyword_2(), null); 
    }
((	
	
	    lv_type_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getTypeIDTerminalRuleCall_3_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_5=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getOneTypeConstantDeclAccess().getTypeBaseTypeTerminalRuleCall_3_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneTypeConstantDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_5, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)));





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('=' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getEqualsSignKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getValueConstantValueParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_value_2=ruleConstantValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2, "ConstantValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstantValueRule(), currentNode); } 
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current.getText(); }  
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getIDTerminalRuleCall_0(), null); 
    }

    |    this_Number_1=RULE_NUMBER    {
		$current.merge(this_Number_1);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getNumberTerminalRuleCall_1(), null); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getINTTerminalRuleCall_2(), null); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getSTRINGTerminalRuleCall_3(), null); 
    }

    |    this_Float_4=RULE_FLOAT    {
		$current.merge(this_Float_4);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getFloatTerminalRuleCall_4(), null); 
    }

    |    this_Boolean_5=RULE_BOOLEAN    {
		$current.merge(this_Boolean_5);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getBooleanTerminalRuleCall_5(), null); 
    }
)
    ;





// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDeclRule(), currentNode); }
	 iv_ruleFunctionDecl=ruleFunctionDecl 
	 { $current=$iv_ruleFunctionDecl.current; } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('function' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getFunctionKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_function_1=ruleFunction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "function", lv_function_1, "Function", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_function_3=ruleFunction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "function", lv_function_3, "Function", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
((	
	
	    lv_idList_2=(	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionAccess().getIdListIDTerminalRuleCall_2_0_0_0(), "idList"); 
	}

    |	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_0_0_1(), "idList"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "idList", lv_idList_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    lv_idList_4=(	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionAccess().getIdListIDTerminalRuleCall_2_1_1_0_0(), "idList"); 
	}

    |	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getFunctionAccess().getIdListBaseTypeTerminalRuleCall_2_1_1_0_1(), "idList"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "idList", lv_idList_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3(), null); 
    }
':' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getColonKeyword_4(), null); 
    }
((	
	
	    lv_type_7=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionAccess().getTypeIDTerminalRuleCall_5_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_7, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_8=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getFunctionAccess().getTypeBaseTypeTerminalRuleCall_5_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)));





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSequenceParserRuleCall_0(), currentNode); 
    }
    this_Sequence_0=ruleSequence
    { 
        $current = $this_Sequence_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getParallelLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getParallelLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'||' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getVerticalLineVerticalLineKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getRightSequenceParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleSequence 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "Sequence", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAtomicStatement
entryRuleAtomicStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAtomicStatementRule(), currentNode); }
	 iv_ruleAtomicStatement=ruleAtomicStatement 
	 { $current=$iv_ruleAtomicStatement.current; } 
	 EOF 
;

// Rule AtomicStatement
ruleAtomicStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAbortParserRuleCall_0(), currentNode); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAssignmentParserRuleCall_1(), currentNode); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getAwaitParserRuleCall_2(), currentNode); 
    }
    this_Await_2=ruleAwait
    { 
        $current = $this_Await_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getBlockParserRuleCall_3(), currentNode); 
    }
    this_Block_3=ruleBlock
    { 
        $current = $this_Block_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getDoParserRuleCall_4(), currentNode); 
    }
    this_Do_4=ruleDo
    { 
        $current = $this_Do_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getEmitParserRuleCall_5(), currentNode); 
    }
    this_Emit_5=ruleEmit
    { 
        $current = $this_Emit_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getEveryDoParserRuleCall_6(), currentNode); 
    }
    this_EveryDo_6=ruleEveryDo
    { 
        $current = $this_EveryDo_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getExitParserRuleCall_7(), currentNode); 
    }
    this_Exit_7=ruleExit
    { 
        $current = $this_Exit_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getHaltParserRuleCall_8(), currentNode); 
    }
    this_Halt_8=ruleHalt
    { 
        $current = $this_Halt_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getIfTestParserRuleCall_9(), currentNode); 
    }
    this_IfTest_9=ruleIfTest
    { 
        $current = $this_IfTest_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalSignalDeclParserRuleCall_10(), currentNode); 
    }
    this_LocalSignalDecl_10=ruleLocalSignalDecl
    { 
        $current = $this_LocalSignalDecl_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getLoopParserRuleCall_11(), currentNode); 
    }
    this_Loop_11=ruleLoop
    { 
        $current = $this_Loop_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getNothingParserRuleCall_12(), currentNode); 
    }
    this_Nothing_12=ruleNothing
    { 
        $current = $this_Nothing_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getPauseParserRuleCall_13(), currentNode); 
    }
    this_Pause_13=rulePause
    { 
        $current = $this_Pause_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getPresentParserRuleCall_14(), currentNode); 
    }
    this_Present_14=rulePresent
    { 
        $current = $this_Present_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getRepeatParserRuleCall_15(), currentNode); 
    }
    this_Repeat_15=ruleRepeat
    { 
        $current = $this_Repeat_15.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getRunParserRuleCall_16(), currentNode); 
    }
    this_Run_16=ruleRun
    { 
        $current = $this_Run_16.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getSuspendParserRuleCall_17(), currentNode); 
    }
    this_Suspend_17=ruleSuspend
    { 
        $current = $this_Suspend_17.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getSustainParserRuleCall_18(), currentNode); 
    }
    this_Sustain_18=ruleSustain
    { 
        $current = $this_Sustain_18.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getTrapParserRuleCall_19(), currentNode); 
    }
    this_Trap_19=ruleTrap
    { 
        $current = $this_Trap_19.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getVariableParserRuleCall_20(), currentNode); 
    }
    this_Variable_20=ruleVariable
    { 
        $current = $this_Variable_20.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicStatementAccess().getWeakAbortParserRuleCall_21(), currentNode); 
    }
    this_WeakAbort_21=ruleWeakAbort
    { 
        $current = $this_WeakAbort_21.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSequenceRule(), currentNode); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceAccess().getAtomicStatementParserRuleCall_0(), currentNode); 
    }
    this_AtomicStatement_0=ruleAtomicStatement
    { 
        $current = $this_AtomicStatement_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getSequenceAccess().getSequenceLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSequenceAccess().getSequenceLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)';' 
    {
        createLeafNode(grammarAccess.getSequenceAccess().getSemicolonKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSequenceAccess().getRightAtomicStatementParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAtomicStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AtomicStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(';' 
    {
        createLeafNode(grammarAccess.getSequenceAccess().getSemicolonKeyword_2(), null); 
    }
)?);





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('[' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightSquareBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_variable_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssignmentAccess().getVariableIDTerminalRuleCall_0_0(), "variable"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExprDataExprParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_2=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortRule(), currentNode); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('abort' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getAbortKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'when' 
    {
        createLeafNode(grammarAccess.getAbortAccess().getWhenKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortAccess().getBodyAbortBodyParserRuleCall_3_0(), currentNode); 
	    }
	    lv_body_3=ruleAbortBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_3, "AbortBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAbortBody
entryRuleAbortBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortBodyRule(), currentNode); }
	 iv_ruleAbortBody=ruleAbortBody 
	 { $current=$iv_ruleAbortBody.current; } 
	 EOF 
;

// Rule AbortBody
ruleAbortBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbortBodyAccess().getAbortInstanceParserRuleCall_0(), currentNode); 
    }
    this_AbortInstance_0=ruleAbortInstance
    { 
        $current = $this_AbortInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbortBodyAccess().getAbortCaseParserRuleCall_1(), currentNode); 
    }
    this_AbortCase_1=ruleAbortCase
    { 
        $current = $this_AbortCase_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAbortEnd
entryRuleAbortEnd returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortEndRule(), currentNode); } 
	 iv_ruleAbortEnd=ruleAbortEnd 
	 { $current=$iv_ruleAbortEnd.current.getText(); }  
	 EOF 
;

// Rule AbortEnd
ruleAbortEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAbortEndAccess().getEndKeyword_0(), null); 
    }
(
	kw='abort' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAbortEndAccess().getAbortKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleAbortInstance
entryRuleAbortInstance returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortInstanceRule(), currentNode); }
	 iv_ruleAbortInstance=ruleAbortInstance 
	 { $current=$iv_ruleAbortInstance.current; } 
	 EOF 
;

// Rule AbortInstance
ruleAbortInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(), currentNode); 
	    }
	    lv_delay_0=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_0, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('do' 
    {
        createLeafNode(grammarAccess.getAbortInstanceAccess().getDoKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_statement_2=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_2, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortInstanceAccess().getEndAbortEndParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_end_3=ruleAbortEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_3, "AbortEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleAbortCase
entryRuleAbortCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortCaseRule(), currentNode); }
	 iv_ruleAbortCase=ruleAbortCase 
	 { $current=$iv_ruleAbortCase.current; } 
	 EOF 
;

// Rule AbortCase
ruleAbortCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
	    lv_cases_0=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_0, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
	    lv_cases_1=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_1, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseAccess().getEndAbortEndParserRuleCall_2_0(), currentNode); 
	    }
	    lv_end_2=ruleAbortEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_2, "AbortEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAbortCaseSingle
entryRuleAbortCaseSingle returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbortCaseSingleRule(), currentNode); }
	 iv_ruleAbortCaseSingle=ruleAbortCaseSingle 
	 { $current=$iv_ruleAbortCaseSingle.current; } 
	 EOF 
;

// Rule AbortCaseSingle
ruleAbortCaseSingle returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('case' 
    {
        createLeafNode(grammarAccess.getAbortCaseSingleAccess().getCaseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseSingleAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_delay_1=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseSingleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_1, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('do' 
    {
        createLeafNode(grammarAccess.getAbortCaseSingleAccess().getDoKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAbortCaseSingleAccess().getStatementStatementParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbortCaseSingleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAwaitRule(), currentNode); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('await' 
    {
        createLeafNode(grammarAccess.getAwaitAccess().getAwaitKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitAccess().getBodyAwaitBodyParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=ruleAwaitBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "AwaitBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAwaitBody
entryRuleAwaitBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAwaitBodyRule(), currentNode); }
	 iv_ruleAwaitBody=ruleAwaitBody 
	 { $current=$iv_ruleAwaitBody.current; } 
	 EOF 
;

// Rule AwaitBody
ruleAwaitBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitInstanceParserRuleCall_0(), currentNode); 
    }
    this_AwaitInstance_0=ruleAwaitInstance
    { 
        $current = $this_AwaitInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAwaitBodyAccess().getAwaitCaseParserRuleCall_1(), currentNode); 
    }
    this_AwaitCase_1=ruleAwaitCase
    { 
        $current = $this_AwaitCase_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAwaitEnd
entryRuleAwaitEnd returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAwaitEndRule(), currentNode); } 
	 iv_ruleAwaitEnd=ruleAwaitEnd 
	 { $current=$iv_ruleAwaitEnd.current.getText(); }  
	 EOF 
;

// Rule AwaitEnd
ruleAwaitEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAwaitEndAccess().getEndKeyword_0(), null); 
    }
(
	kw='await' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAwaitEndAccess().getAwaitKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleAwaitInstance
entryRuleAwaitInstance returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAwaitInstanceRule(), currentNode); }
	 iv_ruleAwaitInstance=ruleAwaitInstance 
	 { $current=$iv_ruleAwaitInstance.current; } 
	 EOF 
;

// Rule AwaitInstance
ruleAwaitInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getDelayExprParserRuleCall_0(), currentNode); 
    }
    this_DelayExpr_0=ruleDelayExpr
    { 
        $current = $this_DelayExpr_0.current; 
        currentNode = currentNode.getParent();
    }
('do' 
    {
        createLeafNode(grammarAccess.getAwaitInstanceAccess().getDoKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_statement_2=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_2, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitInstanceAccess().getEndAwaitEndParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_end_3=ruleAwaitEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_3, "AwaitEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleAwaitCase
entryRuleAwaitCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAwaitCaseRule(), currentNode); }
	 iv_ruleAwaitCase=ruleAwaitCase 
	 { $current=$iv_ruleAwaitCase.current; } 
	 EOF 
;

// Rule AwaitCase
ruleAwaitCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
	    lv_cases_0=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_0, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
	    lv_cases_1=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_1, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAwaitCaseAccess().getEndAwaitEndParserRuleCall_2_0(), currentNode); 
	    }
	    lv_end_2=ruleAwaitEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAwaitCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_2, "AwaitEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleDo
entryRuleDo returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoRule(), currentNode); }
	 iv_ruleDo=ruleDo 
	 { $current=$iv_ruleDo.current; } 
	 EOF 
;

// Rule Do
ruleDo returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('do' 
    {
        createLeafNode(grammarAccess.getDoAccess().getDoKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getEndDoUptoParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_end_2=ruleDoUpto 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_2, "DoUpto", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoAccess().getEndDoWatchingParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_end_3=ruleDoWatching 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_3, "DoWatching", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleDoUpto
entryRuleDoUpto returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoUptoRule(), currentNode); }
	 iv_ruleDoUpto=ruleDoUpto 
	 { $current=$iv_ruleDoUpto.current; } 
	 EOF 
;

// Rule DoUpto
ruleDoUpto returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('upto' 
    {
        createLeafNode(grammarAccess.getDoUptoAccess().getUptoKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoUptoAccess().getExprDelayExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoUptoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleDoWatching
entryRuleDoWatching returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoWatchingRule(), currentNode); }
	 iv_ruleDoWatching=ruleDoWatching 
	 { $current=$iv_ruleDoWatching.current; } 
	 EOF 
;

// Rule DoWatching
ruleDoWatching returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('watching' 
    {
        createLeafNode(grammarAccess.getDoWatchingAccess().getWatchingKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_delay_1=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_1, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingAccess().getEndDoWatchingEndParserRuleCall_2_0(), currentNode); 
	    }
	    lv_end_2=ruleDoWatchingEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_2, "DoWatchingEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleDoWatchingEnd
entryRuleDoWatchingEnd returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoWatchingEndRule(), currentNode); }
	 iv_ruleDoWatchingEnd=ruleDoWatchingEnd 
	 { $current=$iv_ruleDoWatchingEnd.current; } 
	 EOF 
;

// Rule DoWatchingEnd
ruleDoWatchingEnd returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('timeout' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDoWatchingEndAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoWatchingEndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'end' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getEndKeyword_2(), null); 
    }
('timeout' 
    {
        createLeafNode(grammarAccess.getDoWatchingEndAccess().getTimeoutKeyword_3(), null); 
    }
)?);





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEmitRule(), currentNode); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('emit' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getEmitKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEmitAccess().getSignalSignalCrossReference_1_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
)('(' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEmitAccess().getExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_expr_3=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_3, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getEmitAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleEveryDo
entryRuleEveryDo returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEveryDoRule(), currentNode); }
	 iv_ruleEveryDo=ruleEveryDo 
	 { $current=$iv_ruleEveryDo.current; } 
	 EOF 
;

// Rule EveryDo
ruleEveryDo returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('every' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEveryKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEveryDoAccess().getDelayDelayExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_delay_1=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEveryDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_1, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'do' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getDoKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEveryDoAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEveryDoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'end' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEndKeyword_4(), null); 
    }
('every' 
    {
        createLeafNode(grammarAccess.getEveryDoAccess().getEveryKeyword_5(), null); 
    }
)?);





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExitRule(), currentNode); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('exit' 
    {
        createLeafNode(grammarAccess.getExitAccess().getExitKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getExitAccess().getTrapTrapCrossReference_1_0(), "trap"); 
	}

		// TODO assign feature to currentNode
	
)('(' 
    {
        createLeafNode(grammarAccess.getExitAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExitAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_dataExpr_3=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "dataExpr", lv_dataExpr_3, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getExitAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleHalt
entryRuleHalt returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHaltRule(), currentNode); }
	 iv_ruleHalt=ruleHalt 
	 { $current=$iv_ruleHalt.current; } 
	 EOF 
;

// Rule Halt
ruleHalt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('halt' 
    {
        createLeafNode(grammarAccess.getHaltAccess().getHaltKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getHaltAccess().getHaltAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getHaltAccess().getHaltAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
));





// Entry rule entryRuleIfTest
entryRuleIfTest returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIfTestRule(), currentNode); }
	 iv_ruleIfTest=ruleIfTest 
	 { $current=$iv_ruleIfTest.current; } 
	 EOF 
;

// Rule IfTest
ruleIfTest returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('if' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getIfKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getExprDataExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getThenThenPartParserRuleCall_2_0(), currentNode); 
	    }
	    lv_then_2=ruleThenPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "then", lv_then_2, "ThenPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getElseIfElsIfPartParserRuleCall_3_0(), currentNode); 
	    }
	    lv_elseIf_3=ruleElsIfPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "elseIf", lv_elseIf_3, "ElsIfPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfTestAccess().getElseElsePartParserRuleCall_4_0(), currentNode); 
	    }
	    lv_else_4=ruleElsePart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfTestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "else", lv_else_4, "ElsePart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'end' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getEndKeyword_5(), null); 
    }
('if' 
    {
        createLeafNode(grammarAccess.getIfTestAccess().getIfKeyword_6(), null); 
    }
)?);





// Entry rule entryRuleElsIfPart
entryRuleElsIfPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElsIfPartRule(), currentNode); }
	 iv_ruleElsIfPart=ruleElsIfPart 
	 { $current=$iv_ruleElsIfPart.current; } 
	 EOF 
;

// Rule ElsIfPart
ruleElsIfPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_0_0(), currentNode); 
	    }
	    lv_elsif_0=ruleElsIf 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elsif", lv_elsif_0, "ElsIf", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElsIfPartAccess().getElsifElsIfParserRuleCall_1_0(), currentNode); 
	    }
	    lv_elsif_1=ruleElsIf 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elsif", lv_elsif_1, "ElsIf", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleElsIf
entryRuleElsIf returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElsIfRule(), currentNode); }
	 iv_ruleElsIf=ruleElsIf 
	 { $current=$iv_ruleElsIf.current; } 
	 EOF 
;

// Rule ElsIf
ruleElsIf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('elsif' 
    {
        createLeafNode(grammarAccess.getElsIfAccess().getElsifKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElsIfAccess().getExprDataExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElsIfAccess().getThenThenPartParserRuleCall_2_0(), currentNode); 
	    }
	    lv_then_2=ruleThenPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsIfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "then", lv_then_2, "ThenPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleThenPart
entryRuleThenPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getThenPartRule(), currentNode); }
	 iv_ruleThenPart=ruleThenPart 
	 { $current=$iv_ruleThenPart.current; } 
	 EOF 
;

// Rule ThenPart
ruleThenPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('then' 
    {
        createLeafNode(grammarAccess.getThenPartAccess().getThenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getThenPartAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThenPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleElsePart
entryRuleElsePart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElsePartRule(), currentNode); }
	 iv_ruleElsePart=ruleElsePart 
	 { $current=$iv_ruleElsePart.current; } 
	 EOF 
;

// Rule ElsePart
ruleElsePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('else' 
    {
        createLeafNode(grammarAccess.getElsePartAccess().getElseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElsePartAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElsePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoopRule(), currentNode); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('loop' 
    {
        createLeafNode(grammarAccess.getLoopAccess().getLoopKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLoopAccess().getBodyLoopBodyParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=ruleLoopBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "LoopBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(ruleEndLoop
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLoopAccess().getEndLoopEachParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_end_3=ruleLoopEach 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_3, "LoopEach", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleEndLoop
entryRuleEndLoop returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEndLoopRule(), currentNode); } 
	 iv_ruleEndLoop=ruleEndLoop 
	 { $current=$iv_ruleEndLoop.current.getText(); }  
	 EOF 
;

// Rule EndLoop
ruleEndLoop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndLoopAccess().getEndKeyword_0(), null); 
    }
(
	kw='loop' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndLoopAccess().getLoopKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleLoopEach
entryRuleLoopEach returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoopEachRule(), currentNode); }
	 iv_ruleLoopEach=ruleLoopEach 
	 { $current=$iv_ruleLoopEach.current; } 
	 EOF 
;

// Rule LoopEach
ruleLoopEach returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('each' 
    {
        createLeafNode(grammarAccess.getLoopEachAccess().getEachKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getLoopEachAccess().getLoopDelayParserRuleCall_1(), currentNode); 
    }
    this_LoopDelay_1=ruleLoopDelay
    { 
        $current = $this_LoopDelay_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleLoopDelay
entryRuleLoopDelay returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoopDelayRule(), currentNode); }
	 iv_ruleLoopDelay=ruleLoopDelay 
	 { $current=$iv_ruleLoopDelay.current; } 
	 EOF 
;

// Rule LoopDelay
ruleLoopDelay returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLoopDelayAccess().getDelayDelayExprParserRuleCall_0(), currentNode); 
	    }
	    lv_delay_0=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopDelayRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_0, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleLoopBody
entryRuleLoopBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoopBodyRule(), currentNode); }
	 iv_ruleLoopBody=ruleLoopBody 
	 { $current=$iv_ruleLoopBody.current; } 
	 EOF 
;

// Rule LoopBody
ruleLoopBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLoopBodyAccess().getStatementStatementParserRuleCall_0(), currentNode); 
	    }
	    lv_statement_0=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_0, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleNothing
entryRuleNothing returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNothingRule(), currentNode); }
	 iv_ruleNothing=ruleNothing 
	 { $current=$iv_ruleNothing.current; } 
	 EOF 
;

// Rule Nothing
ruleNothing returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('nothing' 
    {
        createLeafNode(grammarAccess.getNothingAccess().getNothingKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getNothingAccess().getNothingAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNothingAccess().getNothingAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
));





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPauseRule(), currentNode); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('pause' 
    {
        createLeafNode(grammarAccess.getPauseAccess().getPauseKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getPauseAccess().getPauseAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPauseAccess().getPauseAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
));





// Entry rule entryRulePresent
entryRulePresent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentRule(), currentNode); }
	 iv_rulePresent=rulePresent 
	 { $current=$iv_rulePresent.current; } 
	 EOF 
;

// Rule Present
rulePresent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('present' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getPresentKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getBodyPresentBodyParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=rulePresentBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "PresentBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentAccess().getElsePartElsePartParserRuleCall_2_0(), currentNode); 
	    }
	    lv_elsePart_2=ruleElsePart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "elsePart", lv_elsePart_2, "ElsePart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'end' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getEndKeyword_3(), null); 
    }
('present' 
    {
        createLeafNode(grammarAccess.getPresentAccess().getPresentKeyword_4(), null); 
    }
)?);





// Entry rule entryRulePresentBody
entryRulePresentBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentBodyRule(), currentNode); }
	 iv_rulePresentBody=rulePresentBody 
	 { $current=$iv_rulePresentBody.current; } 
	 EOF 
;

// Rule PresentBody
rulePresentBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPresentBodyAccess().getPresentEventBodyParserRuleCall_0(), currentNode); 
    }
    this_PresentEventBody_0=rulePresentEventBody
    { 
        $current = $this_PresentEventBody_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPresentBodyAccess().getPresentCaseListParserRuleCall_1(), currentNode); 
    }
    this_PresentCaseList_1=rulePresentCaseList
    { 
        $current = $this_PresentCaseList_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRulePresentEventBody
entryRulePresentEventBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentEventBodyRule(), currentNode); }
	 iv_rulePresentEventBody=rulePresentEventBody 
	 { $current=$iv_rulePresentEventBody.current; } 
	 EOF 
;

// Rule PresentEventBody
rulePresentEventBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventBodyAccess().getEventPresentEventParserRuleCall_0_0(), currentNode); 
	    }
	    lv_event_0=rulePresentEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_0, "PresentEvent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventBodyAccess().getThenPartThenPartParserRuleCall_1_0(), currentNode); 
	    }
	    lv_thenPart_1=ruleThenPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "thenPart", lv_thenPart_1, "ThenPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRulePresentCaseList
entryRulePresentCaseList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentCaseListRule(), currentNode); }
	 iv_rulePresentCaseList=rulePresentCaseList 
	 { $current=$iv_rulePresentCaseList.current; } 
	 EOF 
;

// Rule PresentCaseList
rulePresentCaseList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_0_0(), currentNode); 
	    }
	    lv_case_0=rulePresentCase 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "case", lv_case_0, "PresentCase", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseListAccess().getCasePresentCaseParserRuleCall_1_0(), currentNode); 
	    }
	    lv_case_1=rulePresentCase 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "case", lv_case_1, "PresentCase", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRulePresentCase
entryRulePresentCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentCaseRule(), currentNode); }
	 iv_rulePresentCase=rulePresentCase 
	 { $current=$iv_rulePresentCase.current; } 
	 EOF 
;

// Rule PresentCase
rulePresentCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('case' 
    {
        createLeafNode(grammarAccess.getPresentCaseAccess().getCaseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseAccess().getEventPresentEventParserRuleCall_1_0(), currentNode); 
	    }
	    lv_event_1=rulePresentEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_1, "PresentEvent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('do' 
    {
        createLeafNode(grammarAccess.getPresentCaseAccess().getDoKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentCaseAccess().getStatementStatementParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRulePresentEvent
entryRulePresentEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPresentEventRule(), currentNode); }
	 iv_rulePresentEvent=rulePresentEvent 
	 { $current=$iv_rulePresentEvent.current; } 
	 EOF 
;

// Rule PresentEvent
rulePresentEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expression_0=ruleSigExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_0, "SigExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('[' 
    {
        createLeafNode(grammarAccess.getPresentEventAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPresentEventAccess().getExpressionSigExprParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expression_2=ruleSigExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresentEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_2, "SigExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getPresentEventAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
));





// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRepeatRule(), currentNode); }
	 iv_ruleRepeat=ruleRepeat 
	 { $current=$iv_ruleRepeat.current; } 
	 EOF 
;

// Rule Repeat
ruleRepeat returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_positive_0='positive' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getPositivePositiveKeyword_0_0(), "positive"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "positive", true, "positive", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'repeat' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getRepeatKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepeatAccess().getDataExprDataExprParserRuleCall_2_0(), currentNode); 
	    }
	    lv_dataExpr_2=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "dataExpr", lv_dataExpr_2, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'times' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getTimesKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepeatAccess().getStatementStatementParserRuleCall_4_0(), currentNode); 
	    }
	    lv_statement_4=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepeatRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_4, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'end' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getEndKeyword_5(), null); 
    }
('repeat' 
    {
        createLeafNode(grammarAccess.getRepeatAccess().getRepeatKeyword_6(), null); 
    }
)?);





// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRunRule(), currentNode); }
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current; } 
	 EOF 
;

// Rule Run
ruleRun returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('run' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRunKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_module_1=ruleModuleRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "module", lv_module_1, "ModuleRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('[' 
    {
        createLeafNode(grammarAccess.getRunAccess().getLeftSquareBracketKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_list_3=ruleRenamingList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "list", lv_list_3, "RenamingList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRightSquareBracketKeyword_0_2_2(), null); 
    }
)?)
    |('copymodule' 
    {
        createLeafNode(grammarAccess.getRunAccess().getCopymoduleKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_module_6=ruleModuleRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "module", lv_module_6, "ModuleRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('[' 
    {
        createLeafNode(grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunAccess().getListRenamingListParserRuleCall_1_2_1_0(), currentNode); 
	    }
	    lv_list_8=ruleRenamingList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "list", lv_list_8, "RenamingList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_2_2(), null); 
    }
)?));





// Entry rule entryRuleModuleRenaming
entryRuleModuleRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModuleRenamingRule(), currentNode); }
	 iv_ruleModuleRenaming=ruleModuleRenaming 
	 { $current=$iv_ruleModuleRenaming.current; } 
	 EOF 
;

// Rule ModuleRenaming
ruleModuleRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0(), "module"); 
	}

		// TODO assign feature to currentNode
	
)((	
	
	    lv_renamed_1='/' 
    {
        createLeafNode(grammarAccess.getModuleRenamingAccess().getRenamedSolidusKeyword_1_0_0(), "renamed"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "renamed", true, "/", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_newName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getModuleRenamingAccess().getNewNameIDTerminalRuleCall_1_1_0(), "newName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "newName", lv_newName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleRenamingList
entryRuleRenamingList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRenamingListRule(), currentNode); }
	 iv_ruleRenamingList=ruleRenamingList 
	 { $current=$iv_ruleRenamingList.current; } 
	 EOF 
;

// Rule RenamingList
ruleRenamingList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_0_0(), currentNode); 
	    }
	    lv_list_0=ruleRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "list", lv_list_0, "Renaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(';' 
    {
        createLeafNode(grammarAccess.getRenamingListAccess().getSemicolonKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingListAccess().getListRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_list_2=ruleRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "list", lv_list_2, "Renaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleRenaming
entryRuleRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRenamingRule(), currentNode); }
	 iv_ruleRenaming=ruleRenaming 
	 { $current=$iv_ruleRenaming.current; } 
	 EOF 
;

// Rule Renaming
ruleRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('type' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getTypeKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_renaming_1=ruleTypeRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_1, "TypeRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingTypeRenamingParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_renaming_3=ruleTypeRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_3, "TypeRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |('constant' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getConstantKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_renaming_5=ruleConstantRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_5, "ConstantRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_1_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingConstantRenamingParserRuleCall_1_2_1_0(), currentNode); 
	    }
	    lv_renaming_7=ruleConstantRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_7, "ConstantRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |('function' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getFunctionKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_renaming_9=ruleFunctionRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_9, "FunctionRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_2_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingFunctionRenamingParserRuleCall_2_2_1_0(), currentNode); 
	    }
	    lv_renaming_11=ruleFunctionRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_11, "FunctionRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |('signal' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getSignalKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_renaming_13=ruleSignalRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_13, "SignalRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getRenamingAccess().getCommaKeyword_3_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRenamingAccess().getRenamingSignalRenamingParserRuleCall_3_2_1_0(), currentNode); 
	    }
	    lv_renaming_15=ruleSignalRenaming 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "renaming", lv_renaming_15, "SignalRenaming", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*));





// Entry rule entryRuleTypeRenaming
entryRuleTypeRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRenamingRule(), currentNode); }
	 iv_ruleTypeRenaming=ruleTypeRenaming 
	 { $current=$iv_ruleTypeRenaming.current; } 
	 EOF 
;

// Rule TypeRenaming
ruleTypeRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_0_0(), "oldName"); 
	}

		// TODO assign feature to currentNode
	
)'/' 
    {
        createLeafNode(grammarAccess.getTypeRenamingAccess().getSolidusKeyword_1(), null); 
    }
(	
	
	    lv_newName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeRenamingAccess().getNewNameIDTerminalRuleCall_2_0(), "newName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "newName", lv_newName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleConstantRenaming
entryRuleConstantRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstantRenamingRule(), currentNode); }
	 iv_ruleConstantRenaming=ruleConstantRenaming 
	 { $current=$iv_ruleConstantRenaming.current; } 
	 EOF 
;

// Rule ConstantRenaming
ruleConstantRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstantRenamingAccess().getValueConstantValueParserRuleCall_0_0(), currentNode); 
	    }
	    lv_value_0=ruleConstantValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "ConstantValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getConstantRenamingAccess().getSolidusKeyword_1(), null); 
    }
(	
	
	    lv_newName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getConstantRenamingAccess().getNewNameIDTerminalRuleCall_2_0(), "newName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "newName", lv_newName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleFunctionRenaming
entryRuleFunctionRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRenamingRule(), currentNode); }
	 iv_ruleFunctionRenaming=ruleFunctionRenaming 
	 { $current=$iv_ruleFunctionRenaming.current; } 
	 EOF 
;

// Rule FunctionRenaming
ruleFunctionRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_0_0(), "oldName"); 
	}

		// TODO assign feature to currentNode
	
)'/' 
    {
        createLeafNode(grammarAccess.getFunctionRenamingAccess().getSolidusKeyword_1(), null); 
    }
(	
	
	    lv_newName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionRenamingAccess().getNewNameIDTerminalRuleCall_2_0(), "newName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "newName", lv_newName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSignalRenaming
entryRuleSignalRenaming returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalRenamingRule(), currentNode); }
	 iv_ruleSignalRenaming=ruleSignalRenaming 
	 { $current=$iv_ruleSignalRenaming.current; } 
	 EOF 
;

// Rule SignalRenaming
ruleSignalRenaming returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalRenamingAccess().getOldNameSignalCrossReference_0_0(), "oldName"); 
	}

		// TODO assign feature to currentNode
	
)'/' 
    {
        createLeafNode(grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1(), null); 
    }
(	
	
	    lv_newName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalRenamingAccess().getNewNameIDTerminalRuleCall_2_0(), "newName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRenamingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "newName", lv_newName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleLocalSignalDecl
entryRuleLocalSignalDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLocalSignalDeclRule(), currentNode); }
	 iv_ruleLocalSignalDecl=ruleLocalSignalDecl 
	 { $current=$iv_ruleLocalSignalDecl.current; } 
	 EOF 
;

// Rule LocalSignalDecl
ruleLocalSignalDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('signal' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalDeclAccess().getSignalListLocalSignalListParserRuleCall_1_0(), currentNode); 
	    }
	    lv_signalList_1=ruleLocalSignalList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "signalList", lv_signalList_1, "LocalSignalList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'in' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getInKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'end' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getEndKeyword_4(), null); 
    }
('signal' 
    {
        createLeafNode(grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_5(), null); 
    }
)?);





// Entry rule entryRuleLocalSignalList
entryRuleLocalSignalList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLocalSignalListRule(), currentNode); }
	 iv_ruleLocalSignalList=ruleLocalSignalList 
	 { $current=$iv_ruleLocalSignalList.current; } 
	 EOF 
;

// Rule LocalSignalList
ruleLocalSignalList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLocalSignalListAccess().getLocalSignalAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_1_0(), currentNode); 
	    }
	    lv_signal_1=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_1, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLocalSignalListAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLocalSignalListAccess().getSignalSignalParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_signal_3=ruleSignal 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalSignalListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "signal", lv_signal_3, "Signal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSuspend
entryRuleSuspend returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSuspendRule(), currentNode); }
	 iv_ruleSuspend=ruleSuspend 
	 { $current=$iv_ruleSuspend.current; } 
	 EOF 
;

// Rule Suspend
ruleSuspend returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('suspend' 
    {
        createLeafNode(grammarAccess.getSuspendAccess().getSuspendKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSuspendAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_statement_1=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuspendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_1, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'when' 
    {
        createLeafNode(grammarAccess.getSuspendAccess().getWhenKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSuspendAccess().getDelayDelayExprParserRuleCall_3_0(), currentNode); 
	    }
	    lv_delay_3=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuspendRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_3, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleSustain
entryRuleSustain returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSustainRule(), currentNode); }
	 iv_ruleSustain=ruleSustain 
	 { $current=$iv_ruleSustain.current; } 
	 EOF 
;

// Rule Sustain
ruleSustain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('sustain' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getSustainKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSustainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSustainAccess().getSignalSignalCrossReference_1_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
)('(' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSustainAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_dataExpr_3=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSustainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "dataExpr", lv_dataExpr_3, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getSustainAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleTrap
entryRuleTrap returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapRule(), currentNode); }
	 iv_ruleTrap=ruleTrap 
	 { $current=$iv_ruleTrap.current; } 
	 EOF 
;

// Rule Trap
ruleTrap returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('trap' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getTrapKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getTrapDeclListTrapDeclListParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trapDeclList_1=ruleTrapDeclList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trapDeclList", lv_trapDeclList_1, "TrapDeclList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'in' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getInKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapAccess().getTrapHandlerListTrapHandlerListParserRuleCall_4_0(), currentNode); 
	    }
	    lv_trapHandlerList_4=ruleTrapHandlerList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trapHandlerList", lv_trapHandlerList_4, "TrapHandlerList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'end' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getEndKeyword_5(), null); 
    }
('trap' 
    {
        createLeafNode(grammarAccess.getTrapAccess().getTrapKeyword_6(), null); 
    }
)?);





// Entry rule entryRuleTrapDeclList
entryRuleTrapDeclList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapDeclListRule(), currentNode); }
	 iv_ruleTrapDeclList=ruleTrapDeclList 
	 { $current=$iv_ruleTrapDeclList.current; } 
	 EOF 
;

// Rule TrapDeclList
ruleTrapDeclList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_0_0(), currentNode); 
	    }
	    lv_trapDecl_0=ruleTrapDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "trapDecl", lv_trapDecl_0, "TrapDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getTrapDeclListAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclListAccess().getTrapDeclTrapDeclParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_trapDecl_2=ruleTrapDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "trapDecl", lv_trapDecl_2, "TrapDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleTrapDecl
entryRuleTrapDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapDeclRule(), currentNode); }
	 iv_ruleTrapDecl=ruleTrapDecl 
	 { $current=$iv_ruleTrapDecl.current; } 
	 EOF 
;

// Rule TrapDecl
ruleTrapDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getTrapDeclAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapDeclAccess().getChannelDescChannelDescriptionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_channelDesc_1=ruleChannelDescription 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "channelDesc", lv_channelDesc_1, "ChannelDescription", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleTrapHandlerList
entryRuleTrapHandlerList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapHandlerListRule(), currentNode); }
	 iv_ruleTrapHandlerList=ruleTrapHandlerList 
	 { $current=$iv_ruleTrapHandlerList.current; } 
	 EOF 
;

// Rule TrapHandlerList
ruleTrapHandlerList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_0_0(), currentNode); 
	    }
	    lv_trapHandler_0=ruleTrapHandler 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "trapHandler", lv_trapHandler_0, "TrapHandler", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerListAccess().getTrapHandlerTrapHandlerParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trapHandler_1=ruleTrapHandler 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "trapHandler", lv_trapHandler_1, "TrapHandler", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleTrapHandler
entryRuleTrapHandler returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapHandlerRule(), currentNode); }
	 iv_ruleTrapHandler=ruleTrapHandler 
	 { $current=$iv_ruleTrapHandler.current; } 
	 EOF 
;

// Rule TrapHandler
ruleTrapHandler returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('handle' 
    {
        createLeafNode(grammarAccess.getTrapHandlerAccess().getHandleKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerAccess().getTrapExprTrapExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_trapExpr_1=ruleTrapExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "trapExpr", lv_trapExpr_1, "TrapExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'do' 
    {
        createLeafNode(grammarAccess.getTrapHandlerAccess().getDoKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTrapHandlerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getVarDeclVariableDeclParserRuleCall_1_0(), currentNode); 
	    }
	    lv_varDecl_1=ruleVariableDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "varDecl", lv_varDecl_1, "VariableDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'in' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getInKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getStatementStatementParserRuleCall_3_0(), currentNode); 
	    }
	    lv_statement_3=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_3, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'end' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getEndKeyword_4(), null); 
    }
('var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_5(), null); 
    }
)?);





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclRule(), currentNode); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_0_0(), currentNode); 
	    }
	    lv_varList_0=ruleVariableList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "varList", lv_varList_0, "VariableList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getColonKeyword_1(), null); 
    }
((	
	
	    lv_type_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableDeclAccess().getTypeIDTerminalRuleCall_2_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_3=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_2_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_3, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))((
    { 
        temp=factory.create(grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableDeclAccess().getVariableDeclLeftAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)',' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getCommaKeyword_3_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getVarListVariableListParserRuleCall_3_2_0(), currentNode); 
	    }
	    lv_varList_6=ruleVariableList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "varList", lv_varList_6, "VariableList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getVariableDeclAccess().getColonKeyword_3_3(), null); 
    }
((	
	
	    lv_type_8=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableDeclAccess().getTypeIDTerminalRuleCall_3_4_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_8, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_9=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getVariableDeclAccess().getTypeBaseTypeTerminalRuleCall_3_4_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_9, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))*);





// Entry rule entryRuleVariableList
entryRuleVariableList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableListRule(), currentNode); }
	 iv_ruleVariableList=ruleVariableList 
	 { $current=$iv_ruleVariableList.current; } 
	 EOF 
;

// Rule VariableList
ruleVariableList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_variable_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableListAccess().getVariableIDTerminalRuleCall_0_0(), "variable"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(':=' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expression_2=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_2, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?((
    { 
        temp=factory.create(grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableListAccess().getVariableListLeftAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)',' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getCommaKeyword_2_1(), null); 
    }
(	
	
	    lv_variable_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableListAccess().getVariableIDTerminalRuleCall_2_2_0(), "variable"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(':=' 
    {
        createLeafNode(grammarAccess.getVariableListAccess().getColonEqualsSignKeyword_2_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableListAccess().getExpressionDataExprParserRuleCall_2_3_1_0(), currentNode); 
	    }
	    lv_expression_7=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_7, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?)*);





// Entry rule entryRuleWeakAbort
entryRuleWeakAbort returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortRule(), currentNode); }
	 iv_ruleWeakAbort=ruleWeakAbort 
	 { $current=$iv_ruleWeakAbort.current; } 
	 EOF 
;

// Rule WeakAbort
ruleWeakAbort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('weak' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getWeakKeyword_0(), null); 
    }
'abort' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getAbortKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortAccess().getStatementStatementParserRuleCall_2_0(), currentNode); 
	    }
	    lv_statement_2=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_2, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'when' 
    {
        createLeafNode(grammarAccess.getWeakAbortAccess().getWhenKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortAccess().getWeakAbortBodyWeakAbortBodyParserRuleCall_4_0(), currentNode); 
	    }
	    lv_weakAbortBody_4=ruleWeakAbortBody 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "weakAbortBody", lv_weakAbortBody_4, "WeakAbortBody", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleWeakAbortBody
entryRuleWeakAbortBody returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortBodyRule(), currentNode); }
	 iv_ruleWeakAbortBody=ruleWeakAbortBody 
	 { $current=$iv_ruleWeakAbortBody.current; } 
	 EOF 
;

// Rule WeakAbortBody
ruleWeakAbortBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortInstanceParserRuleCall_0(), currentNode); 
    }
    this_WeakAbortInstance_0=ruleWeakAbortInstance
    { 
        $current = $this_WeakAbortInstance_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getWeakAbortBodyAccess().getWeakAbortCaseParserRuleCall_1(), currentNode); 
    }
    this_WeakAbortCase_1=ruleWeakAbortCase
    { 
        $current = $this_WeakAbortCase_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleWeakAbortEnd
entryRuleWeakAbortEnd returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortEndRule(), currentNode); } 
	 iv_ruleWeakAbortEnd=ruleWeakAbortEnd 
	 { $current=$iv_ruleWeakAbortEnd.current.getText(); }  
	 EOF 
;

// Rule WeakAbortEnd
ruleWeakAbortEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='end' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getEndKeyword_0(), null); 
    }
((
	kw='weak' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getWeakKeyword_1_0(), null); 
    }
)?
	kw='abort' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getWeakAbortEndAccess().getAbortKeyword_1_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleWeakAbortInstance
entryRuleWeakAbortInstance returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortInstanceRule(), currentNode); }
	 iv_ruleWeakAbortInstance=ruleWeakAbortInstance 
	 { $current=$iv_ruleWeakAbortInstance.current; } 
	 EOF 
;

// Rule WeakAbortInstance
ruleWeakAbortInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getDelayDelayExprParserRuleCall_0_0(), currentNode); 
	    }
	    lv_delay_0=ruleDelayExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "delay", lv_delay_0, "DelayExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('do' 
    {
        createLeafNode(grammarAccess.getWeakAbortInstanceAccess().getDoKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getStatementStatementParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_statement_2=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "statement", lv_statement_2, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortInstanceAccess().getEndWeakAbortEndParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_end_3=ruleWeakAbortEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_3, "WeakAbortEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleWeakAbortCase
entryRuleWeakAbortCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWeakAbortCaseRule(), currentNode); }
	 iv_ruleWeakAbortCase=ruleWeakAbortCase 
	 { $current=$iv_ruleWeakAbortCase.current; } 
	 EOF 
;

// Rule WeakAbortCase
ruleWeakAbortCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_0_0(), currentNode); 
	    }
	    lv_cases_0=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_0, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getCasesAbortCaseSingleParserRuleCall_1_0(), currentNode); 
	    }
	    lv_cases_1=ruleAbortCaseSingle 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "cases", lv_cases_1, "AbortCaseSingle", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWeakAbortCaseAccess().getEndWeakAbortEndParserRuleCall_2_0(), currentNode); 
	    }
	    lv_end_2=ruleWeakAbortEnd 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWeakAbortCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "end", lv_end_2, "WeakAbortEnd", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleDataExpr
entryRuleDataExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDataExprRule(), currentNode); }
	 iv_ruleDataExpr=ruleDataExpr 
	 { $current=$iv_ruleDataExpr.current; } 
	 EOF 
;

// Rule DataExpr
ruleDataExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_op_0=ruleDataOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0, "DataOp", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getExprDataExprParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getExprDataUnaryExprParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_expr_2=ruleDataUnaryExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "DataUnaryExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((
    { 
        temp=factory.create(grammarAccess.getDataExprAccess().getDataExprLeftAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDataExprAccess().getDataExprLeftAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getOpDataOpParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_op_4=ruleDataOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4, "DataOp", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataExprAccess().getExprDataExprParserRuleCall_1_1_2_0(), currentNode); 
	    }
	    lv_expr_5=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_5, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?));





// Entry rule entryRuleDataUnaryExpr
entryRuleDataUnaryExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDataUnaryExprRule(), currentNode); }
	 iv_ruleDataUnaryExpr=ruleDataUnaryExpr 
	 { $current=$iv_ruleDataUnaryExpr.current; } 
	 EOF 
;

// Rule DataUnaryExpr
ruleDataUnaryExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_ID
    { 
    createLeafNode(grammarAccess.getDataUnaryExprAccess().getIDTerminalRuleCall_0(), null); 
    }

    |RULE_FLOAT
    { 
    createLeafNode(grammarAccess.getDataUnaryExprAccess().getFloatTerminalRuleCall_1(), null); 
    }

    |RULE_BOOLEAN
    { 
    createLeafNode(grammarAccess.getDataUnaryExprAccess().getBooleanTerminalRuleCall_2(), null); 
    }

    |RULE_INT
    { 
    createLeafNode(grammarAccess.getDataUnaryExprAccess().getINTTerminalRuleCall_3(), null); 
    }

    |RULE_STRING
    { 
    createLeafNode(grammarAccess.getDataUnaryExprAccess().getSTRINGTerminalRuleCall_4(), null); 
    }

    |('(' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getLeftParenthesisKeyword_5_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getDataExprParserRuleCall_5_1(), currentNode); 
    }
    this_DataExpr_6=ruleDataExpr
    { 
        $current = $this_DataExpr_6.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getRightParenthesisKeyword_5_2(), null); 
    }
)
    |('?' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getQuestionMarkKeyword_6_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataUnaryExprAccess().getSignalSignalCrossReference_6_1_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
))
    |('pre' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getPreKeyword_7_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getLeftParenthesisKeyword_7_1(), null); 
    }
'?' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getQuestionMarkKeyword_7_2(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataUnaryExprAccess().getSignalSignalCrossReference_7_3_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
)')' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getRightParenthesisKeyword_7_4(), null); 
    }
)
    |('??' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getQuestionMarkQuestionMarkKeyword_8_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataUnaryExprAccess().getTrapTrapCrossReference_8_1_0(), "trap"); 
	}

		// TODO assign feature to currentNode
	
))
    |((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataUnaryExprAccess().getFunctionFunctionCrossReference_9_0_0(), "function"); 
	}

		// TODO assign feature to currentNode
	
)'(' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getLeftParenthesisKeyword_9_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getExpressionDataExprParserRuleCall_9_2_0(), currentNode); 
	    }
	    lv_expression_19=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expression", lv_expression_19, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getCommaKeyword_9_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDataUnaryExprAccess().getExpressionDataExprParserRuleCall_9_3_1_0(), currentNode); 
	    }
	    lv_expression_21=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataUnaryExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expression", lv_expression_21, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getDataUnaryExprAccess().getRightParenthesisKeyword_9_4(), null); 
    }
));





// Entry rule entryRuleDataOp
entryRuleDataOp returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDataOpRule(), currentNode); } 
	 iv_ruleDataOp=ruleDataOp 
	 { $current=$iv_ruleDataOp.current.getText(); }  
	 EOF 
;

// Rule DataOp
ruleDataOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getAndKeyword_0(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getOrKeyword_1(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getNotKeyword_2(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignKeyword_3(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getGreaterThanSignKeyword_4(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignEqualsSignKeyword_5(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getGreaterThanSignEqualsSignKeyword_6(), null); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getLessThanSignGreaterThanSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getPlusSignKeyword_9(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getHyphenMinusKeyword_10(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getAsteriskKeyword_11(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getSolidusKeyword_12(), null); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataOpAccess().getModKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleTrapExpr
entryRuleTrapExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTrapExprRule(), currentNode); }
	 iv_ruleTrapExpr=ruleTrapExpr 
	 { $current=$iv_ruleTrapExpr.current; } 
	 EOF 
;

// Rule TrapExpr
ruleTrapExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getTrapExprAccess().getSigExprParserRuleCall(), currentNode); 
    }
    this_SigExpr_0=ruleSigExpr
    { 
        $current = $this_SigExpr_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleSigExpr
entryRuleSigExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigExprRule(), currentNode); }
	 iv_ruleSigExpr=ruleSigExpr 
	 { $current=$iv_ruleSigExpr.current; } 
	 EOF 
;

// Rule SigExpr
ruleSigExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_0_0(), currentNode); 
	    }
	    lv_andExpr_0=ruleSigExprAND 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "andExpr", lv_andExpr_0, "SigExprAND", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('or' 
    {
        createLeafNode(grammarAccess.getSigExprAccess().getOrKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprAccess().getAndExprSigExprANDParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_andExpr_2=ruleSigExprAND 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "andExpr", lv_andExpr_2, "SigExprAND", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSigExprAND
entryRuleSigExprAND returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigExprANDRule(), currentNode); }
	 iv_ruleSigExprAND=ruleSigExprAND 
	 { $current=$iv_ruleSigExprAND.current; } 
	 EOF 
;

// Rule SigExprAND
ruleSigExprAND returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_0_0(), currentNode); 
	    }
	    lv_unaExpr_0=ruleSigExprUnary 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprANDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "unaExpr", lv_unaExpr_0, "SigExprUnary", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('and' 
    {
        createLeafNode(grammarAccess.getSigExprANDAccess().getAndKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprANDAccess().getUnaExprSigExprUnaryParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_unaExpr_2=ruleSigExprUnary 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprANDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "unaExpr", lv_unaExpr_2, "SigExprUnary", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSigExprUnary
entryRuleSigExprUnary returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigExprUnaryRule(), currentNode); }
	 iv_ruleSigExprUnary=ruleSigExprUnary 
	 { $current=$iv_ruleSigExprUnary.current; } 
	 EOF 
;

// Rule SigExprUnary
ruleSigExprUnary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_expr_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getSigExprUnaryAccess().getExprIDTerminalRuleCall_0_0(), "expr"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |('(' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprUnaryAccess().getSigExprSigExprParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_sigExpr_2=ruleSigExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "sigExpr", lv_sigExpr_2, "SigExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)
    |('not' 
    {
        createLeafNode(grammarAccess.getSigExprUnaryAccess().getNotKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExprUnaryAccess().getSigExprSigExprUnaryParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_sigExpr_5=ruleSigExprUnary 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExprUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "sigExpr", lv_sigExpr_5, "SigExprUnary", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleDelayExpr
entryRuleDelayExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDelayExprRule(), currentNode); }
	 iv_ruleDelayExpr=ruleDelayExpr 
	 { $current=$iv_ruleDelayExpr.current; } 
	 EOF 
;

// Rule DelayExpr
ruleDelayExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_0_0(), currentNode); 
	    }
	    lv_event_0=ruleDelayEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_0, "DelayEvent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getExprDataExprParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_expr_1=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDelayExprAccess().getEventDelayEventParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_event_2=ruleDelayEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_2, "DelayEvent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleDelayEvent
entryRuleDelayEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDelayEventRule(), currentNode); }
	 iv_ruleDelayEvent=ruleDelayEvent 
	 { $current=$iv_ruleDelayEvent.current; } 
	 EOF 
;

// Rule DelayEvent
ruleDelayEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDelayEventAccess().getSignalSignalCrossReference_0_0(), "signal"); 
	}

		// TODO assign feature to currentNode
	
)
    |('pre' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getPreKeyword_1_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getLeftParenthesisKeyword_1_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDelayEventAccess().getSigExprParserRuleCall_1_2(), currentNode); 
    }
    this_SigExpr_3=ruleSigExpr
    { 
        $current = $this_SigExpr_3.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)
    |('[' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDelayEventAccess().getSigExprParserRuleCall_2_1(), currentNode); 
    }
    this_SigExpr_6=ruleSigExpr
    { 
        $current = $this_SigExpr_6.current; 
        currentNode = currentNode.getParent();
    }
']' 
    {
        createLeafNode(grammarAccess.getDelayEventAccess().getRightSquareBracketKeyword_2_2(), null); 
    }
));





// Entry rule entryRuleChannelDescription
entryRuleChannelDescription returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getChannelDescriptionRule(), currentNode); }
	 iv_ruleChannelDescription=ruleChannelDescription 
	 { $current=$iv_ruleChannelDescription.current; } 
	 EOF 
;

// Rule ChannelDescription
ruleChannelDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((':' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonKeyword_0_0(), null); 
    }
((	
	
	    lv_type_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeIDTerminalRuleCall_0_1_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_2=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeBaseTypeTerminalRuleCall_0_1_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))
    |('(' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
((	
	
	    lv_type_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeIDTerminalRuleCall_1_1_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_5=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeBaseTypeTerminalRuleCall_1_1_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_5, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))')' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)
    |(':=' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonEqualsSignKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getChannelDescriptionAccess().getDataExprDataExprParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_dataExpr_8=ruleDataExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "dataExpr", lv_dataExpr_8, "DataExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getChannelDescriptionAccess().getColonKeyword_2_2(), null); 
    }
((	
	
	    lv_type_10=	RULE_ID
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeIDTerminalRuleCall_2_3_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_10, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_11=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getChannelDescriptionAccess().getTypeBaseTypeTerminalRuleCall_2_3_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChannelDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_11, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))));





// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalRule(), currentNode); }
	 iv_ruleSignal=ruleSignal 
	 { $current=$iv_ruleSignal.current; } 
	 EOF 
;

// Rule Signal
ruleSignal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSignalAccess().getChannelChannelDescriptionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_channel_1=ruleChannelDescription 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "channel", lv_channel_1, "ChannelDescription", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);







// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSensorRule(), currentNode); }
	 iv_ruleSensor=ruleSensor 
	 { $current=$iv_ruleSensor.current; } 
	 EOF 
;

// Rule Sensor
ruleSensor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getColonKeyword_0_1(), null); 
    }
((	
	
	    lv_type_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getSensorAccess().getTypeIDTerminalRuleCall_0_2_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_3=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_0_2_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_3, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))
    |((	
	
	    lv_name_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((	
	
	    lv_type_6=	RULE_ID
	{
		createLeafNode(grammarAccess.getSensorAccess().getTypeIDTerminalRuleCall_1_2_0_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_6, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_type_7=	RULE_BASETYPE
	{
		createLeafNode(grammarAccess.getSensorAccess().getTypeBaseTypeTerminalRuleCall_1_2_1_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSensorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_7, "BaseType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))')' 
    {
        createLeafNode(grammarAccess.getSensorAccess().getRightParenthesisKeyword_1_3(), null); 
    }
));





RULE_FLOAT : ((RULE_INT '.' RULE_INT|RULE_INT ('.' RULE_INT)? ('e'|'E') ('-'|'+')? RULE_INT) 'f'?|RULE_INT 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_BASETYPE : ('boolean'|'integer'|'float'|'double'|'string');

RULE_ESTEREL_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ESTEREL_ML_COMMENT : '%' '{' ( options {greedy=false;} : . )*'}' '%';

RULE_NUMBER : ('+'|'-') ' '? RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


