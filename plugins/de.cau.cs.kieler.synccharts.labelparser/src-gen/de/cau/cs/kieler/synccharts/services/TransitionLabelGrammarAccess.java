/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransitionLabelGrammarAccess implements IGrammarAccess {
	
	
	public class ActionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsImmediateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsImmediateNumberSignKeyword_0_0 = (Keyword)cIsImmediateAssignment_0.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTriggerBooleanExpressionParserRuleCall_2_0 = (RuleCall)cTriggerAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		
		//Action returns synccharts::Action:
		//  isImmediate?="#" delay=INT? trigger=BooleanExpression? ("/" effects+=Effect*)?; 
		////import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts
		////import "synccharts" as synchcharts
		//
		////dummy rule to test the language in an editor
		////Model : 
		////	((signals+=Signal | variables+=Variable))* (actions+=Action ";")*;
		//
		//    
		//	//(isImmediate?='#' | delay=INT)? (trigger=PrimaryExpression)? ("/" (effects+=Effect)*)?;
		//	         // (";" parentStateEntryAction=[synccharts::State]? ";" parentStateExitAction=[synccharts::State]? ";" parentStateInnerAction=[synccharts::State]?)? ; 		
		//
		//// dummy rule that will never be parsed. However, the serializer might get
		//// a transition instead of an action and needs to know how to serialize it
		//// here we define, that the textual representation will only hold the elements
		//// of an action. This is only meaningful for the graphical editor. If you need
		//// a proper textual representation of a Transition, you should override this 
		//// rule!
		////Transition returns synccharts::Transition:
		////	Action;
		public ParserRule getRule() { return rule; }

		//isImmediate?="#" delay=INT? trigger=BooleanExpression? ("/" effects+=Effect*)? 
		//	//(isImmediate?='#' | delay=INT)? (trigger=PrimaryExpression)? ("/" (effects+=Effect)*)?;
		public Group getGroup() { return cGroup; }

		//isImmediate?="#" 
		//	//(isImmediate?='#' | delay=INT)? (trigger=PrimaryExpression)? ("/" (effects+=Effect)*)?;
		public Assignment getIsImmediateAssignment_0() { return cIsImmediateAssignment_0; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_0_0() { return cIsImmediateNumberSignKeyword_0_0; }

		//delay=INT?
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_1_0() { return cDelayINTTerminalRuleCall_1_0; }

		//trigger=BooleanExpression?
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }

		//BooleanExpression
		public RuleCall getTriggerBooleanExpressionParserRuleCall_2_0() { return cTriggerBooleanExpressionParserRuleCall_2_0; }

		//("/" effects+=Effect*)?
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//effects+=Effect*
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }
	}

	public class EffectElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmissionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHostCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect returns synccharts::Effect:
		//  Emission|Assignment|HostCode; // (";" parentStateEntryAction=[synccharts::State]? ";" parentStateExitAction=[synccharts::State]? ";" parentStateInnerAction=[synccharts::State]?)? ; 		
		//
		//// dummy rule that will never be parsed. However, the serializer might get
		//// a transition instead of an action and needs to know how to serialize it
		//// here we define, that the textual representation will only hold the elements
		//// of an action. This is only meaningful for the graphical editor. If you need
		//// a proper textual representation of a Transition, you should override this 
		//// rule!
		////Transition returns synccharts::Transition:
		////	Action;
		public ParserRule getRule() { return rule; }

		//Emission|Assignment|HostCode // (";" parentStateEntryAction=[synccharts::State]? ";" parentStateExitAction=[synccharts::State]? ";" parentStateInnerAction=[synccharts::State]?)? ; 		
		//
		//// dummy rule that will never be parsed. However, the serializer might get
		//// a transition instead of an action and needs to know how to serialize it
		//// here we define, that the textual representation will only hold the elements
		//// of an action. This is only meaningful for the graphical editor. If you need
		//// a proper textual representation of a Transition, you should override this 
		//// rule!
		////Transition returns synccharts::Transition:
		////	Action;
		public Alternatives getAlternatives() { return cAlternatives; }

		//Emission
		public RuleCall getEmissionParserRuleCall_0() { return cEmissionParserRuleCall_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }

		//HostCode
		public RuleCall getHostCodeParserRuleCall_2() { return cHostCodeParserRuleCall_2; }
	}

	public class EmissionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSignalSignalCrossReference_0_0 = (CrossReference)cSignalAssignment_0.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cSignalSignalCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNewValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNewValuePrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cNewValueAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Emission returns synccharts::Emission:
		//  signal=[synccharts::Signal] ("(" newValue=PrimaryExpression ")")?;
		public ParserRule getRule() { return rule; }

		//signal=[synccharts::Signal] ("(" newValue=PrimaryExpression ")")?
		public Group getGroup() { return cGroup; }

		//signal=[synccharts::Signal]
		public Assignment getSignalAssignment_0() { return cSignalAssignment_0; }

		//[synccharts::Signal]
		public CrossReference getSignalSignalCrossReference_0_0() { return cSignalSignalCrossReference_0_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_0_1() { return cSignalSignalIDTerminalRuleCall_0_0_1; }

		//("(" newValue=PrimaryExpression ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//newValue=PrimaryExpression
		public Assignment getNewValueAssignment_1_1() { return cNewValueAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getNewValuePrimaryExpressionParserRuleCall_1_1_0() { return cNewValuePrimaryExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AssignmentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment returns synccharts::Assignment:
		//  variable=[synccharts::Variable] ":=" expression=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//variable=[synccharts::Variable] ":=" expression=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//variable=[synccharts::Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[synccharts::Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_2_0() { return cExpressionPrimaryExpressionParserRuleCall_2_0; }
	}

	public class SignalReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalReference");
		private final Assignment cSignalAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSignalSignalCrossReference_0 = (CrossReference)cSignalAssignment.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_0_1 = (RuleCall)cSignalSignalCrossReference_0.eContents().get(1);
		
		//SignalReference returns synccharts::SignalReference:
		//  signal=[synccharts::Signal]; 
		//
		//    
		//	    
		//
		////SignalReference :
		////	signal = [Signal];
		public ParserRule getRule() { return rule; }

		//signal=[synccharts::Signal]
		public Assignment getSignalAssignment() { return cSignalAssignment; }

		//[synccharts::Signal]
		public CrossReference getSignalSignalCrossReference_0() { return cSignalSignalCrossReference_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_0_1() { return cSignalSignalIDTerminalRuleCall_0_1; }
	}

	public class VariableReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference returns synccharts::VariableReference:
		//  variable=[synccharts::Variable]; 
		//
		////SignalReference :
		////	signal = [Signal];
		public ParserRule getRule() { return rule; }

		//variable=[synccharts::Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[synccharts::Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}

	public class IntValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//  value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFloatTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//  value=Float;
		public ParserRule getRule() { return rule; }

		//value=Float
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Float
		public RuleCall getValueFloatTerminalRuleCall_0() { return cValueFloatTerminalRuleCall_0; }
	}

	public class BooleanValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//  value=Boolean;
		public ParserRule getRule() { return rule; }

		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Boolean
		public RuleCall getValueBooleanTerminalRuleCall_0() { return cValueBooleanTerminalRuleCall_0; }
	}

	public class ValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//  IntValue|FloatValue|BooleanValue; 
		//
		//	        
		//
		////Signal:
		////	"signal" name = ID;
		//	
		////Variable:
		////	"variable" name = ID;
		//
		//// make sure the Float rule does not shadow the built-in INT rule
		public ParserRule getRule() { return rule; }

		//IntValue|FloatValue|BooleanValue 
		//
		//	        
		//
		////Signal:
		////	"signal" name = ID;
		//	
		////Variable:
		////	"variable" name = ID;
		//
		//// make sure the Float rule does not shadow the built-in INT rule
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}

	public class HostCodeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostCode");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_0 = (RuleCall)cCodeAssignment.eContents().get(0);
		
		//HostCode returns synccharts::HostCode:
		//  code=STRING; 
		//
		//    
		//	//"'"code=STRING"'";
		//	 //("(" type=ID ")")?
		public ParserRule getRule() { return rule; }

		//code=STRING 
		//	//"'"code=STRING"'";
		//	 //("(" type=ID ")")?
		public Assignment getCodeAssignment() { return cCodeAssignment; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_0() { return cCodeSTRINGTerminalRuleCall_0; }
	}

	public class ValOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorValOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionsSignalReferenceParserRuleCall_1_0 = (RuleCall)cSubExpressionsAssignment_1.eContents().get(0);
		
		//ValOperation returns synccharts::ComplexExpression:
		//  operator=ValOperator subExpressions+=SignalReference;
		public ParserRule getRule() { return rule; }

		//operator=ValOperator subExpressions+=SignalReference
		public Group getGroup() { return cGroup; }

		//operator=ValOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//ValOperator
		public RuleCall getOperatorValOperatorEnumRuleCall_0_0() { return cOperatorValOperatorEnumRuleCall_0_0; }

		//subExpressions+=SignalReference
		public Assignment getSubExpressionsAssignment_1() { return cSubExpressionsAssignment_1; }

		//SignalReference
		public RuleCall getSubExpressionsSignalReferenceParserRuleCall_1_0() { return cSubExpressionsSignalReferenceParserRuleCall_1_0; }
	}

	public class ValueExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueExpression returns synccharts::Expression:
		//  IntValue|FloatValue|ValOperation|VariableReference;
		public ParserRule getRule() { return rule; }

		//IntValue|FloatValue|ValOperation|VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//ValOperation
		public RuleCall getValOperationParserRuleCall_2() { return cValOperationParserRuleCall_2; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }
	}

	public class CompareOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorCompareOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsValueExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//CompareOperation returns synccharts::Expression:
		//  ValueExpression ({Operation.subExpressions+=current} operator=CompareOperator
		//  subExpressions+=ValueExpression);
		public ParserRule getRule() { return rule; }

		//ValueExpression ({Operation.subExpressions+=current} operator=CompareOperator
		//subExpressions+=ValueExpression)
		public Group getGroup() { return cGroup; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }

		//{Operation.subExpressions+=current} operator=CompareOperator subExpressions+=
		//ValueExpression
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.subExpressions+=current}
		public Action getOperationSubExpressionsAction_1_0() { return cOperationSubExpressionsAction_1_0; }

		//operator=CompareOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//CompareOperator
		public RuleCall getOperatorCompareOperatorEnumRuleCall_1_1_0() { return cOperatorCompareOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=ValueExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//ValueExpression
		public RuleCall getSubExpressionsValueExpressionParserRuleCall_1_2_0() { return cSubExpressionsValueExpressionParserRuleCall_1_2_0; }
	}

	public class NotOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNotOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionsBooleanExpressionParserRuleCall_1_0 = (RuleCall)cSubExpressionsAssignment_1.eContents().get(0);
		
		//NotOperation returns synccharts::ComplexExpression:
		//  operator=NotOperator subExpressions+=BooleanExpression;
		public ParserRule getRule() { return rule; }

		//operator=NotOperator subExpressions+=BooleanExpression
		public Group getGroup() { return cGroup; }

		//operator=NotOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NotOperator
		public RuleCall getOperatorNotOperatorEnumRuleCall_0_0() { return cOperatorNotOperatorEnumRuleCall_0_0; }

		//subExpressions+=BooleanExpression
		public Assignment getSubExpressionsAssignment_1() { return cSubExpressionsAssignment_1; }

		//BooleanExpression
		public RuleCall getSubExpressionsBooleanExpressionParserRuleCall_1_0() { return cSubExpressionsBooleanExpressionParserRuleCall_1_0; }
	}

	public class NotOrNormalExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotOrNormalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotOrNormalExpression returns synccharts::Expression:
		//  NotOperation|BooleanExpression;
		public ParserRule getRule() { return rule; }

		//NotOperation|BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NotOperation
		public RuleCall getNotOperationParserRuleCall_0() { return cNotOperationParserRuleCall_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_1() { return cBooleanExpressionParserRuleCall_1; }
	}

	public class AndOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOrNormalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationSubExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOperatorAndEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionAssignment_1_2.eContents().get(0);
		
		//AndOperation returns synccharts::Expression:
		//  NotOrNormalExpression ({Operation.subExpression+=current} operator=OperatorAnd
		//  subExpression+=NotOrNormalExpression)*;
		public ParserRule getRule() { return rule; }

		//NotOrNormalExpression ({Operation.subExpression+=current} operator=OperatorAnd
		//subExpression+=NotOrNormalExpression)*
		public Group getGroup() { return cGroup; }

		//NotOrNormalExpression
		public RuleCall getNotOrNormalExpressionParserRuleCall_0() { return cNotOrNormalExpressionParserRuleCall_0; }

		//({Operation.subExpression+=current} operator=OperatorAnd subExpression+=
		//NotOrNormalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.subExpression+=current}
		public Action getOperationSubExpressionAction_1_0() { return cOperationSubExpressionAction_1_0; }

		//operator=OperatorAnd
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OperatorAnd
		public RuleCall getOperatorOperatorAndEnumRuleCall_1_1_0() { return cOperatorOperatorAndEnumRuleCall_1_1_0; }

		//subExpression+=NotOrNormalExpression
		public Assignment getSubExpressionAssignment_1_2() { return cSubExpressionAssignment_1_2; }

		//NotOrNormalExpression
		public RuleCall getSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0() { return cSubExpressionNotOrNormalExpressionParserRuleCall_1_2_0; }
	}

	public class OrOperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOperatorOrEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsAndOperationParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//OrOperation returns synccharts::Expression:
		//  AndOperation ({Operation.subExpressions+=current} operator=OperatorOr
		//  subExpressions+=AndOperation)*; 
		//
		//    
		//	      
		//
		//// TODO: get rid of parentheses
		public ParserRule getRule() { return rule; }

		//AndOperation ({Operation.subExpressions+=current} operator=OperatorOr
		//subExpressions+=AndOperation)*
		public Group getGroup() { return cGroup; }

		//AndOperation
		public RuleCall getAndOperationParserRuleCall_0() { return cAndOperationParserRuleCall_0; }

		//({Operation.subExpressions+=current} operator=OperatorOr subExpressions+=
		//AndOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.subExpressions+=current}
		public Action getOperationSubExpressionsAction_1_0() { return cOperationSubExpressionsAction_1_0; }

		//operator=OperatorOr
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OperatorOr
		public RuleCall getOperatorOperatorOrEnumRuleCall_1_1_0() { return cOperatorOperatorOrEnumRuleCall_1_1_0; }

		//subExpressions+=AndOperation
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//AndOperation
		public RuleCall getSubExpressionsAndOperationParserRuleCall_1_2_0() { return cSubExpressionsAndOperationParserRuleCall_1_2_0; }
	}

	public class BooleanExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cOrOperationParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//BooleanExpression returns synccharts::Expression:
		//  BooleanValue|SignalReference|CompareOperation|"(" OrOperation ")"; 
		//
		//// TODO: get rid of parentheses
		public ParserRule getRule() { return rule; }

		//BooleanValue|SignalReference|CompareOperation|"(" OrOperation ")" 
		//
		//// TODO: get rid of parentheses
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }

		//SignalReference
		public RuleCall getSignalReferenceParserRuleCall_1() { return cSignalReferenceParserRuleCall_1; }

		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_2() { return cCompareOperationParserRuleCall_2; }

		//"(" OrOperation ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//OrOperation
		public RuleCall getOrOperationParserRuleCall_3_1() { return cOrOperationParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class PrimaryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final RuleCall cBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrimaryExpression returns synccharts::Expression:
		//  BooleanExpression; 
		//
		//    
		//	//ValueExpression | BooleanExpression;
		public ParserRule getRule() { return rule; }

		//BooleanExpression 
		//	//ValueExpression | BooleanExpression;
		public RuleCall getBooleanExpressionParserRuleCall() { return cBooleanExpressionParserRuleCall; }
	}
	
	
	public class OperatorTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOTNotKeyword_5_0 = (Keyword)cNOTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOROrKeyword_7_0 = (Keyword)cOREnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cADDPlusSignKeyword_8_0 = (Keyword)cADDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSUBHyphenMinusKeyword_9_0 = (Keyword)cSUBEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cMULTAsteriskKeyword_10_0 = (Keyword)cMULTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDIVDivKeyword_11_0 = (Keyword)cDIVEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cMODModKeyword_12_0 = (Keyword)cMODEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cVALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cVALQuestionMarkKeyword_13_0 = (Keyword)cVALEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cPREEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cPREPreKeyword_14_0 = (Keyword)cPREEnumLiteralDeclaration_14.eContents().get(0);
		
		//enum OperatorType returns synccharts::OperatorType:
		//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | AND="and" | OR="or" | ADD="+" | SUB=
		//  "-" | MULT="*" | DIV="div" | MOD="mod" | VAL="?" | PRE="pre";
		public EnumRule getRule() { return rule; }

		//EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | AND="and" | OR="or" | ADD="+" | SUB=
		//"-" | MULT="*" | DIV="div" | MOD="mod" | VAL="?" | PRE="pre"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }

		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }

		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }

		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_5() { return cNOTEnumLiteralDeclaration_5; }

		//"not"
		public Keyword getNOTNotKeyword_5_0() { return cNOTNotKeyword_5_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }

		//"and"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_7() { return cOREnumLiteralDeclaration_7; }

		//"or"
		public Keyword getOROrKeyword_7_0() { return cOROrKeyword_7_0; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_8() { return cADDEnumLiteralDeclaration_8; }

		//"+"
		public Keyword getADDPlusSignKeyword_8_0() { return cADDPlusSignKeyword_8_0; }

		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_9() { return cSUBEnumLiteralDeclaration_9; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_9_0() { return cSUBHyphenMinusKeyword_9_0; }

		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_10() { return cMULTEnumLiteralDeclaration_10; }

		//"*"
		public Keyword getMULTAsteriskKeyword_10_0() { return cMULTAsteriskKeyword_10_0; }

		//DIV="div"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_11() { return cDIVEnumLiteralDeclaration_11; }

		//"div"
		public Keyword getDIVDivKeyword_11_0() { return cDIVDivKeyword_11_0; }

		//MOD="mod"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_12() { return cMODEnumLiteralDeclaration_12; }

		//"mod"
		public Keyword getMODModKeyword_12_0() { return cMODModKeyword_12_0; }

		//VAL="?"
		public EnumLiteralDeclaration getVALEnumLiteralDeclaration_13() { return cVALEnumLiteralDeclaration_13; }

		//"?"
		public Keyword getVALQuestionMarkKeyword_13_0() { return cVALQuestionMarkKeyword_13_0; }

		//PRE="pre"
		public EnumLiteralDeclaration getPREEnumLiteralDeclaration_14() { return cPREEnumLiteralDeclaration_14; }

		//"pre"
		public Keyword getPREPreKeyword_14_0() { return cPREPreKeyword_14_0; }
	}

	public class ValOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValOperator");
		private final EnumLiteralDeclaration cVALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVALQuestionMarkKeyword_0 = (Keyword)cVALEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValOperator returns synccharts::OperatorType:
		//  VAL="?";
		public EnumRule getRule() { return rule; }

		//VAL="?"
		public EnumLiteralDeclaration getVALEnumLiteralDeclaration() { return cVALEnumLiteralDeclaration; }

		//"?"
		public Keyword getVALQuestionMarkKeyword_0() { return cVALQuestionMarkKeyword_0; }
	}

	public class CompareOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum CompareOperator returns synccharts::OperatorType:
		//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=";
		public EnumRule getRule() { return rule; }

		//EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }

		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }

		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }
	}

	public class NotOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NotOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTNotKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum NotOperator returns synccharts::OperatorType:
		//  NOT="not";
		public EnumRule getRule() { return rule; }

		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }

		//"not"
		public Keyword getNOTNotKeyword_0() { return cNOTNotKeyword_0; }
	}

	public class OperatorOrElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorOr");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum OperatorOr returns synccharts::OperatorType:
		//  OR="or";
		public EnumRule getRule() { return rule; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }

		//"or"
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}

	public class OperatorAndElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorAnd");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum OperatorAnd returns synccharts::OperatorType:
		//  AND="and";
		public EnumRule getRule() { return rule; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }

		//"and"
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}
	
	private ActionElements pAction;
	private EffectElements pEffect;
	private EmissionElements pEmission;
	private AssignmentElements pAssignment;
	private SignalReferenceElements pSignalReference;
	private VariableReferenceElements pVariableReference;
	private IntValueElements pIntValue;
	private FloatValueElements pFloatValue;
	private BooleanValueElements pBooleanValue;
	private ValueElements pValue;
	private TerminalRule tFloat;
	private TerminalRule tBoolean;
	private HostCodeElements pHostCode;
	private ValOperationElements pValOperation;
	private ValueExpressionElements pValueExpression;
	private CompareOperationElements pCompareOperation;
	private NotOperationElements pNotOperation;
	private NotOrNormalExpressionElements pNotOrNormalExpression;
	private AndOperationElements pAndOperation;
	private OrOperationElements pOrOperation;
	private BooleanExpressionElements pBooleanExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private OperatorTypeElements unknownRuleOperatorType;
	private ValOperatorElements unknownRuleValOperator;
	private CompareOperatorElements unknownRuleCompareOperator;
	private NotOperatorElements unknownRuleNotOperator;
	private OperatorOrElements unknownRuleOperatorOr;
	private OperatorAndElements unknownRuleOperatorAnd;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransitionLabelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Action returns synccharts::Action:
	//  isImmediate?="#" delay=INT? trigger=BooleanExpression? ("/" effects+=Effect*)?; 
	////import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts
	////import "synccharts" as synchcharts
	//
	////dummy rule to test the language in an editor
	////Model : 
	////	((signals+=Signal | variables+=Variable))* (actions+=Action ";")*;
	//
	//    
	//	//(isImmediate?='#' | delay=INT)? (trigger=PrimaryExpression)? ("/" (effects+=Effect)*)?;
	//	         // (";" parentStateEntryAction=[synccharts::State]? ";" parentStateExitAction=[synccharts::State]? ";" parentStateInnerAction=[synccharts::State]?)? ; 		
	//
	//// dummy rule that will never be parsed. However, the serializer might get
	//// a transition instead of an action and needs to know how to serialize it
	//// here we define, that the textual representation will only hold the elements
	//// of an action. This is only meaningful for the graphical editor. If you need
	//// a proper textual representation of a Transition, you should override this 
	//// rule!
	////Transition returns synccharts::Transition:
	////	Action;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//  Emission|Assignment|HostCode; // (";" parentStateEntryAction=[synccharts::State]? ";" parentStateExitAction=[synccharts::State]? ";" parentStateInnerAction=[synccharts::State]?)? ; 		
	//
	//// dummy rule that will never be parsed. However, the serializer might get
	//// a transition instead of an action and needs to know how to serialize it
	//// here we define, that the textual representation will only hold the elements
	//// of an action. This is only meaningful for the graphical editor. If you need
	//// a proper textual representation of a Transition, you should override this 
	//// rule!
	////Transition returns synccharts::Transition:
	////	Action;
	public EffectElements getEffectAccess() {
		return (pEffect != null) ? pEffect : (pEffect = new EffectElements());
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//  signal=[synccharts::Signal] ("(" newValue=PrimaryExpression ")")?;
	public EmissionElements getEmissionAccess() {
		return (pEmission != null) ? pEmission : (pEmission = new EmissionElements());
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//  variable=[synccharts::Variable] ":=" expression=PrimaryExpression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//SignalReference returns synccharts::SignalReference:
	//  signal=[synccharts::Signal]; 
	//
	//    
	//	    
	//
	////SignalReference :
	////	signal = [Signal];
	public SignalReferenceElements getSignalReferenceAccess() {
		return (pSignalReference != null) ? pSignalReference : (pSignalReference = new SignalReferenceElements());
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}

	//VariableReference returns synccharts::VariableReference:
	//  variable=[synccharts::Variable]; 
	//
	////SignalReference :
	////	signal = [Signal];
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//IntValue:
	//  value=INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//  value=Float;
	public FloatValueElements getFloatValueAccess() {
		return (pFloatValue != null) ? pFloatValue : (pFloatValue = new FloatValueElements());
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//  value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Value:
	//  IntValue|FloatValue|BooleanValue; 
	//
	//	        
	//
	////Signal:
	////	"signal" name = ID;
	//	
	////Variable:
	////	"variable" name = ID;
	//
	//// make sure the Float rule does not shadow the built-in INT rule
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//terminal Float returns ecore::EDouble:
	//  (INT "." INT | INT ("." INT)? ("e" | "E") ("-" | "+")? INT) "f"? | INT "f"; 
	//
	////Signal:
	////	"signal" name = ID;
	//	
	////Variable:
	////	"variable" name = ID;
	//
	//// make sure the Float rule does not shadow the built-in INT rule
	public TerminalRule getFloatRule() {
		return (tFloat != null) ? tFloat : (tFloat = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Float"));
	} 

	//terminal Boolean returns ecore::EBoolean:
	//  "true" | "false";
	public TerminalRule getBooleanRule() {
		return (tBoolean != null) ? tBoolean : (tBoolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean"));
	} 

	//HostCode returns synccharts::HostCode:
	//  code=STRING; 
	//
	//    
	//	//"'"code=STRING"'";
	//	 //("(" type=ID ")")?
	public HostCodeElements getHostCodeAccess() {
		return (pHostCode != null) ? pHostCode : (pHostCode = new HostCodeElements());
	}
	
	public ParserRule getHostCodeRule() {
		return getHostCodeAccess().getRule();
	}

	//ValOperation returns synccharts::ComplexExpression:
	//  operator=ValOperator subExpressions+=SignalReference;
	public ValOperationElements getValOperationAccess() {
		return (pValOperation != null) ? pValOperation : (pValOperation = new ValOperationElements());
	}
	
	public ParserRule getValOperationRule() {
		return getValOperationAccess().getRule();
	}

	//ValueExpression returns synccharts::Expression:
	//  IntValue|FloatValue|ValOperation|VariableReference;
	public ValueExpressionElements getValueExpressionAccess() {
		return (pValueExpression != null) ? pValueExpression : (pValueExpression = new ValueExpressionElements());
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//CompareOperation returns synccharts::Expression:
	//  ValueExpression ({Operation.subExpressions+=current} operator=CompareOperator
	//  subExpressions+=ValueExpression);
	public CompareOperationElements getCompareOperationAccess() {
		return (pCompareOperation != null) ? pCompareOperation : (pCompareOperation = new CompareOperationElements());
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//NotOperation returns synccharts::ComplexExpression:
	//  operator=NotOperator subExpressions+=BooleanExpression;
	public NotOperationElements getNotOperationAccess() {
		return (pNotOperation != null) ? pNotOperation : (pNotOperation = new NotOperationElements());
	}
	
	public ParserRule getNotOperationRule() {
		return getNotOperationAccess().getRule();
	}

	//NotOrNormalExpression returns synccharts::Expression:
	//  NotOperation|BooleanExpression;
	public NotOrNormalExpressionElements getNotOrNormalExpressionAccess() {
		return (pNotOrNormalExpression != null) ? pNotOrNormalExpression : (pNotOrNormalExpression = new NotOrNormalExpressionElements());
	}
	
	public ParserRule getNotOrNormalExpressionRule() {
		return getNotOrNormalExpressionAccess().getRule();
	}

	//AndOperation returns synccharts::Expression:
	//  NotOrNormalExpression ({Operation.subExpression+=current} operator=OperatorAnd
	//  subExpression+=NotOrNormalExpression)*;
	public AndOperationElements getAndOperationAccess() {
		return (pAndOperation != null) ? pAndOperation : (pAndOperation = new AndOperationElements());
	}
	
	public ParserRule getAndOperationRule() {
		return getAndOperationAccess().getRule();
	}

	//OrOperation returns synccharts::Expression:
	//  AndOperation ({Operation.subExpressions+=current} operator=OperatorOr
	//  subExpressions+=AndOperation)*; 
	//
	//    
	//	      
	//
	//// TODO: get rid of parentheses
	public OrOperationElements getOrOperationAccess() {
		return (pOrOperation != null) ? pOrOperation : (pOrOperation = new OrOperationElements());
	}
	
	public ParserRule getOrOperationRule() {
		return getOrOperationAccess().getRule();
	}

	//BooleanExpression returns synccharts::Expression:
	//  BooleanValue|SignalReference|CompareOperation|"(" OrOperation ")"; 
	//
	//// TODO: get rid of parentheses
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//PrimaryExpression returns synccharts::Expression:
	//  BooleanExpression; 
	//
	//    
	//	//ValueExpression | BooleanExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//enum OperatorType returns synccharts::OperatorType:
	//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | AND="and" | OR="or" | ADD="+" | SUB=
	//  "-" | MULT="*" | DIV="div" | MOD="mod" | VAL="?" | PRE="pre";
	public OperatorTypeElements getOperatorTypeAccess() {
		return (unknownRuleOperatorType != null) ? unknownRuleOperatorType : (unknownRuleOperatorType = new OperatorTypeElements());
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}

	//enum ValOperator returns synccharts::OperatorType:
	//  VAL="?";
	public ValOperatorElements getValOperatorAccess() {
		return (unknownRuleValOperator != null) ? unknownRuleValOperator : (unknownRuleValOperator = new ValOperatorElements());
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum CompareOperator returns synccharts::OperatorType:
	//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return (unknownRuleCompareOperator != null) ? unknownRuleCompareOperator : (unknownRuleCompareOperator = new CompareOperatorElements());
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum NotOperator returns synccharts::OperatorType:
	//  NOT="not";
	public NotOperatorElements getNotOperatorAccess() {
		return (unknownRuleNotOperator != null) ? unknownRuleNotOperator : (unknownRuleNotOperator = new NotOperatorElements());
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum OperatorOr returns synccharts::OperatorType:
	//  OR="or";
	public OperatorOrElements getOperatorOrAccess() {
		return (unknownRuleOperatorOr != null) ? unknownRuleOperatorOr : (unknownRuleOperatorOr = new OperatorOrElements());
	}
	
	public EnumRule getOperatorOrRule() {
		return getOperatorOrAccess().getRule();
	}

	//enum OperatorAnd returns synccharts::OperatorType:
	//  AND="and";
	public OperatorAndElements getOperatorAndAccess() {
		return (unknownRuleOperatorAnd != null) ? unknownRuleOperatorAnd : (unknownRuleOperatorAnd = new OperatorAndElements());
	}
	
	public EnumRule getOperatorAndRule() {
		return getOperatorAndAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
