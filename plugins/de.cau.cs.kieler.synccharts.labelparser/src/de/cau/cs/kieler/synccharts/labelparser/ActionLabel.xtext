//grammar de.cau.cs.kieler.synccharts.TransitionLabel with org.eclipse.xtext.common.Terminals
grammar de.cau.cs.kieler.synccharts.labelparser.ActionLabel with org.eclipse.xtext.common.Terminals
//// we do not need to generate the transitionlabel ecore model, because we
//// only reuse classes of the official synccharts metamodel
//generate transitionlabel "http://kieler.cs.cau.de/synccharts/actionlabel"


import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://kieler.cs.cau.de/synccharts/0.2.1" as syncchart
//import "http://kieler.cs.cau.de/expressions" as expressions
import "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.ecore" as synccharts
import "platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.ecore" as expressions


//==============================================================================
// Basic Actions
//==============================================================================

Action returns synccharts::Action:
    {synccharts::Action}
	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" (effects+=Effect (',')? )*)?; 		

Effect returns synccharts::Effect: 
	Emission | Assignment | HostCode;
		
Emission returns synccharts::Emission:
	signal=[expressions::Signal]	
	(("(" newValue=ValueExpression ")")
   |("(" newValue=BooleanExpression ")") )?;

Assignment returns synccharts::Assignment:
	variable=[expressions::Variable] ":=" 
	 ( expression=ValueExpression
	 | expression=BooleanExpression);

SignalReference returns expressions::SignalReference:
	signal = [expressions::Signal] 	
	(("(" (subExpressions+=Expression (',')?)* ")"))?;

VariableReference returns expressions::VariableReference:
	variable = [expressions::Variable]
	(("(" (subExpressions+=Expression (',')?)* ")"))?;

Signal returns expressions::Signal:
	name=ID;
	
Variable returns expressions::Variable:
	name=ID;
	
//==============================================================================
// Values
//==============================================================================

// redefine INT terminal to allow negative numbers
terminal INT returns ecore::EInt:
 '-'?('0'..'9')+;

IntValue returns expressions::IntValue: 
	value=INT;
FloatValue returns expressions::FloatValue:
    value=Float ; 
BooleanValue returns expressions::BooleanValue :
    value=Boolean;
Value returns expressions::Value:
	IntValue | FloatValue | BooleanValue;

// make sure the Float rule does not shadow the INT rule
terminal Float returns ecore::EFloatObject : ((INT"."INT | INT("."INT)?("e"|"E")("+")?INT))"f"? | INT"f";
terminal Boolean returns ecore::EBooleanObject : "true" | "false";

//==============================================================================
// Arithmetic Expressions
//==============================================================================

// Example: ?A	
ValOperation returns expressions::OperatorExpression:
	operator=ValOperator subExpressions+=SignalReference;

// everything that evaluates to a primitive number value
ValueExpression returns expressions::Expression:
	PlusOperation;

// Example: 42, 42.2, ?A, var1, (1+2*3)
ParanthesedValueExpression returns expressions::Expression:
    IntValue | FloatValue | ValOperation | VariableReference | HostCode | '('PlusOperation')' | '('DivOperation')';

// Example: 1 + 2, varA - ?B
PlusOperation returns expressions::Expression:
	MultOrDivOperation ({expressions::OperatorExpression.subExpressions+=current} operator=PlusOperator subExpressions+=MultOrDivOperation)*;

MultOrDivOperation returns expressions::Expression:
	MultOperation | '('DivOperation')';

// Example: 2 * 4, varA mod ?B
MultOperation returns expressions::Expression:
	PreOrNormalValueExpression ({expressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=PreOrNormalValueExpression)*;

// Example: (2 / 4)
// note: division has to have always parantheses because the '/' sign is also used for trigger/effect delimiter
DivOperation returns expressions::Expression:
	PreOrNormalValueExpression ({expressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=PreOrNormalValueExpression)*;

// Example: pre (? A)
PreArithmOperation returns expressions::OperatorExpression:
	operator=UnaryParanthesedOperator '('subExpressions+=ValOperation')';
	 
PreOrNormalValueExpression returns expressions::Expression:
	PreArithmOperation | ParanthesedValueExpression;

//==============================================================================
// Boolean Expressions
//==============================================================================

// Example: 42 <= ?A
CompareOperation returns expressions::Expression:
	ValueExpression ({expressions::OperatorExpression.subExpressions+=current} operator=CompareOperator subExpressions+=ValueExpression);  	

// Example: not A, not false, not (A or B)
// at the latter we need the parans to indicate the right binding
UnaryOperation returns expressions::OperatorExpression:
	operator=UnaryOperator subExpressions+=(ParanthesedBooleanExpression | UnaryParanthesedOperation);

UnaryParanthesedOperation returns expressions::OperatorExpression:
    operator=UnaryParanthesedOperator '('subExpressions+=BooleanExpression ')';

// Example: either negated or normal expression (with parantheses) 
UnaryOrNormalExpression returns expressions::Expression:
	UnaryOperation | UnaryParanthesedOperation | ParanthesedBooleanExpression;

// Example: A and B, not C and 42 <= ?D
AndOperation returns expressions::Expression:
	UnaryOrNormalExpression ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorAnd subExpressions+=UnaryOrNormalExpression)*;

// Example: A or B, C and B or D and not E 
OrOperation returns expressions::Expression:
	AndOperation ({expressions::OperatorExpression.subExpressions+=current} operator=OperatorOr subExpressions+=AndOperation)*;

// Example: true, A, 42>var1, (A or B), (not D and C or ?E = 42)
// note that the order of CompareOperation and SignalReference is important. This might be an Xtext bug...
ParanthesedBooleanExpression returns expressions::Expression:
    BooleanValue | CompareOperation | SignalReference | ValOperation | HostCode | '('OrOperation')' ;

// Example: not D and C or ?E = 42 or not (A and (B or C))
BooleanExpression returns expressions::Expression:
	OrOperation;

//==============================================================================
// Operators
//==============================================================================
	
enum OperatorType returns expressions::OperatorType:
	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not"| NE="<>" | AND="and" | OR="or" | ADD="+" | SUB="-" | MULT="*" | DIV="/" | MOD="mod" | VAL="?" | PRE="pre";

enum ValOperator returns expressions::OperatorType:
	VAL="?";

enum CompareOperator returns expressions::OperatorType:
	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";

// not A	
enum UnaryOperator returns expressions::OperatorType:
	NOT="not";

// pre(A)
enum UnaryParanthesedOperator returns expressions::OperatorType:
	PRE="pre";

enum OperatorOr returns expressions::OperatorType:
	OR="or";

enum OperatorAnd returns expressions::OperatorType:
	AND="and";

enum OperatorPre returns expressions::OperatorType:
    PRE="pre";

enum PlusOperator returns expressions::OperatorType:
	ADD="+" | SUB="-";
	
enum MultOperator returns expressions::OperatorType:	
	MULT="*" | MOD="mod";

enum DivOperator returns expressions::OperatorType:	
	DIV="/";


//==============================================================================
// Misc
//==============================================================================
	
HostCode returns expressions::TextualCode:
	//"'"code=STRING"'";
	code=STRING ("(" type=ID ")")?; 	
	
Expression returns expressions::Expression:
 	ValueExpression | BooleanExpression
;