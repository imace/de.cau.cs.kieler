module de.cau.cs.kieler.synccharts.interfacedeclparser.GenerateInterfaceDecl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/cau/cs/kieler/synccharts/labelparser/ActionLabel.xtext"
var file.extensions = "action"
var projectName = "de.cau.cs.kieler.synccharts.labelparser"
var projectNameUI = "de.cau.cs.kieler.synccharts.labelparser.ui"
var runtimeProject = "../${projectName}" 
var runtimeProjectUI = "../${projectNameUI}"

Workflow {
	 bean = StandaloneSetup { 
		platformUri = "${runtimeProject}/.."
		registerGeneratedEPackage = "de.cau.cs.kieler.synccharts.SyncchartsPackage"
		registerGeneratedEPackage = "de.cau.cs.kieler.core.expressions.ExpressionsPackage"
		registerGeneratedEPackage = "de.cau.cs.kieler.core.annotations.AnnotationsPackage" 
	}
	
	component = DirectoryCleaner {
		directory="${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory="${runtimeProject}.ui/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = runtimeProjectUI
		projectNameRt = projectName
		projectNameUi = projectNameUI
		
		language = {
			uri=grammarURI
			fileExtensions=file.extensions
			fragment = grammarAccess.GrammarAccessFragment {}
		/*	fragment = ecore.EcoreGeneratorFragment {
				genModels = "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.genmodel"
				genModels = "platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.genmodel"
				genModels = "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.genmodel"
			}*/
			
			fragment = ecore.EcoreGeneratorFragment {
			   referencedGenModels = "platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.genmodel, platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.genmodel, platform:/resource/de.cau.cs.kieler.core.expressions/model/expressions.genmodel"
			}
			
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}	
			//fragment = AntlrDelegatingFragment {}
			fragment = parser.antlr.XtextAntlrGeneratorFragment{
				options = {
					backtrack = true
					memoize = false
				}
			}
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			//fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = scoping.ImportURIScopingFragment {}
			//fragment = exporting.QualifiedNamesFragment{}
			fragment = formatting.FormatterFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment{
				options = {
					backtrack = true
					memoize = false
				}
			}
/*			fragment = DelegatingGeneratorFragment {
				delegate="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"
				message="You are generating without ANTLR. It is highly recommended to download and use the plugin 'de.itemis.xtext.antlr' \n\t using the update site http://download.itemis.com/updates/."
			}	
*/			fragment = builder.BuilderIntegrationFragment {}
		}
	}
}