<workflow>
	<property file="de/cau/cs/kieler/synccharts/GenerateActionLabel.properties"/>
	
	<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup">
		<registerGeneratedEPackage value="de.cau.cs.kieler.synccharts.SyncchartsPackage"/>
		<platformUri value="${runtimeProject}/.."/>
	</bean>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
		 	
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"
					genModels="platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.genmodel"/>
			

			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
		 	<fragment class="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment">
          		<options backtrack="true" memoize="false" k="-1"/>  
     		</fragment> 
			<!-- the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates -->
			<!--<fragment class="org.eclipse.xtext.generator.AntlrDelegatingFragment" /> -->
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
			
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.JavaScopingFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>
			<fragment class="org.eclipse.xtext.ui.generator.outline.OutlineNodeAdapterFactoryFragment"/>

			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>

			<!-- the following fragment tries to use the Antlr based content assist fragment which can be downloaded from http://www.itemis.com 
			     and will be ignored if it's not available. -->
			<fragment class="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment">
				<options backtrack="true" memoize="false" k="-1"/>
			</fragment>
			
		</language>
	</component>
</workflow>
