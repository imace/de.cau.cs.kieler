/*
* generated by Xtext
*/
package de.cau.cs.kieler.synccharts.dsl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.cau.cs.kieler.synccharts.dsl.services.KitsGrammarAccess;

import com.google.inject.Inject;

public class KitsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private KitsGrammarAccess grammarAccess;
		
	public KitsGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Group(this, this, 0, inst);
			case 1: return new State_Group(this, this, 1, inst);
			case 2: return new Action_Alternatives(this, this, 2, inst);
			case 3: return new ValuedObject_Alternatives(this, this, 3, inst);
			case 4: return new Variable_Group(this, this, 4, inst);
			case 5: return new Signal_Group(this, this, 5, inst);
			case 6: return new Transition_Group(this, this, 6, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Region ****************
 *
 * Region returns sync::Region:
 *   ("region" id=ID) innerStates+=State; 
 * 
 *       
 * 	  
 * 	
 * 		 //variables+=Variable
 * 	 //|	//signals+=Signal |
 * 		   //[sync::State]
 *
 **/

// ("region" id=ID) innerStates+=State 
// 	  
// 	
// 		 //variables+=Variable
// 	 //|	//signals+=Signal |
// 		   //[sync::State]
protected class Region_Group extends GroupToken {
	
	public Region_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_InnerStatesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "region" id=ID
protected class Region_Group_0 extends GroupToken {
	
	public Region_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegionAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_IdAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "region"
protected class Region_RegionKeyword_0_0 extends KeywordToken  {
	
	public Region_RegionKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRegionAccess().getRegionKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// id=ID
protected class Region_IdAssignment_0_1 extends AssignmentToken  {
	
	public Region_IdAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getIdAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_RegionKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegionAccess().getIdIDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// innerStates+=State 	 //variables+=Variable
// 	 //|	//signals+=Signal |
// 		   //[sync::State]
protected class Region_InnerStatesAssignment_1 extends AssignmentToken  {
	
	public Region_InnerStatesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegionAccess().getInnerStatesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("innerStates",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("innerStates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRegionAccess().getInnerStatesStateParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Region_Group_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Region ****************/


/************ begin Rule State ****************
 *
 * State returns sync::State:
 *   id=ID ((isInitial?="init" isFinal?="final") type=StateType "state" id=FullStateID|(
 *   isInitial?="init" isFinal?="final") type=StateType "state"|(isInitial?="init"
 *   isFinal?="final") type=StateType id=FullStateID|(isInitial?="init" isFinal?="final"
 *   ) "state" id=FullStateID|(isInitial?="init" isFinal?="final") type=StateType|(
 *   isInitial?="init" isFinal?="final") "state"|(isInitial?="init" isFinal?="final") id=
 *   FullStateID|isInitial?="init" isFinal?="final"|(isFinal?="final" isInitial?="init"
 *   ) type=StateType "state" id=FullStateID|(isFinal?="final" isInitial?="init") type=
 *   StateType "state"|(isFinal?="final" isInitial?="init") type=StateType id=FullStateID
 *   |(isFinal?="final" isInitial?="init") "state" id=FullStateID|(isFinal?="final"
 *   isInitial?="init") type=StateType|(isFinal?="final" isInitial?="init") "state"|(
 *   isFinal?="final" isInitial?="init") id=FullStateID|isFinal?="final" isInitial?=
 *   "init"|isInitial?="init" type=StateType "state" id=FullStateID|isInitial?="init"
 *   type=StateType "state"|isInitial?="init" type=StateType id=FullStateID|isInitial?=
 *   "init" "state" id=FullStateID|isInitial?="init" type=StateType|isInitial?="init"
 *   "state"|isInitial?="init" id=FullStateID|isInitial?="init"|isFinal?="final" type=
 *   StateType "state" id=FullStateID|isFinal?="final" type=StateType "state"|isFinal?=
 *   "final" type=StateType id=FullStateID|isFinal?="final" "state" id=FullStateID|
 *   isFinal?="final" type=StateType|isFinal?="final" "state" id=FullStateID|isFinal?=
 *   "final" id=FullStateID|isFinal?="final"|type=StateType "state" id=FullStateID|type=
 *   StateType "state"|type=StateType id=FullStateID|type=StateType|"state" id=
 *   FullStateID|"state"|id=FullStateID) label=STRING? bodyText=STRING? ("{" ("onentry"
 *   entryActions+=Action|"oninner" innerActions+=Action|"onexit" exitActions+=Action|
 *   "suspension" suspensionTrigger=Action|signals+=Signal|regions+=Region ("||" regions
 *   +=Region)*)+ "}")? outgoingTransitions+=Transition*; 
 *     
 * 	 
 * 	         
 *   	      
 *   	      
 *   	      
 *   	    
 *   	    
 *   	    
 *   	  
 *   	
 *   	        
 *   	      
 *   	      
 *   	      
 *   	    
 *   	    
 *   	    
 *   	  
 *   	
 *   	        
 *   	      
 *   	        
 *   	      
 *   	     
 *   	    
 *   	    
 *   	  
 *   	
 *   	         
 *   	        
 *   	       
 *   	       
 *   	     
 *   	       
 *   	     
 *   	  
 *   	
 *   	      
 *   	    
 *   	    
 *   	  
 *   	
 *   	    
 *   	  
 *   		
 *   	  
 *   
 * 
 *     //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
 *     
 *   
 *     
 * 	    	 	    
 * 	  		 	    
 * 	  		         
 * 	  		 	     // kein effect, kein delay, kein immediate
 *
 **/

// id=ID ((isInitial?="init" isFinal?="final") type=StateType "state" id=FullStateID|(
// isInitial?="init" isFinal?="final") type=StateType "state"|(isInitial?="init"
// isFinal?="final") type=StateType id=FullStateID|(isInitial?="init" isFinal?="final"
// ) "state" id=FullStateID|(isInitial?="init" isFinal?="final") type=StateType|(
// isInitial?="init" isFinal?="final") "state"|(isInitial?="init" isFinal?="final") id=
// FullStateID|isInitial?="init" isFinal?="final"|(isFinal?="final" isInitial?="init"
// ) type=StateType "state" id=FullStateID|(isFinal?="final" isInitial?="init") type=
// StateType "state"|(isFinal?="final" isInitial?="init") type=StateType id=FullStateID
// |(isFinal?="final" isInitial?="init") "state" id=FullStateID|(isFinal?="final"
// isInitial?="init") type=StateType|(isFinal?="final" isInitial?="init") "state"|(
// isFinal?="final" isInitial?="init") id=FullStateID|isFinal?="final" isInitial?=
// "init"|isInitial?="init" type=StateType "state" id=FullStateID|isInitial?="init"
// type=StateType "state"|isInitial?="init" type=StateType id=FullStateID|isInitial?=
// "init" "state" id=FullStateID|isInitial?="init" type=StateType|isInitial?="init"
// "state"|isInitial?="init" id=FullStateID|isInitial?="init"|isFinal?="final" type=
// StateType "state" id=FullStateID|isFinal?="final" type=StateType "state"|isFinal?=
// "final" type=StateType id=FullStateID|isFinal?="final" "state" id=FullStateID|
// isFinal?="final" type=StateType|isFinal?="final" "state" id=FullStateID|isFinal?=
// "final" id=FullStateID|isFinal?="final"|type=StateType "state" id=FullStateID|type=
// StateType "state"|type=StateType id=FullStateID|type=StateType|"state" id=
// FullStateID|"state"|id=FullStateID) label=STRING? bodyText=STRING? ("{" ("onentry"
// entryActions+=Action|"oninner" innerActions+=Action|"onexit" exitActions+=Action|
// "suspension" suspensionTrigger=Action|signals+=Signal|regions+=Region ("||" regions
// +=Region)*)+ "}")? outgoingTransitions+=Transition* 
// 	 
// 	         
//   	      
//   	      
//   	      
//   	    
//   	    
//   	    
//   	  
//   	
//   	        
//   	      
//   	      
//   	      
//   	    
//   	    
//   	    
//   	  
//   	
//   	        
//   	      
//   	        
//   	      
//   	     
//   	    
//   	    
//   	  
//   	
//   	         
//   	        
//   	       
//   	       
//   	     
//   	       
//   	     
//   	  
//   	
//   	      
//   	    
//   	    
//   	  
//   	
//   	    
//   	  
//   		
//   	  
//   
// 
//     //	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
//     
//   
//     
// 	    	 	    
// 	  		 	    
// 	  		         
// 	  		 	     // kein effect, kein delay, kein immediate
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_OutgoingTransitionsAssignment_5(parent, this, 0, inst);
			case 1: return new State_Group_4(parent, this, 1, inst);
			case 2: return new State_BodyTextAssignment_3(parent, this, 2, inst);
			case 3: return new State_LabelAssignment_2(parent, this, 3, inst);
			case 4: return new State_Alternatives_1(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// id=ID
protected class State_IdAssignment_0 extends AssignmentToken  {
	
	public State_IdAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getIdIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (isInitial?="init" isFinal?="final") type=StateType "state" id=FullStateID|(
// isInitial?="init" isFinal?="final") type=StateType "state"|(isInitial?="init"
// isFinal?="final") type=StateType id=FullStateID|(isInitial?="init" isFinal?="final"
// ) "state" id=FullStateID|(isInitial?="init" isFinal?="final") type=StateType|(
// isInitial?="init" isFinal?="final") "state"|(isInitial?="init" isFinal?="final") id=
// FullStateID|isInitial?="init" isFinal?="final"|(isFinal?="final" isInitial?="init"
// ) type=StateType "state" id=FullStateID|(isFinal?="final" isInitial?="init") type=
// StateType "state"|(isFinal?="final" isInitial?="init") type=StateType id=FullStateID
// |(isFinal?="final" isInitial?="init") "state" id=FullStateID|(isFinal?="final"
// isInitial?="init") type=StateType|(isFinal?="final" isInitial?="init") "state"|(
// isFinal?="final" isInitial?="init") id=FullStateID|isFinal?="final" isInitial?=
// "init"|isInitial?="init" type=StateType "state" id=FullStateID|isInitial?="init"
// type=StateType "state"|isInitial?="init" type=StateType id=FullStateID|isInitial?=
// "init" "state" id=FullStateID|isInitial?="init" type=StateType|isInitial?="init"
// "state"|isInitial?="init" id=FullStateID|isInitial?="init"|isFinal?="final" type=
// StateType "state" id=FullStateID|isFinal?="final" type=StateType "state"|isFinal?=
// "final" type=StateType id=FullStateID|isFinal?="final" "state" id=FullStateID|
// isFinal?="final" type=StateType|isFinal?="final" "state" id=FullStateID|isFinal?=
// "final" id=FullStateID|isFinal?="final"|type=StateType "state" id=FullStateID|type=
// StateType "state"|type=StateType id=FullStateID|type=StateType|"state" id=
// FullStateID|"state"|id=FullStateID
protected class State_Alternatives_1 extends AlternativesToken {

	public State_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_0(parent, this, 0, inst);
			case 1: return new State_Group_1_1(parent, this, 1, inst);
			case 2: return new State_Group_1_2(parent, this, 2, inst);
			case 3: return new State_Group_1_3(parent, this, 3, inst);
			case 4: return new State_Group_1_4(parent, this, 4, inst);
			case 5: return new State_Group_1_5(parent, this, 5, inst);
			case 6: return new State_Group_1_6(parent, this, 6, inst);
			case 7: return new State_Group_1_7(parent, this, 7, inst);
			case 8: return new State_Group_1_8(parent, this, 8, inst);
			case 9: return new State_Group_1_9(parent, this, 9, inst);
			case 10: return new State_Group_1_10(parent, this, 10, inst);
			case 11: return new State_Group_1_11(parent, this, 11, inst);
			case 12: return new State_Group_1_12(parent, this, 12, inst);
			case 13: return new State_Group_1_13(parent, this, 13, inst);
			case 14: return new State_Group_1_14(parent, this, 14, inst);
			case 15: return new State_Group_1_15(parent, this, 15, inst);
			case 16: return new State_Group_1_16(parent, this, 16, inst);
			case 17: return new State_Group_1_17(parent, this, 17, inst);
			case 18: return new State_Group_1_18(parent, this, 18, inst);
			case 19: return new State_Group_1_19(parent, this, 19, inst);
			case 20: return new State_Group_1_20(parent, this, 20, inst);
			case 21: return new State_Group_1_21(parent, this, 21, inst);
			case 22: return new State_Group_1_22(parent, this, 22, inst);
			case 23: return new State_IsInitialAssignment_1_23(parent, this, 23, inst);
			case 24: return new State_Group_1_24(parent, this, 24, inst);
			case 25: return new State_Group_1_25(parent, this, 25, inst);
			case 26: return new State_Group_1_26(parent, this, 26, inst);
			case 27: return new State_Group_1_27(parent, this, 27, inst);
			case 28: return new State_Group_1_28(parent, this, 28, inst);
			case 29: return new State_Group_1_29(parent, this, 29, inst);
			case 30: return new State_Group_1_30(parent, this, 30, inst);
			case 31: return new State_IsFinalAssignment_1_31(parent, this, 31, inst);
			case 32: return new State_Group_1_32(parent, this, 32, inst);
			case 33: return new State_Group_1_33(parent, this, 33, inst);
			case 34: return new State_Group_1_34(parent, this, 34, inst);
			case 35: return new State_TypeAssignment_1_35(parent, this, 35, inst);
			case 36: return new State_Group_1_36(parent, this, 36, inst);
			case 37: return new State_StateKeyword_1_37(parent, this, 37, inst);
			case 38: return new State_IdAssignment_1_38(parent, this, 38, inst);
			default: return null;
		}	
	}	
		
}

// (isInitial?="init" isFinal?="final") type=StateType "state" id=FullStateID
protected class State_Group_1_0 extends GroupToken {
	
	public State_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_0_0 extends GroupToken {
	
	public State_Group_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_0_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_0_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_0_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_0_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_0_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_0_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_0_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_0_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_0_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_0_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_0_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_0_2 extends KeywordToken  {
	
	public State_StateKeyword_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_0_3 extends AssignmentToken  {
	
	public State_IdAssignment_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_0_3_0();
			return obj;
		}
		return null;
	}

}


// (isInitial?="init" isFinal?="final") type=StateType "state"
protected class State_Group_1_1 extends GroupToken {
	
	public State_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_1_0 extends GroupToken {
	
	public State_Group_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_1_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_1_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_1_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_1_2 extends KeywordToken  {
	
	public State_StateKeyword_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (isInitial?="init" isFinal?="final") type=StateType id=FullStateID
protected class State_Group_1_2 extends GroupToken {
	
	public State_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_2_0 extends GroupToken {
	
	public State_Group_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_2_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_2_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_2_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_2_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_2_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}


// (isInitial?="init" isFinal?="final") "state" id=FullStateID
protected class State_Group_1_3 extends GroupToken {
	
	public State_Group_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_3_0 extends GroupToken {
	
	public State_Group_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_3_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_3_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_3_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_3_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_3_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_3_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_3_0_1_0();
			return obj;
		}
		return null;
	}

}


// "state"
protected class State_StateKeyword_1_3_1 extends KeywordToken  {
	
	public State_StateKeyword_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_3_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_3_2_0();
			return obj;
		}
		return null;
	}

}


// (isInitial?="init" isFinal?="final") type=StateType
protected class State_Group_1_4 extends GroupToken {
	
	public State_Group_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_4_0 extends GroupToken {
	
	public State_Group_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_4_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_4_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_4_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_4_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_4_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_4_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_4_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_4_1_0();
			return obj;
		}
		return null;
	}

}


// (isInitial?="init" isFinal?="final") "state"
protected class State_Group_1_5 extends GroupToken {
	
	public State_Group_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_5_0 extends GroupToken {
	
	public State_Group_1_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_5_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_5_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_5_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_5_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_5_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_5_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_5_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_5_0_1_0();
			return obj;
		}
		return null;
	}

}


// "state"
protected class State_StateKeyword_1_5_1 extends KeywordToken  {
	
	public State_StateKeyword_1_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (isInitial?="init" isFinal?="final") id=FullStateID
protected class State_Group_1_6 extends GroupToken {
	
	public State_Group_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init" isFinal?="final"
protected class State_Group_1_6_0 extends GroupToken {
	
	public State_Group_1_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_6_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_6_0_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_6_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_6_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_6_0_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_6_0_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_6_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_6_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_6_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_6_0_1_0();
			return obj;
		}
		return null;
	}

}


// id=FullStateID
protected class State_IdAssignment_1_6_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_6_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" isFinal?="final"
protected class State_Group_1_7 extends GroupToken {
	
	public State_Group_1_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_7_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_7_0_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final"
protected class State_IsFinalAssignment_1_7_1 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_7_1_0();
			return obj;
		}
		return null;
	}

}


// (isFinal?="final" isInitial?="init") type=StateType "state" id=FullStateID
protected class State_Group_1_8 extends GroupToken {
	
	public State_Group_1_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_8_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_8_0 extends GroupToken {
	
	public State_Group_1_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_8_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_8_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_8_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_8_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_8_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_8_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_8_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_8_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_8_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_8_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_8_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_8_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_8_2 extends KeywordToken  {
	
	public State_StateKeyword_1_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_8_3 extends AssignmentToken  {
	
	public State_IdAssignment_1_8_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_8_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_8_3_0();
			return obj;
		}
		return null;
	}

}


// (isFinal?="final" isInitial?="init") type=StateType "state"
protected class State_Group_1_9 extends GroupToken {
	
	public State_Group_1_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_9_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_9_0 extends GroupToken {
	
	public State_Group_1_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_9_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_9_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_9_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_9_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_9_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_9_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_9_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_9_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_9_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_9_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_9_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_9_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_9_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_9_2 extends KeywordToken  {
	
	public State_StateKeyword_1_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_9_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (isFinal?="final" isInitial?="init") type=StateType id=FullStateID
protected class State_Group_1_10 extends GroupToken {
	
	public State_Group_1_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_10_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_10_0 extends GroupToken {
	
	public State_Group_1_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_10_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_10_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_10_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_10_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_10_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_10_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_10_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_10_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_10_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_10_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_10_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_10_1_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_10_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_10_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_10_2_0();
			return obj;
		}
		return null;
	}

}


// (isFinal?="final" isInitial?="init") "state" id=FullStateID
protected class State_Group_1_11 extends GroupToken {
	
	public State_Group_1_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_11_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_11_0 extends GroupToken {
	
	public State_Group_1_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_11_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_11_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_11_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_11_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_11_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_11_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_11_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_11_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_11_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_11_0_1_0();
			return obj;
		}
		return null;
	}

}


// "state"
protected class State_StateKeyword_1_11_1 extends KeywordToken  {
	
	public State_StateKeyword_1_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_11_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_11_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_11_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_11_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_11_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_11_2_0();
			return obj;
		}
		return null;
	}

}


// (isFinal?="final" isInitial?="init") type=StateType
protected class State_Group_1_12 extends GroupToken {
	
	public State_Group_1_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_12_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_12_0 extends GroupToken {
	
	public State_Group_1_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_12_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_12_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_12_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_12_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_12_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_12_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_12_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_12_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_12_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_12_0_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_12_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_12_1_0();
			return obj;
		}
		return null;
	}

}


// (isFinal?="final" isInitial?="init") "state"
protected class State_Group_1_13 extends GroupToken {
	
	public State_Group_1_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_13_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_13_0 extends GroupToken {
	
	public State_Group_1_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_13_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_13_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_13_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_13_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_13_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_13_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_13_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_13_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_13_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_13_0_1_0();
			return obj;
		}
		return null;
	}

}


// "state"
protected class State_StateKeyword_1_13_1 extends KeywordToken  {
	
	public State_StateKeyword_1_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (isFinal?="final" isInitial?="init") id=FullStateID
protected class State_Group_1_14 extends GroupToken {
	
	public State_Group_1_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_14_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final" isInitial?="init"
protected class State_Group_1_14_0 extends GroupToken {
	
	public State_Group_1_14_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_14_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_14_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_14_0_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_14_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_14_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_14_0_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_14_0_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_14_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_14_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_14_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_14_0_1_0();
			return obj;
		}
		return null;
	}

}


// id=FullStateID
protected class State_IdAssignment_1_14_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_14_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_14_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_1_14_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_14_1_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" isInitial?="init"
protected class State_Group_1_15 extends GroupToken {
	
	public State_Group_1_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_15_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_15_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_15_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_15_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_15_0_0();
			return obj;
		}
		return null;
	}

}

// isInitial?="init"
protected class State_IsInitialAssignment_1_15_1 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_15_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_15_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_15_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_15_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" type=StateType "state" id=FullStateID
protected class State_Group_1_16 extends GroupToken {
	
	public State_Group_1_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_16_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_16_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_16_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_16_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_16_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_16_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_16_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_16_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_16_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_16_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_16_2 extends KeywordToken  {
	
	public State_StateKeyword_1_16_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_16_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_16_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_16_3 extends AssignmentToken  {
	
	public State_IdAssignment_1_16_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_16_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_16_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_16_3_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" type=StateType "state"
protected class State_Group_1_17 extends GroupToken {
	
	public State_Group_1_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_17_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_17_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_17_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_17_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_17_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_17_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_17_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_17_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_17_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_17_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_17_2 extends KeywordToken  {
	
	public State_StateKeyword_1_17_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_17_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_17_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// isInitial?="init" type=StateType id=FullStateID
protected class State_Group_1_18 extends GroupToken {
	
	public State_Group_1_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_18();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_18_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_18_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_18_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_18_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_18_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_18_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_18_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_18_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_18_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_18_1_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_18_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_18_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_18_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_18_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_18_2_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" "state" id=FullStateID
protected class State_Group_1_19 extends GroupToken {
	
	public State_Group_1_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_19();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_19_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_19_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_19_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_19_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_19_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_19_1 extends KeywordToken  {
	
	public State_StateKeyword_1_19_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_19_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_19_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_19_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_19_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_19_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_19_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_19_2_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" type=StateType
protected class State_Group_1_20 extends GroupToken {
	
	public State_Group_1_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_20();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_20_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_20_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_20_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_20_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_20_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_20_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_20_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_20_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_20_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_20_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init" "state"
protected class State_Group_1_21 extends GroupToken {
	
	public State_Group_1_21(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_21();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_21_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_21_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_21_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_21_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_21_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_21_1 extends KeywordToken  {
	
	public State_StateKeyword_1_21_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_21_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_21_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// isInitial?="init" id=FullStateID
protected class State_Group_1_22 extends GroupToken {
	
	public State_Group_1_22(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_22();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_22_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isInitial?="init"
protected class State_IsInitialAssignment_1_22_0 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_22_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_22_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_22_0_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_22_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_22_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_22_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsInitialAssignment_1_22_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_22_1_0();
			return obj;
		}
		return null;
	}

}


// isInitial?="init"
protected class State_IsInitialAssignment_1_23 extends AssignmentToken  {
	
	public State_IsInitialAssignment_1_23(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsInitialAssignment_1_23();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInitial",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInitial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsInitialInitKeyword_1_23_0();
			return obj;
		}
		return null;
	}

}

// isFinal?="final" type=StateType "state" id=FullStateID
protected class State_Group_1_24 extends GroupToken {
	
	public State_Group_1_24(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_24();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_24_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_24_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_24_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_24_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_24_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_24_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_24_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_24_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_24_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_24_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_24_2 extends KeywordToken  {
	
	public State_StateKeyword_1_24_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_24_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_24_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_24_3 extends AssignmentToken  {
	
	public State_IdAssignment_1_24_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_24_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_24_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_24_3_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" type=StateType "state"
protected class State_Group_1_25 extends GroupToken {
	
	public State_Group_1_25(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_25();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_25_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_25_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_25_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_25_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_25_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_25_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_25_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_25_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_25_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_25_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_25_2 extends KeywordToken  {
	
	public State_StateKeyword_1_25_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_25_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_25_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// isFinal?="final" type=StateType id=FullStateID
protected class State_Group_1_26 extends GroupToken {
	
	public State_Group_1_26(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_26();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_26_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_26_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_26_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_26_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_26_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_26_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_26_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_26_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_26_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_26_1_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_26_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_26_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_26_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_26_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_26_2_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" "state" id=FullStateID
protected class State_Group_1_27 extends GroupToken {
	
	public State_Group_1_27(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_27();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_27_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_27_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_27_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_27_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_27_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_27_1 extends KeywordToken  {
	
	public State_StateKeyword_1_27_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_27_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_27_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_27_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_27_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_27_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_27_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_27_2_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" type=StateType
protected class State_Group_1_28 extends GroupToken {
	
	public State_Group_1_28(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_28();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_28_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_28_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_28_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_28_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_28_0_0();
			return obj;
		}
		return null;
	}

}

// type=StateType
protected class State_TypeAssignment_1_28_1 extends AssignmentToken  {
	
	public State_TypeAssignment_1_28_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_28_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_28_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_28_1_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" "state" id=FullStateID
protected class State_Group_1_29 extends GroupToken {
	
	public State_Group_1_29(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_29();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_29_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_29_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_29_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_29_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_29_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_29_1 extends KeywordToken  {
	
	public State_StateKeyword_1_29_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_29_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_29_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_29_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_29_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_29_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_29_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_29_2_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final" id=FullStateID
protected class State_Group_1_30 extends GroupToken {
	
	public State_Group_1_30(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_30();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_30_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isFinal?="final"
protected class State_IsFinalAssignment_1_30_0 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_30_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_30_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_30_0_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_30_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_30_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_30_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IsFinalAssignment_1_30_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_30_1_0();
			return obj;
		}
		return null;
	}

}


// isFinal?="final"
protected class State_IsFinalAssignment_1_31 extends AssignmentToken  {
	
	public State_IsFinalAssignment_1_31(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIsFinalAssignment_1_31();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isFinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isFinal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_31_0();
			return obj;
		}
		return null;
	}

}

// type=StateType "state" id=FullStateID
protected class State_Group_1_32 extends GroupToken {
	
	public State_Group_1_32(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_32();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_32_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_1_32_0 extends AssignmentToken  {
	
	public State_TypeAssignment_1_32_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_32_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_32_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_32_1 extends KeywordToken  {
	
	public State_StateKeyword_1_32_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_32_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_32_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_32_2 extends AssignmentToken  {
	
	public State_IdAssignment_1_32_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_32_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_32_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_32_2_0();
			return obj;
		}
		return null;
	}

}


// type=StateType "state"
protected class State_Group_1_33 extends GroupToken {
	
	public State_Group_1_33(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_33();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_33_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_1_33_0 extends AssignmentToken  {
	
	public State_TypeAssignment_1_33_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_33_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_33_0_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class State_StateKeyword_1_33_1 extends KeywordToken  {
	
	public State_StateKeyword_1_33_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_33_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_33_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// type=StateType id=FullStateID
protected class State_Group_1_34 extends GroupToken {
	
	public State_Group_1_34(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_34();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_34_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=StateType
protected class State_TypeAssignment_1_34_0 extends AssignmentToken  {
	
	public State_TypeAssignment_1_34_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_34_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_34_0_0();
			return obj;
		}
		return null;
	}

}

// id=FullStateID
protected class State_IdAssignment_1_34_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_34_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_34_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TypeAssignment_1_34_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_34_1_0();
			return obj;
		}
		return null;
	}

}


// type=StateType
protected class State_TypeAssignment_1_35 extends AssignmentToken  {
	
	public State_TypeAssignment_1_35(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTypeAssignment_1_35();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_1_35_0();
			return obj;
		}
		return null;
	}

}

// "state" id=FullStateID
protected class State_Group_1_36 extends GroupToken {
	
	public State_Group_1_36(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_1_36();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_1_36_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "state"
protected class State_StateKeyword_1_36_0 extends KeywordToken  {
	
	public State_StateKeyword_1_36_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_36_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_36_1 extends AssignmentToken  {
	
	public State_IdAssignment_1_36_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_36_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_1_36_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_36_1_0();
			return obj;
		}
		return null;
	}

}


// "state"
protected class State_StateKeyword_1_37 extends KeywordToken  {
	
	public State_StateKeyword_1_37(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_1_37();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id=FullStateID
protected class State_IdAssignment_1_38 extends AssignmentToken  {
	
	public State_IdAssignment_1_38(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getIdAssignment_1_38();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getStateAccess().getIdFullStateIDParserRuleCall_1_38_0();
			return obj;
		}
		return null;
	}

}


// label=STRING?
protected class State_LabelAssignment_2 extends AssignmentToken  {
	
	public State_LabelAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getLabelAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// bodyText=STRING?
protected class State_BodyTextAssignment_3 extends AssignmentToken  {
	
	public State_BodyTextAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getBodyTextAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_LabelAssignment_2(parent, this, 0, inst);
			case 1: return new State_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bodyText",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bodyText");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getBodyTextSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("{" ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit"
// exitActions+=Action|"suspension" suspensionTrigger=Action|signals+=Signal|regions
// +=Region ("||" regions+=Region)*)+ "}")?  
// 	    	 	    
// 	  		 	    
// 	  		         
// 	  		 	     // kein effect, kein delay, kein immediate
protected class State_Group_4 extends GroupToken {
	
	public State_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RightCurlyBracketKeyword_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class State_LeftCurlyBracketKeyword_4_0 extends KeywordToken  {
	
	public State_LeftCurlyBracketKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_BodyTextAssignment_3(parent, this, 0, inst);
			case 1: return new State_LabelAssignment_2(parent, this, 1, inst);
			case 2: return new State_Alternatives_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// ("onentry" entryActions+=Action|"oninner" innerActions+=Action|"onexit" exitActions
// +=Action|"suspension" suspensionTrigger=Action|signals+=Signal|regions+=Region (
// "||" regions+=Region)*)+  
// 	    	 	    
// 	  		 	    
// 	  		         
// 	  		 	     // kein effect, kein delay, kein immediate
protected class State_Alternatives_4_1 extends AlternativesToken {

	public State_Alternatives_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateAccess().getAlternatives_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_4_1_0(parent, this, 0, inst);
			case 1: return new State_Group_4_1_1(parent, this, 1, inst);
			case 2: return new State_Group_4_1_2(parent, this, 2, inst);
			case 3: return new State_Group_4_1_3(parent, this, 3, inst);
			case 4: return new State_SignalsAssignment_4_1_4(parent, this, 4, inst);
			case 5: return new State_Group_4_1_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// "onentry" entryActions+=Action
protected class State_Group_4_1_0 extends GroupToken {
	
	public State_Group_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_EntryActionsAssignment_4_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "onentry"
protected class State_OnentryKeyword_4_1_0_0 extends KeywordToken  {
	
	public State_OnentryKeyword_4_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOnentryKeyword_4_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entryActions+=Action
protected class State_EntryActionsAssignment_4_1_0_1 extends AssignmentToken  {
	
	public State_EntryActionsAssignment_4_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getEntryActionsAssignment_4_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getEntryActionsActionParserRuleCall_4_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OnentryKeyword_4_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "oninner" innerActions+=Action
protected class State_Group_4_1_1 extends GroupToken {
	
	public State_Group_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_InnerActionsAssignment_4_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "oninner"
protected class State_OninnerKeyword_4_1_1_0 extends KeywordToken  {
	
	public State_OninnerKeyword_4_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOninnerKeyword_4_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// innerActions+=Action
protected class State_InnerActionsAssignment_4_1_1_1 extends AssignmentToken  {
	
	public State_InnerActionsAssignment_4_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getInnerActionsAssignment_4_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("innerActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("innerActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getInnerActionsActionParserRuleCall_4_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OninnerKeyword_4_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "onexit" exitActions+=Action
protected class State_Group_4_1_2 extends GroupToken {
	
	public State_Group_4_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_ExitActionsAssignment_4_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "onexit"
protected class State_OnexitKeyword_4_1_2_0 extends KeywordToken  {
	
	public State_OnexitKeyword_4_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getOnexitKeyword_4_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// exitActions+=Action
protected class State_ExitActionsAssignment_4_1_2_1 extends AssignmentToken  {
	
	public State_ExitActionsAssignment_4_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getExitActionsAssignment_4_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exitActions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exitActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getExitActionsActionParserRuleCall_4_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OnexitKeyword_4_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "suspension" suspensionTrigger=Action
protected class State_Group_4_1_3 extends GroupToken {
	
	public State_Group_4_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_SuspensionTriggerAssignment_4_1_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "suspension"
protected class State_SuspensionKeyword_4_1_3_0 extends KeywordToken  {
	
	public State_SuspensionKeyword_4_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getSuspensionKeyword_4_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// suspensionTrigger=Action
protected class State_SuspensionTriggerAssignment_4_1_3_1 extends AssignmentToken  {
	
	public State_SuspensionTriggerAssignment_4_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSuspensionTriggerAssignment_4_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("suspensionTrigger",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("suspensionTrigger");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSuspensionTriggerActionParserRuleCall_4_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_SuspensionKeyword_4_1_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// signals+=Signal
protected class State_SignalsAssignment_4_1_4 extends AssignmentToken  {
	
	public State_SignalsAssignment_4_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getSignalsAssignment_4_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getSignalsSignalParserRuleCall_4_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, next, actIndex, consumed);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// regions+=Region ("||" regions+=Region)*
protected class State_Group_4_1_5 extends GroupToken {
	
	public State_Group_4_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_4_1_5_1(parent, this, 0, inst);
			case 1: return new State_RegionsAssignment_4_1_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// regions+=Region
protected class State_RegionsAssignment_4_1_5_0 extends AssignmentToken  {
	
	public State_RegionsAssignment_4_1_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getRegionsAssignment_4_1_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_4_1_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, next, actIndex, consumed);
			case 1: return new State_LeftCurlyBracketKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("||" regions+=Region)*
protected class State_Group_4_1_5_1 extends GroupToken {
	
	public State_Group_4_1_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_4_1_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RegionsAssignment_4_1_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "||"
protected class State_VerticalLineVerticalLineKeyword_4_1_5_1_0 extends KeywordToken  {
	
	public State_VerticalLineVerticalLineKeyword_4_1_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getVerticalLineVerticalLineKeyword_4_1_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group_4_1_5_1(parent, this, 0, inst);
			case 1: return new State_RegionsAssignment_4_1_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// regions+=Region
protected class State_RegionsAssignment_4_1_5_1_1 extends AssignmentToken  {
	
	public State_RegionsAssignment_4_1_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getRegionsAssignment_4_1_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Region_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRegionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_4_1_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_VerticalLineVerticalLineKeyword_4_1_5_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// "}"
protected class State_RightCurlyBracketKeyword_4_2 extends KeywordToken  {
	
	public State_RightCurlyBracketKeyword_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getRightCurlyBracketKeyword_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Alternatives_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// outgoingTransitions+=Transition*
protected class State_OutgoingTransitionsAssignment_5 extends AssignmentToken  {
	
	public State_OutgoingTransitionsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getOutgoingTransitionsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("outgoingTransitions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("outgoingTransitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_OutgoingTransitionsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new State_Group_4(parent, next, actIndex, consumed);
			case 2: return new State_BodyTextAssignment_3(parent, next, actIndex, consumed);
			case 3: return new State_LabelAssignment_2(parent, next, actIndex, consumed);
			case 4: return new State_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule State ****************/


/************ begin Rule Action ****************
 *
 * Action returns sync::Action:
 *   isImmediate?="#"? (delay=INT ";")? triggersAndEffects=STRING|Transition;
 *
 **/

// isImmediate?="#"? (delay=INT ";")? triggersAndEffects=STRING|Transition
protected class Action_Alternatives extends AlternativesToken {

	public Action_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_0(parent, this, 0, inst);
			case 1: return new Action_TransitionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isImmediate?="#"? (delay=INT ";")? triggersAndEffects=STRING
protected class Action_Group_0 extends GroupToken {
	
	public Action_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_TriggersAndEffectsAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isImmediate?="#"?
protected class Action_IsImmediateAssignment_0_0 extends AssignmentToken  {
	
	public Action_IsImmediateAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getIsImmediateAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isImmediate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isImmediate");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getActionAccess().getIsImmediateNumberSignKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// (delay=INT ";")?
protected class Action_Group_0_1 extends GroupToken {
	
	public Action_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_SemicolonKeyword_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// delay=INT
protected class Action_DelayAssignment_0_1_0 extends AssignmentToken  {
	
	public Action_DelayAssignment_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getDelayAssignment_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_IsImmediateAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delay",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delay");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getDelayINTTerminalRuleCall_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Action_SemicolonKeyword_0_1_1 extends KeywordToken  {
	
	public Action_SemicolonKeyword_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getSemicolonKeyword_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_DelayAssignment_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// triggersAndEffects=STRING
protected class Action_TriggersAndEffectsAssignment_0_2 extends AssignmentToken  {
	
	public Action_TriggersAndEffectsAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getTriggersAndEffectsAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_0_1(parent, this, 0, inst);
			case 1: return new Action_IsImmediateAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("triggersAndEffects",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("triggersAndEffects");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getTriggersAndEffectsSTRINGTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// Transition
protected class Action_TransitionParserRuleCall_1 extends RuleCallToken {
	
	public Action_TransitionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getTransitionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Transition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Action ****************/


/************ begin Rule ValuedObject ****************
 *
 * ValuedObject returns sync::ValuedObject:
 *   Signal|Variable;
 *
 **/

// Signal|Variable
protected class ValuedObject_Alternatives extends AlternativesToken {

	public ValuedObject_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValuedObject_SignalParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValuedObject_VariableParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValuedObjectRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Signal
protected class ValuedObject_SignalParserRuleCall_0 extends RuleCallToken {
	
	public ValuedObject_SignalParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getSignalParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Signal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Variable
protected class ValuedObject_VariableParserRuleCall_1 extends RuleCallToken {
	
	public ValuedObject_VariableParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValuedObjectAccess().getVariableParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Variable_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValuedObject ****************/


/************ begin Rule Variable ****************
 *
 * Variable returns sync::Variable:
 *   "var" name=ID (": " type=ValueType|":=" initialValue=ID ": " type=ValueType); 
 *     
 * 	   
 * 	 
 * 	    //or type only, type being either pre-defined or hostcode
 * 	           // either initial value and type
 *
 **/

// "var" name=ID (": " type=ValueType|":=" initialValue=ID ": " type=ValueType) 
// 	   
// 	 
// 	    //or type only, type being either pre-defined or hostcode
// 	           // either initial value and type
protected class Variable_Group extends GroupToken {
	
	public Variable_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "var"
protected class Variable_VarKeyword_0 extends KeywordToken  {
	
	public Variable_VarKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getVarKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Variable_NameAssignment_1 extends AssignmentToken  {
	
	public Variable_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_VarKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ": " type=ValueType|":=" initialValue=ID ": " type=ValueType  
// 	 
// 	    //or type only, type being either pre-defined or hostcode
// 	           // either initial value and type
protected class Variable_Alternatives_2 extends AlternativesToken {

	public Variable_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_Group_2_0(parent, this, 0, inst);
			case 1: return new Variable_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ": " type=ValueType
protected class Variable_Group_2_0 extends GroupToken {
	
	public Variable_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_TypeAssignment_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": "
protected class Variable_ColonSpaceKeyword_2_0_0 extends KeywordToken  {
	
	public Variable_ColonSpaceKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getColonSpaceKeyword_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Variable_TypeAssignment_2_0_1 extends AssignmentToken  {
	
	public Variable_TypeAssignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getTypeAssignment_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonSpaceKeyword_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// ":=" initialValue=ID ": " type=ValueType
protected class Variable_Group_2_1 extends GroupToken {
	
	public Variable_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_TypeAssignment_2_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class Variable_ColonEqualsSignKeyword_2_1_0 extends KeywordToken  {
	
	public Variable_ColonEqualsSignKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getColonEqualsSignKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialValue=ID
protected class Variable_InitialValueAssignment_2_1_1 extends AssignmentToken  {
	
	public Variable_InitialValueAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getInitialValueAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonEqualsSignKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableAccess().getInitialValueIDTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}

// ": "
protected class Variable_ColonSpaceKeyword_2_1_2 extends KeywordToken  {
	
	public Variable_ColonSpaceKeyword_2_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableAccess().getColonSpaceKeyword_2_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_InitialValueAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Variable_TypeAssignment_2_1_3 extends AssignmentToken  {
	
	public Variable_TypeAssignment_2_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getTypeAssignment_2_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Variable_ColonSpaceKeyword_2_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getVariableAccess().getTypeValueTypeEnumRuleCall_2_1_3_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Variable ****************/


/************ begin Rule Signal ****************
 *
 * Signal returns sync::Signal:
 *   (isInput?="input"|isOutput?="output") name=ID (": " type=ValueType|": combine" type=
 *   ValueType "with" (combineOperator=CombineOperator|hostCombineOperator=STRING)|":="
 *   initialValue=ID ": " type=ValueType|":=" initialValue=ID ": combine" type=ValueType
 *   "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))?; 
 *     
 *  	
 * 		//(isLocal?='local')? this does not make any sense anymore, does it?
 * 		   //(isInputOutput?='inputoutput') |
 * 		  
 * 		  
 * 				
 * 		 
 * 		 
 * 		      //or type only, type being either pre-defined or hostcode
 * 		         //or combine type only
 * 		           // either initial value and type
 * 		               //or initial value and combine type
 * 		  
 * 
 * 
 * 	//========================================================================================
 * 	 //===  									    TRANSITION 					               ===
 * 	 //========================================================================================
 *
 **/

// (isInput?="input"|isOutput?="output") name=ID (": " type=ValueType|": combine" type=
// ValueType "with" (combineOperator=CombineOperator|hostCombineOperator=STRING)|":="
// initialValue=ID ": " type=ValueType|":=" initialValue=ID ": combine" type=ValueType
// "with" (combineOperator=CombineOperator|hostCombineOperator=STRING))? 
//  	
// 		//(isLocal?='local')? this does not make any sense anymore, does it?
// 		   //(isInputOutput?='inputoutput') |
// 		  
// 		  
// 				
// 		 
// 		 
// 		      //or type only, type being either pre-defined or hostcode
// 		         //or combine type only
// 		           // either initial value and type
// 		               //or initial value and combine type
protected class Signal_Group extends GroupToken {
	
	public Signal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_2(parent, this, 0, inst);
			case 1: return new Signal_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSignalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isInput?="input"|isOutput?="output" 
//  	
// 		//(isLocal?='local')? this does not make any sense anymore, does it?
// 		   //(isInputOutput?='inputoutput') |
protected class Signal_Alternatives_0 extends AlternativesToken {

	public Signal_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_IsInputAssignment_0_0(parent, this, 0, inst);
			case 1: return new Signal_IsOutputAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// isInput?="input"
protected class Signal_IsInputAssignment_0_0 extends AssignmentToken  {
	
	public Signal_IsInputAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getIsInputAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isInput",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isInput");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSignalAccess().getIsInputInputKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// isOutput?="output"
protected class Signal_IsOutputAssignment_0_1 extends AssignmentToken  {
	
	public Signal_IsOutputAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getIsOutputAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isOutput",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isOutput");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSignalAccess().getIsOutputOutputKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// name=ID
protected class Signal_NameAssignment_1 extends AssignmentToken  {
	
	public Signal_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (": " type=ValueType|": combine" type=ValueType "with" (combineOperator=
// CombineOperator|hostCombineOperator=STRING)|":=" initialValue=ID ": " type=
// ValueType|":=" initialValue=ID ": combine" type=ValueType "with" (combineOperator=
// CombineOperator|hostCombineOperator=STRING))?  
// 		 
// 		      //or type only, type being either pre-defined or hostcode
// 		         //or combine type only
// 		           // either initial value and type
// 		               //or initial value and combine type
protected class Signal_Alternatives_2 extends AlternativesToken {

	public Signal_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Group_2_0(parent, this, 0, inst);
			case 1: return new Signal_Group_2_1(parent, this, 1, inst);
			case 2: return new Signal_Group_2_2(parent, this, 2, inst);
			case 3: return new Signal_Group_2_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ": " type=ValueType
protected class Signal_Group_2_0 extends GroupToken {
	
	public Signal_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": "
protected class Signal_ColonSpaceKeyword_2_0_0 extends KeywordToken  {
	
	public Signal_ColonSpaceKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonSpaceKeyword_2_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_2_0_1 extends AssignmentToken  {
	
	public Signal_TypeAssignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_2_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonSpaceKeyword_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// ": combine" type=ValueType "with" (combineOperator=CombineOperator|
// hostCombineOperator=STRING)
protected class Signal_Group_2_1 extends GroupToken {
	
	public Signal_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_2_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ": combine"
protected class Signal_CombineKeyword_2_1_0 extends KeywordToken  {
	
	public Signal_CombineKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_2_1_1 extends AssignmentToken  {
	
	public Signal_TypeAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}

// "with"
protected class Signal_WithKeyword_2_1_2 extends KeywordToken  {
	
	public Signal_WithKeyword_2_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getWithKeyword_2_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator|hostCombineOperator=STRING
protected class Signal_Alternatives_2_1_3 extends AlternativesToken {

	public Signal_Alternatives_2_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_2_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineOperatorAssignment_2_1_3_0(parent, this, 0, inst);
			case 1: return new Signal_HostCombineOperatorAssignment_2_1_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator
protected class Signal_CombineOperatorAssignment_2_1_3_0 extends AssignmentToken  {
	
	public Signal_CombineOperatorAssignment_2_1_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineOperatorAssignment_2_1_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_2_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("combineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("combineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_2_1_3_0_0();
			return obj;
		}
		return null;
	}

}

// hostCombineOperator=STRING
protected class Signal_HostCombineOperatorAssignment_2_1_3_1 extends AssignmentToken  {
	
	public Signal_HostCombineOperatorAssignment_2_1_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_2_1_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_2_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostCombineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostCombineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_2_1_3_1_0();
			return obj;
		}
		return null;
	}

}



// ":=" initialValue=ID ": " type=ValueType
protected class Signal_Group_2_2 extends GroupToken {
	
	public Signal_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_2_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class Signal_ColonEqualsSignKeyword_2_2_0 extends KeywordToken  {
	
	public Signal_ColonEqualsSignKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialValue=ID
protected class Signal_InitialValueAssignment_2_2_1 extends AssignmentToken  {
	
	public Signal_InitialValueAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getInitialValueAssignment_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonEqualsSignKeyword_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getInitialValueIDTerminalRuleCall_2_2_1_0();
			return obj;
		}
		return null;
	}

}

// ": "
protected class Signal_ColonSpaceKeyword_2_2_2 extends KeywordToken  {
	
	public Signal_ColonSpaceKeyword_2_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonSpaceKeyword_2_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_InitialValueAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_2_2_3 extends AssignmentToken  {
	
	public Signal_TypeAssignment_2_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_2_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonSpaceKeyword_2_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_2_2_3_0();
			return obj;
		}
		return null;
	}

}


// ":=" initialValue=ID ": combine" type=ValueType "with" (combineOperator=
// CombineOperator|hostCombineOperator=STRING)
protected class Signal_Group_2_3 extends GroupToken {
	
	public Signal_Group_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSignalAccess().getGroup_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_Alternatives_2_3_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":="
protected class Signal_ColonEqualsSignKeyword_2_3_0 extends KeywordToken  {
	
	public Signal_ColonEqualsSignKeyword_2_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getColonEqualsSignKeyword_2_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialValue=ID
protected class Signal_InitialValueAssignment_2_3_1 extends AssignmentToken  {
	
	public Signal_InitialValueAssignment_2_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getInitialValueAssignment_2_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_ColonEqualsSignKeyword_2_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getInitialValueIDTerminalRuleCall_2_3_1_0();
			return obj;
		}
		return null;
	}

}

// ": combine"
protected class Signal_CombineKeyword_2_3_2 extends KeywordToken  {
	
	public Signal_CombineKeyword_2_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineKeyword_2_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_InitialValueAssignment_2_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ValueType
protected class Signal_TypeAssignment_2_3_3 extends AssignmentToken  {
	
	public Signal_TypeAssignment_2_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getTypeAssignment_2_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineKeyword_2_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getTypeValueTypeEnumRuleCall_2_3_3_0();
			return obj;
		}
		return null;
	}

}

// "with"
protected class Signal_WithKeyword_2_3_4 extends KeywordToken  {
	
	public Signal_WithKeyword_2_3_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSignalAccess().getWithKeyword_2_3_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_TypeAssignment_2_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator|hostCombineOperator=STRING
protected class Signal_Alternatives_2_3_5 extends AlternativesToken {

	public Signal_Alternatives_2_3_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSignalAccess().getAlternatives_2_3_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_CombineOperatorAssignment_2_3_5_0(parent, this, 0, inst);
			case 1: return new Signal_HostCombineOperatorAssignment_2_3_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// combineOperator=CombineOperator
protected class Signal_CombineOperatorAssignment_2_3_5_0 extends AssignmentToken  {
	
	public Signal_CombineOperatorAssignment_2_3_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getCombineOperatorAssignment_2_3_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_2_3_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("combineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("combineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSignalAccess().getCombineOperatorCombineOperatorEnumRuleCall_2_3_5_0_0();
			return obj;
		}
		return null;
	}

}

// hostCombineOperator=STRING
protected class Signal_HostCombineOperatorAssignment_2_3_5_1 extends AssignmentToken  {
	
	public Signal_HostCombineOperatorAssignment_2_3_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSignalAccess().getHostCombineOperatorAssignment_2_3_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Signal_WithKeyword_2_3_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hostCombineOperator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hostCombineOperator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSignalAccess().getHostCombineOperatorSTRINGTerminalRuleCall_2_3_5_1_0();
			return obj;
		}
		return null;
	}

}





/************ end Rule Signal ****************/


/************ begin Rule Transition ****************
 *
 * Transition returns sync::Transition:
 *   sourceState=[sync::State|FullStateID]? type=TransitionType targetState=[sync::
 *   State|FullStateID] ("with" triggersAndEffects=STRING)? isHistory?=" history"? ";"; 
 * 
 * 	//========================================================================================
 * 	 //===  									    TRANSITION 					               ===
 * 	 //========================================================================================
 * 	
 *     
 * 
 * 	  //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
 * 	 //newSourceState=TransitionState
 * 	 
 * 	//|newTargetState=TransitionState )
 *
 **/

// sourceState=[sync::State|FullStateID]? type=TransitionType targetState=[sync::
// State|FullStateID] ("with" triggersAndEffects=STRING)? isHistory?=" history"? ";" 
// 
// 	  //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
// 	 //newSourceState=TransitionState
// 	 
// 	//|newTargetState=TransitionState )
protected class Transition_Group extends GroupToken {
	
	public Transition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTransitionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// sourceState=[sync::State|FullStateID]?
protected class Transition_SourceStateAssignment_0 extends AssignmentToken  {
	
	public Transition_SourceStateAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getSourceStateAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourceState",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourceState");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionAccess().getSourceStateStateCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTransitionAccess().getSourceStateStateCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type=TransitionType   //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
// 	 //newSourceState=TransitionState
protected class Transition_TypeAssignment_1 extends AssignmentToken  {
	
	public Transition_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_SourceStateAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getTransitionAccess().getTypeTransitionTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// targetState=[sync::State|FullStateID]
protected class Transition_TargetStateAssignment_2 extends AssignmentToken  {
	
	public Transition_TargetStateAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getTargetStateAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("targetState",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("targetState");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionAccess().getTargetStateStateCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTransitionAccess().getTargetStateStateCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("with" triggersAndEffects=STRING)?
protected class Transition_Group_3 extends GroupToken {
	
	public Transition_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTransitionAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_TriggersAndEffectsAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "with"
protected class Transition_WithKeyword_3_0 extends KeywordToken  {
	
	public Transition_WithKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTransitionAccess().getWithKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_TargetStateAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// triggersAndEffects=STRING
protected class Transition_TriggersAndEffectsAssignment_3_1 extends AssignmentToken  {
	
	public Transition_TriggersAndEffectsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getTriggersAndEffectsAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_WithKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("triggersAndEffects",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("triggersAndEffects");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTransitionAccess().getTriggersAndEffectsSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// isHistory?=" history"?
protected class Transition_IsHistoryAssignment_4 extends AssignmentToken  {
	
	public Transition_IsHistoryAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getIsHistoryAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_Group_3(parent, this, 0, inst);
			case 1: return new Transition_TargetStateAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isHistory",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isHistory");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getTransitionAccess().getIsHistoryHistoryKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Transition_SemicolonKeyword_5 extends KeywordToken  {
	
	public Transition_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTransitionAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_IsHistoryAssignment_4(parent, this, 0, inst);
			case 1: return new Transition_Group_3(parent, this, 1, inst);
			case 2: return new Transition_TargetStateAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Transition ****************/


}
