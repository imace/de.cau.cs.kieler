/*
* generated by Xtext
*/

package de.cau.cs.kieler.synccharts.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.synccharts.labelparser.services.ActionLabelGrammarAccess;

@Singleton
public class KitsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRegionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cIdAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0_1_0 = (RuleCall)cIdAssignment_1_0_1.eContents().get(0);
		private final Keyword cRegionKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Assignment cSignalsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSignalsSignalParserRuleCall_2_1_0 = (RuleCall)cSignalsAssignment_2_1.eContents().get(0);
		private final Assignment cInnerStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInnerStatesStateParserRuleCall_3_0 = (RuleCall)cInnerStatesAssignment_3.eContents().get(0);
		
		//Region returns sync::Region:
		//  {sync::Region} ("region" id=ID|"region")? (variables+=Variable|signals+=Signal)*
		//  innerStates+=State+;  
		//
		//// IO Declarations --- come before state declarations #2009-11-26
		//// There are no region signals as in thinkccharts --- outtake: (variables+=Variable|signals+=Signal)#2009-11-26 
		//    
		//// GMF does not like empty models so avoid them by forcing Xtext to create a region object even if the model is empty:
		//    
		//          // region ID's are introduced by the keyword "region". 
		//   //if the keyword "region" is typed without any ID, the {@link SyncchartsContentAdapter#handleRegion()}
		//   //computes a unique ID for the region. An ID without the keyword "region" is not allowed
		//   //because it could be a local signal or a state ID also!
		public ParserRule getRule() { return rule; }

		//{sync::Region} ("region" id=ID|"region")? (variables+=Variable|signals+=Signal)*
		//innerStates+=State+ 
		//// GMF does not like empty models so avoid them by forcing Xtext to create a region object even if the model is empty:
		//    
		//          // region ID's are introduced by the keyword "region". 
		//   //if the keyword "region" is typed without any ID, the {@link SyncchartsContentAdapter#handleRegion()}
		//   //computes a unique ID for the region. An ID without the keyword "region" is not allowed
		//   //because it could be a local signal or a state ID also!
		public Group getGroup() { return cGroup; }

		//{sync::Region} 
		//// GMF does not like empty models so avoid them by forcing Xtext to create a region object even if the model is empty:
		public Action getRegionAction_0() { return cRegionAction_0; }

		//("region" id=ID|"region")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"region" id=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"region"
		public Keyword getRegionKeyword_1_0_0() { return cRegionKeyword_1_0_0; }

		//id=ID
		public Assignment getIdAssignment_1_0_1() { return cIdAssignment_1_0_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_1_0() { return cIdIDTerminalRuleCall_1_0_1_0; }

		//"region"
		public Keyword getRegionKeyword_1_1() { return cRegionKeyword_1_1; }

		//(variables+=Variable|signals+=Signal)*   // region ID's are introduced by the keyword "region". 
		//   //if the keyword "region" is typed without any ID, the {@link SyncchartsContentAdapter#handleRegion()}
		//   //computes a unique ID for the region. An ID without the keyword "region" is not allowed
		//   //because it could be a local signal or a state ID also!
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0_0() { return cVariablesVariableParserRuleCall_2_0_0; }

		//signals+=Signal
		public Assignment getSignalsAssignment_2_1() { return cSignalsAssignment_2_1; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_2_1_0() { return cSignalsSignalParserRuleCall_2_1_0; }

		//innerStates+=State+
		public Assignment getInnerStatesAssignment_3() { return cInnerStatesAssignment_3; }

		//State
		public RuleCall getInnerStatesStateParserRuleCall_3_0() { return cInnerStatesStateParserRuleCall_3_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_1_0 = (Keyword)cIsInitialAssignment_1.eContents().get(0);
		private final Assignment cIsFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsFinalFinalKeyword_2_0 = (Keyword)cIsFinalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeStateTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cStateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdFullStateIDParserRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		private final Assignment cSignalsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSignalsSignalParserRuleCall_7_0 = (RuleCall)cSignalsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOnentryKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cEntryActionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_8_1_0 = (RuleCall)cEntryActionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOninnerKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInnerActionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cInnerActionsActionParserRuleCall_9_1_0 = (RuleCall)cInnerActionsAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOnexitKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExitActionsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_10_1_0 = (RuleCall)cExitActionsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSuspensionKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cSuspensionTriggerAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cSuspensionTriggerActionParserRuleCall_11_1_0 = (RuleCall)cSuspensionTriggerAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cRegionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_12_1_0 = (RuleCall)cRegionsAssignment_12_1.eContents().get(0);
		private final Group cGroup_12_2 = (Group)cGroup_12.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_12_2_0 = (Keyword)cGroup_12_2.eContents().get(0);
		private final Assignment cRegionsAssignment_12_2_1 = (Assignment)cGroup_12_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_12_2_1_0 = (RuleCall)cRegionsAssignment_12_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cBodyTextAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cBodyTextSTRINGTerminalRuleCall_13_1_0 = (RuleCall)cBodyTextAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cOutgoingTransitionsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final Alternatives cOutgoingTransitionsAlternatives_14_0 = (Alternatives)cOutgoingTransitionsAssignment_14.eContents().get(0);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_14_0_0 = (RuleCall)cOutgoingTransitionsAlternatives_14_0.eContents().get(0);
		private final RuleCall cOutgoingTransitionsTextualTransitionParserRuleCall_14_0_1 = (RuleCall)cOutgoingTransitionsAlternatives_14_0.eContents().get(1);
		
		//State returns sync::State:
		//  {sync::State} isInitial?="init"? isFinal?="final"? type=StateType? "state"? id=
		//  FullStateID label=STRING? signals+=Signal* ("onentry" entryActions+=Action)* (
		//  "oninner" innerActions+=Action)* ("onexit" exitActions+=Action)* ("suspension"
		//  suspensionTrigger=Action)? ("{" regions+=Region ("||" regions+=Region)* "}")? ("{"
		//  bodyText=STRING "}")? outgoingTransitions+=( Transition | TextualTransition )*; 
		//  
		//    
		//    // order of state modifiers and type has been fixed --- could be relaxed in future by uncommenting the following lines #2009-11-26 
		//        
		//     
		//  // State_Group_1_1
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state' // State_Group_1_2
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID // State_Group_1_3
		//   //    |((isInitial?='init') (isFinal?='final')) 'state' id=FullStateID // State_Group_1_4
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) // State_Group_1_5
		//   //    |((isInitial?='init') (isFinal?='final')) 'state'|((isInitial?='init') (isFinal?='final')) id=FullStateID// State_Group_1_6
		//   //    |((isInitial?='init') (isFinal?='final'))
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=FullStateID// State_Group_1_8
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID
		//   //    |((isFinal?='final') (isInitial?='init')) 'state' id=FullStateID// State_Group_1_11
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType)
		//   //    |((isFinal?='final') (isInitial?='init')) 'state'
		//   //    |((isFinal?='final') (isInitial?='init')) id=FullStateID
		//   //    |((isFinal?='final') (isInitial?='init'))
		//   //    |(isInitial?='init') (type=StateType) 'state' id=FullStateID // // State_Group_1_16
		//   //    |(isInitial?='init') (type=StateType) 'state'
		//   //    |(isInitial?='init') (type=StateType) id=FullStateID
		//   //    |(isInitial?='init') 'state' id=FullStateID
		//   //    |(isInitial?='init') (type=StateType)
		//   //    |(isInitial?='init') 'state'// State_Group_1_21
		//   //    |(isInitial?='init') id=FullStateID
		//   //    |(isInitial?='init')
		//   //    |(isFinal?='final') (type=StateType) 'state' id=FullStateID
		//   //    |(isFinal?='final') (type=StateType) 'state'
		//   //    |(isFinal?='final') (type=StateType) id=FullStateID// State_Group_1_26
		//   //    |(isFinal?='final') 'state' id=FullStateID
		//   //    |(isFinal?='final') (type=StateType)
		//   //    |(isFinal?='final') 'state' id=FullStateID
		//   //    |(isFinal?='final') id=FullStateID
		//   //    |(isFinal?='final')// State_Group_1_31
		//   //    |(type=StateType) 'state' id=FullStateID
		//   //    |(type=StateType) 'state'
		//   //    |(type=StateType) id=FullStateID
		//   //    |(type=StateType)
		//   //    |'state' id=FullStateID// State_Group_1_36
		//   //    |'state'
		//   //    |id=FullStateID)// State_Group_1_38 
		//  
		//  //change the datatype of label (from FullStateID) to STRING 
		//   //to prevent wrong parsing in this case: 
		//   //init A
		//   //final B
		//   //A --> B;
		////  	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
		//  
		//  // order of actions has been fixed ---conform to thinkccharts#2009-11-26
		//    
		//     
		//     
		//     
		//      // kein effect, kein delay, kein immediate
		//   // we allow both body text and regions in grammar #2010-02-05 (meeting)
		//   // body text is embraced by braces #2010-02-05 (meeting)
		//              
		//  
		//  
		//// Renamings are stored in the bodyText
		//// hence the renaming rule is not necessary anymore #2010-02-05 (meeting)
		//// Renaming returns sync::Renaming:
		//// oldID=STRING '/' newID=STRING;
		public ParserRule getRule() { return rule; }

		//{sync::State} isInitial?="init"? isFinal?="final"? type=StateType? "state"? id=
		//FullStateID label=STRING? signals+=Signal* ("onentry" entryActions+=Action)* (
		//"oninner" innerActions+=Action)* ("onexit" exitActions+=Action)* ("suspension"
		//suspensionTrigger=Action)? ("{" regions+=Region ("||" regions+=Region)* "}")? ("{"
		//bodyText=STRING "}")? outgoingTransitions+=( Transition | TextualTransition )* 
		//    // order of state modifiers and type has been fixed --- could be relaxed in future by uncommenting the following lines #2009-11-26 
		//        
		//     
		//  // State_Group_1_1
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state' // State_Group_1_2
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID // State_Group_1_3
		//   //    |((isInitial?='init') (isFinal?='final')) 'state' id=FullStateID // State_Group_1_4
		//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) // State_Group_1_5
		//   //    |((isInitial?='init') (isFinal?='final')) 'state'|((isInitial?='init') (isFinal?='final')) id=FullStateID// State_Group_1_6
		//   //    |((isInitial?='init') (isFinal?='final'))
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=FullStateID// State_Group_1_8
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID
		//   //    |((isFinal?='final') (isInitial?='init')) 'state' id=FullStateID// State_Group_1_11
		//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType)
		//   //    |((isFinal?='final') (isInitial?='init')) 'state'
		//   //    |((isFinal?='final') (isInitial?='init')) id=FullStateID
		//   //    |((isFinal?='final') (isInitial?='init'))
		//   //    |(isInitial?='init') (type=StateType) 'state' id=FullStateID // // State_Group_1_16
		//   //    |(isInitial?='init') (type=StateType) 'state'
		//   //    |(isInitial?='init') (type=StateType) id=FullStateID
		//   //    |(isInitial?='init') 'state' id=FullStateID
		//   //    |(isInitial?='init') (type=StateType)
		//   //    |(isInitial?='init') 'state'// State_Group_1_21
		//   //    |(isInitial?='init') id=FullStateID
		//   //    |(isInitial?='init')
		//   //    |(isFinal?='final') (type=StateType) 'state' id=FullStateID
		//   //    |(isFinal?='final') (type=StateType) 'state'
		//   //    |(isFinal?='final') (type=StateType) id=FullStateID// State_Group_1_26
		//   //    |(isFinal?='final') 'state' id=FullStateID
		//   //    |(isFinal?='final') (type=StateType)
		//   //    |(isFinal?='final') 'state' id=FullStateID
		//   //    |(isFinal?='final') id=FullStateID
		//   //    |(isFinal?='final')// State_Group_1_31
		//   //    |(type=StateType) 'state' id=FullStateID
		//   //    |(type=StateType) 'state'
		//   //    |(type=StateType) id=FullStateID
		//   //    |(type=StateType)
		//   //    |'state' id=FullStateID// State_Group_1_36
		//   //    |'state'
		//   //    |id=FullStateID)// State_Group_1_38 
		//  
		//  //change the datatype of label (from FullStateID) to STRING 
		//   //to prevent wrong parsing in this case: 
		//   //init A
		//   //final B
		//   //A --> B;
		////  	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
		//  
		//  // order of actions has been fixed ---conform to thinkccharts#2009-11-26
		//    
		//     
		//     
		//     
		//      // kein effect, kein delay, kein immediate
		//   // we allow both body text and regions in grammar #2010-02-05 (meeting)
		//   // body text is embraced by braces #2010-02-05 (meeting)
		public Group getGroup() { return cGroup; }

		//{sync::State} 
		//    // order of state modifiers and type has been fixed --- could be relaxed in future by uncommenting the following lines #2009-11-26
		public Action getStateAction_0() { return cStateAction_0; }

		//isInitial?="init"?
		public Assignment getIsInitialAssignment_1() { return cIsInitialAssignment_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_1_0() { return cIsInitialInitKeyword_1_0; }

		//isFinal?="final"?
		public Assignment getIsFinalAssignment_2() { return cIsFinalAssignment_2; }

		//"final"
		public Keyword getIsFinalFinalKeyword_2_0() { return cIsFinalFinalKeyword_2_0; }

		//type=StateType?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_3_0() { return cTypeStateTypeEnumRuleCall_3_0; }

		//"state"?
		public Keyword getStateKeyword_4() { return cStateKeyword_4; }

		//id=FullStateID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//FullStateID
		public RuleCall getIdFullStateIDParserRuleCall_5_0() { return cIdFullStateIDParserRuleCall_5_0; }

		//label=STRING?
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_0() { return cLabelSTRINGTerminalRuleCall_6_0; }

		//signals+=Signal*
		public Assignment getSignalsAssignment_7() { return cSignalsAssignment_7; }

		//Signal
		public RuleCall getSignalsSignalParserRuleCall_7_0() { return cSignalsSignalParserRuleCall_7_0; }

		//("onentry" entryActions+=Action)*
		public Group getGroup_8() { return cGroup_8; }

		//"onentry"
		public Keyword getOnentryKeyword_8_0() { return cOnentryKeyword_8_0; }

		//entryActions+=Action
		public Assignment getEntryActionsAssignment_8_1() { return cEntryActionsAssignment_8_1; }

		//Action
		public RuleCall getEntryActionsActionParserRuleCall_8_1_0() { return cEntryActionsActionParserRuleCall_8_1_0; }

		//("oninner" innerActions+=Action)*
		public Group getGroup_9() { return cGroup_9; }

		//"oninner"
		public Keyword getOninnerKeyword_9_0() { return cOninnerKeyword_9_0; }

		//innerActions+=Action
		public Assignment getInnerActionsAssignment_9_1() { return cInnerActionsAssignment_9_1; }

		//Action
		public RuleCall getInnerActionsActionParserRuleCall_9_1_0() { return cInnerActionsActionParserRuleCall_9_1_0; }

		//("onexit" exitActions+=Action)*
		public Group getGroup_10() { return cGroup_10; }

		//"onexit"
		public Keyword getOnexitKeyword_10_0() { return cOnexitKeyword_10_0; }

		//exitActions+=Action
		public Assignment getExitActionsAssignment_10_1() { return cExitActionsAssignment_10_1; }

		//Action
		public RuleCall getExitActionsActionParserRuleCall_10_1_0() { return cExitActionsActionParserRuleCall_10_1_0; }

		//("suspension" suspensionTrigger=Action)?
		public Group getGroup_11() { return cGroup_11; }

		//"suspension"
		public Keyword getSuspensionKeyword_11_0() { return cSuspensionKeyword_11_0; }

		//suspensionTrigger=Action
		public Assignment getSuspensionTriggerAssignment_11_1() { return cSuspensionTriggerAssignment_11_1; }

		//Action
		public RuleCall getSuspensionTriggerActionParserRuleCall_11_1_0() { return cSuspensionTriggerActionParserRuleCall_11_1_0; }

		//("{" regions+=Region ("||" regions+=Region)* "}")?
		public Group getGroup_12() { return cGroup_12; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_0() { return cLeftCurlyBracketKeyword_12_0; }

		//regions+=Region
		public Assignment getRegionsAssignment_12_1() { return cRegionsAssignment_12_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_12_1_0() { return cRegionsRegionParserRuleCall_12_1_0; }

		//("||" regions+=Region)*
		public Group getGroup_12_2() { return cGroup_12_2; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_12_2_0() { return cVerticalLineVerticalLineKeyword_12_2_0; }

		//regions+=Region
		public Assignment getRegionsAssignment_12_2_1() { return cRegionsAssignment_12_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_12_2_1_0() { return cRegionsRegionParserRuleCall_12_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12_3() { return cRightCurlyBracketKeyword_12_3; }

		//("{" bodyText=STRING "}")?
		public Group getGroup_13() { return cGroup_13; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_13_0() { return cLeftCurlyBracketKeyword_13_0; }

		//bodyText=STRING
		public Assignment getBodyTextAssignment_13_1() { return cBodyTextAssignment_13_1; }

		//STRING
		public RuleCall getBodyTextSTRINGTerminalRuleCall_13_1_0() { return cBodyTextSTRINGTerminalRuleCall_13_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13_2() { return cRightCurlyBracketKeyword_13_2; }

		//outgoingTransitions+=( Transition | TextualTransition )*
		public Assignment getOutgoingTransitionsAssignment_14() { return cOutgoingTransitionsAssignment_14; }

		//Transition|TextualTransition
		public Alternatives getOutgoingTransitionsAlternatives_14_0() { return cOutgoingTransitionsAlternatives_14_0; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_14_0_0() { return cOutgoingTransitionsTransitionParserRuleCall_14_0_0; }

		//TextualTransition
		public RuleCall getOutgoingTransitionsTextualTransitionParserRuleCall_14_0_1() { return cOutgoingTransitionsTextualTransitionParserRuleCall_14_0_1; }
	}

	public class FullStateIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullStateID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FullStateID returns ecore::EString:
		//  (ID "@")? ID; 
		//  
		//// Renamings are stored in the bodyText
		//// hence the renaming rule is not necessary anymore #2010-02-05 (meeting)
		//// Renaming returns sync::Renaming:
		//// oldID=STRING '/' newID=STRING;
		//
		//
		//       
		//  
		////========================================================================================
		////===  									    ACTIONS  					               ===
		////========================================================================================
		////Action returns sync::Action:
		////  ((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))|Transition; 
		////========================================================================================
		////===  									    TRANSITION 					               ===
		////========================================================================================
		public ParserRule getRule() { return rule; }

		//(ID "@")? ID
		public Group getGroup() { return cGroup; }

		//(ID "@")?
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_1() { return cCommercialAtKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTargetStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateStateCrossReference_1_0 = (CrossReference)cTargetStateAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateStateFullStateIDParserRuleCall_1_0_1 = (RuleCall)cTargetStateStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIsImmediateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cIsImmediateNumberSignKeyword_2_1_0 = (Keyword)cIsImmediateAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cDelayKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDelayAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_2_2_1_0 = (RuleCall)cDelayAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cTriggerAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cTriggerBooleanExpressionParserRuleCall_2_3_0_0 = (RuleCall)cTriggerAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cSolidusKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_1_1 = (Group)cGroup_2_3_1.eContents().get(1);
		private final Assignment cEffectsAssignment_2_3_1_1_0 = (Assignment)cGroup_2_3_1_1.eContents().get(0);
		private final RuleCall cEffectsEffectParserRuleCall_2_3_1_1_0_0 = (RuleCall)cEffectsAssignment_2_3_1_1_0.eContents().get(0);
		private final Group cGroup_2_3_1_1_1 = (Group)cGroup_2_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_1_1_0 = (Keyword)cGroup_2_3_1_1_1.eContents().get(0);
		private final Assignment cEffectsAssignment_2_3_1_1_1_1 = (Assignment)cGroup_2_3_1_1_1.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_2_3_1_1_1_1_0 = (RuleCall)cEffectsAssignment_2_3_1_1_1_1.eContents().get(0);
		private final Assignment cIsHistoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsHistoryHistoryKeyword_3_0 = (Keyword)cIsHistoryAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition returns sync::Transition:
		//  type=TransitionType targetState=[sync::State|FullStateID] ("with" isImmediate?="#"?
		//  ("delay:=" delay=INT)? (trigger=BooleanExpression? ("/" (effects+=Effect ("," effects
		//  +=Effect)*)?)?))? isHistory?=" history"? ";";  
		//  
		////========================================================================================
		////===  									    ACTIONS  					               ===
		////========================================================================================
		////Action returns sync::Action:
		////  ((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))|Transition; 
		////========================================================================================
		////===  									    TRANSITION 					               ===
		////========================================================================================
		//
		//
		//    
		//
		//   
		//   
		//         
		//   // Transition effects must be delimited by ","
		//     // "," should only appear between effects 
		//     // and NOT at the end of the effects #2010-02-95(meeting)
		//              
		//   
		//   
		//   
		// 
		//  
		// //TextualTransition extends Transition
		public ParserRule getRule() { return rule; }

		//type=TransitionType targetState=[sync::State|FullStateID] ("with" isImmediate?="#"?
		//("delay:=" delay=INT)? (trigger=BooleanExpression? ("/" (effects+=Effect ("," effects
		//+=Effect)*)?)?))? isHistory?=" history"? ";" 
		//
		//   
		//   
		//         
		//   // Transition effects must be delimited by ","
		//     // "," should only appear between effects 
		//     // and NOT at the end of the effects #2010-02-95(meeting)
		public Group getGroup() { return cGroup; }

		//type=TransitionType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_0_0() { return cTypeTransitionTypeEnumRuleCall_0_0; }

		//targetState=[sync::State|FullStateID]
		public Assignment getTargetStateAssignment_1() { return cTargetStateAssignment_1; }

		//[sync::State|FullStateID]
		public CrossReference getTargetStateStateCrossReference_1_0() { return cTargetStateStateCrossReference_1_0; }

		//FullStateID
		public RuleCall getTargetStateStateFullStateIDParserRuleCall_1_0_1() { return cTargetStateStateFullStateIDParserRuleCall_1_0_1; }

		//("with" isImmediate?="#"? ("delay:=" delay=INT)? (trigger=BooleanExpression? ("/" (
		//effects+=Effect ("," effects+=Effect)*)?)?))?        
		//   // Transition effects must be delimited by ","
		//     // "," should only appear between effects 
		//     // and NOT at the end of the effects #2010-02-95(meeting)
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_2_1() { return cIsImmediateAssignment_2_1; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_2_1_0() { return cIsImmediateNumberSignKeyword_2_1_0; }

		//("delay:=" delay=INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"delay:="
		public Keyword getDelayKeyword_2_2_0() { return cDelayKeyword_2_2_0; }

		//delay=INT
		public Assignment getDelayAssignment_2_2_1() { return cDelayAssignment_2_2_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_2_2_1_0() { return cDelayINTTerminalRuleCall_2_2_1_0; }

		//trigger=BooleanExpression? ("/" (effects+=Effect ("," effects+=Effect)*)?)? // Transition effects must be delimited by ","
		//     // "," should only appear between effects 
		//     // and NOT at the end of the effects #2010-02-95(meeting)
		public Group getGroup_2_3() { return cGroup_2_3; }

		//trigger=BooleanExpression?
		public Assignment getTriggerAssignment_2_3_0() { return cTriggerAssignment_2_3_0; }

		//BooleanExpression
		public RuleCall getTriggerBooleanExpressionParserRuleCall_2_3_0_0() { return cTriggerBooleanExpressionParserRuleCall_2_3_0_0; }

		//("/" (effects+=Effect ("," effects+=Effect)*)?)?
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"/"
		public Keyword getSolidusKeyword_2_3_1_0() { return cSolidusKeyword_2_3_1_0; }

		//(effects+=Effect ("," effects+=Effect)*)?
		public Group getGroup_2_3_1_1() { return cGroup_2_3_1_1; }

		//effects+=Effect
		public Assignment getEffectsAssignment_2_3_1_1_0() { return cEffectsAssignment_2_3_1_1_0; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_3_1_1_0_0() { return cEffectsEffectParserRuleCall_2_3_1_1_0_0; }

		//("," effects+=Effect)*
		public Group getGroup_2_3_1_1_1() { return cGroup_2_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_1_1_0() { return cCommaKeyword_2_3_1_1_1_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_2_3_1_1_1_1() { return cEffectsAssignment_2_3_1_1_1_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_2_3_1_1_1_1_0() { return cEffectsEffectParserRuleCall_2_3_1_1_1_1_0; }

		//isHistory?=" history"?
		public Assignment getIsHistoryAssignment_3() { return cIsHistoryAssignment_3; }

		//" history"
		public Keyword getIsHistoryHistoryKeyword_3_0() { return cIsHistoryHistoryKeyword_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TextualTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextualTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMakeConditionalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cMakeConditionalAlternatives_1_0_0 = (Alternatives)cMakeConditionalAssignment_1_0.eContents().get(0);
		private final Keyword cMakeConditionalCondKeyword_1_0_0_0 = (Keyword)cMakeConditionalAlternatives_1_0_0.eContents().get(0);
		private final Keyword cMakeConditionalConditionalKeyword_1_0_0_1 = (Keyword)cMakeConditionalAlternatives_1_0_0.eContents().get(1);
		private final Keyword cStateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cMakeFinalAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cMakeFinalFinalKeyword_1_2_0 = (Keyword)cMakeFinalAssignment_1_2.eContents().get(0);
		private final Assignment cTargetStateProxyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetStateProxyFullStateIDParserRuleCall_2_0 = (RuleCall)cTargetStateProxyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsImmediateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cIsImmediateNumberSignKeyword_3_1_0 = (Keyword)cIsImmediateAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cDelayKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDelayAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_3_2_1_0 = (RuleCall)cDelayAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cTriggerAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cTriggerBooleanExpressionParserRuleCall_3_3_0_0 = (RuleCall)cTriggerAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cSolidusKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Group cGroup_3_3_1_1 = (Group)cGroup_3_3_1.eContents().get(1);
		private final Assignment cEffectsAssignment_3_3_1_1_0 = (Assignment)cGroup_3_3_1_1.eContents().get(0);
		private final RuleCall cEffectsEffectParserRuleCall_3_3_1_1_0_0 = (RuleCall)cEffectsAssignment_3_3_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_3_1_1_1 = (Keyword)cGroup_3_3_1_1.eContents().get(1);
		private final Assignment cIsHistoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsHistoryHistoryKeyword_4_0 = (Keyword)cIsHistoryAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TextualTransition returns textualsync::TextualTransition:
		//  type=TransitionType (makeConditional?=( "cond" | "conditional" )|"state"|makeFinal?=
		//  "final") targetStateProxy=FullStateID ("with" isImmediate?="#"? ("delay:=" delay=INT)
		//  ? (trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?))? isHistory?=" history"
		//  ? ";";  
		//  
		// //TextualTransition extends Transition
		//        
		//  
		//// make sure that one of the following three comes after the transition type 
		//// because otherwise the transition is parsed as a textual transition 
		//// effectively resulting in a linking error
		//           
		//   
		//      
		//
		// 
		//          
		//         
		// 
		//  
		//  
		////  (sourceState=[State|FullStateID])// sync::State//|FullStateID]) //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
		////|({sync::State} name=FullStateID)
		////  |
		////  (TransitionState))
		////TargetState returns sync::Transition:
		////	{sync::Transition}
		////	//(isInitial?='init')? (isFinal?='final')
		////;
		public ParserRule getRule() { return rule; }

		//type=TransitionType (makeConditional?=( "cond" | "conditional" )|"state"|makeFinal?=
		//"final") targetStateProxy=FullStateID ("with" isImmediate?="#"? ("delay:=" delay=INT)
		//? (trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?))? isHistory?=" history"
		//? ";" 
		//  
		//// make sure that one of the following three comes after the transition type 
		//// because otherwise the transition is parsed as a textual transition 
		//// effectively resulting in a linking error
		public Group getGroup() { return cGroup; }

		//type=TransitionType 
		//  
		//// make sure that one of the following three comes after the transition type 
		//// because otherwise the transition is parsed as a textual transition 
		//// effectively resulting in a linking error
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TransitionType  
		//// make sure that one of the following three comes after the transition type 
		//// because otherwise the transition is parsed as a textual transition 
		//// effectively resulting in a linking error
		public RuleCall getTypeTransitionTypeEnumRuleCall_0_0() { return cTypeTransitionTypeEnumRuleCall_0_0; }

		//makeConditional?=( "cond" | "conditional" )|"state"|makeFinal?="final"  
		//// make sure that one of the following three comes after the transition type 
		//// because otherwise the transition is parsed as a textual transition 
		//// effectively resulting in a linking error
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//makeConditional?=( "cond" | "conditional" )
		public Assignment getMakeConditionalAssignment_1_0() { return cMakeConditionalAssignment_1_0; }

		//"cond"|"conditional"
		public Alternatives getMakeConditionalAlternatives_1_0_0() { return cMakeConditionalAlternatives_1_0_0; }

		//"cond"
		public Keyword getMakeConditionalCondKeyword_1_0_0_0() { return cMakeConditionalCondKeyword_1_0_0_0; }

		//"conditional"
		public Keyword getMakeConditionalConditionalKeyword_1_0_0_1() { return cMakeConditionalConditionalKeyword_1_0_0_1; }

		//"state"
		public Keyword getStateKeyword_1_1() { return cStateKeyword_1_1; }

		//makeFinal?="final"
		public Assignment getMakeFinalAssignment_1_2() { return cMakeFinalAssignment_1_2; }

		//"final"
		public Keyword getMakeFinalFinalKeyword_1_2_0() { return cMakeFinalFinalKeyword_1_2_0; }

		//targetStateProxy=FullStateID
		public Assignment getTargetStateProxyAssignment_2() { return cTargetStateProxyAssignment_2; }

		//FullStateID
		public RuleCall getTargetStateProxyFullStateIDParserRuleCall_2_0() { return cTargetStateProxyFullStateIDParserRuleCall_2_0; }

		//("with" isImmediate?="#"? ("delay:=" delay=INT)? (trigger=BooleanExpression? ("/" (
		//effects+=Effect ","?)*)?))?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_3_1() { return cIsImmediateAssignment_3_1; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_3_1_0() { return cIsImmediateNumberSignKeyword_3_1_0; }

		//("delay:=" delay=INT)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"delay:="
		public Keyword getDelayKeyword_3_2_0() { return cDelayKeyword_3_2_0; }

		//delay=INT
		public Assignment getDelayAssignment_3_2_1() { return cDelayAssignment_3_2_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_3_2_1_0() { return cDelayINTTerminalRuleCall_3_2_1_0; }

		//trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//trigger=BooleanExpression?
		public Assignment getTriggerAssignment_3_3_0() { return cTriggerAssignment_3_3_0; }

		//BooleanExpression
		public RuleCall getTriggerBooleanExpressionParserRuleCall_3_3_0_0() { return cTriggerBooleanExpressionParserRuleCall_3_3_0_0; }

		//("/" (effects+=Effect ","?)*)?
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//"/"
		public Keyword getSolidusKeyword_3_3_1_0() { return cSolidusKeyword_3_3_1_0; }

		//(effects+=Effect ","?)*
		public Group getGroup_3_3_1_1() { return cGroup_3_3_1_1; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_3_1_1_0() { return cEffectsAssignment_3_3_1_1_0; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_3_1_1_0_0() { return cEffectsEffectParserRuleCall_3_3_1_1_0_0; }

		//","?
		public Keyword getCommaKeyword_3_3_1_1_1() { return cCommaKeyword_3_3_1_1_1; }

		//isHistory?=" history"?
		public Assignment getIsHistoryAssignment_4() { return cIsHistoryAssignment_4; }

		//" history"
		public Keyword getIsHistoryHistoryKeyword_4_0() { return cIsHistoryHistoryKeyword_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TransitionStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInitialInitKeyword_1_0 = (Keyword)cIsInitialAssignment_1.eContents().get(0);
		private final Assignment cIsFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsFinalFinalKeyword_2_0 = (Keyword)cIsFinalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeStateTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cStateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdFullStateIDParserRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		
		//TransitionState returns sync::State:
		//  {sync::State} isInitial?="init" isFinal?="final" type=StateType "state" id=
		//  FullStateID; 
		//  
		//  
		////  (sourceState=[State|FullStateID])// sync::State//|FullStateID]) //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
		////|({sync::State} name=FullStateID)
		////  |
		////  (TransitionState))
		////TargetState returns sync::Transition:
		////	{sync::Transition}
		////	//(isInitial?='init')? (isFinal?='final')
		////;
		//
		//
		//    
		//            
		//    //  |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state'|((
		////  isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID|((isInitial
		////  ?='init') (isFinal?='final')) 'state' id=FullStateID|((isInitial?='init') (isFinal?=
		////  'final')) (type=StateType)|((isInitial?='init') (isFinal?='final')) 'state'|((
		////  isInitial?='init') (isFinal?='final')) id=FullStateID|((isInitial?='init') (isFinal
		////  ?='final'))|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=
		////  FullStateID|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'|((
		////  isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID|((isFinal?=
		////  'final') (isInitial?='init')) 'state' id=FullStateID|((isFinal?='final') (isInitial
		////  ?='init')) (type=StateType)|((isFinal?='final') (isInitial?='init')) 'state'|((
		////  isFinal?='final') (isInitial?='init')) id=FullStateID|((isFinal?='final') (
		////  isInitial?='init'))|(isInitial?='init') (type=StateType) 'state' id=FullStateID|(
		////  isInitial?='init') (type=StateType) 'state'|(isInitial?='init') (type=StateType) id=
		////  FullStateID|(isInitial?='init') 'state' id=FullStateID|(isInitial?='init') (type=
		////  StateType)|(isInitial?='init') 'state'|(isInitial?='init') id=FullStateID|(
		////  isInitial?='init')|(isFinal?='final') (type=StateType) 'state' id=FullStateID|(
		////  isFinal?='final') (type=StateType) 'state'|(isFinal?='final') (type=StateType) id=
		////  FullStateID|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') (type=
		////  StateType)|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') id=
		////  FullStateID|(isFinal?='final')|(type=StateType) 'state' id=FullStateID|(type=
		////  StateType) 'state'|(type=StateType) id=FullStateID|(type=StateType)|'state' id=
		////  FullStateID|'state'|id=FullStateID); 
		////========================================================================================
		////===  									    VAR,SIG  					               ===
		////========================================================================================
		////
		public ParserRule getRule() { return rule; }

		//{sync::State} isInitial?="init" isFinal?="final" type=StateType "state" id=
		//FullStateID
		public Group getGroup() { return cGroup; }

		//{sync::State}
		public Action getStateAction_0() { return cStateAction_0; }

		//isInitial?="init"
		public Assignment getIsInitialAssignment_1() { return cIsInitialAssignment_1; }

		//"init"
		public Keyword getIsInitialInitKeyword_1_0() { return cIsInitialInitKeyword_1_0; }

		//isFinal?="final"
		public Assignment getIsFinalAssignment_2() { return cIsFinalAssignment_2; }

		//"final"
		public Keyword getIsFinalFinalKeyword_2_0() { return cIsFinalFinalKeyword_2_0; }

		//type=StateType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_3_0() { return cTypeStateTypeEnumRuleCall_3_0; }

		//"state"
		public Keyword getStateKeyword_4() { return cStateKeyword_4; }

		//id=FullStateID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//FullStateID
		public RuleCall getIdFullStateIDParserRuleCall_5_0() { return cIdFullStateIDParserRuleCall_5_0; }
	}

	public class ValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuedObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValuedObject returns sync::ValuedObject:
		//  Signal|Variable;   //  |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state'|((
		////  isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID|((isInitial
		////  ?='init') (isFinal?='final')) 'state' id=FullStateID|((isInitial?='init') (isFinal?=
		////  'final')) (type=StateType)|((isInitial?='init') (isFinal?='final')) 'state'|((
		////  isInitial?='init') (isFinal?='final')) id=FullStateID|((isInitial?='init') (isFinal
		////  ?='final'))|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=
		////  FullStateID|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'|((
		////  isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID|((isFinal?=
		////  'final') (isInitial?='init')) 'state' id=FullStateID|((isFinal?='final') (isInitial
		////  ?='init')) (type=StateType)|((isFinal?='final') (isInitial?='init')) 'state'|((
		////  isFinal?='final') (isInitial?='init')) id=FullStateID|((isFinal?='final') (
		////  isInitial?='init'))|(isInitial?='init') (type=StateType) 'state' id=FullStateID|(
		////  isInitial?='init') (type=StateType) 'state'|(isInitial?='init') (type=StateType) id=
		////  FullStateID|(isInitial?='init') 'state' id=FullStateID|(isInitial?='init') (type=
		////  StateType)|(isInitial?='init') 'state'|(isInitial?='init') id=FullStateID|(
		////  isInitial?='init')|(isFinal?='final') (type=StateType) 'state' id=FullStateID|(
		////  isFinal?='final') (type=StateType) 'state'|(isFinal?='final') (type=StateType) id=
		////  FullStateID|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') (type=
		////  StateType)|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') id=
		////  FullStateID|(isFinal?='final')|(type=StateType) 'state' id=FullStateID|(type=
		////  StateType) 'state'|(type=StateType) id=FullStateID|(type=StateType)|'state' id=
		////  FullStateID|'state'|id=FullStateID); 
		////========================================================================================
		////===  									    VAR,SIG  					               ===
		////========================================================================================
		////
		public ParserRule getRule() { return rule; }

		//Signal|Variable   //  |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state'|((
		////  isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID|((isInitial
		////  ?='init') (isFinal?='final')) 'state' id=FullStateID|((isInitial?='init') (isFinal?=
		////  'final')) (type=StateType)|((isInitial?='init') (isFinal?='final')) 'state'|((
		////  isInitial?='init') (isFinal?='final')) id=FullStateID|((isInitial?='init') (isFinal
		////  ?='final'))|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=
		////  FullStateID|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'|((
		////  isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID|((isFinal?=
		////  'final') (isInitial?='init')) 'state' id=FullStateID|((isFinal?='final') (isInitial
		////  ?='init')) (type=StateType)|((isFinal?='final') (isInitial?='init')) 'state'|((
		////  isFinal?='final') (isInitial?='init')) id=FullStateID|((isFinal?='final') (
		////  isInitial?='init'))|(isInitial?='init') (type=StateType) 'state' id=FullStateID|(
		////  isInitial?='init') (type=StateType) 'state'|(isInitial?='init') (type=StateType) id=
		////  FullStateID|(isInitial?='init') 'state' id=FullStateID|(isInitial?='init') (type=
		////  StateType)|(isInitial?='init') 'state'|(isInitial?='init') id=FullStateID|(
		////  isInitial?='init')|(isFinal?='final') (type=StateType) 'state' id=FullStateID|(
		////  isFinal?='final') (type=StateType) 'state'|(isFinal?='final') (type=StateType) id=
		////  FullStateID|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') (type=
		////  StateType)|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') id=
		////  FullStateID|(isFinal?='final')|(type=StateType) 'state' id=FullStateID|(type=
		////  StateType) 'state'|(type=StateType) id=FullStateID|(type=StateType)|'state' id=
		////  FullStateID|'state'|id=FullStateID); 
		////========================================================================================
		////===  									    VAR,SIG  					               ===
		////========================================================================================
		////
		public Alternatives getAlternatives() { return cAlternatives; }

		//Signal
		public RuleCall getSignalParserRuleCall_0() { return cSignalParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInitialValueVariableSignalValueParserRuleCall_2_0_1_0 = (RuleCall)cInitialValueAssignment_2_0_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cTypeValueTypeCrossReference_2_2_0 = (CrossReference)cTypeAssignment_2_2.eContents().get(0);
		private final RuleCall cTypeValueTypeIDTerminalRuleCall_2_2_0_1 = (RuleCall)cTypeValueTypeCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Variable returns sync::Variable:
		//  "var" name=ID ((":=" initialValue=VariableSignalValue)? ": " type=[sync::ValueType])
		//  ";";
		public ParserRule getRule() { return rule; }

		//"var" name=ID ((":=" initialValue=VariableSignalValue)? ": " type=[sync::ValueType])
		//";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":=" initialValue=VariableSignalValue)? ": " type=[sync::ValueType]
		public Group getGroup_2() { return cGroup_2; }

		//(":=" initialValue=VariableSignalValue)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0_0() { return cColonEqualsSignKeyword_2_0_0; }

		//initialValue=VariableSignalValue
		public Assignment getInitialValueAssignment_2_0_1() { return cInitialValueAssignment_2_0_1; }

		//VariableSignalValue
		public RuleCall getInitialValueVariableSignalValueParserRuleCall_2_0_1_0() { return cInitialValueVariableSignalValueParserRuleCall_2_0_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2_1() { return cColonSpaceKeyword_2_1; }

		//type=[sync::ValueType]
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }

		//[sync::ValueType]
		public CrossReference getTypeValueTypeCrossReference_2_2_0() { return cTypeValueTypeCrossReference_2_2_0; }

		//ID
		public RuleCall getTypeValueTypeIDTerminalRuleCall_2_2_0_1() { return cTypeValueTypeIDTerminalRuleCall_2_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIsInputAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cIsInputInputKeyword_0_0_0_0 = (Keyword)cIsInputAssignment_0_0_0.eContents().get(0);
		private final Assignment cIsOutputAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Keyword cIsOutputOutputKeyword_0_0_1_0 = (Keyword)cIsOutputAssignment_0_0_1.eContents().get(0);
		private final Keyword cSignalKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInitialValueVariableSignalValueParserRuleCall_2_0_1_0 = (RuleCall)cInitialValueAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final CrossReference cTypeValueTypeCrossReference_2_1_0_1_0 = (CrossReference)cTypeAssignment_2_1_0_1.eContents().get(0);
		private final RuleCall cTypeValueTypeIDTerminalRuleCall_2_1_0_1_0_1 = (RuleCall)cTypeValueTypeCrossReference_2_1_0_1_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cCombineKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final CrossReference cTypeValueTypeCrossReference_2_1_1_1_0 = (CrossReference)cTypeAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cTypeValueTypeIDTerminalRuleCall_2_1_1_1_0_1 = (RuleCall)cTypeValueTypeCrossReference_2_1_1_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2_1_1_2 = (Keyword)cGroup_2_1_1.eContents().get(2);
		private final Alternatives cAlternatives_2_1_1_3 = (Alternatives)cGroup_2_1_1.eContents().get(3);
		private final Assignment cCombineOperatorAssignment_2_1_1_3_0 = (Assignment)cAlternatives_2_1_1_3.eContents().get(0);
		private final CrossReference cCombineOperatorCombineOperatorCrossReference_2_1_1_3_0_0 = (CrossReference)cCombineOperatorAssignment_2_1_1_3_0.eContents().get(0);
		private final RuleCall cCombineOperatorCombineOperatorIDTerminalRuleCall_2_1_1_3_0_0_1 = (RuleCall)cCombineOperatorCombineOperatorCrossReference_2_1_1_3_0_0.eContents().get(1);
		private final Assignment cHostCombineOperatorAssignment_2_1_1_3_1 = (Assignment)cAlternatives_2_1_1_3.eContents().get(1);
		private final RuleCall cHostCombineOperatorSTRINGTerminalRuleCall_2_1_1_3_1_0 = (RuleCall)cHostCombineOperatorAssignment_2_1_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Signal returns sync::Signal:
		//  (isInput?="input"? isOutput?="output"?|"signal") name=QualifiedName ((":="
		//  initialValue=VariableSignalValue)? (": " type=[sync::ValueType]|": combine" type=[
		//  sync::ValueType] "with" (combineOperator=[sync::CombineOperator]|
		//  hostCombineOperator=STRING)))? ";"; 
		//
		//    
		//// a state signal is defined with the keyword "signal"
		//// while a root region signal might be input or output thus it is preceeded by "input" or "output"
		//         // Signal names are of type QualifiedName because signals could have names like "main.fork", c.f. rvh_Program.kit
		//   //default signal type is PURE
		//   // after the initial value, either the type or the combine type has to come
		public ParserRule getRule() { return rule; }

		//(isInput?="input"? isOutput?="output"?|"signal") name=QualifiedName ((":="
		//initialValue=VariableSignalValue)? (": " type=[sync::ValueType]|": combine" type=[
		//sync::ValueType] "with" (combineOperator=[sync::CombineOperator]|
		//hostCombineOperator=STRING)))? ";" 
		//// a state signal is defined with the keyword "signal"
		//// while a root region signal might be input or output thus it is preceeded by "input" or "output"
		//         // Signal names are of type QualifiedName because signals could have names like "main.fork", c.f. rvh_Program.kit
		//   //default signal type is PURE
		//   // after the initial value, either the type or the combine type has to come
		public Group getGroup() { return cGroup; }

		//isInput?="input"? isOutput?="output"?|"signal" 
		//// a state signal is defined with the keyword "signal"
		//// while a root region signal might be input or output thus it is preceeded by "input" or "output"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isInput?="input"? isOutput?="output"?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_0_0_0() { return cIsInputAssignment_0_0_0; }

		//"input"
		public Keyword getIsInputInputKeyword_0_0_0_0() { return cIsInputInputKeyword_0_0_0_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_0_0_1() { return cIsOutputAssignment_0_0_1; }

		//"output"
		public Keyword getIsOutputOutputKeyword_0_0_1_0() { return cIsOutputOutputKeyword_0_0_1_0; }

		//"signal"
		public Keyword getSignalKeyword_0_1() { return cSignalKeyword_0_1; }

		//name=QualifiedName   // Signal names are of type QualifiedName because signals could have names like "main.fork", c.f. rvh_Program.kit
		//   //default signal type is PURE
		//   // after the initial value, either the type or the combine type has to come
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName // Signal names are of type QualifiedName because signals could have names like "main.fork", c.f. rvh_Program.kit
		//   //default signal type is PURE
		//   // after the initial value, either the type or the combine type has to come
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//((":=" initialValue=VariableSignalValue)? (": " type=[sync::ValueType]|": combine"
		//type=[sync::ValueType] "with" (combineOperator=[sync::CombineOperator]|
		//hostCombineOperator=STRING)))?
		public Group getGroup_2() { return cGroup_2; }

		//(":=" initialValue=VariableSignalValue)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0_0() { return cColonEqualsSignKeyword_2_0_0; }

		//initialValue=VariableSignalValue
		public Assignment getInitialValueAssignment_2_0_1() { return cInitialValueAssignment_2_0_1; }

		//VariableSignalValue
		public RuleCall getInitialValueVariableSignalValueParserRuleCall_2_0_1_0() { return cInitialValueVariableSignalValueParserRuleCall_2_0_1_0; }

		//": " type=[sync::ValueType]|": combine" type=[sync::ValueType] "with" (
		//combineOperator=[sync::CombineOperator]|hostCombineOperator=STRING)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//": " type=[sync::ValueType]
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2_1_0_0() { return cColonSpaceKeyword_2_1_0_0; }

		//type=[sync::ValueType]
		public Assignment getTypeAssignment_2_1_0_1() { return cTypeAssignment_2_1_0_1; }

		//[sync::ValueType]
		public CrossReference getTypeValueTypeCrossReference_2_1_0_1_0() { return cTypeValueTypeCrossReference_2_1_0_1_0; }

		//ID
		public RuleCall getTypeValueTypeIDTerminalRuleCall_2_1_0_1_0_1() { return cTypeValueTypeIDTerminalRuleCall_2_1_0_1_0_1; }

		//": combine" type=[sync::ValueType] "with" (combineOperator=[sync::CombineOperator]|
		//hostCombineOperator=STRING)
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//": combine"
		public Keyword getCombineKeyword_2_1_1_0() { return cCombineKeyword_2_1_1_0; }

		//type=[sync::ValueType]
		public Assignment getTypeAssignment_2_1_1_1() { return cTypeAssignment_2_1_1_1; }

		//[sync::ValueType]
		public CrossReference getTypeValueTypeCrossReference_2_1_1_1_0() { return cTypeValueTypeCrossReference_2_1_1_1_0; }

		//ID
		public RuleCall getTypeValueTypeIDTerminalRuleCall_2_1_1_1_0_1() { return cTypeValueTypeIDTerminalRuleCall_2_1_1_1_0_1; }

		//"with"
		public Keyword getWithKeyword_2_1_1_2() { return cWithKeyword_2_1_1_2; }

		//combineOperator=[sync::CombineOperator]|hostCombineOperator=STRING
		public Alternatives getAlternatives_2_1_1_3() { return cAlternatives_2_1_1_3; }

		//combineOperator=[sync::CombineOperator]
		public Assignment getCombineOperatorAssignment_2_1_1_3_0() { return cCombineOperatorAssignment_2_1_1_3_0; }

		//[sync::CombineOperator]
		public CrossReference getCombineOperatorCombineOperatorCrossReference_2_1_1_3_0_0() { return cCombineOperatorCombineOperatorCrossReference_2_1_1_3_0_0; }

		//ID
		public RuleCall getCombineOperatorCombineOperatorIDTerminalRuleCall_2_1_1_3_0_0_1() { return cCombineOperatorCombineOperatorIDTerminalRuleCall_2_1_1_3_0_0_1; }

		//hostCombineOperator=STRING
		public Assignment getHostCombineOperatorAssignment_2_1_1_3_1() { return cHostCombineOperatorAssignment_2_1_1_3_1; }

		//STRING
		public RuleCall getHostCombineOperatorSTRINGTerminalRuleCall_2_1_1_3_1_0() { return cHostCombineOperatorSTRINGTerminalRuleCall_2_1_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableSignalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableSignalValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFloatTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VariableSignalValue returns ecore::EString:
		//  (INT|ID|Boolean|STRING|Float)+; 
		//
		//    
		//// add float to the enumeration # 2010-05-02 (meeting)
		public ParserRule getRule() { return rule; }

		//(INT|ID|Boolean|STRING|Float)+ 
		//// add float to the enumeration # 2010-05-02 (meeting)
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//Boolean
		public RuleCall getBooleanTerminalRuleCall_2() { return cBooleanTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//Float
		public RuleCall getFloatTerminalRuleCall_4() { return cFloatTerminalRuleCall_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//  (ID ".")* ID;
		public ParserRule getRule() { return rule; }

		//(ID ".")* ID
		public Group getGroup() { return cGroup; }

		//(ID ".")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNORMALKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONDITIONALCondKeyword_1_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCERefKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StateType returns sync::StateType:
		//  NORMAL | CONDITIONAL="cond" | REFERENCE="ref" | TEXTUAL="textual"; 
		//
		//      
		//              
		//
		////enum CombineOperator returns sync::CombineOperator:
		////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
		//
		////enum ValueType returns sync::ValueType:
		////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
		////  'hostType';
		public EnumRule getRule() { return rule; }

		//NORMAL | CONDITIONAL="cond" | REFERENCE="ref" | TEXTUAL="textual" 
		//
		//      
		//              
		//
		////enum CombineOperator returns sync::CombineOperator:
		////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
		//
		////enum ValueType returns sync::ValueType:
		////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
		////  'hostType';
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"NORMAL"
		public Keyword getNORMALNORMALKeyword_0_0() { return cNORMALNORMALKeyword_0_0; }

		//CONDITIONAL="cond"
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration_1() { return cCONDITIONALEnumLiteralDeclaration_1; }

		//"cond"
		public Keyword getCONDITIONALCondKeyword_1_0() { return cCONDITIONALCondKeyword_1_0; }

		//REFERENCE="ref"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"ref"
		public Keyword getREFERENCERefKeyword_2_0() { return cREFERENCERefKeyword_2_0; }

		//TEXTUAL="textual"
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"textual"
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTOKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNORMALTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cNORMALTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns sync::TransitionType:
		//  WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->"; 
		//
		////enum CombineOperator returns sync::CombineOperator:
		////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
		//
		////enum ValueType returns sync::ValueType:
		////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
		////  'hostType';
		public EnumRule getRule() { return rule; }

		//WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->" 
		//
		////enum CombineOperator returns sync::CombineOperator:
		////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
		//
		////enum ValueType returns sync::ValueType:
		////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
		////  'hostType';
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT="-->"
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//"-->"
		public Keyword getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//STRONGABORT="o->"
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//"o->"
		public Keyword getSTRONGABORTOKeyword_1_0() { return cSTRONGABORTOKeyword_1_0; }

		//NORMALTERMINATION=">->"
		public EnumLiteralDeclaration getNORMALTERMINATIONEnumLiteralDeclaration_2() { return cNORMALTERMINATIONEnumLiteralDeclaration_2; }

		//">->"
		public Keyword getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private RegionElements pRegion;
	private StateElements pState;
	private FullStateIDElements pFullStateID;
	private TransitionElements pTransition;
	private TextualTransitionElements pTextualTransition;
	private TransitionStateElements pTransitionState;
	private ValuedObjectElements pValuedObject;
	private VariableElements pVariable;
	private SignalElements pSignal;
	private VariableSignalValueElements pVariableSignalValue;
	private QualifiedNameElements pQualifiedName;
	private StateTypeElements unknownRuleStateType;
	private TransitionTypeElements unknownRuleTransitionType;
	
	private final GrammarProvider grammarProvider;

	private ActionLabelGrammarAccess gaActionLabel;

	@Inject
	public KitsGrammarAccess(GrammarProvider grammarProvider,
		ActionLabelGrammarAccess gaActionLabel) {
		this.grammarProvider = grammarProvider;
		this.gaActionLabel = gaActionLabel;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ActionLabelGrammarAccess getActionLabelGrammarAccess() {
		return gaActionLabel;
	}

	
	//Region returns sync::Region:
	//  {sync::Region} ("region" id=ID|"region")? (variables+=Variable|signals+=Signal)*
	//  innerStates+=State+;  
	//
	//// IO Declarations --- come before state declarations #2009-11-26
	//// There are no region signals as in thinkccharts --- outtake: (variables+=Variable|signals+=Signal)#2009-11-26 
	//    
	//// GMF does not like empty models so avoid them by forcing Xtext to create a region object even if the model is empty:
	//    
	//          // region ID's are introduced by the keyword "region". 
	//   //if the keyword "region" is typed without any ID, the {@link SyncchartsContentAdapter#handleRegion()}
	//   //computes a unique ID for the region. An ID without the keyword "region" is not allowed
	//   //because it could be a local signal or a state ID also!
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//State returns sync::State:
	//  {sync::State} isInitial?="init"? isFinal?="final"? type=StateType? "state"? id=
	//  FullStateID label=STRING? signals+=Signal* ("onentry" entryActions+=Action)* (
	//  "oninner" innerActions+=Action)* ("onexit" exitActions+=Action)* ("suspension"
	//  suspensionTrigger=Action)? ("{" regions+=Region ("||" regions+=Region)* "}")? ("{"
	//  bodyText=STRING "}")? outgoingTransitions+=( Transition | TextualTransition )*; 
	//  
	//    
	//    // order of state modifiers and type has been fixed --- could be relaxed in future by uncommenting the following lines #2009-11-26 
	//        
	//     
	//  // State_Group_1_1
	//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state' // State_Group_1_2
	//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID // State_Group_1_3
	//   //    |((isInitial?='init') (isFinal?='final')) 'state' id=FullStateID // State_Group_1_4
	//   //    |((isInitial?='init') (isFinal?='final')) (type=StateType) // State_Group_1_5
	//   //    |((isInitial?='init') (isFinal?='final')) 'state'|((isInitial?='init') (isFinal?='final')) id=FullStateID// State_Group_1_6
	//   //    |((isInitial?='init') (isFinal?='final'))
	//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=FullStateID// State_Group_1_8
	//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'
	//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID
	//   //    |((isFinal?='final') (isInitial?='init')) 'state' id=FullStateID// State_Group_1_11
	//   //    |((isFinal?='final') (isInitial?='init')) (type=StateType)
	//   //    |((isFinal?='final') (isInitial?='init')) 'state'
	//   //    |((isFinal?='final') (isInitial?='init')) id=FullStateID
	//   //    |((isFinal?='final') (isInitial?='init'))
	//   //    |(isInitial?='init') (type=StateType) 'state' id=FullStateID // // State_Group_1_16
	//   //    |(isInitial?='init') (type=StateType) 'state'
	//   //    |(isInitial?='init') (type=StateType) id=FullStateID
	//   //    |(isInitial?='init') 'state' id=FullStateID
	//   //    |(isInitial?='init') (type=StateType)
	//   //    |(isInitial?='init') 'state'// State_Group_1_21
	//   //    |(isInitial?='init') id=FullStateID
	//   //    |(isInitial?='init')
	//   //    |(isFinal?='final') (type=StateType) 'state' id=FullStateID
	//   //    |(isFinal?='final') (type=StateType) 'state'
	//   //    |(isFinal?='final') (type=StateType) id=FullStateID// State_Group_1_26
	//   //    |(isFinal?='final') 'state' id=FullStateID
	//   //    |(isFinal?='final') (type=StateType)
	//   //    |(isFinal?='final') 'state' id=FullStateID
	//   //    |(isFinal?='final') id=FullStateID
	//   //    |(isFinal?='final')// State_Group_1_31
	//   //    |(type=StateType) 'state' id=FullStateID
	//   //    |(type=StateType) 'state'
	//   //    |(type=StateType) id=FullStateID
	//   //    |(type=StateType)
	//   //    |'state' id=FullStateID// State_Group_1_36
	//   //    |'state'
	//   //    |id=FullStateID)// State_Group_1_38 
	//  
	//  //change the datatype of label (from FullStateID) to STRING 
	//   //to prevent wrong parsing in this case: 
	//   //init A
	//   //final B
	//   //A --> B;
	////  	('['(signalRenamings+=Renaming ',')* signalRenamings+=Renaming']')?
	//  
	//  // order of actions has been fixed ---conform to thinkccharts#2009-11-26
	//    
	//     
	//     
	//     
	//      // kein effect, kein delay, kein immediate
	//   // we allow both body text and regions in grammar #2010-02-05 (meeting)
	//   // body text is embraced by braces #2010-02-05 (meeting)
	//              
	//  
	//  
	//// Renamings are stored in the bodyText
	//// hence the renaming rule is not necessary anymore #2010-02-05 (meeting)
	//// Renaming returns sync::Renaming:
	//// oldID=STRING '/' newID=STRING;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//FullStateID returns ecore::EString:
	//  (ID "@")? ID; 
	//  
	//// Renamings are stored in the bodyText
	//// hence the renaming rule is not necessary anymore #2010-02-05 (meeting)
	//// Renaming returns sync::Renaming:
	//// oldID=STRING '/' newID=STRING;
	//
	//
	//       
	//  
	////========================================================================================
	////===  									    ACTIONS  					               ===
	////========================================================================================
	////Action returns sync::Action:
	////  ((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))|Transition; 
	////========================================================================================
	////===  									    TRANSITION 					               ===
	////========================================================================================
	public FullStateIDElements getFullStateIDAccess() {
		return (pFullStateID != null) ? pFullStateID : (pFullStateID = new FullStateIDElements());
	}
	
	public ParserRule getFullStateIDRule() {
		return getFullStateIDAccess().getRule();
	}

	//Transition returns sync::Transition:
	//  type=TransitionType targetState=[sync::State|FullStateID] ("with" isImmediate?="#"?
	//  ("delay:=" delay=INT)? (trigger=BooleanExpression? ("/" (effects+=Effect ("," effects
	//  +=Effect)*)?)?))? isHistory?=" history"? ";";  
	//  
	////========================================================================================
	////===  									    ACTIONS  					               ===
	////========================================================================================
	////Action returns sync::Action:
	////  ((isImmediate?='#')? (delay=INT ';')? (triggersAndEffects=STRING))|Transition; 
	////========================================================================================
	////===  									    TRANSITION 					               ===
	////========================================================================================
	//
	//
	//    
	//
	//   
	//   
	//         
	//   // Transition effects must be delimited by ","
	//     // "," should only appear between effects 
	//     // and NOT at the end of the effects #2010-02-95(meeting)
	//              
	//   
	//   
	//   
	// 
	//  
	// //TextualTransition extends Transition
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//TextualTransition returns textualsync::TextualTransition:
	//  type=TransitionType (makeConditional?=( "cond" | "conditional" )|"state"|makeFinal?=
	//  "final") targetStateProxy=FullStateID ("with" isImmediate?="#"? ("delay:=" delay=INT)
	//  ? (trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)?))? isHistory?=" history"
	//  ? ";";  
	//  
	// //TextualTransition extends Transition
	//        
	//  
	//// make sure that one of the following three comes after the transition type 
	//// because otherwise the transition is parsed as a textual transition 
	//// effectively resulting in a linking error
	//           
	//   
	//      
	//
	// 
	//          
	//         
	// 
	//  
	//  
	////  (sourceState=[State|FullStateID])// sync::State//|FullStateID]) //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
	////|({sync::State} name=FullStateID)
	////  |
	////  (TransitionState))
	////TargetState returns sync::Transition:
	////	{sync::Transition}
	////	//(isInitial?='init')? (isFinal?='final')
	////;
	public TextualTransitionElements getTextualTransitionAccess() {
		return (pTextualTransition != null) ? pTextualTransition : (pTextualTransition = new TextualTransitionElements());
	}
	
	public ParserRule getTextualTransitionRule() {
		return getTextualTransitionAccess().getRule();
	}

	//TransitionState returns sync::State:
	//  {sync::State} isInitial?="init" isFinal?="final" type=StateType "state" id=
	//  FullStateID; 
	//  
	//  
	////  (sourceState=[State|FullStateID])// sync::State//|FullStateID]) //either reference existing state or create a new one or leave it blank (in that case, the transition belongs to the containing state)
	////|({sync::State} name=FullStateID)
	////  |
	////  (TransitionState))
	////TargetState returns sync::Transition:
	////	{sync::Transition}
	////	//(isInitial?='init')? (isFinal?='final')
	////;
	//
	//
	//    
	//            
	//    //  |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state'|((
	////  isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID|((isInitial
	////  ?='init') (isFinal?='final')) 'state' id=FullStateID|((isInitial?='init') (isFinal?=
	////  'final')) (type=StateType)|((isInitial?='init') (isFinal?='final')) 'state'|((
	////  isInitial?='init') (isFinal?='final')) id=FullStateID|((isInitial?='init') (isFinal
	////  ?='final'))|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=
	////  FullStateID|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'|((
	////  isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID|((isFinal?=
	////  'final') (isInitial?='init')) 'state' id=FullStateID|((isFinal?='final') (isInitial
	////  ?='init')) (type=StateType)|((isFinal?='final') (isInitial?='init')) 'state'|((
	////  isFinal?='final') (isInitial?='init')) id=FullStateID|((isFinal?='final') (
	////  isInitial?='init'))|(isInitial?='init') (type=StateType) 'state' id=FullStateID|(
	////  isInitial?='init') (type=StateType) 'state'|(isInitial?='init') (type=StateType) id=
	////  FullStateID|(isInitial?='init') 'state' id=FullStateID|(isInitial?='init') (type=
	////  StateType)|(isInitial?='init') 'state'|(isInitial?='init') id=FullStateID|(
	////  isInitial?='init')|(isFinal?='final') (type=StateType) 'state' id=FullStateID|(
	////  isFinal?='final') (type=StateType) 'state'|(isFinal?='final') (type=StateType) id=
	////  FullStateID|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') (type=
	////  StateType)|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') id=
	////  FullStateID|(isFinal?='final')|(type=StateType) 'state' id=FullStateID|(type=
	////  StateType) 'state'|(type=StateType) id=FullStateID|(type=StateType)|'state' id=
	////  FullStateID|'state'|id=FullStateID); 
	////========================================================================================
	////===  									    VAR,SIG  					               ===
	////========================================================================================
	////
	public TransitionStateElements getTransitionStateAccess() {
		return (pTransitionState != null) ? pTransitionState : (pTransitionState = new TransitionStateElements());
	}
	
	public ParserRule getTransitionStateRule() {
		return getTransitionStateAccess().getRule();
	}

	//ValuedObject returns sync::ValuedObject:
	//  Signal|Variable;   //  |((isInitial?='init') (isFinal?='final')) (type=StateType) 'state'|((
	////  isInitial?='init') (isFinal?='final')) (type=StateType) id=FullStateID|((isInitial
	////  ?='init') (isFinal?='final')) 'state' id=FullStateID|((isInitial?='init') (isFinal?=
	////  'final')) (type=StateType)|((isInitial?='init') (isFinal?='final')) 'state'|((
	////  isInitial?='init') (isFinal?='final')) id=FullStateID|((isInitial?='init') (isFinal
	////  ?='final'))|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state' id=
	////  FullStateID|((isFinal?='final') (isInitial?='init')) (type=StateType) 'state'|((
	////  isFinal?='final') (isInitial?='init')) (type=StateType) id=FullStateID|((isFinal?=
	////  'final') (isInitial?='init')) 'state' id=FullStateID|((isFinal?='final') (isInitial
	////  ?='init')) (type=StateType)|((isFinal?='final') (isInitial?='init')) 'state'|((
	////  isFinal?='final') (isInitial?='init')) id=FullStateID|((isFinal?='final') (
	////  isInitial?='init'))|(isInitial?='init') (type=StateType) 'state' id=FullStateID|(
	////  isInitial?='init') (type=StateType) 'state'|(isInitial?='init') (type=StateType) id=
	////  FullStateID|(isInitial?='init') 'state' id=FullStateID|(isInitial?='init') (type=
	////  StateType)|(isInitial?='init') 'state'|(isInitial?='init') id=FullStateID|(
	////  isInitial?='init')|(isFinal?='final') (type=StateType) 'state' id=FullStateID|(
	////  isFinal?='final') (type=StateType) 'state'|(isFinal?='final') (type=StateType) id=
	////  FullStateID|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') (type=
	////  StateType)|(isFinal?='final') 'state' id=FullStateID|(isFinal?='final') id=
	////  FullStateID|(isFinal?='final')|(type=StateType) 'state' id=FullStateID|(type=
	////  StateType) 'state'|(type=StateType) id=FullStateID|(type=StateType)|'state' id=
	////  FullStateID|'state'|id=FullStateID); 
	////========================================================================================
	////===  									    VAR,SIG  					               ===
	////========================================================================================
	////
	public ValuedObjectElements getValuedObjectAccess() {
		return (pValuedObject != null) ? pValuedObject : (pValuedObject = new ValuedObjectElements());
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	//Variable returns sync::Variable:
	//  "var" name=ID ((":=" initialValue=VariableSignalValue)? ": " type=[sync::ValueType])
	//  ";";
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Signal returns sync::Signal:
	//  (isInput?="input"? isOutput?="output"?|"signal") name=QualifiedName ((":="
	//  initialValue=VariableSignalValue)? (": " type=[sync::ValueType]|": combine" type=[
	//  sync::ValueType] "with" (combineOperator=[sync::CombineOperator]|
	//  hostCombineOperator=STRING)))? ";"; 
	//
	//    
	//// a state signal is defined with the keyword "signal"
	//// while a root region signal might be input or output thus it is preceeded by "input" or "output"
	//         // Signal names are of type QualifiedName because signals could have names like "main.fork", c.f. rvh_Program.kit
	//   //default signal type is PURE
	//   // after the initial value, either the type or the combine type has to come
	public SignalElements getSignalAccess() {
		return (pSignal != null) ? pSignal : (pSignal = new SignalElements());
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//VariableSignalValue returns ecore::EString:
	//  (INT|ID|Boolean|STRING|Float)+; 
	//
	//    
	//// add float to the enumeration # 2010-05-02 (meeting)
	public VariableSignalValueElements getVariableSignalValueAccess() {
		return (pVariableSignalValue != null) ? pVariableSignalValue : (pVariableSignalValue = new VariableSignalValueElements());
	}
	
	public ParserRule getVariableSignalValueRule() {
		return getVariableSignalValueAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  (ID ".")* ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum StateType returns sync::StateType:
	//  NORMAL | CONDITIONAL="cond" | REFERENCE="ref" | TEXTUAL="textual"; 
	//
	//      
	//              
	//
	////enum CombineOperator returns sync::CombineOperator:
	////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
	//
	////enum ValueType returns sync::ValueType:
	////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
	////  'hostType';
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns sync::TransitionType:
	//  WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->"; 
	//
	////enum CombineOperator returns sync::CombineOperator:
	////  NONE | ADD='+' | MULT='*' | AND='AND' | OR='OR' | HOST='hostCombineOperator';
	//
	////enum ValueType returns sync::ValueType:
	////  PURE | BOOL='boolean' | UNSIGNED='unsigned' | INTEGER='integer' | FLOAT='float' | HOST=
	////  'hostType';
	public TransitionTypeElements getTransitionTypeAccess() {
		return (unknownRuleTransitionType != null) ? unknownRuleTransitionType : (unknownRuleTransitionType = new TransitionTypeElements());
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//Action returns synccharts::Action:
	//  isImmediate?="#"? delay=INT? trigger=BooleanExpression? ("/" (effects+=Effect ","?)*)
	//  ?; 
	////import "synccharts" as synchcharts
	//
	////==============================================================================
	//// Basic Actions
	////==============================================================================
	public ActionLabelGrammarAccess.ActionElements getActionAccess() {
		return gaActionLabel.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Effect returns synccharts::Effect:
	//  Emission|Assignment|HostCode;
	public ActionLabelGrammarAccess.EffectElements getEffectAccess() {
		return gaActionLabel.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns synccharts::Emission:
	//  signal=[synccharts::Signal] ("(" newValue=ValueExpression ")"|"(" newValue=
	//  BooleanExpression ")")?;
	public ActionLabelGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActionLabel.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns synccharts::Assignment:
	//  variable=[synccharts::Variable] ":=" (expression=ValueExpression|expression=
	//  BooleanExpression);
	public ActionLabelGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActionLabel.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//SignalReference returns synccharts::SignalReference:
	//  signal=[synccharts::Signal];
	public ActionLabelGrammarAccess.SignalReferenceElements getSignalReferenceAccess() {
		return gaActionLabel.getSignalReferenceAccess();
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}

	//VariableReference returns synccharts::VariableReference:
	//  variable=[synccharts::Variable];
	public ActionLabelGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaActionLabel.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//  "-"? "0".."9"+; 
	//
	////==============================================================================
	//// Values
	////==============================================================================
	//
	//// redefine INT terminal to allow negative numbers
	public TerminalRule getINTRule() {
		return gaActionLabel.getINTRule();
	} 

	//IntValue returns synccharts::IntValue:
	//  value=INT;
	public ActionLabelGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActionLabel.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue returns synccharts::FloatValue:
	//  value=Float;
	public ActionLabelGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActionLabel.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue returns synccharts::BooleanValue:
	//  value=Boolean;
	public ActionLabelGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaActionLabel.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Value returns synccharts::Value:
	//  IntValue|FloatValue|BooleanValue; 
	//    
	//	        
	//
	//// make sure the Float rule does not shadow the INT rule
	public ActionLabelGrammarAccess.ValueElements getValueAccess() {
		return gaActionLabel.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//terminal Float returns ecore::EFloatObject:
	//  (INT "." INT | INT ("." INT)? ("e" | "E") "+"? INT) "f"? | INT "f"; 
	//
	//// make sure the Float rule does not shadow the INT rule
	public TerminalRule getFloatRule() {
		return gaActionLabel.getFloatRule();
	} 

	//terminal Boolean returns ecore::EBooleanObject:
	//  "true" | "false"; 
	//              
	//
	////==============================================================================
	//// Arithmetic Expressions
	////==============================================================================
	//
	//// Example: ?A
	public TerminalRule getBooleanRule() {
		return gaActionLabel.getBooleanRule();
	} 

	//ValOperation returns synccharts::ComplexExpression:
	//  operator=ValOperator subExpressions+=SignalReference; 
	//
	////==============================================================================
	//// Arithmetic Expressions
	////==============================================================================
	//
	//// Example: ?A	
	//    
	//	  
	//
	//// everything that evaluates to a primitive number value
	public ActionLabelGrammarAccess.ValOperationElements getValOperationAccess() {
		return gaActionLabel.getValOperationAccess();
	}
	
	public ParserRule getValOperationRule() {
		return getValOperationAccess().getRule();
	}

	//ValueExpression returns synccharts::Expression:
	//  PlusOperation; 
	//
	//// everything that evaluates to a primitive number value
	//    
	//	
	//
	//// Example: 42, 42.2, ?A, var1, (1+2*3)
	public ActionLabelGrammarAccess.ValueExpressionElements getValueExpressionAccess() {
		return gaActionLabel.getValueExpressionAccess();
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//ParanthesedValueExpression returns synccharts::Expression:
	//  IntValue|FloatValue|ValOperation|VariableReference|HostCode|"(" PlusOperation ")"|
	//  "(" DivOperation ")"; 
	//
	//// Example: 42, 42.2, ?A, var1, (1+2*3)
	//    
	//                            
	//
	//// Example: 1 + 2, varA - ?B
	public ActionLabelGrammarAccess.ParanthesedValueExpressionElements getParanthesedValueExpressionAccess() {
		return gaActionLabel.getParanthesedValueExpressionAccess();
	}
	
	public ParserRule getParanthesedValueExpressionRule() {
		return getParanthesedValueExpressionAccess().getRule();
	}

	//PlusOperation returns synccharts::Expression:
	//  MultOrDivOperation ({synccharts::ComplexExpression.subExpressions+=current}
	//  operator=PlusOperator subExpressions+=MultOrDivOperation)*; 
	//
	//// Example: 1 + 2, varA - ?B
	public ActionLabelGrammarAccess.PlusOperationElements getPlusOperationAccess() {
		return gaActionLabel.getPlusOperationAccess();
	}
	
	public ParserRule getPlusOperationRule() {
		return getPlusOperationAccess().getRule();
	}

	//MultOrDivOperation returns synccharts::Expression:
	//  MultOperation|"(" DivOperation ")"; 
	//
	//    
	//	    
	//
	//// Example: 2 * 4, varA mod ?B
	public ActionLabelGrammarAccess.MultOrDivOperationElements getMultOrDivOperationAccess() {
		return gaActionLabel.getMultOrDivOperationAccess();
	}
	
	public ParserRule getMultOrDivOperationRule() {
		return getMultOrDivOperationAccess().getRule();
	}

	//MultOperation returns synccharts::Expression:
	//  PreOrNormalValueExpression ({synccharts::ComplexExpression.subExpressions+=
	//  current} operator=MultOperator subExpressions+=PreOrNormalValueExpression)*; 
	//
	//// Example: 2 * 4, varA mod ?B
	//    
	//	      
	//
	//// Example: (2 / 4)
	//// note: division has to have always parantheses because the '/' sign is also used for trigger/effect delimiter
	public ActionLabelGrammarAccess.MultOperationElements getMultOperationAccess() {
		return gaActionLabel.getMultOperationAccess();
	}
	
	public ParserRule getMultOperationRule() {
		return getMultOperationAccess().getRule();
	}

	//DivOperation returns synccharts::Expression:
	//  PreOrNormalValueExpression ({synccharts::ComplexExpression.subExpressions+=
	//  current} operator=DivOperator subExpressions+=PreOrNormalValueExpression)*; 
	//
	//// Example: (2 / 4)
	//// note: division has to have always parantheses because the '/' sign is also used for trigger/effect delimiter
	//    
	//	      
	//
	//// Example: pre (? A)
	public ActionLabelGrammarAccess.DivOperationElements getDivOperationAccess() {
		return gaActionLabel.getDivOperationAccess();
	}
	
	public ParserRule getDivOperationRule() {
		return getDivOperationAccess().getRule();
	}

	//PreArithmOperation returns synccharts::ComplexExpression:
	//  operator=UnaryParanthesedOperator "(" subExpressions+=ValOperation ")"; 
	//
	//// Example: pre (? A)
	public ActionLabelGrammarAccess.PreArithmOperationElements getPreArithmOperationAccess() {
		return gaActionLabel.getPreArithmOperationAccess();
	}
	
	public ParserRule getPreArithmOperationRule() {
		return getPreArithmOperationAccess().getRule();
	}

	//PreOrNormalValueExpression returns synccharts::Expression:
	//  PreArithmOperation|ParanthesedValueExpression; 
	//	
	//    
	//	    
	//
	////==============================================================================
	//// Boolean Expressions
	////==============================================================================
	//
	//// Example: 42 <= ?A
	public ActionLabelGrammarAccess.PreOrNormalValueExpressionElements getPreOrNormalValueExpressionAccess() {
		return gaActionLabel.getPreOrNormalValueExpressionAccess();
	}
	
	public ParserRule getPreOrNormalValueExpressionRule() {
		return getPreOrNormalValueExpressionAccess().getRule();
	}

	//CompareOperation returns synccharts::Expression:
	//  ValueExpression ({synccharts::ComplexExpression.subExpressions+=current} operator=
	//  CompareOperator subExpressions+=ValueExpression); 
	//
	////==============================================================================
	//// Boolean Expressions
	////==============================================================================
	//
	//// Example: 42 <= ?A
	//    
	//	        	
	//
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	public ActionLabelGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActionLabel.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//UnaryOperation returns synccharts::ComplexExpression:
	//  operator=UnaryOperator subExpressions+=( ParanthesedBooleanExpression |
	//  UnaryParanthesedOperation );   	
	//
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	public ActionLabelGrammarAccess.UnaryOperationElements getUnaryOperationAccess() {
		return gaActionLabel.getUnaryOperationAccess();
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//UnaryParanthesedOperation returns synccharts::ComplexExpression:
	//  operator=UnaryParanthesedOperator "(" subExpressions+=BooleanExpression ")"; 
	//
	//    
	//        
	//
	//// Example: either negated or normal expression (with parantheses)
	public ActionLabelGrammarAccess.UnaryParanthesedOperationElements getUnaryParanthesedOperationAccess() {
		return gaActionLabel.getUnaryParanthesedOperationAccess();
	}
	
	public ParserRule getUnaryParanthesedOperationRule() {
		return getUnaryParanthesedOperationAccess().getRule();
	}

	//UnaryOrNormalExpression returns synccharts::Expression:
	//  UnaryOperation|UnaryParanthesedOperation|ParanthesedBooleanExpression; 
	//
	//// Example: either negated or normal expression (with parantheses) 
	//    
	//	        
	//
	//// Example: A and B, not C and 42 <= ?D
	public ActionLabelGrammarAccess.UnaryOrNormalExpressionElements getUnaryOrNormalExpressionAccess() {
		return gaActionLabel.getUnaryOrNormalExpressionAccess();
	}
	
	public ParserRule getUnaryOrNormalExpressionRule() {
		return getUnaryOrNormalExpressionAccess().getRule();
	}

	//AndOperation returns synccharts::Expression:
	//  UnaryOrNormalExpression ({synccharts::ComplexExpression.subExpressions+=current}
	//  operator=OperatorAnd subExpressions+=UnaryOrNormalExpression)*; 
	//
	//// Example: A and B, not C and 42 <= ?D
	//    
	//	      
	//
	//// Example: A or B, C and B or D and not E
	public ActionLabelGrammarAccess.AndOperationElements getAndOperationAccess() {
		return gaActionLabel.getAndOperationAccess();
	}
	
	public ParserRule getAndOperationRule() {
		return getAndOperationAccess().getRule();
	}

	//OrOperation returns synccharts::Expression:
	//  AndOperation ({synccharts::ComplexExpression.subExpressions+=current} operator=
	//  OperatorOr subExpressions+=AndOperation)*; 
	//
	//// Example: A or B, C and B or D and not E 
	//    
	//	      
	//
	//// Example: true, A, 42>var1, (A or B), (not D and C or ?E = 42)
	//// note that the order of CompareOperation and SignalReference is important. This might be an Xtext bug...
	public ActionLabelGrammarAccess.OrOperationElements getOrOperationAccess() {
		return gaActionLabel.getOrOperationAccess();
	}
	
	public ParserRule getOrOperationRule() {
		return getOrOperationAccess().getRule();
	}

	//ParanthesedBooleanExpression returns synccharts::Expression:
	//  BooleanValue|CompareOperation|SignalReference|ValOperation|HostCode|"("
	//  OrOperation ")"; 
	//
	//// Example: true, A, 42>var1, (A or B), (not D and C or ?E = 42)
	//// note that the order of CompareOperation and SignalReference is important. This might be an Xtext bug...
	//    
	//                          
	//
	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	public ActionLabelGrammarAccess.ParanthesedBooleanExpressionElements getParanthesedBooleanExpressionAccess() {
		return gaActionLabel.getParanthesedBooleanExpressionAccess();
	}
	
	public ParserRule getParanthesedBooleanExpressionRule() {
		return getParanthesedBooleanExpressionAccess().getRule();
	}

	//BooleanExpression returns synccharts::Expression:
	//  OrOperation; 
	//
	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//    
	//	
	//
	////==============================================================================
	//// Operators
	////==============================================================================
	public ActionLabelGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaActionLabel.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//enum OperatorType returns synccharts::OperatorType:
	//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NOT="not" | NE="<>" | AND="and" | OR="or" | ADD=
	//  "+" | SUB="-" | MULT="*" | DIV="/" | MOD="mod" | VAL="?" | PRE="pre"; 
	//
	////==============================================================================
	//// Operators
	////==============================================================================
	public ActionLabelGrammarAccess.OperatorTypeElements getOperatorTypeAccess() {
		return gaActionLabel.getOperatorTypeAccess();
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}

	//enum ValOperator returns synccharts::OperatorType:
	//  VAL="?";
	public ActionLabelGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaActionLabel.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum CompareOperator returns synccharts::OperatorType:
	//  EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"; 
	//
	//      
	//	                    
	//
	//// not A
	public ActionLabelGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActionLabel.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum UnaryOperator returns synccharts::OperatorType:
	//  NOT="not"; 
	//
	//// not A	
	//      
	//	
	//
	//// pre(A)
	public ActionLabelGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaActionLabel.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum UnaryParanthesedOperator returns synccharts::OperatorType:
	//  PRE="pre"; 
	//
	//// pre(A)
	public ActionLabelGrammarAccess.UnaryParanthesedOperatorElements getUnaryParanthesedOperatorAccess() {
		return gaActionLabel.getUnaryParanthesedOperatorAccess();
	}
	
	public EnumRule getUnaryParanthesedOperatorRule() {
		return getUnaryParanthesedOperatorAccess().getRule();
	}

	//enum OperatorOr returns synccharts::OperatorType:
	//  OR="or";
	public ActionLabelGrammarAccess.OperatorOrElements getOperatorOrAccess() {
		return gaActionLabel.getOperatorOrAccess();
	}
	
	public EnumRule getOperatorOrRule() {
		return getOperatorOrAccess().getRule();
	}

	//enum OperatorAnd returns synccharts::OperatorType:
	//  AND="and";
	public ActionLabelGrammarAccess.OperatorAndElements getOperatorAndAccess() {
		return gaActionLabel.getOperatorAndAccess();
	}
	
	public EnumRule getOperatorAndRule() {
		return getOperatorAndAccess().getRule();
	}

	//enum OperatorPre returns synccharts::OperatorType:
	//  PRE="pre";
	public ActionLabelGrammarAccess.OperatorPreElements getOperatorPreAccess() {
		return gaActionLabel.getOperatorPreAccess();
	}
	
	public EnumRule getOperatorPreRule() {
		return getOperatorPreAccess().getRule();
	}

	//enum PlusOperator returns synccharts::OperatorType:
	//  ADD="+" | SUB="-";
	public ActionLabelGrammarAccess.PlusOperatorElements getPlusOperatorAccess() {
		return gaActionLabel.getPlusOperatorAccess();
	}
	
	public EnumRule getPlusOperatorRule() {
		return getPlusOperatorAccess().getRule();
	}

	//enum MultOperator returns synccharts::OperatorType:
	//  MULT="*" | MOD="mod";
	public ActionLabelGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActionLabel.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum DivOperator returns synccharts::OperatorType:
	//  DIV="/"; 
	//
	//      	
	//	
	//
	//
	////==============================================================================
	//// Misc
	////==============================================================================
	public ActionLabelGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActionLabel.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//HostCode returns synccharts::HostCode:
	//  code=STRING ("(" type=ID ")")?; 
	//
	//
	////==============================================================================
	//// Misc
	////==============================================================================
	//	
	//    
	//	//"'"code=STRING"'";
	public ActionLabelGrammarAccess.HostCodeElements getHostCodeAccess() {
		return gaActionLabel.getHostCodeAccess();
	}
	
	public ParserRule getHostCodeRule() {
		return getHostCodeAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActionLabel.getIDRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaActionLabel.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActionLabel.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActionLabel.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActionLabel.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaActionLabel.getANY_OTHERRule();
	} 
}
