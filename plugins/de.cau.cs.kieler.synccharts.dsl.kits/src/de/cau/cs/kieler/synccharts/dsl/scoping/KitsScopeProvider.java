/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.dsl.scoping;

import java.util.ArrayList;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import de.cau.cs.kieler.synccharts.Action;
import de.cau.cs.kieler.synccharts.Emission;
import de.cau.cs.kieler.synccharts.Region;
import de.cau.cs.kieler.synccharts.Signal;
import de.cau.cs.kieler.synccharts.SignalReference;
import de.cau.cs.kieler.synccharts.State;
import de.cau.cs.kieler.synccharts.Transition;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class KitsScopeProvider extends AbstractDeclarativeScopeProvider {
    /**
     * This declarative function calcualtes the scope of target states
     * 
     * @param context
     *            the context
     * @param reference
     *            the reference
     * @return new scope for target states
     */
    // @Override
    // protected IScope createScope(Resource resource, EClass type) {
    // System.out.println("cross ref's are now made by id per default");
    // return new DefaultScope(resource, type, getImportUriResolver(),
    // SimpleAttributeResolver.newResolver(String.class, "id"));
    //
    // }

    IScope scope_Transition_targetState(Transition context, EReference reference) {
        State sourceState = null;
        if (context.eContainer() != null
                && context.eContainer() instanceof State) {
            sourceState = (State) context.eContainer();
        }
        Region parentRegion = null;
        if (sourceState.getParentRegion() != null) {
            parentRegion = sourceState.getParentRegion();
        }

        ArrayList<IEObjectDescription> scopeElems = new ArrayList<IEObjectDescription>();
        if (!(parentRegion.getInnerStates().isEmpty())) {
            for (State innerState : parentRegion.getInnerStates()) {
                // if the inner state has a label then add its label
                if (innerState.getLabel() != null) {
                    IEObjectDescription elem = EObjectDescription.create(
                            innerState.getLabel(), innerState);
                    scopeElems.add(elem);
                }
                // else if the inner state has an id then add its id
                else if (innerState.getId() != null) {
                    IEObjectDescription elem = EObjectDescription.create(
                            innerState.getId(), innerState);
                    scopeElems.add(elem);
                }
            }
        }
        return new SimpleScope(scopeElems);
    }

    /**
     * This declarative function calcualtes the scope of signals in emissions
     * 
     * @param context
     *            the context
     * @param reference
     *            the reference
     * @return new scope for signals in emissions
     */

    IScope scope_Emission_signal(Emission context, EReference reference) {
        ArrayList<IEObjectDescription> scopeElems = new ArrayList<IEObjectDescription>();
        Action a = null;
        // this is my transition
        if (context.getParentEAction() != null) {
            a = context.getParentEAction();
        }
        if (a instanceof Transition) {
            Transition t = (Transition) a;

            // has the parent state declared any signals?
            if (t.getSourceState().getSignals() != null) {
                for (Signal sig : t.getSourceState().getSignals()) {
                    IEObjectDescription elem = EObjectDescription.create(sig
                            .getName(), sig);
                    System.out.println("=================================");
                    System.out.println("ADDED: " + sig.getName());
                    System.out.println("=================================");
                    scopeElems.add(elem);
                }
            }

            // ============ start region ============//
            Region r = t.getSourceState().getParentRegion();
            if (!r.getSignals().isEmpty()) {// != null) {
                System.out.println("=================================");
                System.out.println("FOUND SIGNALS");
                System.out.println("=================================");
                for (Signal sig : r.getSignals()) {
                    IEObjectDescription elem = EObjectDescription.create(sig
                            .getName(), sig);
                    System.out.println("Signal " + sig.getName());
                    System.out.println("=================================");
                    System.out.println("ADDED: " + sig.getName());
                    System.out.println("=================================");
                    scopeElems.add(elem);

                }
            }

            // this parent region is not the root region yet?
            if (r.getParentState() != null) {
                System.out.println("Region above "
                        + r.getInnerStates().get(0).getLabel()
                        + " has a parent state so ...");
                scopeElems = gatherSignals(r, scopeElems);
            }
        }
        // ============ end of region ============//
        // System.out
        // .println("--------------END OF SCOPE CALC (Emission_signal)--------------");
        else
            a = context.getParentEAction();
        State parentState = null;
        if (a.getParentStateEntryAction() != null) {
            parentState = a.getParentStateEntryAction();
        }
        if (a.getParentStateExitAction() != null) {
            parentState = a.getParentStateExitAction();
        }
        if (a.getParentStateInnerAction() != null) {
            parentState = a.getParentStateInnerAction();
        }
        if (a.getParentStateSuspension() != null) {
            parentState = a.getParentStateSuspension();
        }
        if (parentState != null) {
            if (parentState.getSignals() != null) {
                for (Signal sig : parentState.getSignals()) {
                    IEObjectDescription elem = EObjectDescription.create(sig
                            .getName(), sig);
                    System.out.println("=================================");
                    System.out.println("ADDED: " + sig.getName());
                    System.out.println("=================================");
                    scopeElems.add(elem);
                }
            }

        }
        Region r = null;
        if (parentState.getParentRegion() != null)

        {
            r = parentState.getParentRegion();
        }
        if (!r.getSignals().isEmpty()) {// != null) {
            System.out.println("=================================");
            System.out.println("FOUND SIGNALS");
            System.out.println("=================================");
            for (Signal sig : r.getSignals()) {
                IEObjectDescription elem = EObjectDescription.create(sig
                        .getName(), sig);
                System.out.println("Signal " + sig.getName());
                System.out.println("=================================");
                System.out.println("ADDED: " + sig.getName());
                System.out.println("=================================");
                scopeElems.add(elem);

            }
        }

        // this parent region is not the root region yet?
        if (r.getParentState() != null) {
            System.out.println("Region above "
                    + r.getInnerStates().get(0).getLabel()
                    + " has a parent state so ...");
            scopeElems = gatherSignals(r, scopeElems);
        }

        return new SimpleScope(scopeElems);
    }

    /**
     * This declarative function calculates the scope of signals in signal
     * references
     * 
     * @param context
     *            the context
     * @param reference
     *            the reference
     * @return new scope for signals in signal references
     */
    IScope scope_SignalReference_signal(SignalReference context,
            EReference reference) {

        ArrayList<IEObjectDescription> scopeElems = new ArrayList<IEObjectDescription>();
        // this is my transition
        Action a = context.getParentExpression().getParentAction();
        // Action a = context.getParentAction();
        if (a instanceof Transition) {
            Transition t = (Transition) a;
            // if (t.getSourceState().getId() != null)
            // System.out.println(context.toString()
            // + " has the source state: "
            // + t.getSourceState().getId());
            // if (t.getSourceState().getLabel() != null)
            // System.out.println(context.toString()
            // + " has the source state: "
            // + t.getSourceState().getLabel());
            // has the parent state declared any signals?
            if (t.getSourceState().getSignals() != null) {
                for (Signal sig : t.getSourceState().getSignals()) {
                    IEObjectDescription elem = EObjectDescription.create(sig
                            .getName(), sig);
                    System.out.println("=================================");
                    System.out.println("ADDED: " + sig.getName());
                    System.out.println("=================================");
                    scopeElems.add(elem);
                }
            }

            // ============ start region ============//
            Region r = t.getSourceState().getParentRegion();
            if (!r.getSignals().isEmpty()) {
                System.out.println("=================================");
                System.out.println("FOUND SIGNALS");
                System.out.println("=================================");
                for (Signal sig : r.getSignals()) {
                    IEObjectDescription elem = EObjectDescription.create(sig
                            .getName(), sig);
                    System.out.println("Signal " + sig.getName());
                    System.out.println("=================================");
                    System.out.println("ADDED: " + sig.getName());
                    System.out.println("=================================");
                    scopeElems.add(elem);

                }
            }

            // this parent region is not the root region yet?
            if (r.getParentState() != null && r.getInnerStates().get(0) != null
                    && r.getInnerStates().get(0).getLabel() != null) {
                System.out.println("Region above "
                        + r.getInnerStates().get(0).getLabel()
                        + " has a parent state so ...");
                scopeElems = gatherSignals(r, scopeElems);
            }
        }
        // ============ end of region ============//
        System.out
                .println("--------------END OF SCOPE CALC (SigRef)--------------");
        return new SimpleScope(scopeElems);

    }

    // help function to gather all signals in a region
    private ArrayList<IEObjectDescription> gatherSignals(final Region r,
            final ArrayList<IEObjectDescription> scopedElems) {
        // if you are here, there exists a parent state to your region so
        // extract it:
        State parentState = r.getParentState();
        // has the parent state declared any signals?
        if (parentState.getSignals() != null) {
            for (Signal sig : parentState.getSignals()) {
                IEObjectDescription elem = EObjectDescription.create(sig
                        .getName(), sig);
                System.out.println("=================================");
                System.out.println("ADDED: " + sig.getName());
                System.out.println("=================================");
                scopedElems.add(elem);
            }
        }
        System.out.println("...jump to its parent state: "
                + parentState.getLabel());
        if (parentState.getRegions() != null) {
            for (Region outerRegions : parentState.getRegions()) {
                if (!outerRegions.getSignals().isEmpty()) {
                    System.out.println("=================================");
                    System.out.println("FOUND SIGNALS");
                    System.out.println("=================================");
                    for (Signal sig : outerRegions.getSignals()) {
                        IEObjectDescription elem = EObjectDescription.create(
                                sig.getName(), sig);
                        scopedElems.add(elem);
                        System.out.println("Signal " + sig.getName());
                        System.out.println("=================================");
                        System.out.println("ADDED: " + sig.getName());
                        System.out.println("=================================");
                    }
                }
            }
        }
        if (!parentState.getParentRegion().getSignals().isEmpty()) {
            for (Signal sig : parentState.getParentRegion().getSignals()) {
                IEObjectDescription elem = EObjectDescription.create(sig
                        .getName(), sig);
                scopedElems.add(elem);
                System.out.println("=================================");
                System.out.println("ADDED: " + sig.getName());
                System.out.println("=================================");
            }
        }
        // be sure you have a parent state to your region before calling
        // gatherSignals again otherwise you are done gathering anyway
        if (parentState.getParentRegion().getParentState() != null) {
            gatherSignals(parentState.getParentRegion(), scopedElems);
        }
        System.out.println("Region above " + parentState.getLabel()
                + " has no parent state so we are at the top");

        return scopedElems;
    }

    // public static EObject parent;
    //
    //	
    // /*
    // * (non-Javadoc)
    // *
    // * @see
    // *
    // org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider#getScope
    // * (org.eclipse.emf.ecore.EObject, org.eclipse.emf.ecore.EReference)
    // */
    // @Override
    // public IScope getScope(EObject context, EReference reference) {
    // if (parent != null)
    // return new ExternalScope(parent);
    // return super.getScope(context, reference);
    // }
    //
    // class ExternalScope implements IScope {
    //
    // EObject parent;
    // List<IEObjectDescription> scopedElements;
    //
    // public ExternalScope(EObject parent) {
    // this.parent = parent;
    // this.scopedElements = new ArrayList<IEObjectDescription>();
    // // State scopedState = parentState;
    // // while(scopedState != null){
    // if (this.parent != null && this.parent instanceof Region) {
    // List<Signal> signals = ((Region) parent).getSignals();
    // for (Signal signal : signals) {
    // scopedElements.add(new ExternalScopedElement(signal, signal
    // .getName()));
    // }
    // List<Variable> variables = ((Region) parent).getVariables();
    // for (Variable variable : variables) {
    // scopedElements.add(new ExternalScopedElement(variable,
    // variable.getName()));
    // }
    // } else if (this.parent != null && this.parent instanceof State) {
    // List<Signal> signals = ((State) parent).getSignals();
    // for (Signal signal : signals) {
    // scopedElements.add(new ExternalScopedElement(signal, signal
    // .getName()));
    // }
    // }
    // // if(scopedState.getParentRegion() != null)
    // // scopedState = scopedState.getParentRegion().getParentState();
    // // }
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.eclipse.xtext.scoping.IScope#getAllContents()
    // */
    // public Iterable<IEObjectDescription> getAllContents() {
    // List<IEObjectDescription> elements = new
    // ArrayList<IEObjectDescription>();
    // elements.addAll(scopedElements);
    // IScope outerScope = this.getOuterScope();
    // while (!outerScope.equals(IScope.NULLSCOPE)) {
    // elements
    // .addAll((Collection<? extends IEObjectDescription>) outerScope
    // .getContents());
    // outerScope = outerScope.getOuterScope();
    // }
    // return elements;
    // }
    //
    // /*
    // * (non-Javadoc)
    // *
    // * @see org.eclipse.xtext.scoping.IScope#getContents()
    // */
    // public Iterable<IEObjectDescription> getContents() {
    // return scopedElements;
    // }
    //
    /*
     * (non-Javadoc)
     * 
     * @see org.eclipse.xtext.scoping.IScope#getOuterScope()
     */
    // public IScope getOuterScope() {
    // if (parent instanceof Region) {
    // if (((Region) parent).getParentState() != null)
    // return new ExternalScope(((Region) parent).getParentState());
    // } else if (parent instanceof State) {
    // if (((State) parent).getParentRegion() != null)
    // return new ExternalScope(((State) parent).getParentRegion());
    // }
    // return IScope.NULLSCOPE;
    // }
    //
    // class ExternalScopedElement implements IEObjectDescription {
    //
    // EObject object;
    // String name;
    //
    // public ExternalScopedElement(EObject o, String n) {
    // object = o;
    // name = n;
    // }
    // }
}
//
// /*
// * (non-Javadoc)
// *
// * @see
// * org.eclipse.xtext.scoping.IEObjectDescription#additionalInformation()
// */
// public Object additionalInformation() {
// return null;
// }
//
// /*
// * (non-Javadoc)
// *
// * @see org.eclipse.xtext.scoping.IEObjectDescription#element()
// */
// public EObject element() {
// return object;
// }
//
// /*
// * (non-Javadoc)
// *
// * @see org.eclipse.xtext.scoping.IEObjectDescription#name()
// */
// public String name() {
// return name;
// }
//
// }
// }
