/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.dsl;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.resource.IFragmentProvider;

import de.cau.cs.kieler.synccharts.dsl.kits.resource.KitsFragmentProvider;
import de.cau.cs.kieler.synccharts.dsl.kits.serialization.KitsTransientValueService;
import de.cau.cs.kieler.synccharts.formatting.ActionLabelValueConverter;
import de.cau.cs.kieler.synccharts.formatting.TransitionLabelTransientValueService;

/**
 * This class is the injector created also to setup the standalone Kits
 * application, to get the implementations injected. Use this class to register
 * components to be used within the IDE.
 * 
 * @author oba
 */
public class KitsRuntimeModule extends
        de.cau.cs.kieler.synccharts.dsl.AbstractKitsRuntimeModule {
    @Override
    /*
     * binds the fragment provider. it is used for the Glue code
     */
    public Class<? extends IFragmentProvider> bindIFragmentProvider() {
        return KitsFragmentProvider.class;
    }

    /**
     * binds the custom scope provider.
     * 
     * @return custom implementation of the Scope Provider
     */
    // public Class<? extends IScopeProvider> bindIScopeProvider() {
    // return MyDefaultScopeProvider.class;
    // }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.xtext.service.DefaultRuntimeModule#bindITransientValueService
     * ()
     */
    // @Override
    // public Class<? extends ITransientValueService>
    // bindITransientValueService() {
    // return KitsTransientValueService.class;
    // }

    @Override
    public Class<? extends ITransientValueService> bindITransientValueService() {
        return KitsTransientValueService.class;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.xtext.service.DefaultRuntimeModule#bindIValueConverterService
     * ()
     */
    @Override
    public Class<? extends IValueConverterService> bindIValueConverterService() {
        return ActionLabelValueConverter.class;
    }

}
