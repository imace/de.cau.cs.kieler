/*
 * generated by Xtext
 */
package de.cau.cs.kieler.synccharts.dsl.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 * ======================================================================
 * ========== Also note that when you change your grammar, the numbering of
 * keywords, groups etc will change causing you having to re-implement this
 * formatter
 */
public class KitsFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig config) {
		de.cau.cs.kieler.synccharts.dsl.services.KitsGrammarAccess f = (de.cau.cs.kieler.synccharts.dsl.services.KitsGrammarAccess) getGrammarAccess();
		// regions
		config.setLinewrap().after(f.getRegionRule());

		// config.setLinewrap().after(f.getRegionAccess().getIdAssignment_2());
		config.setLinewrap().after(
				f.getStateAccess().getVerticalLineVerticalLineKeyword_13_2_0());
		config.setLinewrap().before(
				f.getStateAccess().getVerticalLineVerticalLineKeyword_13_2_0());
		// states
		config.setLinewrap().before(
				f.getStateAccess().getRightCurlyBracketKeyword_13_3());
		config.setLinewrap().after(
				f.getStateAccess().getRightCurlyBracketKeyword_13_3());
		config.setLinewrap().after(
				f.getStateAccess().getLeftCurlyBracketKeyword_13_0());
		// indent "{" --- "}"
		config.setIndentation(f.getStateAccess()
				.getLeftCurlyBracketKeyword_13_0(), f.getStateAccess()
				.getRightCurlyBracketKeyword_13_3());
		config.setIndentation(f.getRegionAccess().getInnerStatesAssignment_4(),
				f.getRegionAccess().getInnerStatesAssignment_4());

		// indent init --- id
		// config.setIndentation(f.getStateAccess().getIsInitialAssignment_1(),
		// f
		// .getStateAccess().getIdAssignment_6());
		// // indent final --- id
		// config.setIndentation(f.getStateAccess().getIsFinalAssignment_2(), f
		// .getStateAccess().getIdAssignment_6());
		// indent init --- "}"
		// config.setIndentation(f.getStateAccess().getIsInitialAssignment_1(),
		// f
		// .getStateAccess().getRightCurlyBracketKeyword_13_3());
		// indent final --- "}"
		// config.setIndentation(f.getStateAccess().getIsFinalAssignment_2(), f
		// .getStateAccess().getRightCurlyBracketKeyword_13_3());

		// signals
		config.setLinewrap().before(
				f.getSignalAccess().getIsInputInputKeyword_0_0());
		config.setLinewrap().before(
				f.getSignalAccess().getIsOutputOutputKeyword_1_0());
		// variable
		config.setLinewrap().before(f.getVariableAccess().getVarKeyword_0());

		// transition
		// indent transitionType --- ";"
		// config.setNoSpace().before(f.getTransitionAccess().getSemicolonKeyword_5());
		// config.setIndentation(f.getTransitionAccess().getTypeAssignment_0(),
		// f
		// .getTransitionAccess().getSemicolonKeyword_5());
		config.setLinewrap().before(
				f.getTransitionTypeAccess()
						.getWEAKABORTEnumLiteralDeclaration_0());
		config
				.setLinewrap()
				.before(
						f
								.getTransitionTypeAccess()
								.getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0());
		config.setLinewrap().before(
				f.getTransitionTypeAccess().getSTRONGABORTOKeyword_1_0());
		config
				.setLinewrap()
				.before(
						f
								.getTransitionTypeAccess()
								.getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0());
		config.setLinewrap().after(
				f.getTransitionAccess().getSemicolonKeyword_5());
		// comments
		config.setLinewrap().before(f.getSL_COMMENTRule());
		config.setLinewrap().after(f.getSL_COMMENTRule());
		config.setLinewrap().after(f.getML_COMMENTRule());

	}
}
