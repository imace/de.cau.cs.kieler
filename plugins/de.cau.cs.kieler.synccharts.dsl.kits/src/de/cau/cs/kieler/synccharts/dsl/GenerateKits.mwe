<workflow>
	<property file="de/cau/cs/kieler/synccharts/dsl/GenerateKits.properties"/>
	
	<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup">
		<registerGeneratedEPackage value="de.cau.cs.kieler.synccharts.SyncchartsPackage"/>
		<platformUri value="${runtimeProject}/.."/>
	</bean>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<!--@modified oba {@link https://bugs.eclipse.org/bugs/show_bug.cgi?id=279093}
			<fragment class="org.eclipse.xtext.generator.grammarAccess.EmptyPackageAwareGrammarAccessFragment"/-->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"/>
			<!--@modified oba We can move "genmodels" because we are not generating any EMF model,
			we are only using the existing one
			genModels="platform:/resource/de.cau.cs.kieler.synccharts/model/synccharts.genmodel"/-->
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- @modified oba AntlrParser -->
			<fragment class="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment">
   				<options backtrack="true"/>
			</fragment>
			
			<!-- If you don't want to use the Antlr fragment for some reason, remove the antlr fragment and uncomment the packrat parser fragment below.
			<fragment class="org.eclipse.xtext.generator.parser.PackratParserFragment"/>
			 -->
	        
	        <!-- @modified(oba) add Check based validation fragment -->
			<fragment class=
  				"org.eclipse.xtext.generator.validation.CheckFragment"/>
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
            

   						
            
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.JavaScopingFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>
			<fragment class="org.eclipse.xtext.ui.generator.outline.OutlineNodeAdapterFactoryFragment"/>

			
			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			
			<!-- @modified(oba) AntlrParser -->
		    <fragment class="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment">
		    	<options backtrack="true"/>
		    </fragment> 
			
		</language>
	</component>
</workflow>