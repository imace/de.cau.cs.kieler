grammar de.cau.cs.kieler.core.annotations.Annotations with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// --------------------------
//
//   ANNOTATIONS
//
// --------------------------


Annotation returns Annotation:
	CommentAnnotation
	| TagAnnotation
	| KeyStringValueAnnotation
	| KeyBooleanValueAnnotation
	| KeyIntValueAnnotation
	| KeyFloatValueAnnotation
	;



// introduction of parsing rules for annotations
//StringAnnotation returns Annotation:
//	CommentAnnotation
//	| KeyStringValueAnnotation
//	;


// e.g.: /** semantic comment */
CommentAnnotation returns StringAnnotation:
	value=COMMENT_ANNOTATION;


// e.g.: @HVlayout
TagAnnotation returns StringAnnotation:
    '@' name=ID;


// e.g.: @layouter dot;   
KeyStringValueAnnotation returns StringAnnotation:
	'@' name=ID value=EString;


// e.g.: @visible true;
KeyBooleanValueAnnotation returns BooleanAnnotation:
	'@' name=ID value=Boolean;


// e.g.: @minSpace 10;    
KeyIntValueAnnotation returns IntAnnotation:
	'@' name=ID value=INT;


// e.g.: @minSpace 10.0;    
KeyFloatValueAnnotation returns FloatAnnotation:
	'@' name=ID value=Float;


// needed for importing other resources
ImportAnnotation returns ImportAnnotation:
    'import' importURI=STRING;


// allow strings without quotes as they don'c contain spaces
EString returns ecore::EString:
	STRING | ID;


// --------------------------
//
//  Terminals...
//
// --------------------------


// custom terminals
   
// custom terminal rule introducing semantic comments
terminal COMMENT_ANNOTATION returns ecore::EString: 
    '/**' -> '*/';


// modified version of Terminals.ML_COMMENT as
// COMMENT_ANNOTATION is not recognized correctly with original one 
terminal ML_COMMENT	returns ecore::EString:
    '/*'!'*' -> '*/';


// generic terminals
   
// redefine INT terminal to allow negative numbers
terminal INT returns ecore::EInt:
    '-'?('0'..'9')+;


//// redefine INT terminal to allow negative numbers
//terminal NINT returns ecore::EInt:
//    '-'?('0'..'9')+;


// make sure the Float rule does not shadow the INT rule
terminal Float returns ecore::EFloatObject :
 '-'?('0'..'9')+ ("."('0'..'9')*) (("e"|"E")("+"|"-")?('0'..'9')+)? "f"? |
 '-'?('0'..'9')+"f";
    
    
// introduce boolean values
terminal Boolean returns ecore::EBooleanObject :
    "true" | "false";


