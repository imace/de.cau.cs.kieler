grammar de.cau.cs.kieler.core.annotations.Annotations with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.cau.cs.kieler.core.annotations/model/annotations.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// --------------------------
//
//   ANNOTATIONS
//
// --------------------------


Annotation returns Annotation:
	CommentAnnotation
	| TagAnnotation
	| KeyStringValueAnnotation
	| TypedStringAnnotation
	| KeyBooleanValueAnnotation
	| KeyIntValueAnnotation
	| KeyFloatValueAnnotation
	;


// e.g.: /** semantic comment */
CommentAnnotation returns StringAnnotation:
	value=COMMENT_ANNOTATION;


// e.g.: @HVlayout
TagAnnotation returns Annotation:
    '@' name=ID
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @layouter dot;   
KeyStringValueAnnotation returns StringAnnotation:
	'@' name=ID value=EString
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
TypedStringAnnotation returns TypedStringAnnotation:
    '@' name=ID type=TypeId? value=EString
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @visible true;
KeyBooleanValueAnnotation returns BooleanAnnotation:
	'@' name=ID value=Boolean
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @minSpace 10;    
KeyIntValueAnnotation returns IntAnnotation:
	'@' name=ID value=INT
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @minSpace 10.0;    
KeyFloatValueAnnotation returns FloatAnnotation:
	'@' name=ID value=Float
    ('('
        (annotations+=Annotation)*
    ')')?;


// needed for importing other resources
ImportAnnotation returns ImportAnnotation:
    'import' importURI=STRING;


// allow strings without quotes as they don'c contain spaces
EString returns ecore::EString:
	STRING | ID;


// --------------------------
//
//  Terminals...
//
// --------------------------


// custom terminals
   
// custom terminal rule introducing semantic comments
terminal COMMENT_ANNOTATION returns ecore::EString: 
    '/**' -> '*/';


// modified version of Terminals.ML_COMMENT as
// COMMENT_ANNOTATION is not recognized correctly with original one 
terminal ML_COMMENT	returns ecore::EString:
    '/*'!'*' -> '*/';


// generic terminals
   
// redefine INT terminal to allow negative numbers
terminal INT returns ecore::EInt:
    '-'?('0'..'9')+;


// make sure the Float rule does not shadow the INT rule
terminal Float returns ecore::EFloatObject :
 '-'?('0'..'9')+ ("."('0'..'9')*) (("e"|"E")("+"|"-")?('0'..'9')+)? "f"? |
 '-'?('0'..'9')+"f";
    
    
// introduce boolean values
terminal Boolean returns ecore::EBooleanObject :
    "true" | "false";


// custom terminal rule for strings
terminal STRING returns ecore::EString:
    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';


// type identifiers can reference Java classes
terminal TypeId returns ecore::EString:
    '[' ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')* ']';
