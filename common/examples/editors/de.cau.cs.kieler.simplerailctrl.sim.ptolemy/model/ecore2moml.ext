import simplerailctrl;
import Moml;

//-----------------------------------------------------------------------------
//-- S I M P L E R A I L C T R L - 2 - P T O     T R A N S F O R M A T I O N --
//-----------------------------------------------------------------------------

//start model transformation here
create DocumentRoot this transform(simplerailctrl::RailController rc):
 	this.setEntity(createBaseEntity(rc))
;   
	
//create basic / outer most enclosing entity	
create EntityType this createBaseEntity(simplerailctrl::RailController rc):
   	this.setName("RailController") ->
  	this.setClass1("ptolemy.actor.TypedCompositeActor") ->
  	//crate SR director
   	this.property.add(createMainSRDirector()) ->
   	//create ModelRailwayIO actor
   	this.entity.add(createModelRailwayIOActor()) ->
   	//create concurrent threads
   	createThreads(rc.nodes, this) ->
   	//create delays
   	this.entity.add(createDelay("delayContact")) ->
   	this.entity.add(createDelay("delayOccupied")) ->
   	//connect top level actors
   	this.relation.add(createVertexRelation("contactsGLOBAL")) ->
   	this.relation.add(createVertexRelation("occupiedGLOBAL")) ->
 	connectActors(this, "ModelRailwayIO.contact", "delayContact.input", "delayContactRelation") ->  	
 	connectActors(this, "ModelRailwayIO.occupied", "delayOccupied.input", "delayOccupiedRelation") ->
 	this.link.add(createPlainLink("delayContact.output", "contactsGLOBAL")) -> 
 	this.link.add(createPlainLink("delayOccupied.output", "occupiedGLOBAL")) 
;
// 	connectActors(this, "ModelRailwayIO.tracks", "signalGLOBAL", "signalsRelation")  	
// 	connectActors(this, "ModelRailwayIO.points", "signalGLOBAL", "signalsRelation")  	
// 	connectActors(this, "ModelRailwayIO.signals", "signalGLOBAL", "signalsRelation")  	


create RelationType this createVertexRelation(String relationName) :
   let v = new VertexType:
   v.setName(hash(relationName)) ->
   v.setValue("[0.0,0.0]") ->
   this.vertex.add(v) ->
   this.setClass("ptolemy.actor.TypedIORelation") ->
   this.setName(relationName)
;
create LinkType this createPlainLink(String portName,
									 String relationName) :
   this.setPort(portName) ->
   this.setRelation(relationName)
;

//-----------------------------------------------------------------------------
//--                 C R E A T E     D I R E C T O R S                       --
//-----------------------------------------------------------------------------

//create outer most "SR Director" (ticks every seconds)
create PropertyType this createMainSRDirector():
	let p1 = new PropertyType:
	let p2 = new PropertyType:
	let p3 = new PropertyType:
	let p4 = new PropertyType:
		p1.setName("iterations") ->
		p1.setClass("ptolemy.data.expr.Parameter") ->
		p1.setValue("0") ->
		p2.setName("synchronizeToRealTime") ->
		p2.setClass("ptolemy.data.expr.Parameter") ->
		p2.setValue("false") ->
		p3.setName("timeResolution") ->
		p3.setClass("ptolemy.data.expr.Parameter") ->
		p3.setValue("1.0E-10") ->
		p4.setName("period") ->
		p4.setClass("ptolemy.data.expr.Parameter") ->
		p4.setValue("1") ->
    this.setName("SR Director") ->
	this.setClass("ptolemy.domains.sr.kernel.SRDirector") ->
	this.property.add(p1) ->
	this.property.add(p2) ->
	this.property.add(p3) ->
	this.property.add(p4)
;

//create a "FSM Director" (for a region component)
create PropertyType this createFSMDirector():
    this.setName("directorClass") ->
    this.setValue("ptolemy.domains.fsm.kernel.FSMDirector") ->
	this.setClass("ptolemy.data.expr.StringParameter")
;


//-----------------------------------------------------------------------------
//--                 C R E A T E     MODEL RAILWAY IO                        --
//-----------------------------------------------------------------------------

//create a "ModelRailwayIO" 
create EntityType this createModelRailwayIOActor():
    this.setName("ModelRailwayIO") ->
	this.setClass1("ptolemy.actor.lib.io.ModelRailwayIO") ->
	this.port.add(createPort(false, 
								true, 
								"contact",
								"arrayType(int,48)")) ->
	this.port.add(createPort(false, 
								true, 
								"occupied",
								"arrayType(int,48)"))
;

//create a "NonStrictDelay" (for array, int, 42) 
create EntityType this createDelay(String name):
	let p1 = new PropertyType:
    this.setName(name) ->
	this.setClass1("ptolemy.domains.sr.lib.NonStrictDelay") ->
	p1.setValue("{-1,-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}") ->
	p1.setClass("ptolemy.data.expr.Parameter") ->
	p1.setName("initialValue") ->
	this.property.add(p1)
;


//-----------------------------------------------------------------------------
//--                   C R E A T E     T H R E A D S                         --
//-----------------------------------------------------------------------------

//create ALL threads, i.e., start w/ initial-nodes
Void createThreads(List[simplerailctrl::Node] nodes,
				   EntityType mainEntity):
  let currentNode = nodes.last():
  //create thread
  if (currentNode.initial) then mainEntity.entity.add(
  						 					createThread(currentNode,
  											nodes.size)) ->
  //connect thread incoming to GLOBAL
  if (currentNode.initial) then 
  	mainEntity.link.add(createPlainLink("Region" + hash(currentNode)+".contact", "contactsGLOBAL")) ->
  if (currentNode.initial) then 
  	mainEntity.link.add(createPlainLink("Region" + hash(currentNode)+".occupied", "occupiedGLOBAL")) ->
  //FIXME: connect thread directly to outgoing
  if (currentNode.initial) then connectActors(mainEntity,
		   			   "ModelRailwayIO.tracks",
			 		   "Region" + hash(currentNode)+".tracks",
			 		   "trackControlRelation") ->
  if (currentNode.initial) then connectActors(mainEntity,
		   			   "ModelRailwayIO.points",
			 		   "Region" + hash(currentNode)+".points",
			 		   "pointControlRelation") ->
  if (currentNode.initial) then connectActors(mainEntity,
		   			   "ModelRailwayIO.signals",
			 		   "Region" + hash(currentNode)+".signals",
			 		   "signalsControlRelation") ->

  if (nodes.size > 1) then createThreads(nodes.withoutLast(),
  									mainEntity)
;

//create a thread (ModalModel)
create EntityType this createThread(simplerailctrl::Node initialNode, 
											  int number):
	let p1 = new PropertyType:
	let threadName = "Region" + hash(initialNode):
		p1.setName("_tableauFactory") ->
		p1.setClass("ptolemy.vergil.fsm.modal.ModalTableauFactory") ->
	this.property.add(p1) ->
   	this.setName(threadName) ->
  	this.setClass1("ptolemy.domains.fsm.modal.ModalModel") ->
  	//first add ports
	this.port.add(createModelPort(true,false,"contact","arrayType(int,48)")) ->
	this.port.add(createModelPort(true,false,"occupied","arrayType(int,48)")) ->
	this.port.add(createModelPort(false,true,"tracks","")) ->
	this.port.add(createModelPort(false,true,"points","")) ->
	this.port.add(createModelPort(false,true,"signals","")) ->
  	//then create simple states 
   	this.entity.add(createThreadRefinement(initialNode)) ->
   	//add connecting ports
 	connectModalModel(this, "_Controller.contact", "contact", "contactRelation") ->  	
 	connectModalModel(this, "_Controller.occupied", "occupied", "occupiedRelation") ->  	
 	connectModalModel(this, "_Controller.tracks", "tracks", "tracksRelation") ->  	
 	connectModalModel(this, "_Controller.points", "points", "pointsRelation") ->  	
 	connectModalModel(this, "_Controller.signals", "signals", "signalsRelation")  	
;

//create thread refinement (ModalController)
create EntityType this createThreadRefinement(simplerailctrl::Node initialNode):
   	this.setName("_Controller") ->
  	this.setClass1("ptolemy.domains.fsm.modal.ModalController") ->
  	//first add ports
	this.port.add(createModelRefinementPort(true,false,"contact","arrayType(int,48)")) ->
	this.port.add(createModelRefinementPort(true,false,"occupied","arrayType(int,48)")) ->
	this.port.add(createModelRefinementPort(true,true,"tracks","")) ->
	this.port.add(createModelRefinementPort(true,true,"points","")) ->
	this.port.add(createModelRefinementPort(true,true,"signals","")) ->
	//first add ptolemy initial node
	createInitialStateEntity(this) ->
	//then create first default transition
	addInitialTransition(this,
						"initial", 
						initialNode) ->
	//then add emf initial node
	createSimpleStateEntity(this, initialNode) ->
	//then add count paramter (for counting seconds in a simple state)
	this.property.add(createCountParamter()) ->	
  	//then iterated all inner states
	createInnerStates(this, initialNode, initialNode.outTransitions)
;

//-----------------------------------------------------------------------------
//--                    C R E A T E     S T A T E S                          --
//-----------------------------------------------------------------------------

Void createInnerStates(EntityType modalController,
					  simplerailctrl::Node sourceState,
					  List[simplerailctrl::Transition] transitionList) :
	let currentTransition = transitionList.last():
	let doneDestinationState = isMarked(currentTransition.destination):
	createSimpleStateEntity(modalController, currentTransition.destination) ->
	//first look up other target states (of this source state)
	if (transitionList.size > 1) then 
		createInnerStates(modalController, sourceState, transitionList.withoutLast()) ->
	//then create transitions to these
	addTransition(modalController, currentTransition) ->
	//then go on with the target state (as new source state)
	if ((!doneDestinationState) &&
	    (currentTransition.destination.outTransitions.size > 0)) then
		createInnerStates(modalController, currentTransition.destination, currentTransition.destination.outTransitions)
;					  


//-----------------------------------------------------------------------------
//--           H E L P E R      M O M L     C R E A T I O N                  --
//-----------------------------------------------------------------------------

//do some java console output for debugging purpose 
Void dump(String s) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.dump(java.lang.String)
;

//get hash value of an object to identify it 
String hash(simplerailctrl::Node node) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.hash(simplerailctrl.Node)
;
//get hash value of an object to identify it 
String hash(simplerailctrl::Transition transition) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.hash(simplerailctrl.Transition)
;
//get hash value of a string 
String hash(String s) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.hash(java.lang.String)
;

//do some java console output for debugging purpose 
Void markState(simplerailctrl::Node node) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.markState(simplerailctrl.Node)
;

//do some java console output for debugging purpose 
boolean isMarked(simplerailctrl::Node node) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.isMarked(simplerailctrl.Node)
;

//-------------------------------------------------------------------------

//compute trigger in java 
String buildTrigger(simplerailctrl::Transition transition) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.buildTrigger(simplerailctrl.Transition)
;
//compute emission in java 
String buildEmission(simplerailctrl::Node node) :
	JAVA de.cau.cs.kieler.simplerailctrl.sim.ptolemy.oaw.XtendJava.buildEmission(simplerailctrl.Node)
;

//-------------------------------------------------------------------------

String getMetaType(simplerailctrl::Node state) :
	 switch (state.metaType.name) {
 		case "simplerailctrl::SetSpeed" : "SetSpeed"
 		case "simplerailctrl::SetPoint" : "SetPoint"
 		case "simplerailctrl::SetSignal" : "SetSignal"
    	default : ""
 	} 		 
;    

//-------------------------------------------------------------------------

//create SimpleState == State-Component 
boolean createSimpleStateEntity(EntityType baseEntity,
								simplerailctrl::Node state):
	let newState = new EntityType:
	let markedBefore = isMarked(state):
	newState.setName(getMetaType(state)+hash(state)) ->
  	newState.setClass1("ptolemy.domains.fsm.kernel.State") ->
	if (!markedBefore) then baseEntity.entity.add(newState) ->
	if (!markedBefore) then addSelfTransition(baseEntity, state) ->
	//this inicates that we are done with this state//
	markState(state) ->
  	markedBefore
;
//create SimpleState == State-Component 
Void createInitialStateEntity(EntityType baseEntity):
	let newState = new EntityType:
	newState.setName("initial") ->
  	newState.setClass1("ptolemy.domains.fsm.kernel.State") ->
	baseEntity.entity.add(newState)
;

//-------------------------------------------------------------------------

//create a State-State transition
Void addTransition(	EntityType baseEntity,
					simplerailctrl::Transition transition) :
	let sourceNode = (Node)transition.eContainer:
	let targetNode = transition.destination:
	let transitionName = hash(transition):
	baseEntity.relation.add(createRelation(transitionName, transition)) ->
	addLink(baseEntity, 
		    getMetaType(sourceNode) + hash(sourceNode) + ".outgoingPort",
		    transitionName) ->
	addLink(baseEntity, 
		    getMetaType(targetNode) + hash(targetNode) + ".incomingPort",
		    transitionName)
;

//create State-Self transition
Void addSelfTransition( EntityType baseEntity,
						simplerailctrl::Node node) :
	let transitionName = hash(node):
	let relation = createRelation(transitionName,true,false,false):
	addSetAction(relation, "count = count + 1") ->
	baseEntity.relation.add(relation) ->
	addLink(baseEntity, getMetaType(node) + hash(node) + ".outgoingPort", transitionName) ->
	addLink(baseEntity, getMetaType(node) + hash(node) + ".incomingPort", transitionName)
;

//create initial->State transition
Void addInitialTransition( EntityType baseEntity,
						String sourceState, 
						Node targetNode) :
	let transitionName = "initialTransition":
	let relation = createRelation(transitionName,true,false,false):
	addSetAction(relation, "count = 0") ->
	addEmission(relation, targetNode) ->
	baseEntity.relation.add(relation) ->
	addLink(baseEntity, sourceState + ".outgoingPort", transitionName) ->
	addLink(baseEntity, getMetaType(targetNode) + hash(targetNode) + ".incomingPort", transitionName)
;

//Connect threads/ModalModel
Void connectModalModel(EntityType baseEntity,
		   			   String portName1,
			 		   String portName2,
			 		   String relationName) :
  let relation = new RelationType:										
  let p = new PropertyType:
  relation.setClass("ptolemy.actor.TypedIORelation") ->
  relation.setName(relationName) ->
  p.setName("width") ->
  p.setClass("ptolemy.data.expr.Parameter") ->
  p.setValue("1") ->
  relation.property.add(p) ->
  baseEntity.relation.add(relation) ->
  addLink(baseEntity, portName1, relationName) ->
  addLink(baseEntity, portName2, relationName)
;

//Connect top level actors
Void connectActors(EntityType baseEntity,
		   			   String portName1,
			 		   String portName2,
			 		   String relationName) :
  let relation = new RelationType:										
  let p = new PropertyType:
  relation.setClass("ptolemy.actor.TypedIORelation") ->
  relation.setName(relationName) ->
  p.setName("width") ->
  p.setClass("ptolemy.data.expr.Parameter") ->
  p.setValue("1") ->
//  relation.property.add(p) ->
  baseEntity.relation.add(relation) ->
  addLink(baseEntity, portName1, relationName) ->
  addLink(baseEntity, portName2, relationName)
;


//add a Link
Void addLink(EntityType baseEntity,
			 String portName,
			 String relationName) :
	let link = new LinkType:
	link.setPort(portName) ->
	link.setRelation(relationName) ->
	baseEntity.link.add(link)
;			 


//create a Relation Type
RelationType createRelation(String name,
							simplerailctrl::Transition transition):
 	let relation = createRelation(name,false,false,true):										
	addTrigger(relation, transition) ->
	addSetAction(relation, "count = 0") ->
	addEmission(relation, (Node)transition.destination) ->
	relation
										
;										
create RelationType this createRelation(String name, 
										boolean def,
										boolean preemptive,
										boolean reset):
	let p1 = new PropertyType:
	let p2 = new PropertyType:
	let p3 = new PropertyType:
	let p4 = new PropertyType:
	let p5 = new PropertyType:
	let p6 = new PropertyType:
	let p7 = new PropertyType:
	let p8 = new PropertyType:
		p1.setName("guardExpression") ->
		p1.setClass("ptolemy.kernel.util.StringAttribute") ->
		p2.setName("outputActions") ->
		p2.setClass("ptolemy.domains.fsm.kernel.OutputActionsAttribute") ->
		p3.setName("setActions") ->
		p3.setClass("ptolemy.domains.fsm.kernel.CommitActionsAttribute") ->
		p4.setName("reset") ->
		p4.setClass("ptolemy.data.expr.Parameter") ->
		(reset) ? p4.setValue("true") : p4.setValue("false")->
		p5.setName("preemptive") ->
		p5.setClass("ptolemy.data.expr.Parameter") ->
		(preemptive) ? p5.setValue("true") : p5.setValue("false") ->
		p6.setName("defaultTransition") ->
		p6.setClass("ptolemy.data.expr.Parameter") ->
		(def) ? p6.setValue("true") : p6.setValue("false") -> //defaultTransition is NOT "normal termination" !!!
		p7.setName("nondeterministic") ->
		p7.setClass("ptolemy.data.expr.Parameter") ->
		p7.setValue("false") ->
		p8.setName("refinementName") ->
		p8.setClass("ptolemy.kernel.util.StringAttribute") ->
    this.setName(name) ->
	this.property.add(p1) ->
	this.property.add(p2) ->
	this.property.add(p3) ->
	this.property.add(p4) ->
	this.property.add(p5) ->
	this.property.add(p6) ->
	this.property.add(p7) ->
	this.property.add(p8)
;

//create guardExpression
Void addTrigger(RelationType relation, simplerailctrl::Transition transition) :
	let p1 = new PropertyType:
	let value = buildTrigger(transition):
	p1.setName("guardExpression") ->
	p1.setClass("ptolemy.kernel.util.StringAttribute") ->
	p1.setValue(value) ->
	if (!value.matches("")) then relation.property.add(p1) 
;

//create outputActions
Void addEmission(RelationType relation, simplerailctrl::Node node) :
	let p1 = new PropertyType:
	let value = buildEmission(node):
	p1.setName("outputActions") ->
	p1.setClass("ptolemy.domains.fsm.kernel.OutputActionsAttribute") ->
	p1.setValue(value) ->
	if (!value.matches("")) then relation.property.add(p1) 
;

//create setActions
Void addSetAction(RelationType relation, String value) :
	let p1 = new PropertyType:
	p1.setName("setActions") ->
	p1.setClass("ptolemy.domains.fsm.kernel.CommitActionsAttribute") ->
	p1.setValue(value) ->
	relation.property.add(p1) 
;

//int connectEntities(EntityType baseEntity,
//					EntityType entity1,
//					EntityType entity2) :
// null					
//;

//normal port of an Actor
create PortType this createPort(boolean input, 
								boolean output, 
								String name,
								String type):
	let prop1 = new PropertyType:
	let prop2 = new PropertyType:
	let prop3 = new PropertyType:
	this.setClass("ptolemy.actor.TypedIOPort") ->
	this.setName(name) ->
	prop1.setClass("ptolemy.actor.TypeAttribute") ->
	prop1.setName("_type") ->
	prop1.setValue(type) ->
	prop2.setName("output") ->
	prop3.setName("input") ->
	if (!type.matches("")) then this.property.add(prop1) ->
	if (output) then this.property.add(prop2) ->
	if (input) then this.property.add(prop3)
;


//port of a ModelModel
create PortType this createModelPort(boolean input,
									 boolean output,
									 String name,
									 String type): 
	let prop1 = new PropertyType:
	let prop2 = new PropertyType:
	let prop3 = new PropertyType:
	this.setClass("ptolemy.domains.fsm.modal.ModalPort") ->
	this.setName(name) ->
	prop1.setClass("ptolemy.actor.TypeAttribute") ->
	prop1.setName("_type") ->
	prop1.setValue(type) ->
	prop2.setName("output") ->
	prop3.setName("input") ->
	if (!type.matches("")) then this.property.add(prop1) ->
	if (output) then this.property.add(prop2) ->
	if (input) then this.property.add(prop3)
;

//port of a ModalController
create PortType this createModelRefinementPort(boolean input,
									 		   boolean output,
									     	   String name,
									 		   String type): 
	let prop1 = new PropertyType:
	let prop2 = new PropertyType:
	let prop3 = new PropertyType:
	this.setClass("ptolemy.domains.fsm.modal.RefinementPort") ->
	this.setName(name) ->
	prop1.setClass("ptolemy.actor.TypeAttribute") ->
	prop1.setName("_type") ->
	prop1.setValue(type) ->
	prop2.setName("output") ->
	prop3.setName("input") ->
	if (!type.matches("")) then this.property.add(prop1) ->
	if (output) then this.property.add(prop2) ->
	if (input) then this.property.add(prop3)
;


//count parameter (for counting seconds)
create PropertyType this createCountParamter(): 
	let prop1 = new PropertyType:
	let prop1b = new PropertyType:
	let prop2 = new PropertyType:
	this.setClass("ptolemy.data.expr.Parameter") ->
	this.setName("count") ->
	this.setValue("0") ->
	prop1.setClass("ptolemy.vergil.icon.ValueIcon") ->
	prop1.setName("_icon") ->
	prop1b.setClass("ptolemy.actor.gui.ColorAttribute") ->
	prop1b.setName("_color") ->
	prop1b.setValue("{0.0, 0.0, 1.0, 1.0}") ->
	prop2.setClass("ptolemy.kernel.util.SingletonConfigurableAttribute") ->
	prop2.setName("_smallIconDescription") ->
	prop1.property.add(prop1b) ->
	this.property.add(prop1) ->
	this.property.add(prop2)
;
