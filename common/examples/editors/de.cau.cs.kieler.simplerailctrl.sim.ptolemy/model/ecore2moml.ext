import simplerailctrl;
import Moml;

//-----------------------------------------------------------------------------
//-- S I M P L E R A I L C T R L - 2 - P T O     T R A N S F O R M A T I O N --
//-----------------------------------------------------------------------------

//start model transformation here
create DocumentRoot this transform(simplerailctrl::RailController rc):
 	this.setEntity(createBaseEntity(rc))
;   
	
//create basic / outer most enclosing entity	
create EntityType this createBaseEntity(simplerailctrl::RailController rc):
   	this.setName("RailController") ->
  	this.setClass1("ptolemy.actor.TypedCompositeActor") ->
  	//crate SR director
   	this.property.add(createMainSRDirector()) ->
   	//create ModelRailwayIO actor
   	this.entity.add(createModelRailwayIOActor()) ->
   	//create concurrent threads
   	createThreads(rc.nodes, this)
;


//-----------------------------------------------------------------------------
//--                 C R E A T E     D I R E C T O R S                       --
//-----------------------------------------------------------------------------

//create outer most "SR Director" (ticks every seconds)
create PropertyType this createMainSRDirector():
	let p1 = new PropertyType:
	let p2 = new PropertyType:
	let p3 = new PropertyType:
	let p4 = new PropertyType:
		p1.setName("iterations") ->
		p1.setClass("ptolemy.data.expr.Parameter") ->
		p1.setValue("Infinity") ->
		p2.setName("synchronizeToRealTime") ->
		p2.setClass("ptolemy.data.expr.Parameter") ->
		p2.setValue("true") ->
		p3.setName("timeResolution") ->
		p3.setClass("ptolemy.data.expr.Parameter") ->
		p3.setValue("1.0E-10") ->
		p4.setName("period") ->
		p4.setClass("ptolemy.data.expr.Parameter") ->
		p4.setValue("1") ->
    this.setName("SR Director") ->
	this.setClass("ptolemy.domains.sr.kernel.SRDirector") ->
	this.property.add(p1) ->
	this.property.add(p2) ->
	this.property.add(p3) ->
	this.property.add(p4)
;

//create a "FSM Director" (for a region component)
create PropertyType this createFSMDirector():
    this.setName("directorClass") ->
    this.setValue("ptolemy.domains.fsm.kernel.FSMDirector") ->
	this.setClass("ptolemy.data.expr.StringParameter")
;


//-----------------------------------------------------------------------------
//--                 C R E A T E     MODEL RAILWAY IO                        --
//-----------------------------------------------------------------------------

//create a "ModelRailwayIO" 
create EntityType this createModelRailwayIOActor():
	let p1 = new PortType:
	let prop1 = new PropertyType:
	let prop1b = new PropertyType:
	let p2 = new PortType:
	let prop2 = new PropertyType:
	let prop2b = new PropertyType:
    this.setName("ModelRailwayIO") ->
	this.setClass1("ptolemy.actor.lib.io.ModelRailwayIO") ->
	p1.setClass("ptolemy.actor.TypedIOPort") ->
	p1.setName("contact") ->
	prop1.setClass("ptolemy.actor.TypeAttribute") ->
	prop1.setName("_type") ->
	prop1.setValue("arrayType(int,48)") ->
	prop1b.setName("output") ->
	p2.setClass("ptolemy.actor.TypedIOPort") ->
	p2.setName("occupied") ->
	prop2.setClass("ptolemy.actor.TypeAttribute") ->
	prop2.setName("_type") ->
	prop2.setValue("arrayType(int,48)") ->
	prop2b.setName("output") ->
	p1.property.add(prop1) ->
	p1.property.add(prop1b) ->
	p2.property.add(prop2) ->
	p2.property.add(prop2b) ->
	this.port.add(p1) ->
	this.port.add(p2)
;


//-----------------------------------------------------------------------------
//--                   C R E A T E     T H R E A D S                         --
//-----------------------------------------------------------------------------

//create ALL threads, i.e., start w/ initial-nodes
int createThreads(List[simplerailctrl::Node] nodes,
				   EntityType mainEntity):
  let currentNode = nodes.last():
  currentNode.initial ? mainEntity.entity.add(
  						 	createThread(currentNode,
  							nodes.size)) : null ->
  if (nodes.size > 1) then createThreads(nodes.withoutLast(),
  									mainEntity)
;

//create a thread (ModalModel)
create EntityType this createThread(simplerailctrl::Node initialNode, 
											  int number):
	let p1 = new PropertyType:
		p1.setName("_tableauFactory") ->
		p1.setClass("ptolemy.vergil.fsm.modal.ModalTableauFactory") ->
	this.property.add(p1) ->
   	this.setName(initialNode.metaType.name + "_region_" + number) ->
  	this.setClass1("ptolemy.domains.fsm.modal.ModalModel") ->
  	//first add signals
  	//...
  	//then create simple states and macro state declarations
   	this.entity.add(createThreadRefinement(initialNode))
   	//then add macro state refinements (for all macro states)
   	//IterateStatesRefinement(region.innerStates, this, signalList)
;

//create thread refinement (ModalController)
create EntityType this createThreadRefinement(simplerailctrl::Node initialNode):
   	this.setName("_Controller") ->
  	this.setClass1("ptolemy.domains.fsm.modal.ModalController")
  	//first add signals
	//..  	
  	//then iterated all states
	//..
;

