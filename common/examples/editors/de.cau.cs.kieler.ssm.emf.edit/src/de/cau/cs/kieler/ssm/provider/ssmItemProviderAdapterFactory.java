/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.cau.cs.kieler.ssm.provider;

import de.cau.cs.kieler.ssm.util.ssmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ssmItemProviderAdapterFactory extends ssmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ssmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Named} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected NamedItemProvider namedItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Named}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNamedAdapter() {
		if (namedItemProvider == null) {
			namedItemProvider = new NamedItemProvider(this);
		}

		return namedItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Region} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected RegionItemProvider regionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Region}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRegionAdapter() {
		if (regionItemProvider == null) {
			regionItemProvider = new RegionItemProvider(this);
		}

		return regionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.SimpleState} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected SimpleStateItemProvider simpleStateItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.SimpleState}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSimpleStateAdapter() {
		if (simpleStateItemProvider == null) {
			simpleStateItemProvider = new SimpleStateItemProvider(this);
		}

		return simpleStateItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.PseudoState} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected PseudoStateItemProvider pseudoStateItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.PseudoState}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createPseudoStateAdapter() {
		if (pseudoStateItemProvider == null) {
			pseudoStateItemProvider = new PseudoStateItemProvider(this);
		}

		return pseudoStateItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.InitialState} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected InitialStateItemProvider initialStateItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.InitialState}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createInitialStateAdapter() {
		if (initialStateItemProvider == null) {
			initialStateItemProvider = new InitialStateItemProvider(this);
		}

		return initialStateItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.CompositeState} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected CompositeStateItemProvider compositeStateItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.CompositeState}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createCompositeStateAdapter() {
		if (compositeStateItemProvider == null) {
			compositeStateItemProvider = new CompositeStateItemProvider(this);
		}

		return compositeStateItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Transition} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected TransitionItemProvider transitionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Transition}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.TransitionTriggerable} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected TransitionTriggerableItemProvider transitionTriggerableItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.TransitionTriggerable}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTransitionTriggerableAdapter() {
		if (transitionTriggerableItemProvider == null) {
			transitionTriggerableItemProvider = new TransitionTriggerableItemProvider(this);
		}

		return transitionTriggerableItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.TransitionImmediateable} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected TransitionImmediateableItemProvider transitionImmediateableItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.TransitionImmediateable}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTransitionImmediateableAdapter() {
		if (transitionImmediateableItemProvider == null) {
			transitionImmediateableItemProvider = new TransitionImmediateableItemProvider(this);
		}

		return transitionImmediateableItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.InitialArc} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected InitialArcItemProvider initialArcItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.InitialArc}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createInitialArcAdapter() {
		if (initialArcItemProvider == null) {
			initialArcItemProvider = new InitialArcItemProvider(this);
		}

		return initialArcItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.ConditionalTransition} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ConditionalTransitionItemProvider conditionalTransitionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.ConditionalTransition}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createConditionalTransitionAdapter() {
		if (conditionalTransitionItemProvider == null) {
			conditionalTransitionItemProvider = new ConditionalTransitionItemProvider(this);
		}

		return conditionalTransitionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.NormalTermination} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected NormalTerminationItemProvider normalTerminationItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.NormalTermination}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createNormalTerminationAdapter() {
		if (normalTerminationItemProvider == null) {
			normalTerminationItemProvider = new NormalTerminationItemProvider(this);
		}

		return normalTerminationItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.StrongAbortion} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected StrongAbortionItemProvider strongAbortionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.StrongAbortion}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createStrongAbortionAdapter() {
		if (strongAbortionItemProvider == null) {
			strongAbortionItemProvider = new StrongAbortionItemProvider(this);
		}

		return strongAbortionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.WeakAbortion} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected WeakAbortionItemProvider weakAbortionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.WeakAbortion}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createWeakAbortionAdapter() {
		if (weakAbortionItemProvider == null) {
			weakAbortionItemProvider = new WeakAbortionItemProvider(this);
		}

		return weakAbortionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.SafeStateMachine} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected SafeStateMachineItemProvider safeStateMachineItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.SafeStateMachine}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSafeStateMachineAdapter() {
		if (safeStateMachineItemProvider == null) {
			safeStateMachineItemProvider = new SafeStateMachineItemProvider(this);
		}

		return safeStateMachineItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Trigger} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected TriggerItemProvider triggerItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Trigger}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Action} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ActionItemProvider actionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Action}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.OnAction} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected OnActionItemProvider onActionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.OnAction}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createOnActionAdapter() {
		if (onActionItemProvider == null) {
			onActionItemProvider = new OnActionItemProvider(this);
		}

		return onActionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Signal} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected SignalItemProvider signalItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Signal}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSignalAdapter() {
		if (signalItemProvider == null) {
			signalItemProvider = new SignalItemProvider(this);
		}

		return signalItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.IntegerSignal} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected IntegerSignalItemProvider integerSignalItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.IntegerSignal}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createIntegerSignalAdapter() {
		if (integerSignalItemProvider == null) {
			integerSignalItemProvider = new IntegerSignalItemProvider(this);
		}

		return integerSignalItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.ssm.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.ssm.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

				/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose() {
		if (namedItemProvider != null) namedItemProvider.dispose();
		if (regionItemProvider != null) regionItemProvider.dispose();
		if (simpleStateItemProvider != null) simpleStateItemProvider.dispose();
		if (pseudoStateItemProvider != null) pseudoStateItemProvider.dispose();
		if (initialStateItemProvider != null) initialStateItemProvider.dispose();
		if (compositeStateItemProvider != null) compositeStateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (transitionTriggerableItemProvider != null) transitionTriggerableItemProvider.dispose();
		if (transitionImmediateableItemProvider != null) transitionImmediateableItemProvider.dispose();
		if (initialArcItemProvider != null) initialArcItemProvider.dispose();
		if (conditionalTransitionItemProvider != null) conditionalTransitionItemProvider.dispose();
		if (normalTerminationItemProvider != null) normalTerminationItemProvider.dispose();
		if (strongAbortionItemProvider != null) strongAbortionItemProvider.dispose();
		if (weakAbortionItemProvider != null) weakAbortionItemProvider.dispose();
		if (safeStateMachineItemProvider != null) safeStateMachineItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (onActionItemProvider != null) onActionItemProvider.dispose();
		if (signalItemProvider != null) signalItemProvider.dispose();
		if (integerSignalItemProvider != null) integerSignalItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
	}

}
