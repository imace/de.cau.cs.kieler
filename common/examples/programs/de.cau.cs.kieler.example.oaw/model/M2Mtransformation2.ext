import mymodel;
import simple;

//start model transformation here
create SimpleModel this transform(mymodel::MyDataModel source):
    createItems(this, source.items)
;

Void createItems(SimpleModel simpleModel, List[mymodel::MyData] myDataList) :
	let data = new Data:
	let currentData = myDataList.last():
	data.setKey(currentData.metaType.name) ->
	if (currentData.metaType.name.matches("mymodel::MyList")) then 
		data.setValue(createListValue((mymodel::MyList) currentData)) -> 
	if (currentData.metaType.name.matches("mymodel::MyConst")) then 
		data.setValue(createConstValue((mymodel::MyConst) currentData)) -> 
	if (currentData.metaType.name.matches("mymodel::MyInt")) then 
		data.setValue(createIntValue((mymodel::MyInt) currentData)) -> 
	if (currentData.metaType.name.matches("mymodel::MyString")) then 
		data.setValue(createStringValue((mymodel::MyString) currentData)) -> 
	simpleModel.items.add(data) ->
	if (myDataList.size > 1) then
		createItems(simpleModel, myDataList.withoutLast())
;
   
   

String createStringValue(mymodel::MyString stringData) :
   stringData.text
;   

String createConstValue(mymodel::MyConst constData) :
   constData.value.toString()
;   

String createIntValue(mymodel::MyInt intData) :
   intData.value.toString()
;   
	
String createListValue(mymodel::MyList list) :
	JAVA de.cau.cs.kieler.example.oaw.gen.XtendJava.createListValue(mymodel.MyList)
;
	
Void dump(String s) :
	JAVA de.cau.cs.kieler.example.oaw.gen.XtendJava.dump(java.lang.String)
;

	