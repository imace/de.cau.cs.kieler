<project name="build KIELER elements" default="call.antRunner">
	
	<property environment="system"/>
	<property name="scriptdir" location="."/>
	<property file="${scriptdir}/build.properties" />

	<property name="eclipseLocation"  value="${baseLocation}" />
	<property name="eclipseConfig"    location="${scriptdir}/.eclipse"/>
	<property name="eclipseWorkspace" location="${scriptdir}/.eclipseWorkspace"/>
	
	<!-- default definitions: should be overwritten while calling this script -->	
	<property name="target"  value="noTargetInfo"/>
	<property name="feature" value=" "/>

	<target name="call.antRunner">
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-configuration" />
			<arg value="${eclipseConfig}" />
			<arg value="-data" />
			<arg value="${eclipseWorkspace}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-consoleLog" />
			<arg value="-buildfile" />
			<arg value="${scriptdir}/build.xml" />
			<arg value="${target}" />
			<arg value="-Dscriptdir=${scriptdir}" />
				<!-- the folder containing build.xml, build.properties -->
			<arg value="-Dbasedir=${system.WORKSPACE}" />
				<!-- the workspace folder of the current job
						needed as Hudson is starting the build script
						from the containing folder (i.e. ${scriptdir})
						- not from workspace root folder -->
			<arg value="-DbuildDirectory=${system.WORKSPACE}" />
				<!-- the build root folder
						fed into the eclipse.generateScript task
						within genericTarget.xml, one of the PDE build scripts
						here equal to basedir -->
			<arg value="-DbuildProperties=${scriptdir}/build.properties" />
				<!-- the property configuration file
						examined by build.xml, one of the PDE build scripts -->
			<arg value="-Dfeature=${feature}" />
				<!-- the feature whose plugins should be build -->
			<arg value="-DpluginPath=${pluginPath}" />
				<!-- a list of source folders seperated by ':'
						each folder should contain the subfolders 'features' and 'plugins'
						can be relative (to ${basedir})
						CAUTION: features must not be JARed
								 plugins should be JARed (so far I discovered) -->
			<classpath>
				<pathelement location="${baseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
	</target>

	<target name="build.feature" if="eclipse.running">
		<property name="elementPath" value="${basedir}/features/${feature}" />

		<mkdir dir="${basedir}/update-site/features" />
		<mkdir dir="${basedir}/update-site/plugins" />
		
		<ant antfile="${baseLocation}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/build.xml">
			<target name="generate"/>
		</ant>
		
		<ant antfile="build.xml" dir="${elementPath}" target="build.update.jar">
			<property name="feature.destination" value="${basedir}/update-site/features"/>
			<property name="plugin.destination" value="${basedir}/update-site/plugins"/>
		</ant>
		<ant antfile="build.xml" dir="${elementPath}" target="gather.bin.parts">
			<property name="feature.base" value="${basedir}/update-site/"/>
			<property name="updateJar.omitRootfiles" value="true"/>
		</ant>
	</target>
	
	<target name="build.rca" if="eclipse.running">
		<ant antfile="${baseLocation}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/productBuild/productBuild.xml" />
	</target>
	
	<target name="clean">
		<available file="${elementPath}/build.xml" property="buildFilePresent"/>
	    <antcall target="cleanUp" />
	</target>
	
	<target name="cleanUp" if="buildFilePresent">
		<ant antfile="build.xml" dir="${elementPath}" target="clean" />
	</target>
	
	
	<target name="noTargetInfo">
		<echo message="No build target given. Please give a target explicitly -Dtarget=&lt;{feature,rca}&gt;" />
	</target>
</project>