<project name="build KIELER elements" default="call.antRunner">
    
    <property environment="system"/>
    <property name="scriptdir" location="."/>
    <property file="${scriptdir}/build.properties" />
    
    <!-- CHSCH 2010-06-30: we don't want to have findbugs in the CI anymore -->
    <property name="no.findbugs" value=" " />
    
    <!-- default definitions: may be overwritten while calling this script if necessary -->    
    <property name="baseLocation"          location="${system.baseLocation}" />
    <property name="baseDeltaPackLocation" location="${system.baseDeltaPackLocation}" />
    <property name="externalLibraries"     location="${system.externalLibraries}" />
    <property name="eclipseLocation"       location="${system.eclipseLocation}" />
    <property name="eclipseConfig"         location="${scriptdir}/.eclipse" />
    <property name="eclipseWorkspace"      location="${scriptdir}/.eclipseWorkspace" />
    <property name="p2.director.workspace" location="${scriptdir}/.p2Workspace" />
    <property name="antContrib.home"       location="/home/kieler/ant-contrib" />
    <property name="findbugs.home"         location="/home/kieler/findbugs" />
    <property name="checkstyle.home"       location="/home/kieler/checkstyle" />
    <property name="pmd.home"              location="/home/kieler/pmd" />
    <property name="build.basedir"         location="${system.WORKSPACE}" />
    <property name="findbugs.classes"      location="${system.WORKSPACE}/update-site/plugins" />
    <property name="hudson.home"           location="${system.HUDSON_HOME}" />

    <property name="job.name"                            value="${system.JOB_NAME}" />
    <property name="equinoxLauncherPluginVersion"        value="${system.equinoxLauncherPluginVersion}" />
    <property name="updateSiteCategoryDescriptorJobName" value="${system.updateSiteCategoryDescriptorJobName}" />
    <property name="updateSiteCategoryDescriptor"        value="${hudson.home}/jobs/${updateSiteCategoryDescriptorJobName}/workspace/de.cau.cs.kieler.updatesite/site.xml" />
    <property name="javadocTagletJobName"                value="${system.javadocTagletJobName}" />
    <property name="doc.packages"                        value="${scriptdir}/../package-lists" />
    <property name="doc.libIncludes"                     value="${system.doc.libIncludes}" />
    <property name="doc.libExcludes"                     value="${system.doc.libExcludes}" />
    <property name="doc.destination"                     value="doc" />
    <property name="standard.doc.destination"            value="${doc.destination}" />
    <property name="rating.doc.destination"              value="${doc.destination}" />
    <property name="uml.doc.destination"                 value="${doc.destination}/classes.uml" />
    <property name="doc.doclets"                         value="com.sun.tools.doclets.standard.Standard" />
    <property name="doc.docletPath"                      value="." />
    <property name="doc.excludes"                        value=" "/>
    

    <property name="plugin"                     value=" "/>
    <!-- property name="feature"                    value=" "/   # see declaration in call.antRunner -->
    <property name="fetchSources"               value="false"/>
    <property name="customContextQualifier"     value=" "/>
    <property name="product"                    value=" "/>
    <property name="executables"                value=" "/>
    <property name="checkstyle.excludes"        value=" "/>
    <property name="pmd.excludes"               value=" "/>
    <property name="build.all.plugins.excludes" value=" "/>
    <property name="build.jars"                 value="true"/>
    <property name="publish.feature"            value="true"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${antContrib.home}/lib/ant-contrib.jar" />
    <taskdef name="for" classname="net.sf.antcontrib.logic.For" classpath="${antContrib.home}/lib/ant-contrib.jar" />
    <!-- the for task is not deactivated in the declaring properties file in ant-contrib.jar -->
    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.home}/checkstyle-all-5.0.jar" />
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar" />
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
        <classpath>
            <fileset dir="${pmd.home}/lib" includes="*.jar" />
        </classpath>
    </taskdef>

    <!-- =========================================================================================== -->

    <target name="noTargetInfo" unless="target">
        <fail message="No build target given. Please give a target explicitly by setting -Dtarget=&lt;{build.feature,build.rca}&gt;" />
    </target>    

    <!-- =========================================================================================== -->

    <target name="call.antRunner" depends="noTargetInfo">
        <!-- delete dir="${eclipseConfig}" />
        <delete dir="${eclipseWorkspace}" />
        <delete dir="${p2.director.workspace}" / -->

        <!-- check, whether a target is given by a system (environment) property
             use case: RebuildUpdateSite job triggers a feature build job
                       and defines: target=buildUpdateSiteEntry -->
        <condition property="targetP" value="${target}" else="${system.TARGET}">
            <equals arg1="${system.TARGET}" arg2="$${system.TARGET}" />
            <!-- targetP is the actual target parameter;
                 $$ is the escape character for not resolving a properties link,
                 here it is needed to examine the definition of the system property
                 as the condition 'isset' doesn't work for system (environment) properties -->
        </condition>
        
        <!-- the following lines compute the pluginPath property automatically;
             all archived artifacts will be considered except those produced by the current
             job itself in order to avoid any confusions while generating the build scripts;
             id and property have disjoint namespaces -->
        <path id="pluginPath">
            <dirset dir="${hudson.home}/jobs/" includes="*/lastSuccessful/archive/update-site" excludes="${job.name}/**" />
        </path>
        <property name="pluginPath" value="${toString:pluginPath}" />
                
        <!-- default definitions: may be overwritten while calling this script if necessary -->
        <!-- this is to give antRunner a reasonable value of ${featureParam}
             ${feature} must not be set globally in case of invoking the build.multiple.features target -->
        <property name="feature"                 value=" "/>
        <!-- these are located here as I want to state different default values for overall javadoc generation -->
        <property name="doc.basedir"             value="${build.basedir}" />
        <property name="doc.includes"            value="plugins/**/*.java" />
        <property name="doc.includes.buildfiles" value="plugins/*/build.xml" />

        <!-- the following conditions will check the presence of certain properties
             and write definite values to new properties in order to pass them to the antRunner -->
        <condition property="fetchSources" value="true" else="false">
            <isset property="fetch.sources" />
        </condition>
        
        <condition property="suppress.clean" value="true" else="false">
            <isset property="no.clean" />
        </condition>
        
        <condition property="suppress.publishing" value="true" else="false">
            <isset property="no.publishing" />
        </condition>
    
        <condition property="suppress.doc" value="true" else="false">
            <isset property="no.doc" />
        </condition>
    
        <condition property="suppress.findbugs" value="true" else="false">
            <isset property="no.findbugs" />
        </condition>
    
        <condition property="suppress.checkstyle" value="true" else="false">
            <isset property="no.checkstyle" />
        </condition>
    
        <condition property="suppress.pmd" value="true" else="false">
            <isset property="no.pmd" />
        </condition>
    
        <basename property="basename" file="${product}" suffix=".product" />
        
        <mkdir dir="${build.basedir}" />

        <java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
            <jvmarg value="-Xmx1024m"/> 
            <arg line="-configuration ${eclipseConfig}" />
            <arg line="-data ${eclipseWorkspace}" />
            <arg line="-application org.eclipse.ant.core.antRunner" />
            <arg line="-consoleLog" />
            <arg line="-buildfile ${scriptdir}/build.xml ${targetP}" />
            <arg value="-DbaseLocation=${baseLocation}" />
                <!-- the folder containing the folder 'plugins/<eclipseRuntimePlugins>' -->
            <arg value="-DbaseDeltaPackLocation=${baseDeltaPackLocation}" />
                <!-- the folder containing the folder 'plugins/<DeltaPackPlugins>' -->
            <arg value="-DeclipseLocation=${eclipseLocation}" />
                <!-- the folder containing the Eclipse antRunner -->
            <arg value="-Dscriptdir=${scriptdir}" />
                <!-- the folder containing build.xml, build.properties -->
            <arg value="-Dbasedir=${build.basedir}" />
                <!-- the workspace folder of the current job needed as Hudson is starting the build script
                     from the containing folder (i.e. ${scriptdir}) - not from workspace root folder -->
            <arg value="-DbuildDirectory=${build.basedir}" />
                <!-- the build root folder
                     fed into the eclipse.generateScript task
                     within genericTarget.xml, one of the PDE build scripts
                     here equal to basedir -->
            <arg value="-DbuildProperties=${scriptdir}/build.properties" />
                <!-- the property configuration file
                     examined by build.xml, one of the PDE build scripts -->
            <arg value="-DcustomContextQualifier=${customContextQualifier}" />
            <arg value="-DupdateSiteCategoryDescriptorJobName=${updateSiteCategoryDescriptorJobName}" />
                <!-- name of the dedicated import (svn checkout) job -->
            <arg value="-DupdateSiteCategoryDescriptor=${updateSiteCategoryDescriptor}" />
                <!-- name and location of the update site category descriptor (e.g. workspace/site.xml) -->
            <arg value="-DjavadocTagletJobName=${javadocTagletJobName}" />
                <!-- name of the dedicated import (svn checkout) job -->
            <arg value="-Dplugin=${plugin}" />
                <!-- the plugin whose bin parts should be gathered (after building the feature) -->
            <arg value="-DfeatureParam=${feature}" />
                <!-- the feature(s) whose plugins should be build;
                     need a different name here as for proper execution of target
                     build.multiple.features ${feature} must be unset -->
            <arg value="-DfetchSources=${fetchSources}" />
                <!-- should the build process fetch externally built source bundles/child features?  -->
            <arg value="-Dproduct=${product}" />
                <!-- the product which should be build -->
            <arg value="-Dbasename=${basename}" />
                <!-- the name of RCA's zip file, ziped top folder & launcher determined of product's basename -->
            <arg value="-DpluginPath=${baseDeltaPackLocation}:${externalLibraries}:${pluginPath}" />
                <!-- a list of source folders seperated by ':'
                     each folder should contain the subfolders 'features' and 'plugins'
                     can be relative (to ${basedir})
                     CAUTION: required features must not be JARed, plugins should be JARed (so far I figured out) -->
            <arg value="-Dbuild.all.plugins.excludes=${build.all.plugins.excludes}" />
                <!-- comma separated path patterns determining plugin folders to be excluded -->
            <arg value="-Dexecutables=${executables}" />
                <!-- comma separated path patterns included while adding executable flags -->
            <arg value="-Dupdatesite.autobuild=${updatesite.autobuild}" />
                <!-- location of the update site, default is defined in build.properties -->
            <arg value="-Dfindbugs.classes=${findbugs.classes}" />
                <!-- path to classes, jars to be examined by findbugs -->
            <arg value="-Ddoc.basedir=${doc.basedir}" />
                <!-- base/root path of search for java sources at javadoc generation -->
            <arg value="-Ddoc.includes.buildfiles=${doc.includes.buildfiles}" />
                <!-- comma separated path patterns included classpath computation for overall javadoc generation -->
            <arg value="-Ddoc.includes=${doc.includes}" />
                <!-- comma separated path patterns included at javadoc generation -->
            <arg value="-Ddoc.excludes=${doc.excludes}" />
                <!-- comma separated path patterns excluded at javadoc generation -->
            <arg value="-Ddoc.libIncludes=${doc.libIncludes}" />
                <!-- comma separated lib path patterns included at javadoc generation -->
            <arg value="-Ddoc.libExcludes=${doc.libExcludes}" />
                <!-- comma separated lib path patterns excluded at javadoc generation -->
            <arg value="-Ddoc.destination=${doc.destination}" />
                <!-- destination folder for javadoc artifacts -->
            <arg value="-Ddoc.doclets=${doc.doclets}" />
                <!-- qualified doclet class name-->
            <arg value="-Ddoc.docletPath=${doc.docletPath}" />
                <!-- doclet class path -->
            <arg value="-Dcheckstyle.excludes=${checkstyle.excludes}" />
                <!-- comma separated path patterns excluded at checkstyle examination -->
            <arg value="-Dsuppress.clean=${suppress.clean}" />
                <!-- set to true to suppress cleaning the temp / result folders, default is false -->
            <arg value="-Dsuppress.publishing=${suppress.publishing}" />
                <!-- set to true to suppress publishing to updatesite, default is false -->
            <arg value="-Dsuppress.doc=${suppress.doc}" />
                <!-- set to true to suppress the doc build, default is false -->
            <arg value="-Dsuppress.findbugs=${suppress.findbugs}" />
                <!-- set to true to suppress running findbugs, default is false -->
            <arg value="-Dsuppress.checkstyle=${suppress.checkstyle}" />
                <!-- set to true to suppress running checkstyle, default is false -->
            <arg value="-Dsuppress.pmd=${suppress.pmd}" />
                <!-- set to true to suppress running pmd, default is false -->
            <classpath>
                <pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
            </classpath>
        </java>
    </target>

    <!-- =========================================================================================== -->

    <target name="init">
        <property name="p2.category.site" value="file:${updateSiteCategoryDescriptor}" />
        <property name="p2.gathering"  value="true" />
        <property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
            <!-- property name="configs"       value="${feature.configs}" / -->
        <property name="configs"       value="${product.configs}" />
            <!-- we need the product.configs, i.e. the list of platforms, as kieler.krep contains platform specific fragments
                 that won't be build when configs equals ${feature.configs} := *,*,* (os,ws,arch); -->
        <!-- property name="genericTargets"  location="${scriptdir}/genericTargets.xml"/ -->
            <!-- new default genericTargets works well -->
        <!-- property name="customTargets"   location="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/ -->
            <!-- customTargets is not needed as we directly call the features buildfile -> no prebuild, postbuild, ... will be executed -->
        <!-- property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/ -->
            <!-- allElements is need for product build only -->
    
        <!-- the following conditions work in the other way round than the conditions in line 53ff.,
             i.e. they provide properties set under certain circumstances only
             to be properly used in targets' 'unless' declarations -->
        <condition property="no.clean" value="true">
            <istrue value="${suppress.clean}" />
        </condition>
    
        <condition property="no.publishing" value="true">
            <istrue value="${suppress.publishing}" />
        </condition>
        
        <condition property="no.doc" value="true">
            <istrue value="${suppress.doc}" />
        </condition>
    
        <condition property="no.findbugs" value="true">
            <istrue value="${suppress.findbugs}" />
        </condition>
    
        <condition property="no.checkstyle" value="true">
            <istrue value="${suppress.checkstyle}" />
        </condition>    

        <condition property="no.pmd" value="true">
            <istrue value="${suppress.pmd}" />
        </condition>    

        <condition property="no.editScripts" value="true">
            <and>
                <istrue value="${suppress.doc}" />
                <istrue value="${suppress.findbugs}" />
                <istrue value="${suppress.checkstyle}" />
                <!-- istrue value="${suppress.pmd}" / -->
            </and>
        </condition>
    
        <!-- the following touch is needed as hudson will raise an error if a doc location is provided
             and no NEW files are available. This will happen in case of building the updatesite entry only.
             (to identify javadoc warnings a local project javadoc will be created
             and linked in hudson during each build) -->
        <mkdir dir="${basedir}/doc/" />
        <touch>
            <fileset dir="${basedir}/doc/" />
        </touch>
    </target>    

    <!-- =========================================================================================== -->

    <target name="cleanFolders" unless="no.clean">
        <!-- this is just a helper target that is executed during normal feature builds
             and may be skipped in release builds if multiples features should be build in one job -->

        <echo message="cleaning..." />

        <mkdir dir="${basedir}/buildTempFolder" />
        <mkdir dir="${basedir}/features" />
        <mkdir dir="${basedir}/plugins" />
        <mkdir dir="${basedir}/update-site/features" />
        <mkdir dir="${basedir}/update-site/plugins" />        

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/buildTempFolder/" includes="**/*"/>
            <fileset dir="${basedir}/update-site/features/" includes="**/*"/>
            <fileset dir="${basedir}/update-site/plugins/"  includes="**/*"/>
            <!-- fileset dir="${basedir}/features/" includes="*/build.xml"/ -->
            <fileset dir="${basedir}/features/" includes="*.source/**/*"/>
            <fileset dir="${basedir}/plugins/" includes="*.source_*/**/*"/>
            <dirset  dir="${basedir}/features/" includes="*.source"/>
            <dirset  dir="${basedir}/plugins/" includes="*.source_*"/>
        </delete>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="generateScripts" if="eclipse.running" depends="init"
        description="target for ${feature}'s time stamping and build script generation">

        <!-- ${feature} is set here first - ant keeps it in mind as "depends"-called targets
             will be executed in the same property context as calling targets
             (in contrast ant will loose properties set in target executions called via ant / antcall);
             in case of running build.multiple.features ${feature} is pre-setted -->
        <property name="feature" value="${featureParam}" />
        <property name="individualSourceBundles" value="true" />

        <echo message="feature: ${feature}" />

        <!-- for proper source feature generation PDE needs to get a super feature containing
             the "to be build" feature and the related "to be generated" source feature;
             therefore we generate the artificial feature ${feature}.buildHelper,
             and add our feature to be build (${feature});
             in case we do want to have a source feature we must add the source feature
             containment reference, too;
             therefore we need to check the demand for a source feature first;
             (if regexp pattern doesn't match a line the property won't be set) -->

	<loadfile property="generate.sourcefeature">
                <fileset file="${basedir}/features/${feature}/build.properties" />
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="^\s*generate.feature" />
                        <!-- ^ : beginning of a line
                             \s: space / tab / line feed / ... character -->
                    </linecontainsregexp>
                </filterchain>
        </loadfile>

        <mkdir dir="${basedir}/features/${feature}.buildHelper" />
        <!-- mkdir dir="${basedir}/features/${feature}.buildHelper/sourceTemplateFeature" / -->
        <delete file="${basedir}/features/${feature}.buildHelper/*" />
        <!-- delete file="${basedir}/features/${feature}.buildHelper/sourceTemplateFeature/*" / -->
	
        <!-- dump out the artificial super feature depending on the demand of a soure feature
             (generate.sourcefeature is set) -->
        <if>
            <isset property="generate.sourcefeature" />
            <then>
                <concat destfile="${basedir}/features/${feature}.buildHelper/feature.xml">&lt;feature id=&quot;${feature}.buildHelper&quot; version=&quot;1.0.0&quot; &gt;${line.separator}    &lt;includes id=&quot;${feature}&quot; /&gt;${line.separator}    &lt;includes id=&quot;${feature}.source&quot; /&gt;${line.separator}&lt;/feature&gt;</concat>
                <if>
                    <istrue value="${fetchSources}" />
                    <then>
                        <mkdir dir="${basedir}/features/${feature}.source" />
                        <copy file="${basedir}/features/${feature}/feature.xml"
                              tofile="${basedir}/features/${feature}.source/feature.xml" overwrite="true" />
                        <replaceregexp file="${basedir}/features/${feature}.source/feature.xml"
                                       match="&lt;requires&gt;.*&lt;/requires&gt;"
                                       replace=" "
                                       flags="gis" />

                        <replaceregexp file="${basedir}/features/${feature}.source/feature.xml"
                                       match="(id=&quot;[^&quot;]*)&quot;"
                                       replace="\1.source&quot;"
                                       flags="gis" />

                        <replaceregexp file="${basedir}/features/${feature}.source/feature.xml"
                                       match="(&lt;feature[^&gt;]*label=&quot;[^&quot;]*)&quot;"
                                       replace="\1 sources&quot;"
                                       flags="is" />

                                       <!-- match="&lt;requires&gt;.*&lt;/requires&gt;" -->
                        <!-- copy file="${basedir}/features/${feature}.source/feature.xml"
                              tofile="${basedir}/features/${feature}.source/feature2.xml" overwrite="true" / -->
                        <concat destfile="${basedir}/features/${feature}.source/build.properties">bin.includes = feature.xml</concat>
                        <concat destfile="${basedir}/features/${feature}.buildHelper/build.properties">bin.includes = feature.xml</concat>
                    </then>
                    <else>
                        <!-- copy the original feature's build.properties to the super feature,
                             as generate.feature must be declared there!
                             (will have no effect on ${feature}) -->
                        <copy file="${basedir}/features/${feature}/build.properties"
                              tofile="${basedir}/features/${feature}.buildHelper/build.properties" overwrite="true" />
                    </else>
                </if>
            </then>
            <else>
                <concat destfile="${basedir}/features/${feature}.buildHelper/feature.xml">&lt;feature id=&quot;${feature}.buildHelper&quot; version=&quot;1.0.0&quot; &gt;${line.separator}    &lt;includes id=&quot;${feature}&quot; /&gt;${line.separator}&lt;/feature&gt;</concat>
                <touch file="${basedir}/features/${feature}.buildHelper/build.properties" />
            </else>
        </if>


        <tstamp />
        <!-- <tstamp> provides ${DSTAMP} and ${TSTAMP}, they're not declared explicitly -->

        <property name="forceContextQualifier" value="v${DSTAMP}${TSTAMP}" />
        <!-- in case of running build.multiple.features ${forceContextQualifier} is pre-setted -->

        <!-- generate build.xml scripts for feature and plugins -->
        <ant antfile="${genericTargets}" target="generateScript">
            <property name="type" value="feature"/>
            <!--property name="id" value="${feature}"/-->
            <property name="id" value="${feature}.buildHelper"/>
        </ant>

        <if>
            <isset property="generate.sourcefeature" />
            <then>
                <!-- in case the source feature has been by generated via the call above
                     append " sources" to its label
                     \1 in 'replace' refers to '('<pattern>')' in 'match' -->
                <replaceregexp file="${basedir}/features/${feature}.source/feature.xml"
                     match="(&lt;feature .* label=&quot;[^&quot;]*)&quot;"
                     replace="\1 sources&quot;"
                     byline="true" />
            </then>
        </if>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="editScripts.loadFeatureClasspath" if="eclipse.running"
        description="target for loading ${feature} classpath needed by the targets below">
        <!-- read javac's classpath information from build.xml scripts -->        

        <echo message="loading feature's classpath..." />

        <loadfile property="feature.classpath">
            <concat>
                <fileset dir="${doc.basedir}" includes="${doc.includes.buildfiles}" />
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="&lt;pathelement path=&quot;../../" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="/@dot&quot;" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="/bin/&quot;" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="e4-workbench.jar" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="jdt.debug_(.)*/tools.jar" />
                    </linecontainsregexp>
                    <!-- separate enclosing tags to realize NOR function
                         (multiple repexp conditions will be ANDed) -->
                    <tokenfilter>
                        <replacestring from="path=&quot;../../../../../../../" to="path=&quot;/home/" />
                        <replacestring from="path=&quot;../../../../" to="path=&quot;${hudson.home}/jobs/" />
                    </tokenfilter>
                </filterchain>
                <!-- footer filtering="no">
                        &lt;fileset dir=&quot;${basedir}&quot;
                            includes=&quot;plugins/**/*.jar&quot; /&gt;
                </footer -->
                <!-- plain text equals the following:
                     fileset dir="${basedir}" includes="plugins/**/*.jar" /
                     it's supposed to include library jars like ptolemy, antlr-runtime, ... for class resolution -->
            </concat>
        </loadfile> 

        <!-- default property definition due to:
             no build file found in the above statement -> feature.classpath won't be set by the loadfile task -->
        <property name="feature.classpath" value=" " />

    </target>    

    <!-- =========================================================================================== -->

    <target name="editScripts.doc" if="eclipse.running" unless="no.doc" depends="editScripts.loadFeatureClasspath" 
        description="target for loading the doc target template to be injected in ${feature}'s build file">

		<property name="doc.doclet"   value="${doc.doclets}" />

        <!-- load javadoc target template, insert classpath entries (via property feature.classpath) -->        
        <loadfile property="doc.target" srcfile="${scriptdir}/javadoc.template.xml">
            <filterchain>
                <expandproperties />
            </filterchain>
        </loadfile>
        
    </target>    

    <!-- =========================================================================================== -->

    <target name="editScripts.findbugs" if="eclipse.running" unless="no.findbugs" depends="editScripts.loadFeatureClasspath" 
        description="target for loading the findbugs target template to be injected in ${feature}'s build file">

        <!-- load findbugs target template, insert classpath entries (via property feature.classpath) -->        
        <loadfile property="findbugs.target" srcfile="${scriptdir}/findbugs.template.xml">
            <filterchain>
                <expandproperties />
            </filterchain>
        </loadfile>
        
    </target>    

    <!-- =========================================================================================== -->

     <target name="editScripts.checkstyle" if="eclipse.running" unless="no.checkstyle" depends="editScripts.loadFeatureClasspath" 
        description="target for loading the checkstyle target template to be injected in ${feature}'s build file">

        <!-- load checkstyle target template -->        
        <loadfile property="checkstyle.target" srcfile="${scriptdir}/checkstyle.template.xml">
            <filterchain>
                <expandproperties />
            </filterchain>
        </loadfile>

    </target>    

    <!-- =========================================================================================== -->

     <target name="editScripts.pmd" if="eclipse.running" unless="no.pmd" depends="editScripts.loadFeatureClasspath" 
        description="target for loading the pmd target template to be injected in ${feature}'s build file">
        <!-- deactivated analysis as it is pretty much similar to checkstyle -->
        
        <!-- load pmd target template -->        
        <loadfile property="pmd.target" srcfile="${scriptdir}/pmd.template.xml">
            <filterchain>
                <expandproperties />
            </filterchain>
        </loadfile>

    </target>    

    <!-- =========================================================================================== -->

    <target name="editScripts" if="eclipse.running"
        depends="init, generateScripts, editScripts.doc, editScripts.findbugs, editScripts.checkstyle"
        description="target for editing the features build file: adding targets for doc, findbugs, checkstyle">

        <!-- default definitions of target properties dumped into ${feature}'s build file;
             will normally presetted by editScripts.loadTemplates -->
        <property name="doc.target"
                  value="    &lt;target name=&quot;doc&quot;        unless=&quot;no.doc&quot;&gt;${line.separator}    &lt;/target&gt;${line.separator}${line.separator}" />
        <property name="findbugs.target"
                  value="    &lt;target name=&quot;findbugs&quot;   unless=&quot;no.findbugs&quot;&gt;${line.separator}    &lt;/target&gt;${line.separator}${line.separator}" />
        <property name="checkstyle.target"
                  value="    &lt;target name=&quot;checkstyle&quot; unless=&quot;no.checkstyle&quot;&gt;${line.separator}    &lt;/target&gt;${line.separator}${line.separator}" />
        <property name="pmd.target"
                  value="    &lt;target name=&quot;pmd&quot;        unless=&quot;no.pmd&quot;&gt;${line.separator}    &lt;/target&gt;${line.separator}${line.separator}" />

        <!-- insert javadoc, findbugs, checkstyle target in feature's build.xml -->        
        <replace file="${basedir}/features/${feature}/build.xml"
                 token="&lt;/project&gt;"
                 value="${doc.target}${findbugs.target}${checkstyle.target}${pmd.target}&lt;/project&gt;" />
    </target>

    <!-- =========================================================================================== -->

    <target name="setBuildTempFolder" if="eclipse.running" unless="no.publishing">
        <!-- this target is a hack due to a bug in the publish-to-updatesite-script:
             running the publishing with default configuration will modify
             the plugins' MANIFEST.MF in the source folder instead to of a copied
             temporary version (will replace 'qualifier' by the timestamp,
             which won't work anymore after do that);
             Help comes with the 'buildTempFolder' property that introduces a
             temporary build folder explicitly.
             However, in case of a release build (not only the feature plugins
             but all released plugins will be checked out) the buildTempFolder
             construction will lead to errors.
             Therefor the 'unless' declaration is added. -->
        
        <property name="buildTempFolder" value="${basedir}/buildTempFolder" />
    </target>

    <!-- =========================================================================================== -->

    <target name="determineBundles" if="eclipse.running"
        description="target for computing the bundles to be build - needed to backup MANIFESTs due to a bug in build file generation">

        <loadfile property="bundles">
            <fileset dir="${basedir}/features" includes="${feature}/feature.xml" />
            <filterchain>
                <headfilter lines="-1" skip="5" />
                <!-- consider all but the first 5 lines of the file -->
                <linecontainsregexp>
                    <regexp pattern="id=&quot;" />
                    <!-- consider only those lines containing 'id="' -->
                </linecontainsregexp>
                <tokenfilter delimOutput=",">
                    <!-- tokenize line; concat choosen tokens with ','  -->
                    <stringtokenizer delims="&quot;" />
                    <!-- tokenize line at '"' -->
                    <containsregex pattern=".*\..*" flags="i" />
                    <!-- use that token containing at least a '.' -->
                </tokenfilter>
            </filterchain>
        </loadfile>

    </target>

    <!-- =========================================================================================== -->

    <target name="build.feature" if="eclipse.running" depends="init, cleanFolders, generateScripts, editScripts, determineBundles"
        description="target for complete feature building, checking and publishing">
        
        <echo message="Bundles to be build: ${bundles}" />
 
        <!-- run feature's build.xml: clean, compile and jarUp, provide unjared feature, zip logs, generate javadoc -->        
        <ant antfile="build.xml" dir="${basedir}/features/${feature}">
            <property name="javacDebugInfo" value="true" />
            <property name="feature.destination" value="${basedir}/update-site/features" />
            <property name="plugin.destination" value="${basedir}/update-site/plugins" />
            <property name="feature.base" value="${basedir}/update-site/" />
            <property name="updateJar.omitRootfiles" value="true" />
            <!-- property name="findbugs.classes" value="${basedir}/update-site/plugins" / --><!-- defined above -->
            <property name="findbugs.sources" value="${basedir}/plugins" />
            <property name="checkstyle.sources" value="${basedir}/plugins" />
            <property name="pmd.sources" value="${basedir}/plugins" />
            <target name="clean" />
            <target name="build.update.jar" />
            <target name="gather.bin.parts" />
            <target name="zip.logs" />
            <target name="doc" />
            <target name="findbugs" />
            <target name="checkstyle" />
            <!-- target name="pmd" / --> <!-- deactivated pmd analysis as it is pretty much similar to checkstyle -->
            <!-- gather.bin.parts copies customized feature.xml into update-site/features folder
                 needed by succeeding feature builds while resolving dependencies
                 (jar-ed version is not sufficient) -->        
        </ant>
        
        <!-- if a source feature has been generated, call the build target in the respective build file -->
        <if>
            <available file="${basedir}/features/${feature}.source/feature.xml" />
            <then>
	            <ant antfile="build.xml" dir="${basedir}/features/${feature}.source">
                    <property name="javacDebugInfo" value="true" />
                    <property name="feature.destination" value="${basedir}/update-site/features" />
                    <property name="plugin.destination" value="${basedir}/update-site/plugins" />
                    <property name="feature.base" value="${basedir}/update-site/" />
                    <property name="updateJar.omitRootfiles" value="true" />
                    <target name="clean" />
                    <target name="build.update.jar" />
                    <target name="gather.bin.parts" />
                </ant>
            </then>
        </if>

        <!-- due to a bug in the generated feature build files backup the manifest.mf files -->
        <for param="bundle" list="${bundles}">
            <sequential>
                <if>
                    <available file="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.MF" />
                    <then>
                        <copy overwrite="true"
                              file="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.MF" 
                              tofile="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.backup" />
                    </then>
                </if>    
            </sequential>
        </for>

        <!-- run feature's assemble.p2.xml: generate update site entry -->
        <antcall target="build.updatesiteEntry" />
        
        <!-- restore the manifest.mf files -->
        <for param="bundle" list="${bundles}">
            <sequential>
                <if>
                    <available file="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.backup" />
                    <then>
                        <move overwrite="true"
                              file="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.backup"
                              tofile="${basedir}/plugins/@{bundle}/META-INF/MANIFEST.MF" />
                    </then>
                </if>
            </sequential>
        </for>

<!-- p2.mirror>
  <repository location="file:/myDestination" name="A new repository" />
  <source>
    <repository location="${p2.build.repo}" />
  </source>
  <iu id="tooling.osgi.bundle.default" version="1.0.0" />
</p2.mirror -->

    </target>
    
    <!-- =========================================================================================== -->

    <target name="build.updatesiteEntry" if="eclipse.running" unless="no.publishing" depends="init"
        description="target for creating an updatesite entry of last build results">
        
        <property name="p2.gathering"  value="true" />
        <property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
        <property name="configs"       value="${feature.configs}" />

        <echo message="STARTING p2 stuff" />


        <replaceregexp file="${basedir}/assemble.${feature}.buildHelper.p2.xml"
                 match=".*${feature}\.buildHelper_.*"
                 replace="" byline="true" />
        <!-- replace file="${basedir}/assemble.de.cau.cs.kieler.buildHelper.p2.xml"
                 token="		&lt;customGather dir=&quot;features/de.cau.cs.kieler.buildHelper/&quot; projectName=&quot;de.cau.cs.kieler.buildHelper_1.0.0&quot; propertyName=&quot;feature.base&quot; propertyValue=&quot;$${eclipse.base}&quot; subFolder=&quot;/features&quot; /&gt;"
                 value="" / -->

        <!-- ant antfile="assemble.${feature}.p2.xml" / -->
        <ant antfile="assemble.${feature}.buildHelper.p2.xml" />
    </target>
    
    <!-- =========================================================================================== -->

    <target name="gather.plugin.bin.parts" if="eclipse.running" depends="init"
        description="target for providing an unjared version of ${plugins}, needed if it contains library .jar files">
        <!-- used in KIELER_klepto job -->

        <ant antfile="build.xml" dir="${basedir}/plugins/${plugin}" target="gather.bin.parts">
            <property name="destination.temp.folder" value="${basedir}/update-site/plugins" />
        </ant>
        
        <delete>
            <fileset dir="${basedir}/update-site/plugins/" includes="${plugin}*.jar" excludes="${plugin}.source*.jar" />
        </delete>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="gather.feature.bin.parts" if="eclipse.running" depends="init, cleanFolders, generateScripts"
        description="target for gathering feature's bin parts, i.e. timestamp the feature only; no children are included!">
        <!-- used in KIELER_dependencies job -->

        <ant antfile="build.xml" dir="${basedir}/features/${feature}" target="gather.bin.parts">
            <property name="feature.base" value="${basedir}/update-site/" />
            <property name="updateJar.omitRootfiles" value="true" />
        </ant>
    </target>

    <!-- =========================================================================================== -->

    <target name="build.multiple.features" if="eclipse.running" depends="init, cleanFolders"
        description="target for complete feature collection building, checking and publishing">

        <tstamp />
        <!-- <tstamp> provides ${DSTAMP} and ${TSTAMP}, they're not declared explicitly -->

        <condition property="features" value="${featureParam}">
            <not>
                <equals arg1="${featureParam}" arg2=" "/>
            </not>
        </condition>
        
        <!-- loadfile srcFile="${basedir}/features.info" property="features" / -->
        <echo message="${features}" />

        <!-- call usual build.feature target on each feature to be build
             suppress clean on beginning to not delete results of the previous run
             pre-determine the time stamp assuring the same timestamp for each feature 
             CAUTION: foreach is a ant-contrib task declared above! -->
        <foreach list="${features}" param="feature" target="build.feature">
            <param name="no.clean" value="true" />
            <param name="forceContextQualifier" value="v${DSTAMP}${TSTAMP}" />
        </foreach>
    </target>

    <!-- =========================================================================================== -->

    <target name="build.multiple.updatesiteEntries" if="eclipse.running" depends="init"
        description="target for complete feature collection building, checking and publishing">

        <condition property="features" value="${featureParam}">
            <not>
                <equals arg1="${featureParam}" arg2=" "/>
            </not>
        </condition>
        
        <condition property="forceContextQualifier" value="${DSTAMP}${TSTAMP}" else="${customContextQualifier}">
            <equals arg1="${customContextQualifier}" arg2=" "/>
        </condition>

        <echo message="${features}" />

        <!-- call usual build.updatesiteEntry target on each feature to be build
             suppress clean on beginning to not delete results of the previous run
             pre-determine the time stamp assuring the same timestamp for each feature 
             CAUTION: foreach is a ant-contrib task declared above! -->
        <foreach list="${features}" param="feature" target="build.updatesiteEntry">
            <param name="no.clean" value="true" />
            <param name="forceContextQualifier" value="v${forceContextQualifier}" />
        </foreach>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="build.all.plugins" if="eclipse.running" depends="init,cleanFolders"
        description="target for building all plugins in the 'plugins' folder">

        <mkdir dir="${basedir}/features/buildHelper" />
        <delete file="${basedir}/features/buildHelper/*" />

        <!-- the following lines compute the set of available plugins automatically -->
        <path id="pluginList">
            <dirset dir="${basedir}/plugins/" includes="*" excludes="*.source_*,${build.all.plugins.excludes}">
                <!-- the following is a weird construction for restricting to folders containing 
                     plugin content, indicated by the presence of a MANIFEST.MF -->
                <present targetdir="${basedir}/plugins/">
                    <mapper type="glob" from="*" to="*/META-INF/MANIFEST.MF"/>
                </present>
            </dirset>
        </path>
        <property name="pluginList" value="${toString:pluginList}:" />

        <!-- transform the colon separated plugin folder list into a feature.xml-compatible list
             of plugin declarations, will be dumped into the property ${featureContent} -->
        <propertyregex
             global="true"
             casesensitive="false"
             input="${pluginList}"
             property="featureContent"
             regexp="(/[^/:]+)*/([^/:]*):"
             replace="   &lt;plugin${line.separator}         id=&quot;\2&quot;${line.separator}         download-size=&quot;0&quot;${line.separator}         install-size=&quot;0&quot;${line.separator}         version=&quot;0.0.0&quot;${line.separator}         unpack=&quot;false&quot; /&gt;${line.separator}${line.separator}" />

        <!-- default definition if the above list is empty or the above statement fails-->
        <property name="featureContent" value=" " />

        <!-- composition of the final feature.xml and build.properties files -->
        <concat destfile="${basedir}/features/buildHelper/feature.xml">&lt;feature id=&quot;buildHelper&quot; version=&quot;1.0.0&quot; &gt;${line.separator}${featureContent}  &lt;/feature&gt;</concat>
        <concat destfile="${basedir}/features/buildHelper/build.properties">bin.includes = feature.xml${line.separator}generate.feature@buildHelper.source = buildHelper</concat>

        <!-- invocation of the build of the above synthesized feature.xml,
             this way the pde tooling cares about resolving the plugin dependencies and classpaths -->
        <antcall target="build.feature">
            <param name="feature" value="buildHelper" />
        </antcall>

        <!-- delete intermediary build artifacts as svn-deleted plugin folders won't be removed completely
             during the svn update at the beginning of the build otherwise -->
        <delete includeemptydirs="true">
            <dirset dir="${basedir}/plugins/" includes="*/@dot" />
            <!-- fileset dir="${basedir}/plugins/" includes="*/build.xml" / -->
        </delete>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="build.rca" if="eclipse.running"
        description="target for creating the RCA by means of the feature build's results">
        <property name="p2.gathering"  value="true" />
        <property name="p2.build.repo" value="file:/${basedir}/buildrepo" />
        <property name="configs"       value="${product.configs}" />
        <property name="runPackager"   value="true" />
        <property name="builder"       value="${eclipse.pdebuild.templates}" />
        <!-- property name="customTargets"   location="${eclipse.pdebuild.templates}/customTargets.xml"/ -->
        <!-- customTargets property can't be set as it is defined through an <available> task in called build file;
             defining leads to 'DEPRECATED' echo, property will be overwritten exceptionally!
             Therefor the builder property is defined pointing to the folder customTargets is expected to be located -->
        <!-- property name="genericTargets"  location="${scriptdir}/genericTargets.xml" / -->
    	    <!-- new default genericTargets works well -->
        <property name="allElementsFile" location="${scriptdir}/allElements.xml" />
                
        <tstamp />
        <property name="forceContextQualifier" value="v${DSTAMP}${TSTAMP}" />
        <!-- <tstamp> provides the above referenced properties, they're not declared explicitly -->

        <property name="p2.product.qualifier" value="${forceContextQualifier}" />
        <!-- p2.product.qualifier will determine the product qualifier,
             forceContextQualifier is responsible for plugin / feature qualifiers (here used in krep evalbench) -->

        <!-- extract product version from product file,
             replace 'qualifier' by ${p2.product.qualifier}
             'p2.product.version' will be referenced in allElements.xml while creating the zip archives
             in order to add version and timestamp to zips' file name -->
        <loadfile property="p2.product.version" srcfile="${product}">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="&lt;product" />
                </linecontainsregexp>
                <tokenfilter>
                    <stringtokenizer delims="&quot;" suppressdelims="true" />
                    <containsregex pattern="\d\.\d\.\d\." flags="i" />
                    <replaceregex pattern="\.\D+" replace=".${p2.product.qualifier}" flags="i"/>
                    <!-- \d = digit, \D = non-digit, . = any character, \. = '.'  -->
                </tokenfilter>
            </filterchain>
        </loadfile>
        
        <delete dir="${buildLabel}"/> <!-- here: the N.kieler folder -->
        
        <ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />

    	<!-- this call is not needed anymore since PDE build works now as expected --> 
        <!-- antcall target="postprocess.rca" / -->

    </target>
    
    <!-- =========================================================================================== -->

    <target name="test" description="target platform specific post processings">
        <!-- path id="ini" -->
        <property name="buildLabel2" location="N.kielerSlim" />
            <path id="zip">
                <first>
                    <fileset dir="${basedir}/${buildLabel}">
                        <include name="*.zip" />
                    </fileset>
                </first>
            </path>

        <echo message="${basename}" />

        <copy todir="${basedir}/test" overwrite="true" verbose="true">
            <!-- zipfileset refid="ini" / -->
        <zipfileset id="ini" src="${toString:zip}">
            <patternset includes="${basename}/*.app/Contents/MacOS/*.ini" />
            <patternset includes="*/*.ini" />
        </zipfileset>
        </copy>
        <echo message="${toString:zip}" />
        <echo message="${toString:ini}" />
    </target>
    
    <!-- =========================================================================================== -->

	<!-- this target is not needed anymore since PDE build works now as expected --> 
    <target name="postprocess.rca" description="target platform specific post processings">

        <!-- to zip the customized config.ini into our product
             (during update.launcher) its path is determined here -->
        <dirname property="config.dir" file="${product}" />
        
        <!-- setting the executable flag on launcher binaries
             CAUTION: foreach is a ant-contrib task declared above! -->
        <foreach param="zipfile" target="update.launcher" inheritall="true">
            <path id="products">
                <fileset dir="${buildLabel}" includes="*.zip" excludes="*win32*" />
            </path>
        </foreach>
        
        <!-- modify the kieler.ini and add a corrected config.ini
             CAUTION: foreach is a ant-contrib task declared above! -->
        <foreach param="zipfile" target="update.config" inheritall="true">
            <path id="products">
                <fileset dir="${buildLabel}" includes="*.zip" />
            </path>
        </foreach>

    </target>
    
    <!-- =========================================================================================== -->

	<!-- this target is not needed anymore since PDE build works now as expected --> 
    <target name="update.launcher"
        description="private target for updating the permission flags of the launcher and other binaries">
        <!-- will put the binaries in a unique temporary folder, touch and re-zip with 755
             ${binaries} my contain a comma separated list of further executables -->
        
        <basename file="${zipfile}" property="platform" suffix="zip" />
        <unzip dest="${basedir}/${buildLabel}/${platform}" src="${zipfile}">
            <patternset includes="${basename}/${basename}.app/Contents/MacOS/${basename}" />
            <patternset includes="${basename}/${basename}" />
            <patternset includes="${executables}" />
        </unzip>

        <touch>
            <fileset dir="${basedir}/${buildLabel}/${platform}" />
        </touch>
        <zip destfile="${zipfile}" update="true">
            <zipfileset dir="${basedir}/${buildLabel}/${platform}" filemode="755" />
        </zip>
        <delete dir="${basedir}/${buildLabel}/${platform}" />

    </target>
    
    <!-- =========================================================================================== -->

	<!-- this target is not needed anymore since PDE build works now as expected --> 
    <target name="update.config"
        description="private target for replacing the config.ini (default workspace), modifying the ${basename}.ini (more PermGen memory) and special macosx fixes">

        <basename file="${zipfile}" property="platform" suffix="zip" />
        <unzip dest="${basedir}/${buildLabel}/${platform}" src="${zipfile}">
            <patternset includes="${basename}/${basename}.app/Contents/MacOS/${basename}.ini" />
            <patternset includes="${basename}/${basename}.ini" />
            <patternset includes="${basename}/configuration/config.ini" />
        </unzip>
        
        <!-- copy file="${config.dir}/config.ini" tofile="${basedir}/${buildLabel}/${platform}/${basename}/configuration/config.ini" overwrite="true" / -->
        <concat destfile="${basedir}/${buildLabel}/${platform}/${basename}/configuration/config.ini"
                append="true">osgi.instance.area.default=@user.home/kieler-workspace</concat>

        <if>
            <contains string="${zipfile}" substring="macosx" casesensitive="false" />
            <then>
                <copy file="${config.dir}/${basename}.ini.macosx"
                      tofile="${basedir}/${buildLabel}/${platform}/${basename}/${basename}.app/Contents/MacOS/${basename}.ini" overwrite="true" />

                <condition property="value" value=".x86_64" else="">
                    <contains string="${zipfile}" substring="x86_64" casesensitive="false" />
                </condition>
                <replace file="${basedir}/${buildLabel}/${platform}/${basename}/${basename}.app/Contents/MacOS/${basename}.ini"
                         token="macosx"
                         value="macosx${value}" />

                <touch>
                    <fileset dir="${basedir}/${buildLabel}/${platform}" />
                </touch>
            </then>
            <!-- else>
                <concat destfile="${basedir}/${buildLabel}/${platform}/${basename}/${basename}.ini"
                        append="true">-XX:MaxPermSize=256m</concat>
            </else -->
        </if>

        <zip destfile="${zipfile}" update="true">
            <zipfileset dir="${basedir}/${buildLabel}/${platform}" />
        </zip>
        <delete dir="${basedir}/${buildLabel}/${platform}" />
    </target>
    
    <!-- =========================================================================================== -->

    <target name="doc" description="target for overall javadoc generation">
        <property name="doc.basedir"             value="${hudson.home}/jobs" />
        <property name="doc.includes"            value="*/workspace/plugins/**/*.java" />
        <property name="doc.includes.buildfiles" value="*/workspace/plugins/*/build.xml" />

        <echo message="${doc.basedir} / ${doc.includes.buildfiles}" />

        <!-- first, we need to gather the classpath path entries from plugin's generated build files -->
        <loadfile property="feature.classpath">
            <concat>
                <fileset dir="${doc.basedir}">
                    <include name="${doc.includes.buildfiles}" />
                </fileset>
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="&lt;pathelement path=&quot;../" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="/@dot&quot;" />
                    </linecontainsregexp>
                    <linecontainsregexp negate="true">
                        <regexp pattern="/bin/&quot;" />
                    </linecontainsregexp>
                    <!-- separate enclosing tags to realize NOR function
                         (multiple repexp conditions will be ANDed) -->
                    <tokenfilter>
                        <replacestring from="path=&quot;../../../../../../../" to="path=&quot;/home/" />
                        <replacestring from="path=&quot;../../../../Feature" to="path=&quot;${hudson.home}/jobs/Feature" />
                    </tokenfilter>
                </filterchain>
            </concat>
        </loadfile>
        
        <!-- second, a build file for javadoc generation will be constructed -->
        <concat destfile="${basedir}/build.javadoc.xml" force="true">
            <header filtering="no" trimleading="yes">
                &lt;project name="build KIELER javadoc" basedir="." default="doc"&gt;
            </header>
            <fileset file="${scriptdir}/javadoc.template.xml" />
            <filterchain>
                <expandproperties />
            </filterchain>
            <footer filtering="no" trimleading="yes">
                &lt;/project&gt;
            </footer>
        </concat>
        
        <!-- finally, invoke the generated build file -->
        <for param="doclet" list="${doc.doclets}">
            <sequential>
                <echo message="Using doclet @{doclet}" />
                <ant antfile="${basedir}/build.javadoc.xml" dir="${basedir}">
                    <property name="doc.doclet" value="@{doclet}" />
                </ant>
            </sequential>
        </for>
    </target>
    
    <!-- =========================================================================================== -->

    <target name="zip.doc" description="target for zipping overall javadoc">
        <!-- <tstamp> provides ${DSTAMP} and ${TSTAMP}, they're not declared explicitly -->
        <tstamp />        
        <zip destfile="${basedir}/kieler-doc_v${DSTAMP}${TSTAMP}.zip" basedir="${doc.destination}/.." includes="${doc.destination}/**/*.*" />
    </target>

</project>

