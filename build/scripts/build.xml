<project name="build KIELER elements" default="call.antRunner">
	
	<property environment="system"/>
	<property name="scriptdir" location="."/>
	<property file="${scriptdir}/build.properties" />

	<property name="eclipseLocation"       location="/tmp/eclipse_64/eclipse" />
	<property name="eclipseConfig"         location="${scriptdir}/.eclipse" />
	<property name="eclipseWorkspace"      location="${scriptdir}/.eclipseWorkspace" />
	<property name="p2.director.workspace" location="${scriptdir}/.p2Workspace" />
	
	<!-- default definitions: should be overwritten while calling this script -->	
	<property name="target"  value="noTargetInfo"/>
	<property name="feature" value=" "/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="/home/kieler/ant-contrib/lib/ant-contrib.jar" />

	<target name="call.antRunner">
		<!-- delete dir="${eclipseConfig}" />
		<delete dir="${eclipseWorkspace}" />
		<delete dir="${p2.director.workspace}" / -->

		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-configuration ${eclipseConfig}" />
			<arg line="-data ${eclipseWorkspace}" />
			<arg line="-application org.eclipse.ant.core.antRunner" />
			<arg line="-consoleLog" />
			<arg line="-buildfile ${scriptdir}/build.xml ${target}" />
			<arg line="-Dscriptdir=${scriptdir}" />
				<!-- the folder containing build.xml, build.properties -->
			<arg value="-Dbasedir=${system.WORKSPACE}" />
				<!-- the workspace folder of the current job
						needed as Hudson is starting the build script
						from the containing folder (i.e. ${scriptdir})
						- not from workspace root folder -->
			<arg value="-DbuildDirectory=${system.WORKSPACE}" />
				<!-- the build root folder
						fed into the eclipse.generateScript task
						within genericTarget.xml, one of the PDE build scripts
						here equal to basedir -->
			<arg value="-DbuildProperties=${scriptdir}/build.properties" />
				<!-- the property configuration file
						examined by build.xml, one of the PDE build scripts -->
			<arg value="-Dfeature=${feature}" />
				<!-- the feature whose plugins should be build -->
			<arg value="-DpluginPath=${pluginPath}" />
				<!-- a list of source folders seperated by ':'
						each folder should contain the subfolders 'features' and 'plugins'
						can be relative (to ${basedir})
						CAUTION: features must not be JARed
								 plugins should be JARed (so far I discovered) -->
			<classpath>
				<pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
	</target>

	<target name="build.feature" if="eclipse.running">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
		<property name="configs"       value="${feature.configs}" />
		<!-- property name="customTargets"   location="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/ -->
		<property name="genericTargets"  location="${eclipse.pdebuild.scripts}/genericTargets.xml"/>
		<!-- property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/ -->

		<mkdir dir="${basedir}/update-site/features" />
		<mkdir dir="${basedir}/update-site/plugins" />
		
		<delete includeemptydirs="true">
		    <fileset dir="${basedir}/buildTempFolder/" includes="**/*"/>
		    <fileset dir="${basedir}/update-site/features/" includes="**/*"/>
			<fileset dir="${basedir}/update-site/plugins/"  includes="**/*"/>
		</delete>
		
		<!-- echo message="basedir: ${basedir}" / -->
		<!-- ant antfile="${eclipse.pdebuild.scripts}/build.xml" target="generate"/ -->
		<ant antfile="${genericTargets}" target="generateScript">
			<property name="type" value="feature"/>
			<property name="id" value="${feature}"/>
		</ant>
		
		<ant antfile="build.xml" dir="${basedir}/features/${feature}">
			<property name="feature.destination" value="${basedir}/update-site/features"/>
			<property name="plugin.destination" value="${basedir}/update-site/plugins"/>
			<property name="buildTempFolder" value="${basedir}/buildTempFolder"/>
			<target name="clean" />
			<target name="build.update.jar" />
			<target name="zip.logs" />
		</ant>

		<ant antfile="build.xml" dir="${basedir}/features/${feature}" target="gather.bin.parts">
			<property name="feature.base" value="${basedir}/update-site/"/>
			<property name="updateJar.omitRootfiles" value="true"/>
			<property name="buildTempFolder" value="${basedir}/buildTempFolder"/>
		</ant>
		
		<echo message="STARTING p2 stuff" />
		<ant antfile="assemble.${feature}.p2.xml">
			<property name="buildTempFolder" value="${basedir}/buildTempFolder"/>
		</ant>
	</target>
	
	<target name="build.updatesiteEntry">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
		<property name="configs"       value="${feature.configs}" />
		<property name="genericTargets"  location="${eclipse.pdebuild.scripts}/genericTargets.xml"/>

		<echo message="STARTING p2 stuff" />
		<ant antfile="assemble.${feature}.p2.xml">
			<property name="buildTempFolder" value="${basedir}/buildTempFolder"/>
		</ant>
	</target>
	
	<target name="build.rca" if="eclipse.running">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${basedir}/buildrepo" />
		<property name="configs"       value="${product.configs}" />
		<property name="product"       value="${basedir}/plugins/de.cau.cs.kieler.core.ui/product/kieler.product" />
		<property name="runPackager"   value="true" />
		<!-- property name="customTargets"   location="${scriptdir}/customTargets.xml"/ -->
		<property name="genericTargets"  location="${scriptdir}/genericTargets.xml"/>
		<property name="allElementsFile" location="${scriptdir}/allElements.xml"/>

		<delete dir="${buildLabel}"/>
		<!-- copy file="${basedir}/../../KIELER_core/workspace/plugins/de.cau.cs.kieler.core.ui/kieler.product"
			  tofile="${basedir}/kieler.product" overwrite="true" />
		<copy file="${basedir}/../../KIELER_core/workspace/plugins/de.cau.cs.kieler.core.ui/p2.inf"
			  tofile="${basedir}/p2.inf" overwrite="true" / -->
		
		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />
		
		<!-- setting the executable flag on launcher binaries
			 CAUTION: foreach is a ant-contrib task declared above! -->
		<foreach param="zipfile" target="update.launcher">
			<path id="products">
				<fileset dir="${buildLabel}" includes="*.zip" excludes="*win32*" />
			</path>
		</foreach>
	</target>
	
	<target name="update.launcher">
		<basename file="${zipfile}" property="platform" suffix="zip" />
		<unzip dest="${basedir}/${buildLabel}/${platform}" src="${zipfile}">
			<patternset includes="kieler/kieler.app/Contents/MacOS/kieler" />
			<patternset includes="kieler/kieler" />
		</unzip>
		<touch>
			<fileset dir="${basedir}/${buildLabel}/${platform}" />
		</touch>
		<zip destfile="${zipfile}" update="true">
			<zipfileset dir="${basedir}/${buildLabel}/${platform}" filemode="755" />
		</zip>
		<delete dir="${basedir}/${buildLabel}/${platform}" />
	</target>

	<target name="clean">
		<available file="${elementPath}/build.xml" property="buildFilePresent"/>
	    <antcall target="cleanUp" />
	</target>
	
	<target name="cleanUp" if="buildFilePresent">
		<ant antfile="build.xml" dir="${elementPath}" target="clean" />
	</target>
	
	
	<target name="noTargetInfo">
		<echo message="No build target given. Please give a target explicitly -Dtarget=&lt;{feature,rca}&gt;" />
	</target>
</project>