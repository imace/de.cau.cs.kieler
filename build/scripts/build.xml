<project name="build KIELER elements" default="call.antRunner">
	
	<property environment="system"/>
	<property name="scriptdir" location="."/>
	<property file="${scriptdir}/build.properties" />

	<property name="eclipseLocation"       location="/home/kieler/eclipse64/" />
	<property name="eclipseConfig"         location="${scriptdir}/.eclipse" />
	<property name="eclipseWorkspace"      location="${scriptdir}/.eclipseWorkspace" />
	<property name="p2.director.workspace" location="${scriptdir}/.p2Workspace" />
	
	<!-- default definitions: should be overwritten while calling this script if necessary -->	
	<property name="target"	      value="noTargetInfo"/>
	<property name="feature"      value=" "/>
	<property name="product"      value=" "/>
	<property name="pluginPath"   value=" "/>
	<property name="doc.excludes" value=" "/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="/home/kieler/ant-contrib/lib/ant-contrib.jar" />

	<target name="call.antRunner">
		<!-- delete dir="${eclipseConfig}" />
		<delete dir="${eclipseWorkspace}" />
		<delete dir="${p2.director.workspace}" / -->

		<condition property="targetP" value="${target}" else="${system.TARGET}">
			<equals arg1="${system.TARGET}" arg2="$${system.TARGET}" />
			<!-- targetP is the actual target parameter;
				 $$ is the escape character for not resolving a properties link,
				 this is needed here to for examining the definition of the system property
				 as the condition 'isset' doesn't work with system (environment) properties -->
		</condition>

		<basename property="basename" file="${product}" suffix=".product" />

		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-configuration ${eclipseConfig}" />
			<arg line="-data ${eclipseWorkspace}" />
			<arg line="-application org.eclipse.ant.core.antRunner" />
			<arg line="-consoleLog" />
			<arg line="-buildfile ${scriptdir}/build.xml ${targetP}" />
			<arg value="-Dscriptdir=${scriptdir}" />
				<!-- the folder containing build.xml, build.properties -->
			<arg value="-Dbasedir=${system.WORKSPACE}" />
				<!-- the workspace folder of the current job
						needed as Hudson is starting the build script
						from the containing folder (i.e. ${scriptdir})
						- not from workspace root folder -->
			<arg value="-DbuildDirectory=${system.WORKSPACE}" />
				<!-- the build root folder
						fed into the eclipse.generateScript task
						within genericTarget.xml, one of the PDE build scripts
						here equal to basedir -->
			<arg value="-DbuildProperties=${scriptdir}/build.properties" />
				<!-- the property configuration file
						examined by build.xml, one of the PDE build scripts -->
			<arg value="-Dfeature=${feature}" />
				<!-- the feature whose plugins should be build -->
			<arg value="-Dproduct=${system.WORKSPACE}/${product}" />
				<!-- the product which should be build -->
			<arg value="-Dbasename=${basename}" />
				<!-- the name of RCA's zip file, ziped top folder & launcher determined of product's basename -->
			<arg value="-DpluginPath=${pluginPath}" />
				<!-- a list of source folders seperated by ':'
						each folder should contain the subfolders 'features' and 'plugins'
						can be relative (to ${basedir})
						CAUTION: features must not be JARed
								 plugins should be JARed (so far I discovered) -->
			<arg value="-Ddoc.excludes=${doc.excludes}" />
				<!-- comma separated path patterns excluded during javadoc generation -->
			<classpath>
				<pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
	</target>

	<target name="build.feature" if="eclipse.running" description="target for complete feature build and publishing">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
		<property name="configs"       value="${feature.configs}" />
		<!-- property name="customTargets"   location="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/ -->
		<property name="genericTargets"  location="${eclipse.pdebuild.scripts}/genericTargets.xml"/>
		<!-- property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/ -->

		<mkdir dir="${basedir}/buildTempFolder" />
		<mkdir dir="${basedir}/update-site/features" />
		<mkdir dir="${basedir}/update-site/plugins" />
		
		<delete includeemptydirs="true">
		    <fileset dir="${basedir}/buildTempFolder/" includes="**/*"/>
		    <fileset dir="${basedir}/update-site/features/" includes="**/*"/>
			<fileset dir="${basedir}/update-site/plugins/"  includes="**/*"/>
		</delete>
		
		<!-- generate build.xml scripts for feature and plugins -->
		<ant antfile="${genericTargets}" target="generateScript">
			<property name="type" value="feature"/>
			<property name="id" value="${feature}"/>
		</ant>
		
		<!-- extend plugins' build.xml files with a 'doc' target 
			 CAUTION: foreach is a ant-contrib task declared above! -->
		<!-- foreach param="buildfile" target="extend.buildfile">
			<path id="buildfiles">
				<fileset dir="plugins" includes="**/build.xml" />
			</path>
		</foreach -->
		
		<!-- read javac's classpath information from build.xml scripts -->		
		<loadfile property="doc.classpath">
			<concat>
				<fileset dir="plugins" includes="**/build.xml" />
			</concat>
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="&lt;pathelement" />
				</linecontainsregexp>
				<linecontainsregexp negate="true">
					<regexp pattern="/@dot&quot;" />
				</linecontainsregexp>
				<linecontainsregexp negate="true">
					<regexp pattern="/bin/&quot;" />
				</linecontainsregexp>
				<!-- separate enclosing tags to realize NOR function
					 (multiple repexp conditions will be ANDed) -->
			</filterchain>
		</loadfile> 

		<!-- load javadoc target template, insert classpath entries (via property doc.classpath) -->		
		<loadfile property="replacement" srcfile="${scriptdir}/javadoc.template.xml">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		
		<!-- insert javadoc target in feature's build.xml -->		
		<replace file="${basedir}/features/${feature}/build.xml" token="&lt;/project&gt;" value="${replacement}&lt;/project&gt;" />

		<!-- run feature's build.xml: clean, compile and jarUp, provide ziped logs, generate javadoc -->		
		<ant antfile="build.xml" dir="${basedir}/features/${feature}">
			<property name="feature.destination" value="${basedir}/update-site/features" />
			<property name="plugin.destination" value="${basedir}/update-site/plugins" />
			<property name="buildTempFolder" value="${basedir}/buildTempFolder" />
			<property name="doc.packages" value="${scriptdir}/../package-lists" />
			<target name="clean" />
			<target name="build.update.jar" />
			<target name="zip.logs" />
			<target name="doc" />
		</ant>

		<!-- run feature's build.xml: copy customized feature.xml into update-site folder
			 needed by succeeding feature builds while resolving dependencies -->		
		<ant antfile="build.xml" dir="${basedir}/features/${feature}" target="gather.bin.parts">
			<property name="feature.base" value="${basedir}/update-site/" />
			<property name="updateJar.omitRootfiles" value="true" />
			<property name="buildTempFolder" value="${basedir}/buildTempFolder" />
		</ant>
		
		<!-- run feature's assemble.p2.xml: generate update site entry -->		
		<echo message="STARTING p2 stuff" />
		<ant antfile="assemble.${feature}.p2.xml">
			<property name="buildTempFolder" value="${basedir}/buildTempFolder" />
		</ant>
	</target>
	
	<!-- target name="extend.buildfile">
	    <loadfile property="doc.classpath" srcfile="${buildfile}">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="&lt;pathelement"/>
				</linecontainsregexp>
			</filterchain>
		</loadfile>   
        <loadfile property="replacement" srcfile="${scriptdir}/javadoc.template.xml">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</loadfile>
		
		<replace file="${buildfile}" token="&lt;/project&gt;" value="${replacement}&lt;/project&gt;" />
	</target -->

	<target name="build.updatesiteEntry" if="eclipse.running" description="target for creating an updatesite entry of last build results">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${updatesite.autobuild}" />
		<property name="configs"       value="${feature.configs}" />
		<property name="genericTargets"  location="${eclipse.pdebuild.scripts}/genericTargets.xml"/>

		<echo message="STARTING p2 stuff" />
		<ant antfile="assemble.${feature}.p2.xml">
			<property name="buildTempFolder" value="${basedir}/buildTempFolder"/>
		</ant>
	</target>
	
	<target name="build.rca" if="eclipse.running" description="target for creating the RCA by means of the feature build's results">
		<property name="p2.gathering"  value="true" />
		<property name="p2.build.repo" value="file:/${basedir}/buildrepo" />
		<property name="configs"       value="${product.configs}" />
		<property name="runPackager"   value="true" />
		<!-- property name="customTargets"   location="${scriptdir}/customTargets.xml"/ -->
		<property name="genericTargets"  location="${scriptdir}/genericTargets.xml"/>
		<property name="allElementsFile" location="${scriptdir}/allElements.xml"/>
				
		<delete dir="${buildLabel}"/>
		
		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />
		
		<!-- setting the executable flag on launcher binaries
			 CAUTION: foreach is a ant-contrib task declared above! -->
		<foreach param="zipfile" target="update.launcher">
			<path id="products">
				<fileset dir="${buildLabel}" includes="*.zip" excludes="*win32*" />
			</path>
		</foreach>
	</target>
	
	<target name="update.launcher" description="private target for updating the permission flags of the launcher binaries">
		<basename file="${zipfile}" property="platform" suffix="zip" />
		<unzip dest="${basedir}/${buildLabel}/${platform}" src="${zipfile}">
			<patternset includes="${basename}/${basename}.app/Contents/MacOS/${basename}" />
			<patternset includes="${basename}/${basename}" />
		</unzip>
		<touch>
			<fileset dir="${basedir}/${buildLabel}/${platform}" />
		</touch>
		<zip destfile="${zipfile}" update="true">
			<zipfileset dir="${basedir}/${buildLabel}/${platform}" filemode="755" />
		</zip>
		<delete dir="${basedir}/${buildLabel}/${platform}" />
	</target>
	
	<target name="doc" description="target for complete javadoc generation">
		<!-- first, we need to gather the classpath path entries from plugin's generated build files -->
		<loadfile property="doc.classpath">
			<concat>
				<fileset dir="${system.WORKSPACE}/../../">
					<include name="*/workspace/plugins/*/build.xml" />
					<exclude name="Import*/**" />
				</fileset>
			</concat>
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="&lt;pathelement" />
				</linecontainsregexp>
				<linecontainsregexp negate="true">
					<regexp pattern="/@dot&quot;" />
				</linecontainsregexp>
				<linecontainsregexp negate="true">
					<regexp pattern="/bin/&quot;" />
				</linecontainsregexp>
				<!-- separate enclosing tags to realize NOR function
					 (multiple repexp conditions will be ANDed) -->
				<tokenfilter>
					<replacestring from="path=&quot;../../" to="path=&quot;" />
				</tokenfilter>
			</filterchain>
		</loadfile>
		
		<!-- second, a build file for javadoc generation will be constructed -->
		<concat destfile="${system.WORKSPACE}/build.javadoc.xml" force="true">
			<header filtering="no" trimleading="yes">
				&lt;project name="build KIELER javadoc" basedir="." default="doc"&gt;
			</header>
			<fileset file="${scriptdir}/javadoc.template.xml"/>
			<filterchain>
				<tokenfilter>
					<replacestring from="dir=&quot;${basedir}/plugins&quot;" to="dir=&quot;$${basedir}/../../&quot;" />
					<replacestring from="includes=&quot;**/*.java&quot;"     to="includes=&quot;*/workspace/plugins/**/*.java&quot;"/>
				</tokenfilter>
				<expandproperties />
			</filterchain>
			<footer filtering="no" trimleading="yes">
				&lt;/project&gt;
			</footer>
		</concat>
		
		<!-- finally, invoke the generated build file -->
		<ant antfile="${system.WORKSPACE}/build.javadoc.xml" dir="${system.WORKSPACE}">
			<property name="basedir" value="${system.WORKSPACE}" />
		</ant>
	</target>
	
	<target name="clean">
		<available file="${elementPath}/build.xml" property="buildFilePresent"/>
	    <antcall target="cleanUp" />
	</target>
	
	<target name="cleanUp" if="buildFilePresent">
		<ant antfile="build.xml" dir="${elementPath}" target="clean" />
	</target>
	
	
	<target name="noTargetInfo">
		<fail message="No build target given. Please give a target explicitly -Dtarget=&lt;{feature,rca}&gt;" />
	</target>
</project>