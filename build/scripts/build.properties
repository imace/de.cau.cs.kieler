###############################################################################
# Parameters describing how and where to execute the build.
#####################################################
#
#  for more information see http://wiki.eclipse.org/PDE/User_Guide
#


############# BASE CONTROL #############
# baselocation must the an working Eclipse installation with the delta pack

# base=<path/to/parent/of/eclipse>

#base=/home/java/
#baseLocation=/home/java/eclipse_3.5
baseos=linux
basews=gtk
basearch=x86_64

#this property suppresses updating the base eclipse setup before running the build
#examined in customTargets.xml
skipBase=true

#eclipseLocation=${baseLocation}
#pdeBuildPluginVersion=3.5.0.v20090527-1800
#equinoxLauncherPluginVersion=1.0.200.v20090520
#equinoxExecutableFeatureVersion=3.3.200.v20090521-1800-7M-Fm-FI3UouOe61h3BYGC

#this property indicates whether you want the set of plug-ins and features to be considered
#during the build to be limited to the ones reachable from the features / plugins being built
filteredDependencyCheck=false

#pluginPath is a list of locations in which to find plugins and features.  This list is separated by the platform file separator (; or :)
#a location is one of:  
#- the location of the jar or folder that is the plugin or feature : /path/to/foo.jar or /path/to/foo
#- a directory that contains a /plugins or /features subdirectory
#- the location of a feature.xml, or for 2.1 style plugins, the plugin.xml or fragment.xml
#
#    CHSCH: will be provided in Hudson while invoking the script or from a feature's build.properties
#pluginPath=


############## BUILD NAMING CONTROL ################
# The directory into which the build elements are fetched and where
# the build takes place.
buildDirectory=${build.basedir}

#CHSCH: not used as generateScript is invoked immediately form genericTargets
#The type of the top level element we are building
#topLevelElementType = feature
#The id of the top level element we are building
#topLevelElementId = ${feature}

#launcherName=${basename}

# Type of build.  Used in naming the build output.  Typically this value is
# one of I, N, M, S, ...
buildType=N

# ID of the build.  Used in naming the build output.
buildId=${basename}

# Timestamp for the build.  Used in naming the build output
timestamp=${system.BUILD_ID}

# Label for the build.  Used in naming the build output
buildLabel=${buildType}.${buildId}
#buildLabel=${buildId}.v${timestamp}

#The value to be used for the qualifier of a plugin or feature when you want to override the value computed by pde.
#The value will only be applied to plugin or features indicating build.properties, qualifier = context 
#forceContextQualifier=<the value for the qualifier>

#Enable / disable the generation of a suffix for the features that use .qualifier. 
#The generated suffix is computed according to the content of the feature   
#generateFeatureVersionSuffix=true
#generatedVersionLengt=28
#significantVersionDigits
        
############# PRODUCT/PACKAGING CONTROL #############
#product=
#runPackager=true

#Set the name of the archive that will result from the product build.
archiveNamePrefix=${basename}
# CHSCH: selfdefined
#staticArchiveNamePrefix=${basename}

# The prefix that will be used in the generated archive.
archivePrefix=${basename}

# The location underwhich all of the build output will be collected.
collectingFolder=${archivePrefix}

updatesite.autobuild=/home/kieler/public_html/updatesite/nightly/
product.autobuild=/home/kieler/public_html/files/nightly/repo

#Generating p2 stuff
# for information see http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_p2_builds.htm
#
# CHSCH: following property set in build.xml as different for features/product
#p2.build.repo=file:${updatesite.autobuild}
p2.compress=true
p2.flavor=tooling

# the following 4 properties have effect on product build only!
# p2.metadata.repo=file:${product.autobuild}
# p2.artifact.repo=file:${product.autobuild}
# p2.metadata.repo.name="KIELER Meta Data Repo"
# p2.artifact.repo.name="KIELER Artifact Data Repo"

#CHSCH: not defined here but in build.xml
#p2.category.site=file:${basedir}/../../ImportUpdatesiteCategoryDescriptors/workspace/de.cau.cs.kieler.updatesite/site.xml
#p2.category.definition=file:${basedir}/../../ImportUpdatesiteCategoryDescriptors/workspace/de.cau.cs.kieler.updatesite/category.xml

#p2.product.qualifier= ... we don't wanna have a static one!
#p2.publish.artifacts=true (old: effectless since 3.5)

# The list of {os, ws, arch} configurations to build.  This 
# value is a '&' separated list of ',' separate triples.  For example, 
#     configs=win32,win32,x86 & linux,motif,x86
# By default the value is *,*,*
feature.configs = *, *, *
#product.configs=win32, win32, x86
#product.configs=linux, gtk, x86
#product.configs=macosx, carbon, x86
#product.configs=solaris, gtk, sparc
product.configs=win32, win32, x86 & \
        win32, win32, x86_64 & \
        linux, gtk, x86 & \
        linux, gtk, x86_64 & \
        macosx, cocoa, x86 & \
        macosx, cocoa, x86_64 & \
        solaris, gtk, sparc
#   *, *, *
#	linux, gtk, ppc &\
#	linux, gtk, x86_64 & \
#	linux, motif, x86 & \
#	solaris, motif, sparc & \
#	solaris, gtk, sparc & \
#	aix, motif, ppc & \
#	hpux, motif, PA_RISC & \


# By default PDE creates one archive (result) per entry listed in the configs property.
# Setting this value to try will cause PDE to only create one output containing all 
# artifacts for all the platforms listed in the configs property.
#groupConfigurations=true

#The format of the archive. By default a zip is created using antZip.
#The list can only contain the configuration for which the desired format is different than zip.
#archivesFormat=win32, win32, x86 - antZip& \
#	linux, gtk, ppc - antZip &\
#    linux, gtk, x86 - antZip& \
#	linux, gtk, x86_64 - antZip& \
# linux, motif, x86 - antZip& \
#	solaris, motif, sparc - antZip& \
#	solaris, gtk, sparc - antZip& \
#	aix, motif, ppc - antZip& \
#	hpux, motif, PA_RISC - antZip& \
#	macosx, carbon, ppc - antZip
	
#Set to true if you want the output to be ready for an update jar (no site.xml generated)
#    CHSCH:  so far I figured out this property is not examined properly in script generator task
#            the dedicated get method returns just 'false', too!
#outputUpdateJars = true

#Set to true for Jnlp generation
#codebase should be a URL that will be used as the root of all relative URLs in the output.
#generateJnlp=false
#jnlp.codebase=<codebase url>
#jnlp.j2se=<j2se version>
#jnlp.locale=<a locale>
#jnlp.generateOfflineAllowed=true or false generate <offlineAllowed/> attribute in the generated features
#jnlp.configs=${configs}			#uncomment to filter the content of the generated jnlp files based on the configuration being built

#Set to true if you want to sign jars
#signJars=false
#sign.alias=<alias>
#sign.keystore=<keystore location>
#sign.storepass=<keystore password>

#Arguments to send to the zip executable
# zipargs=

#Arguments to send to the tar executable
# tarargs=

#Control the creation of a file containing the version included in each configuration - on by default 
generateVersionsLists=false

############# MAP FILE CONTROL ################
# This section defines CVS tags to use when fetching the map files from the repository.
# If you want to fetch the map file from repository / location, change the getMapFiles target in the customTargets.xml

skipMaps=true
#mapsRepo=:pserver:anonymous@example.com/path/to/repo
#mapsRoot=path/to/maps
#mapsCheckoutTag=HEAD

#tagMaps=true
#mapsTagTag=v${buildId}


############ REPOSITORY CONTROL ###############
# This section defines properties parameterizing the repositories where plugins, fragments
# bundles and features are being obtained from. 

# The tags to use when fetching elements to build.
# By default thebuilder will use whatever is in the maps.  
# This value takes the form of a comma separated list of repository identifier (like used in the map files) and the 
# overriding value
# For example fetchTag=CVS=HEAD, SVN=v20050101
# fetchTag=HEAD
skipFetch=true


############# JAVA COMPILER OPTIONS ##############
# The location of the Java jars to compile against.  Typically the rt.jar for your JDK/JRE
#bootclasspath=${java.home}/lib/rt.jar

# specific JRE locations to compile against. These values are used to compile bundles specifying a 
# Bundle-RequiredExecutionEnvironment. Uncomment and set values for environments that you support
#CDC-1.0/Foundation-1.0= /path/to/rt.jar
#CDC-1.1/Foundation-1.1=
#OSGi/Minimum-1.0=
#OSGi/Minimum-1.1=
#JRE-1.1=
#J2SE-1.2=
#J2SE-1.3=
#J2SE-1.4=
#J2SE-1.5=
#JavaSE-1.6=
#PersonalJava-1.1=
#PersonalJava-1.2=
#CDC-1.0/PersonalBasis-1.0=
#CDC-1.0/PersonalJava-1.0=
#CDC-1.1/PersonalBasis-1.1=
#CDC-1.1/PersonalJava-1.1=

# Specify the output format of the compiler log when eclipse jdt is used
logExtension=.log

# Whether or not to include debug info in the output jars
javacDebugInfo=false 

# Whether or not to fail the build if there are compiler errors
javacFailOnError=true

# Enable or disable verbose mode of the compiler
javacVerbose=true

# Extra arguments for the compiler. These are specific to the java compiler being used.
#compilerArg=

# Default value for the version of the source code. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacSource in build.properties
javacSource=1.5

# Default value for the version of the byte code targeted. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacTarget in build.properties.
javacTarget=1.5
